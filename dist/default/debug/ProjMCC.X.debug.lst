

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 26 03:04:25 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   103                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   104  0000                     
   105                           ; Version 1.44
   106                           ; Generated 14/09/2017 GMT
   107                           ; 
   108                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   109                           ; All rights reserved.
   110                           ; 
   111                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   112                           ; 
   113                           ; Redistribution and use in source and binary forms, with or without modification, are
   114                           ; permitted provided that the following conditions are met:
   115                           ; 
   116                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   117                           ;        conditions and the following disclaimer.
   118                           ; 
   119                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   120                           ;        of conditions and the following disclaimer in the documentation and/or other
   121                           ;        materials provided with the distribution.
   122                           ; 
   123                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   124                           ;        software without specific prior written permission.
   125                           ; 
   126                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   127                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   128                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   129                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   130                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   131                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   132                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   133                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   134                           ; 
   135                           ; 
   136                           ; Code-generator required, PIC18F45K22 Definitions
   137                           ; 
   138                           ; SFR Addresses
   139  0000                     
   140                           	psect	idataCOMRAM
   141  002308                     __pidataCOMRAM:
   142                           	opt stack 0
   143                           
   144                           ;initializer for _tempAtual
   145  002308  19                 	db	25
   146                           
   147                           ;initializer for _tempAlarme
   148  002309  19                 	db	25
   149                           
   150                           	psect	idataBANK0
   151  00230A                     __pidataBANK0:
   152                           	opt stack 0
   153                           
   154                           ;initializer for _menu_tmp
   155  00230A  01                 	db	1
   156                           
   157                           ;initializer for _update
   158  00230B  01                 	db	1
   159                           
   160                           	psect	mediumconst
   161  007EB8                     __pmediumconst:
   162                           	opt stack 0
   163  007EB8  00                 	db	0
   164  007EB9                     _dpowers:
   165                           	opt stack 0
   166  007EB9  0001               	dw	1
   167  007EBB  000A               	dw	10
   168  007EBD  0064               	dw	100
   169  007EBF  03E8               	dw	1000
   170  007EC1  2710               	dw	10000
   171  007EC3                     __end_of_dpowers:
   172                           	opt stack 0
   173  007EC3                     STR_1:
   174  007EC3  0C                 	db	12
   175  007EC4  54                 	db	84	;'T'
   176  007EC5  4D                 	db	77	;'M'
   177  007EC6  3D                 	db	61	;'='
   178  007EC7  25                 	db	37
   179  007EC8  32                 	db	50	;'2'
   180  007EC9  64                 	db	100	;'d'
   181  007ECA  5F                 	db	95	;'_'
   182  007ECB  54                 	db	84	;'T'
   183  007ECC  41                 	db	65	;'A'
   184  007ECD  3D                 	db	61	;'='
   185  007ECE  25                 	db	37
   186  007ECF  32                 	db	50	;'2'
   187  007ED0  64                 	db	100	;'d'
   188  007ED1  5F                 	db	95	;'_'
   189  007ED2  41                 	db	65	;'A'
   190  007ED3  41                 	db	65	;'A'
   191  007ED4  3D                 	db	61	;'='
   192  007ED5  25                 	db	37
   193  007ED6  31                 	db	49	;'1'
   194  007ED7  64                 	db	100	;'d'
   195  007ED8  0D                 	db	13
   196  007ED9  00                 	db	0
   197  007EDA                     STR_5:
   198  007EDA  4D                 	db	77	;'M'
   199  007EDB  6F                 	db	111	;'o'
   200  007EDC  6E                 	db	110	;'n'
   201  007EDD  69                 	db	105	;'i'
   202  007EDE  74                 	db	116	;'t'
   203  007EDF  6F                 	db	111	;'o'
   204  007EE0  72                 	db	114	;'r'
   205  007EE1  69                 	db	105	;'i'
   206  007EE2  7A                 	db	122	;'z'
   207  007EE3  61                 	db	97	;'a'
   208  007EE4  63                 	db	99	;'c'
   209  007EE5  61                 	db	97	;'a'
   210  007EE6  6F                 	db	111	;'o'
   211  007EE7  20                 	db	32
   212  007EE8  20                 	db	32
   213  007EE9  20                 	db	32
   214  007EEA  20                 	db	32
   215  007EEB  20                 	db	32
   216  007EEC  20                 	db	32
   217  007EED  20                 	db	32
   218  007EEE  20                 	db	32
   219  007EEF  00                 	db	0
   220  007EF0                     STR_8:
   221  007EF0  46                 	db	70	;'F'
   222  007EF1  65                 	db	101	;'e'
   223  007EF2  65                 	db	101	;'e'
   224  007EF3  64                 	db	100	;'d'
   225  007EF4  62                 	db	98	;'b'
   226  007EF5  61                 	db	97	;'a'
   227  007EF6  63                 	db	99	;'c'
   228  007EF7  6B                 	db	107	;'k'
   229  007EF8  20                 	db	32
   230  007EF9  45                 	db	69	;'E'
   231  007EFA  55                 	db	85	;'U'
   232  007EFB  53                 	db	83	;'S'
   233  007EFC  41                 	db	65	;'A'
   234  007EFD  52                 	db	82	;'R'
   235  007EFE  54                 	db	84	;'T'
   236  007EFF  20                 	db	32
   237  007F00  20                 	db	32
   238  007F01  20                 	db	32
   239  007F02  20                 	db	32
   240  007F03  20                 	db	32
   241  007F04  20                 	db	32
   242  007F05  00                 	db	0
   243  007F06                     STR_6:
   244  007F06  54                 	db	84	;'T'
   245  007F07  65                 	db	101	;'e'
   246  007F08  6D                 	db	109	;'m'
   247  007F09  70                 	db	112	;'p'
   248  007F0A  2E                 	db	46
   249  007F0B  20                 	db	32
   250  007F0C  64                 	db	100	;'d'
   251  007F0D  65                 	db	101	;'e'
   252  007F0E  20                 	db	32
   253  007F0F  61                 	db	97	;'a'
   254  007F10  6C                 	db	108	;'l'
   255  007F11  61                 	db	97	;'a'
   256  007F12  72                 	db	114	;'r'
   257  007F13  6D                 	db	109	;'m'
   258  007F14  65                 	db	101	;'e'
   259  007F15  20                 	db	32
   260  007F16  20                 	db	32
   261  007F17  20                 	db	32
   262  007F18  20                 	db	32
   263  007F19  20                 	db	32
   264  007F1A  20                 	db	32
   265  007F1B  00                 	db	0
   266  007F1C                     STR_7:
   267  007F1C  54                 	db	84	;'T'
   268  007F1D  65                 	db	101	;'e'
   269  007F1E  73                 	db	115	;'s'
   270  007F1F  74                 	db	116	;'t'
   271  007F20  65                 	db	101	;'e'
   272  007F21  20                 	db	32
   273  007F22  64                 	db	100	;'d'
   274  007F23  6F                 	db	111	;'o'
   275  007F24  20                 	db	32
   276  007F25  74                 	db	116	;'t'
   277  007F26  65                 	db	101	;'e'
   278  007F27  63                 	db	99	;'c'
   279  007F28  6C                 	db	108	;'l'
   280  007F29  61                 	db	97	;'a'
   281  007F2A  64                 	db	100	;'d'
   282  007F2B  6F                 	db	111	;'o'
   283  007F2C  20                 	db	32
   284  007F2D  20                 	db	32
   285  007F2E  20                 	db	32
   286  007F2F  20                 	db	32
   287  007F30  20                 	db	32
   288  007F31  00                 	db	0
   289  007F32                     STR_10:
   290  007F32  54                 	db	84	;'T'
   291  007F33  65                 	db	101	;'e'
   292  007F34  6D                 	db	109	;'m'
   293  007F35  70                 	db	112	;'p'
   294  007F36  2E                 	db	46
   295  007F37  20                 	db	32
   296  007F38  41                 	db	65	;'A'
   297  007F39  74                 	db	116	;'t'
   298  007F3A  75                 	db	117	;'u'
   299  007F3B  61                 	db	97	;'a'
   300  007F3C  6C                 	db	108	;'l'
   301  007F3D  3A                 	db	58	;':'
   302  007F3E  20                 	db	32
   303  007F3F  20                 	db	32
   304  007F40  25                 	db	37
   305  007F41  32                 	db	50	;'2'
   306  007F42  64                 	db	100	;'d'
   307  007F43  20                 	db	32
   308  007F44  6F                 	db	111	;'o'
   309  007F45  43                 	db	67	;'C'
   310  007F46  20                 	db	32
   311  007F47  00                 	db	0
   312  007F48                     STR_11:
   313  007F48  54                 	db	84	;'T'
   314  007F49  65                 	db	101	;'e'
   315  007F4A  6D                 	db	109	;'m'
   316  007F4B  70                 	db	112	;'p'
   317  007F4C  2E                 	db	46
   318  007F4D  20                 	db	32
   319  007F4E  41                 	db	65	;'A'
   320  007F4F  6C                 	db	108	;'l'
   321  007F50  61                 	db	97	;'a'
   322  007F51  72                 	db	114	;'r'
   323  007F52  6D                 	db	109	;'m'
   324  007F53  65                 	db	101	;'e'
   325  007F54  3A                 	db	58	;':'
   326  007F55  20                 	db	32
   327  007F56  25                 	db	37
   328  007F57  32                 	db	50	;'2'
   329  007F58  64                 	db	100	;'d'
   330  007F59  20                 	db	32
   331  007F5A  6F                 	db	111	;'o'
   332  007F5B  43                 	db	67	;'C'
   333  007F5C  20                 	db	32
   334  007F5D  00                 	db	0
   335  007F5E                     STR_18:
   336  007F5E  4E                 	db	78	;'N'
   337  007F5F  75                 	db	117	;'u'
   338  007F60  6D                 	db	109	;'m'
   339  007F61  65                 	db	101	;'e'
   340  007F62  72                 	db	114	;'r'
   341  007F63  6F                 	db	111	;'o'
   342  007F64  3A                 	db	58	;':'
   343  007F65  20                 	db	32
   344  007F66  20                 	db	32
   345  007F67  20                 	db	32
   346  007F68  20                 	db	32
   347  007F69  20                 	db	32
   348  007F6A  20                 	db	32
   349  007F6B  20                 	db	32
   350  007F6C  20                 	db	32
   351  007F6D  20                 	db	32
   352  007F6E  20                 	db	32
   353  007F6F  20                 	db	32
   354  007F70  20                 	db	32
   355  007F71  20                 	db	32
   356  007F72  00                 	db	0
   357  007F73                     STR_21:
   358  007F73  54                 	db	84	;'T'
   359  007F74  65                 	db	101	;'e'
   360  007F75  6D                 	db	109	;'m'
   361  007F76  70                 	db	112	;'p'
   362  007F77  3A                 	db	58	;':'
   363  007F78  20                 	db	32
   364  007F79  20                 	db	32
   365  007F7A  20                 	db	32
   366  007F7B  20                 	db	32
   367  007F7C  6F                 	db	111	;'o'
   368  007F7D  43                 	db	67	;'C'
   369  007F7E  20                 	db	32
   370  007F7F  20                 	db	32
   371  007F80  20                 	db	32
   372  007F81  20                 	db	32
   373  007F82  20                 	db	32
   374  007F83  20                 	db	32
   375  007F84  20                 	db	32
   376  007F85  20                 	db	32
   377  007F86  20                 	db	32
   378  007F87  00                 	db	0
   379  007F88                     STR_17:
   380  007F88  54                 	db	84	;'T'
   381  007F89  65                 	db	101	;'e'
   382  007F8A  73                 	db	115	;'s'
   383  007F8B  74                 	db	116	;'t'
   384  007F8C  65                 	db	101	;'e'
   385  007F8D  20                 	db	32
   386  007F8E  54                 	db	84	;'T'
   387  007F8F  65                 	db	101	;'e'
   388  007F90  63                 	db	99	;'c'
   389  007F91  6C                 	db	108	;'l'
   390  007F92  61                 	db	97	;'a'
   391  007F93  64                 	db	100	;'d'
   392  007F94  6F                 	db	111	;'o'
   393  007F95  20                 	db	32
   394  007F96  20                 	db	32
   395  007F97  20                 	db	32
   396  007F98  20                 	db	32
   397  007F99  20                 	db	32
   398  007F9A  20                 	db	32
   399  007F9B  20                 	db	32
   400  007F9C  00                 	db	0
   401  007F9D                     STR_20:
   402  007F9D  49                 	db	73	;'I'
   403  007F9E  6E                 	db	110	;'n'
   404  007F9F  74                 	db	116	;'t'
   405  007FA0  72                 	db	114	;'r'
   406  007FA1  6F                 	db	111	;'o'
   407  007FA2  64                 	db	100	;'d'
   408  007FA3  75                 	db	117	;'u'
   409  007FA4  7A                 	db	122	;'z'
   410  007FA5  61                 	db	97	;'a'
   411  007FA6  20                 	db	32
   412  007FA7  6F                 	db	111	;'o'
   413  007FA8  20                 	db	32
   414  007FA9  61                 	db	97	;'a'
   415  007FAA  6C                 	db	108	;'l'
   416  007FAB  61                 	db	97	;'a'
   417  007FAC  72                 	db	114	;'r'
   418  007FAD  6D                 	db	109	;'m'
   419  007FAE  65                 	db	101	;'e'
   420  007FAF  20                 	db	32
   421  007FB0  20                 	db	32
   422  007FB1  00                 	db	0
   423  007FB2                     STR_3:
   424  007FB2  4D                 	db	77	;'M'
   425  007FB3  65                 	db	101	;'e'
   426  007FB4  6E                 	db	110	;'n'
   427  007FB5  75                 	db	117	;'u'
   428  007FB6  20                 	db	32
   429  007FB7  20                 	db	32
   430  007FB8  20                 	db	32
   431  007FB9  20                 	db	32
   432  007FBA  20                 	db	32
   433  007FBB  20                 	db	32
   434  007FBC  20                 	db	32
   435  007FBD  20                 	db	32
   436  007FBE  20                 	db	32
   437  007FBF  4F                 	db	79	;'O'
   438  007FC0  70                 	db	112	;'p'
   439  007FC1  63                 	db	99	;'c'
   440  007FC2  61                 	db	97	;'a'
   441  007FC3  6F                 	db	111	;'o'
   442  007FC4  3A                 	db	58	;':'
   443  007FC5  00                 	db	0
   444  007FC6                     STR_2:
   445  007FC6  25                 	db	37
   446  007FC7  63                 	db	99	;'c'
   447  007FC8  25                 	db	37
   448  007FC9  63                 	db	99	;'c'
   449  007FCA  4D                 	db	77	;'M'
   450  007FCB  25                 	db	37
   451  007FCC  32                 	db	50	;'2'
   452  007FCD  64                 	db	100	;'d'
   453  007FCE  41                 	db	65	;'A'
   454  007FCF  25                 	db	37
   455  007FD0  32                 	db	50	;'2'
   456  007FD1  64                 	db	100	;'d'
   457  007FD2  45                 	db	69	;'E'
   458  007FD3  25                 	db	37
   459  007FD4  31                 	db	49	;'1'
   460  007FD5  64                 	db	100	;'d'
   461  007FD6  00                 	db	0
   462  007FD7                     STR_13:
   463  007FD7  54                 	db	84	;'T'
   464  007FD8  65                 	db	101	;'e'
   465  007FD9  6D                 	db	109	;'m'
   466  007FDA  70                 	db	112	;'p'
   467  007FDB  2E                 	db	46
   468  007FDC  20                 	db	32
   469  007FDD  41                 	db	65	;'A'
   470  007FDE  6C                 	db	108	;'l'
   471  007FDF  61                 	db	97	;'a'
   472  007FE0  72                 	db	114	;'r'
   473  007FE1  6D                 	db	109	;'m'
   474  007FE2  65                 	db	101	;'e'
   475  007FE3  3A                 	db	58	;':'
   476  007FE4  20                 	db	32
   477  007FE5  00                 	db	0
   478  007FE6                     STR_12:
   479  007FE6  21                 	db	33
   480  007FE7  41                 	db	65	;'A'
   481  007FE8  4C                 	db	76	;'L'
   482  007FE9  41                 	db	65	;'A'
   483  007FEA  52                 	db	82	;'R'
   484  007FEB  4D                 	db	77	;'M'
   485  007FEC  45                 	db	69	;'E'
   486  007FED  21                 	db	33
   487  007FEE  20                 	db	32
   488  007FEF  54                 	db	84	;'T'
   489  007FF0  45                 	db	69	;'E'
   490  007FF1  4D                 	db	77	;'M'
   491  007FF2  50                 	db	80	;'P'
   492  007FF3  3E                 	db	62	;'>'
   493  007FF4  00                 	db	0
   494  007FF5                     STR_15:
   495  007FF5  25                 	db	37
   496  007FF6  32                 	db	50	;'2'
   497  007FF7  64                 	db	100	;'d'
   498  007FF8  00                 	db	0
   499  007FF9                     STR_19:
   500  007FF9  25                 	db	37
   501  007FFA  63                 	db	99	;'c'
   502  007FFB  00                 	db	0
   503  007FFC                     STR_4:
   504  007FFC  25                 	db	37
   505  007FFD  64                 	db	100	;'d'
   506  007FFE  00                 	db	0
   507  0000                     
   508                           ; #config settings
   509  007FFF  00                 	db	0	; dummy byte at the end
   510  0000                     
   511                           	psect	nvCOMRAM
   512  000044                     __pnvCOMRAM:
   513                           	opt stack 0
   514  000044                     _timer0ReloadVal:
   515                           	opt stack 0
   516  000044                     	ds	2
   517                           
   518                           	psect	nvBANK0
   519  0000E5                     __pnvBANK0:
   520                           	opt stack 0
   521  0000E5                     _TMR0_InterruptHandler:
   522                           	opt stack 0
   523  0000E5                     	ds	2
   524  0000E7                     _INT0_InterruptHandler:
   525                           	opt stack 0
   526  0000E7                     	ds	2
   527  0000E9                     _INT2_InterruptHandler:
   528                           	opt stack 0
   529  0000E9                     	ds	2
   530  0000EB                     _INT1_InterruptHandler:
   531                           	opt stack 0
   532  0000EB                     	ds	2
   533  0000                     _CCPTMRS0bits	set	3913
   534  0000                     _ANSELA	set	3896
   535  0000                     _ANSELE	set	3900
   536  0000                     _ANSELD	set	3899
   537  0000                     _ANSELB	set	3897
   538  0000                     _ANSELC	set	3898
   539  0000                     _PORTAbits	set	3968
   540  0000                     _LATDbits	set	3980
   541  0000                     _TRISDbits	set	3989
   542  0000                     _PORTD	set	3971
   543  0000                     _SSP1BUF	set	4041
   544  0000                     _SSP1CON2bits	set	4037
   545  0000                     _SSP1CON1bits	set	4038
   546  0000                     _SSP1ADD	set	4040
   547  0000                     _SSP1CON3	set	4043
   548  0000                     _SSP1CON1	set	4038
   549  0000                     _SSP1STAT	set	4039
   550  0000                     _RCREG1	set	4014
   551  0000                     _RCSTA1bits	set	4011
   552  0000                     _TXREG1	set	4013
   553  0000                     _SPBRGH1	set	4016
   554  0000                     _SPBRG1	set	4015
   555  0000                     _TXSTA1	set	4012
   556  0000                     _RCSTA1	set	4011
   557  0000                     _BAUDCON1	set	4024
   558  0000                     _ADCON0bits	set	4034
   559  0000                     _ADRESH	set	4036
   560  0000                     _ADRESL	set	4035
   561  0000                     _ADCON2	set	4032
   562  0000                     _ADCON1	set	4033
   563  0000                     _ADCON0	set	4034
   564  0000                     _CCPR1H	set	4031
   565  0000                     _CCPR1L	set	4030
   566  0000                     _PSTR1CON	set	4025
   567  0000                     _PWM1CON	set	4023
   568  0000                     _ECCP1AS	set	4022
   569  0000                     _CCP1CON	set	4029
   570  0000                     _T2CONbits	set	4026
   571  0000                     _TMR2	set	4028
   572  0000                     _PR2	set	4027
   573  0000                     _T2CON	set	4026
   574  0000                     _LATBbits	set	3978
   575  0000                     _T0CONbits	set	4053
   576  0000                     _TMR0L	set	4054
   577  0000                     _TMR0H	set	4055
   578  0000                     _T0CON	set	4053
   579  0000                     _PORTBbits	set	3969
   580  0000                     _PIR2bits	set	4001
   581  0000                     _PIE2bits	set	4000
   582  0000                     _PIR1bits	set	3998
   583  0000                     _PIE1bits	set	3997
   584  0000                     _INTCONbits	set	4082
   585  0000                     _IPR2bits	set	4002
   586  0000                     _IPR1bits	set	3999
   587  0000                     _INTCON3bits	set	4080
   588  0000                     _RCONbits	set	4048
   589  0000                     _OSCTUNE	set	3995
   590  0000                     _OSCCON2	set	4050
   591  0000                     _OSCCON	set	4051
   592  0000                     _INTCON2bits	set	4081
   593  0000                     _WPUB	set	3937
   594  0000                     _TRISD	set	3989
   595  0000                     _TRISC	set	3988
   596  0000                     _TRISB	set	3987
   597  0000                     _TRISA	set	3986
   598  0000                     _TRISE	set	3990
   599  0000                     _LATC	set	3979
   600  0000                     _LATB	set	3978
   601  0000                     _LATA	set	3977
   602  0000                     _LATD	set	3980
   603  0000                     _LATE	set	3981
   604                           
   605                           	psect	cinit
   606  0019B2                     __pcinit:
   607                           	opt stack 0
   608  0019B2                     start_initialization:
   609                           	opt stack 0
   610  0019B2                     __initialization:
   611                           	opt stack 0
   612                           
   613                           ; Initialize objects allocated to BANK0 (2 bytes)
   614                           ; load TBLPTR registers with __pidataBANK0
   615  0019B2  0E0A               	movlw	low __pidataBANK0
   616  0019B4  6EF6               	movwf	tblptrl,c
   617  0019B6  0E23               	movlw	high __pidataBANK0
   618  0019B8  6EF7               	movwf	tblptrh,c
   619  0019BA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   620  0019BC  6EF8               	movwf	tblptru,c
   621  0019BE  0009               	tblrd		*+	;fetch initializer
   622  0019C0  CFF5 F0ED          	movff	tablat,__pdataBANK0
   623  0019C4  0009               	tblrd		*+	;fetch initializer
   624  0019C6  CFF5 F0EE          	movff	tablat,__pdataBANK0+1
   625                           
   626                           ; Initialize objects allocated to COMRAM (2 bytes)
   627                           ; load TBLPTR registers with __pidataCOMRAM
   628  0019CA  0E08               	movlw	low __pidataCOMRAM
   629  0019CC  6EF6               	movwf	tblptrl,c
   630  0019CE  0E23               	movlw	high __pidataCOMRAM
   631  0019D0  6EF7               	movwf	tblptrh,c
   632  0019D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   633  0019D4  6EF8               	movwf	tblptru,c
   634  0019D6  0009               	tblrd		*+	;fetch initializer
   635  0019D8  CFF5 F046          	movff	tablat,__pdataCOMRAM
   636  0019DC  0009               	tblrd		*+	;fetch initializer
   637  0019DE  CFF5 F047          	movff	tablat,__pdataCOMRAM+1
   638                           
   639                           ; Clear objects allocated to BANK1 (52 bytes)
   640  0019E2  EE01  F000         	lfsr	0,__pbssBANK1
   641  0019E6  0E34               	movlw	52
   642  0019E8                     clear_0:
   643  0019E8  6AEE               	clrf	postinc0,c
   644  0019EA  06E8               	decf	wreg,f,c
   645  0019EC  E1FD               	bnz	clear_0
   646                           
   647                           ; Clear objects allocated to BANK0 (81 bytes)
   648  0019EE  EE00  F060         	lfsr	0,__pbssBANK0
   649  0019F2  0E51               	movlw	81
   650  0019F4                     clear_1:
   651  0019F4  6AEE               	clrf	postinc0,c
   652  0019F6  06E8               	decf	wreg,f,c
   653  0019F8  E1FD               	bnz	clear_1
   654                           
   655                           ; Clear objects allocated to COMRAM (21 bytes)
   656  0019FA  EE00  F02F         	lfsr	0,__pbssCOMRAM
   657  0019FE  0E15               	movlw	21
   658  001A00                     clear_2:
   659  001A00  6AEE               	clrf	postinc0,c
   660  001A02  06E8               	decf	wreg,f,c
   661  001A04  E1FD               	bnz	clear_2
   662  001A06                     end_of_initialization:
   663                           	opt stack 0
   664  001A06                     __end_of__initialization:
   665                           	opt stack 0
   666  001A06  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   667  001A08  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   668  001A0A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   669  001A0C  6EF8               	movwf	tblptru,c
   670  001A0E  0100               	movlb	0
   671  001A10  EF1E  F00F         	goto	_main	;jump to C main() function
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           
   679                           	psect	bssCOMRAM
   680  00002F                     __pbssCOMRAM:
   681                           	opt stack 0
   682  00002F                     I2C1_ISR@pi2c_buf_ptr:
   683                           	opt stack 0
   684  00002F                     	ds	2
   685  000031                     _p_i2c1_current:
   686                           	opt stack 0
   687  000031                     	ds	2
   688  000033                     _p_i2c1_trb_current:
   689                           	opt stack 0
   690  000033                     	ds	2
   691  000035                     I2C1_ISR@i2c_10bit_address_restart:
   692                           	opt stack 0
   693  000035                     	ds	1
   694  000036                     I2C1_ISR@i2c_bytes_left:
   695                           	opt stack 0
   696  000036                     	ds	1
   697  000037                     _i2c1_trb_count:
   698                           	opt stack 0
   699  000037                     	ds	1
   700  000038                     _i2c1_state:
   701                           	opt stack 0
   702  000038                     	ds	1
   703  000039                     _WrEnFl:
   704                           	opt stack 0
   705  000039                     	ds	1
   706  00003A                     _clk1_8Hz:
   707                           	opt stack 0
   708  00003A                     	ds	1
   709  00003B                     _clk1_4Hz:
   710                           	opt stack 0
   711  00003B                     	ds	1
   712  00003C                     _clk1_2Hz:
   713                           	opt stack 0
   714  00003C                     	ds	1
   715  00003D                     _clk1Hz:
   716                           	opt stack 0
   717  00003D                     	ds	1
   718  00003E                     _clk2Hz:
   719                           	opt stack 0
   720  00003E                     	ds	1
   721  00003F                     _clk4Hz:
   722                           	opt stack 0
   723  00003F                     	ds	1
   724  000040                     _j:
   725                           	opt stack 0
   726  000040                     	ds	1
   727  000041                     _TeclaTMP:
   728                           	opt stack 0
   729  000041                     	ds	1
   730  000042                     I2C1_ISR@i2c_address:
   731                           	opt stack 0
   732  000042                     	ds	2
   733                           tblptru	equ	0xFF8
   734                           tblptrh	equ	0xFF7
   735                           tblptrl	equ	0xFF6
   736                           tablat	equ	0xFF5
   737                           postinc0	equ	0xFEE
   738                           wreg	equ	0xFE8
   739                           
   740                           	psect	dataCOMRAM
   741  000046                     __pdataCOMRAM:
   742                           	opt stack 0
   743  000046                     _tempAtual:
   744                           	opt stack 0
   745  000046                     	ds	1
   746  000047                     _tempAlarme:
   747                           	opt stack 0
   748  000047                     	ds	1
   749                           tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           
   756                           	psect	bssBANK0
   757  000060                     __pbssBANK0:
   758                           	opt stack 0
   759  000060                     _i2c1_object:
   760                           	opt stack 0
   761  000060                     	ds	7
   762  000067                     _tmpTemp:
   763                           	opt stack 0
   764  000067                     	ds	3
   765  00006A                     _regNum:
   766                           	opt stack 0
   767  00006A                     	ds	2
   768  00006C                     _memAddrBytes:
   769                           	opt stack 0
   770  00006C                     	ds	2
   771  00006E                     _memAddr:
   772                           	opt stack 0
   773  00006E                     	ds	2
   774  000070                     _binADC:
   775                           	opt stack 0
   776  000070                     	ds	2
   777  000072                     _stateMsgI2c:
   778                           	opt stack 0
   779  000072                     	ds	1
   780  000073                     _eusart_Tx_On:
   781                           	opt stack 0
   782  000073                     	ds	1
   783  000074                     _eusart_Tx_En:
   784                           	opt stack 0
   785  000074                     	ds	1
   786  000075                     _alarme:
   787                           	opt stack 0
   788  000075                     	ds	1
   789  000076                     _i:
   790                           	opt stack 0
   791  000076                     	ds	1
   792  000077                     _lastMenu:
   793                           	opt stack 0
   794  000077                     	ds	1
   795  000078                     _strUSART:
   796                           	opt stack 0
   797  000078                     	ds	42
   798  0000A2                     I2C1_MasterRead@trBlock:
   799                           	opt stack 0
   800  0000A2                     	ds	5
   801  0000A7                     I2C1_MasterWrite@trBlock:
   802                           	opt stack 0
   803  0000A7                     	ds	5
   804  0000AC                     _i2c1_tr_queue:
   805                           	opt stack 0
   806  0000AC                     	ds	5
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           
   814                           	psect	dataBANK0
   815  0000ED                     __pdataBANK0:
   816                           	opt stack 0
   817  0000ED                     _menu_tmp:
   818                           	opt stack 0
   819  0000ED                     	ds	1
   820  0000EE                     _update:
   821                           	opt stack 0
   822  0000EE                     	ds	1
   823                           tblptru	equ	0xFF8
   824                           tblptrh	equ	0xFF7
   825                           tblptrl	equ	0xFF6
   826                           tablat	equ	0xFF5
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           
   830                           	psect	bssBANK1
   831  000100                     __pbssBANK1:
   832                           	opt stack 0
   833  000100                     _strLCD:
   834                           	opt stack 0
   835  000100                     	ds	42
   836  00012A                     _i2cWriteBlock:
   837                           	opt stack 0
   838  00012A                     	ds	10
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           
   846                           	psect	cstackBANK1
   847  000134                     __pcstackBANK1:
   848                           	opt stack 0
   849  000134                     ??_isdigit:
   850  000134                     ??_DelayPORXLCD:
   851  000134                     ??_DelayXLCD:
   852  000134                     ?___wmul:
   853                           	opt stack 0
   854  000134                     ?___lwdiv:
   855                           	opt stack 0
   856  000134                     EUSART1_Write@txData:
   857                           	opt stack 0
   858  000134                     WriteCmdXLCD@cmd:
   859                           	opt stack 0
   860  000134                     WriteDataXLCD@data:
   861                           	opt stack 0
   862  000134                     INT1_SetInterruptHandler@InterruptHandler:
   863                           	opt stack 0
   864  000134                     INT2_SetInterruptHandler@InterruptHandler:
   865                           	opt stack 0
   866  000134                     INT0_SetInterruptHandler@InterruptHandler:
   867                           	opt stack 0
   868  000134                     TMR0_SetInterruptHandler@InterruptHandler:
   869                           	opt stack 0
   870  000134                     ___wmul@multiplier:
   871                           	opt stack 0
   872  000134                     ___lwdiv@dividend:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x0
   876  000134                     	ds	1
   877  000135                     _isdigit$2679:
   878                           	opt stack 0
   879  000135                     putsXLCD@buffer:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x1
   883  000135                     	ds	1
   884  000136                     ??_TMR0_Initialize:
   885  000136                     isdigit@c:
   886                           	opt stack 0
   887  000136                     ___wmul@multiplicand:
   888                           	opt stack 0
   889  000136                     ___lwdiv@divisor:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x2
   893  000136                     	ds	1
   894  000137                     escreveLinhaLCD@texto:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x3
   898  000137                     	ds	1
   899  000138                     ___lwdiv@counter:
   900                           	opt stack 0
   901  000138                     ___wmul@product:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x4
   905  000138                     	ds	1
   906  000139                     escreveLinhaLCD@linha:
   907                           	opt stack 0
   908  000139                     ___lwdiv@quotient:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x5
   912  000139                     	ds	1
   913  00013A                     
   914                           ; 1 bytes @ 0x6
   915  00013A                     	ds	1
   916  00013B                     ?___lwmod:
   917                           	opt stack 0
   918  00013B                     ___lwmod@dividend:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x7
   922  00013B                     	ds	2
   923  00013D                     ___lwmod@divisor:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x9
   927  00013D                     	ds	2
   928  00013F                     ___lwmod@counter:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0xB
   932  00013F                     	ds	1
   933  000140                     ?_sprintf:
   934                           	opt stack 0
   935  000140                     sprintf@sp:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0xC
   939  000140                     	ds	2
   940  000142                     sprintf@f:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0xE
   944  000142                     	ds	4
   945  000146                     ??_sprintf:
   946                           
   947                           ; 1 bytes @ 0x12
   948  000146                     	ds	4
   949  00014A                     sprintf@cp:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x16
   953  00014A                     	ds	2
   954  00014C                     sprintf@prec:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x18
   958  00014C                     	ds	1
   959  00014D                     sprintf@flag:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x19
   963  00014D                     	ds	1
   964  00014E                     sprintf@ap:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x1A
   968  00014E                     	ds	2
   969  000150                     sprintf@len:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x1C
   973  000150                     	ds	2
   974  000152                     sprintf@val:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x1E
   978  000152                     	ds	2
   979  000154                     sprintf@width:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x20
   983  000154                     	ds	2
   984  000156                     sprintf@c:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x22
   988  000156                     	ds	1
   989  000157                     ??_defTempAlarme:
   990  000157                     testeTeclado@input:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x23
   994  000157                     	ds	2
   995  000159                     defTempAlarme@tmp_Alarme:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x25
   999  000159                     	ds	1
  1000  00015A                     defTempAlarme@c1:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x26
  1004  00015A                     	ds	1
  1005  00015B                     defTempAlarme@c2:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x27
  1009  00015B                     	ds	1
  1010  00015C                     tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           
  1017                           ; 1 bytes @ 0x28
  1018                           
  1019                           	psect	cstackBANK0
  1020  0000B1                     __pcstackBANK0:
  1021                           	opt stack 0
  1022  0000B1                     ?i1_sprintf:
  1023                           	opt stack 0
  1024  0000B1                     ?___ftsub:
  1025                           	opt stack 0
  1026  0000B1                     ___ftmul@exp:
  1027                           	opt stack 0
  1028  0000B1                     i1sprintf@sp:
  1029                           	opt stack 0
  1030  0000B1                     ___ftsub@f1:
  1031                           	opt stack 0
  1032                           
  1033                           ; 3 bytes @ 0x0
  1034  0000B1                     	ds	1
  1035  0000B2                     ___ftmul@f3_as_product:
  1036                           	opt stack 0
  1037                           
  1038                           ; 3 bytes @ 0x1
  1039  0000B2                     	ds	1
  1040  0000B3                     i1sprintf@f:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x2
  1044  0000B3                     	ds	1
  1045  0000B4                     ___ftsub@f2:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x3
  1049  0000B4                     	ds	1
  1050  0000B5                     ___ftmul@cntr:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x4
  1054  0000B5                     	ds	1
  1055  0000B6                     ___ftmul@sign:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x5
  1059  0000B6                     	ds	9
  1060  0000BF                     i1sprintf@cp:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0xE
  1064  0000BF                     	ds	2
  1065  0000C1                     i1sprintf@prec:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x10
  1069  0000C1                     	ds	1
  1070  0000C2                     i1sprintf@flag:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x11
  1074  0000C2                     	ds	1
  1075  0000C3                     i1sprintf@ap:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x12
  1079  0000C3                     	ds	2
  1080  0000C5                     i1sprintf@len:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x14
  1084  0000C5                     	ds	2
  1085  0000C7                     i1sprintf@val:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x16
  1089  0000C7                     	ds	2
  1090  0000C9                     i1sprintf@width:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x18
  1094  0000C9                     	ds	2
  1095  0000CB                     i1sprintf@c:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x1A
  1099  0000CB                     	ds	1
  1100  0000CC                     ADC_ISR@var2:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x1B
  1104  0000CC                     	ds	1
  1105  0000CD                     ADC_ISR@var1:
  1106                           	opt stack 0
  1107                           
  1108                           ; 3 bytes @ 0x1C
  1109  0000CD                     	ds	3
  1110  0000D0                     ??_INTERRUPT_InterruptManagerLow:
  1111                           
  1112                           ; 1 bytes @ 0x1F
  1113  0000D0                     	ds	21
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           
  1121                           	psect	cstackCOMRAM
  1122  000001                     __pcstackCOMRAM:
  1123                           	opt stack 0
  1124  000001                     ??_I2C1_Stop:
  1125  000001                     TMR2_LoadPeriodRegister@periodVal:
  1126                           	opt stack 0
  1127  000001                     EPWM1_LoadDutyValue@dutyValue:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x0
  1131  000001                     	ds	2
  1132  000003                     ??_EPWM1_LoadDutyValue:
  1133  000003                     I2C1_Stop@completion_code:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x2
  1137  000003                     	ds	1
  1138  000004                     ??_I2C1_ISR:
  1139                           
  1140                           ; 1 bytes @ 0x3
  1141  000004                     	ds	1
  1142  000005                     
  1143                           ; 1 bytes @ 0x4
  1144  000005                     	ds	1
  1145  000006                     ??_INTERRUPT_InterruptManagerHigh:
  1146                           
  1147                           ; 1 bytes @ 0x5
  1148  000006                     	ds	18
  1149  000018                     ??_EUSART1_Receive_ISR:
  1150  000018                     ??i1_isdigit:
  1151  000018                     ?_ADC_GetConversionResult:
  1152                           	opt stack 0
  1153  000018                     ?i1___wmul:
  1154                           	opt stack 0
  1155  000018                     ?i1___lwdiv:
  1156                           	opt stack 0
  1157  000018                     ?___ftpack:
  1158                           	opt stack 0
  1159  000018                     ?___fttol:
  1160                           	opt stack 0
  1161  000018                     i1EUSART1_Write@txData:
  1162                           	opt stack 0
  1163  000018                     I2C1_MasterTRBInsert@ptrb_list:
  1164                           	opt stack 0
  1165  000018                     I2C1_MasterWriteTRBBuild@ptrb:
  1166                           	opt stack 0
  1167  000018                     i1___wmul@multiplier:
  1168                           	opt stack 0
  1169  000018                     i1___lwdiv@dividend:
  1170                           	opt stack 0
  1171  000018                     ___ftpack@arg:
  1172                           	opt stack 0
  1173  000018                     ___ftge@ff1:
  1174                           	opt stack 0
  1175  000018                     ___fttol@f1:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x17
  1179  000018                     	ds	1
  1180  000019                     i1_isdigit$2679:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x18
  1184  000019                     	ds	1
  1185  00001A                     ??_ADC_GetConversionResult:
  1186  00001A                     i1isdigit@c:
  1187                           	opt stack 0
  1188  00001A                     I2C1_MasterTRBInsert@pflag:
  1189                           	opt stack 0
  1190  00001A                     I2C1_MasterWriteTRBBuild@pdata:
  1191                           	opt stack 0
  1192  00001A                     i1___wmul@multiplicand:
  1193                           	opt stack 0
  1194  00001A                     i1___lwdiv@divisor:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x19
  1198  00001A                     	ds	1
  1199  00001B                     ___ftpack@exp:
  1200                           	opt stack 0
  1201  00001B                     ___ftge@ff2:
  1202                           	opt stack 0
  1203                           
  1204                           ; 3 bytes @ 0x1A
  1205  00001B                     	ds	1
  1206  00001C                     ??___fttol:
  1207  00001C                     I2C1_MasterWriteTRBBuild@length:
  1208                           	opt stack 0
  1209  00001C                     ___ftpack@sign:
  1210                           	opt stack 0
  1211  00001C                     i1___lwdiv@counter:
  1212                           	opt stack 0
  1213  00001C                     i1___wmul@product:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x1B
  1217  00001C                     	ds	1
  1218  00001D                     ??___ftpack:
  1219  00001D                     I2C1_MasterTRBInsert@count:
  1220                           	opt stack 0
  1221  00001D                     EUSART1_Receive_ISR@i1:
  1222                           	opt stack 0
  1223  00001D                     I2C1_MasterWriteTRBBuild@address:
  1224                           	opt stack 0
  1225  00001D                     i1___lwdiv@quotient:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x1C
  1229  00001D                     	ds	1
  1230  00001E                     ??___ftge:
  1231                           
  1232                           ; 1 bytes @ 0x1D
  1233  00001E                     	ds	1
  1234  00001F                     ??_I2C1_MasterWriteTRBBuild:
  1235  00001F                     ?i1___lwmod:
  1236                           	opt stack 0
  1237  00001F                     EUSART1_Receive_ISR@i2:
  1238                           	opt stack 0
  1239  00001F                     i1___lwmod@dividend:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x1E
  1243  00001F                     	ds	1
  1244  000020                     ?___ftadd:
  1245                           	opt stack 0
  1246  000020                     ?___awtoft:
  1247                           	opt stack 0
  1248  000020                     ?___lbtoft:
  1249                           	opt stack 0
  1250  000020                     ___awtoft@c:
  1251                           	opt stack 0
  1252  000020                     ___ftadd@f1:
  1253                           	opt stack 0
  1254                           
  1255                           ; 3 bytes @ 0x1F
  1256  000020                     	ds	1
  1257  000021                     EUSART1_Receive_ISR@tmpAlarme:
  1258                           	opt stack 0
  1259  000021                     ___fttol@sign1:
  1260                           	opt stack 0
  1261  000021                     I2C1_MasterWrite@pdata:
  1262                           	opt stack 0
  1263  000021                     i1___lwmod@divisor:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x20
  1267  000021                     	ds	1
  1268  000022                     ___fttol@lval:
  1269                           	opt stack 0
  1270                           
  1271                           ; 4 bytes @ 0x21
  1272  000022                     	ds	1
  1273  000023                     I2C1_MasterWrite@length:
  1274                           	opt stack 0
  1275  000023                     ___awtoft@sign:
  1276                           	opt stack 0
  1277  000023                     ___lbtoft@c:
  1278                           	opt stack 0
  1279  000023                     i1___lwmod@counter:
  1280                           	opt stack 0
  1281  000023                     ___ftadd@f2:
  1282                           	opt stack 0
  1283                           
  1284                           ; 3 bytes @ 0x22
  1285  000023                     	ds	1
  1286  000024                     ??i1_sprintf:
  1287  000024                     ?___ftmul:
  1288                           	opt stack 0
  1289  000024                     I2C1_MasterWrite@address:
  1290                           	opt stack 0
  1291  000024                     ___ftmul@f1:
  1292                           	opt stack 0
  1293                           
  1294                           ; 3 bytes @ 0x23
  1295  000024                     	ds	2
  1296  000026                     ??___ftadd:
  1297  000026                     ___fttol@exp1:
  1298                           	opt stack 0
  1299  000026                     I2C1_MasterWrite@pflag:
  1300                           	opt stack 0
  1301                           
  1302                           ; 2 bytes @ 0x25
  1303  000026                     	ds	1
  1304  000027                     ___ftmul@f2:
  1305                           	opt stack 0
  1306                           
  1307                           ; 3 bytes @ 0x26
  1308  000027                     	ds	1
  1309  000028                     
  1310                           ; 1 bytes @ 0x27
  1311  000028                     	ds	1
  1312  000029                     ___ftadd@sign:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x28
  1316  000029                     	ds	1
  1317  00002A                     ??___ftmul:
  1318  00002A                     ___ftadd@exp2:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x29
  1322  00002A                     	ds	1
  1323  00002B                     ___ftadd@exp1:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x2A
  1327  00002B                     	ds	1
  1328  00002C                     
  1329                           ; 1 bytes @ 0x2B
  1330  00002C                     	ds	1
  1331  00002D                     ??_ADC_ISR:
  1332                           
  1333                           ; 1 bytes @ 0x2C
  1334  00002D                     	ds	2
  1335                           tblptru	equ	0xFF8
  1336                           tblptrh	equ	0xFF7
  1337                           tblptrl	equ	0xFF6
  1338                           tablat	equ	0xFF5
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           
  1342 ;;
  1343 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1344 ;;
  1345 ;; *************** function _main *****************
  1346 ;; Defined at:
  1347 ;;		line 52 in file "main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1361 ;;      Params:         0       0       0       0       0       0       0
  1362 ;;      Locals:         0       0       0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0
  1364 ;;      Totals:         0       0       0       0       0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels required when called:   15
  1367 ;; This function calls:
  1368 ;;		_BusyXLCD
  1369 ;;		_OpenXLCD
  1370 ;;		_SYSTEM_Initialize
  1371 ;;		_WriteCmdXLCD
  1372 ;;		_menu
  1373 ;; This function is called by:
  1374 ;;		Startup code after reset
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text0
  1379  001E3C                     __ptext0:
  1380                           	opt stack 0
  1381  001E3C                     _main:
  1382                           	opt stack 16
  1383                           
  1384                           ;main.c: 54: SYSTEM_Initialize();
  1385                           
  1386                           ;incstack = 0
  1387  001E3C  EC3B  F010         	call	_SYSTEM_Initialize	;wreg free
  1388                           
  1389                           ;main.c: 63: (INTCONbits.GIEH = 1);
  1390  001E40  8EF2               	bsf	intcon,7,c	;volatile
  1391                           
  1392                           ;main.c: 66: (INTCONbits.GIEL = 1);
  1393  001E42  8CF2               	bsf	intcon,6,c	;volatile
  1394  001E44  EC79  F00F         	call	_BusyXLCD	;wreg free
  1395  001E48  0900               	iorlw	0
  1396  001E4A  A4D8               	btfss	status,2,c
  1397  001E4C  D7FB               	goto	l1040
  1398                           
  1399                           ;main.c: 89: OpenXLCD(0b00101111 & 0b00111011);
  1400  001E4E  0E2B               	movlw	43
  1401  001E50  EC83  F00B         	call	_OpenXLCD
  1402  001E54  EC79  F00F         	call	_BusyXLCD	;wreg free
  1403  001E58  0900               	iorlw	0
  1404  001E5A  A4D8               	btfss	status,2,c
  1405  001E5C  D7FB               	goto	l1043
  1406                           
  1407                           ;main.c: 92: WriteCmdXLCD(0b00001111 & 0b00001101 & 0b00001110);
  1408  001E5E  0E0C               	movlw	12
  1409  001E60  EC77  F00E         	call	_WriteCmdXLCD
  1410  001E64  EC79  F00F         	call	_BusyXLCD	;wreg free
  1411  001E68  0900               	iorlw	0
  1412  001E6A  A4D8               	btfss	status,2,c
  1413  001E6C  D7FB               	goto	l1046
  1414                           
  1415                           ;main.c: 95: WriteCmdXLCD(0b00010111);
  1416  001E6E  0E17               	movlw	23
  1417  001E70  EC77  F00E         	call	_WriteCmdXLCD
  1418  001E74                     
  1419                           ;main.c: 99: menu();
  1420  001E74  ECF7  F007         	call	_menu	;wreg free
  1421  001E78  D7FD               	goto	l1048
  1422  001E7A                     __end_of_main:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           intcon	equ	0xFF2
  1429                           postinc0	equ	0xFEE
  1430                           wreg	equ	0xFE8
  1431                           status	equ	0xFD8
  1432                           
  1433 ;; *************** function _menu *****************
  1434 ;; Defined at:
  1435 ;;		line 113 in file "main.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;		None
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;		None
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  1    wreg      void 
  1442 ;; Registers used:
  1443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1449 ;;      Params:         0       0       0       0       0       0       0
  1450 ;;      Locals:         0       0       0       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0
  1452 ;;      Totals:         0       0       0       0       0       0       0
  1453 ;;Total ram usage:        0 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:   14
  1456 ;; This function calls:
  1457 ;;		_defTempAlarme
  1458 ;;		_escreveLinhaLCD
  1459 ;;		_feedbackUSART
  1460 ;;		_monitorizacao
  1461 ;;		_sprintf
  1462 ;;		_testeTeclado
  1463 ;; This function is called by:
  1464 ;;		_main
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           	psect	text1
  1469  000FEE                     __ptext1:
  1470                           	opt stack 0
  1471  000FEE                     _menu:
  1472                           	opt stack 16
  1473                           
  1474                           ;main.c: 115: escreveLinhaLCD(128, "Menu         Opcao:");
  1475                           
  1476                           ;incstack = 0
  1477  000FEE  0EB2               	movlw	low STR_3
  1478  000FF0  0101               	movlb	1	; () banked
  1479  000FF2  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1480  000FF4  0E7F               	movlw	high STR_3
  1481  000FF6  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1482  000FF8  0E80               	movlw	128
  1483  000FFA  ECE2  F00F         	call	_escreveLinhaLCD
  1484  000FFE                     
  1485                           ;main.c: 119: if (PORTAbits.RA0 == 0) {
  1486  000FFE  B080               	btfsc	3968,0,c	;volatile
  1487  001000  D004               	goto	u7300
  1488                           
  1489                           ;main.c: 120: menu_tmp++;
  1490  001002  0100               	movlb	0	; () banked
  1491  001004  2BED               	incf	_menu_tmp& (0+255),f,b	;volatile
  1492  001006                     
  1493                           ; BSR set to: 0
  1494  001006  A080               	btfss	3968,0,c	;volatile
  1495  001008  D7FE               	goto	l1066
  1496  00100A                     u7300:
  1497                           
  1498                           ;main.c: 122: }
  1499                           ;main.c: 124: if (PORTAbits.RA2 == 0) {
  1500  00100A  B480               	btfsc	3968,2,c	;volatile
  1501  00100C  D004               	goto	u7320
  1502                           
  1503                           ;main.c: 125: menu_tmp--;
  1504  00100E  0100               	movlb	0	; () banked
  1505  001010  07ED               	decf	_menu_tmp& (0+255),f,b	;volatile
  1506  001012                     
  1507                           ; BSR set to: 0
  1508  001012  A480               	btfss	3968,2,c	;volatile
  1509  001014  D7FE               	goto	l1070
  1510  001016                     u7320:
  1511                           
  1512                           ;main.c: 127: }
  1513                           ;main.c: 129: if (menu_tmp > 4)
  1514  001016  0E04               	movlw	4
  1515  001018  0100               	movlb	0	; () banked
  1516  00101A  65ED               	cpfsgt	_menu_tmp& (0+255),b	;volatile
  1517  00101C  D002               	goto	l1072
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;main.c: 130: menu_tmp = 1;
  1521  00101E  0E01               	movlw	1
  1522  001020  6FED               	movwf	_menu_tmp& (0+255),b	;volatile
  1523  001022                     l1072:
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;main.c: 131: if (menu_tmp < 1)
  1527  001022  51ED               	movf	_menu_tmp& (0+255),w,b	;volatile
  1528  001024  A4D8               	btfss	status,2,c
  1529  001026  D002               	goto	l1073
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;main.c: 132: menu_tmp = 4;
  1533  001028  0E04               	movlw	4
  1534  00102A  6FED               	movwf	_menu_tmp& (0+255),b	;volatile
  1535  00102C                     l1073:
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;main.c: 134: if (lastMenu != menu_tmp) {
  1539                           
  1540                           ; BSR set to: 0
  1541  00102C  51ED               	movf	_menu_tmp& (0+255),w,b	;volatile
  1542  00102E  1977               	xorwf	_lastMenu& (0+255),w,b	;volatile
  1543  001030  B4D8               	btfsc	status,2,c
  1544  001032  D004               	goto	l1074
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 135: update = 1;
  1548  001034  0E01               	movlw	1
  1549  001036  6FEE               	movwf	_update& (0+255),b	;volatile
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;main.c: 136: lastMenu = menu_tmp;
  1553  001038  C0ED  F077         	movff	_menu_tmp,_lastMenu	;volatile
  1554  00103C                     l1074:
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;main.c: 137: }
  1558                           ;main.c: 139: if (update) {
  1559  00103C  51EE               	movf	_update& (0+255),w,b	;volatile
  1560  00103E  B4D8               	btfsc	status,2,c
  1561  001040  D04C               	goto	l1075
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;main.c: 140: sprintf(strLCD, "%d", menu_tmp);
  1565  001042  0E00               	movlw	low _strLCD
  1566  001044  0101               	movlb	1	; () banked
  1567  001046  6F40               	movwf	sprintf@sp& (0+255),b
  1568  001048  0E01               	movlw	high _strLCD
  1569  00104A  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  1570  00104C  0EFC               	movlw	low STR_4
  1571  00104E  6F42               	movwf	sprintf@f& (0+255),b
  1572  001050  0E7F               	movlw	high STR_4
  1573  001052  6F43               	movwf	(sprintf@f+1)& (0+255),b
  1574  001054  C0ED  F144         	movff	_menu_tmp,?_sprintf+4	;volatile
  1575  001058  6B45               	clrf	(?_sprintf+5)& (0+255),b
  1576  00105A  EC70  F000         	call	_sprintf	;wreg free
  1577                           
  1578                           ;main.c: 141: escreveLinhaLCD(128 + 19, strLCD);
  1579  00105E  0E00               	movlw	low _strLCD
  1580  001060  0101               	movlb	1	; () banked
  1581  001062  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1582  001064  0E01               	movlw	high _strLCD
  1583  001066  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1584  001068  0E93               	movlw	147
  1585  00106A  ECE2  F00F         	call	_escreveLinhaLCD
  1586                           
  1587                           ;main.c: 142: switch (menu_tmp) {
  1588  00106E  D024               	goto	l1076
  1589  001070                     
  1590                           ;main.c: 144: escreveLinhaLCD(192, "Monitorizacao        ");
  1591  001070  0EDA               	movlw	low STR_5
  1592  001072  0101               	movlb	1	; () banked
  1593  001074  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1594  001076  0E7E               	movlw	high STR_5
  1595  001078  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1596  00107A  0EC0               	movlw	192
  1597  00107C  ECE2  F00F         	call	_escreveLinhaLCD
  1598                           
  1599                           ;main.c: 145: break;
  1600  001080  D029               	goto	l1078
  1601  001082                     
  1602                           ;main.c: 147: escreveLinhaLCD(192, "Temp. de alarme      ");
  1603  001082  0E06               	movlw	low STR_6
  1604  001084  0101               	movlb	1	; () banked
  1605  001086  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1606  001088  0E7F               	movlw	high STR_6
  1607  00108A  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1608  00108C  0EC0               	movlw	192
  1609  00108E  ECE2  F00F         	call	_escreveLinhaLCD
  1610                           
  1611                           ;main.c: 148: break;
  1612  001092  D020               	goto	l1078
  1613  001094                     
  1614                           ;main.c: 150: escreveLinhaLCD(192, "Teste do teclado     ");
  1615  001094  0E1C               	movlw	low STR_7
  1616  001096  0101               	movlb	1	; () banked
  1617  001098  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1618  00109A  0E7F               	movlw	high STR_7
  1619  00109C  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1620  00109E  0EC0               	movlw	192
  1621  0010A0  ECE2  F00F         	call	_escreveLinhaLCD
  1622                           
  1623                           ;main.c: 151: break;
  1624  0010A4  D017               	goto	l1078
  1625  0010A6                     
  1626                           ;main.c: 153: escreveLinhaLCD(192, "Feedback EUSART      ");
  1627  0010A6  0EF0               	movlw	low STR_8
  1628  0010A8  0101               	movlb	1	; () banked
  1629  0010AA  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1630  0010AC  0E7E               	movlw	high STR_8
  1631  0010AE  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1632  0010B0  0EC0               	movlw	192
  1633  0010B2  ECE2  F00F         	call	_escreveLinhaLCD
  1634                           
  1635                           ;main.c: 155: }
  1636                           
  1637                           ;main.c: 154: break;
  1638  0010B6  D00E               	goto	l1078
  1639  0010B8                     l1076:
  1640  0010B8  0100               	movlb	0	; () banked
  1641  0010BA  51ED               	movf	_menu_tmp& (0+255),w,b	;volatile
  1642                           
  1643                           ; Switch size 1, requested type "space"
  1644                           ; Number of cases is 4, Range of values is 1 to 4
  1645                           ; switch strategies available:
  1646                           ; Name         Instructions Cycles
  1647                           ; simple_byte           13     7 (average)
  1648                           ;	Chosen strategy is simple_byte
  1649  0010BC  0A01               	xorlw	1	; case 1
  1650  0010BE  B4D8               	btfsc	status,2,c
  1651  0010C0  D7D7               	goto	l1077
  1652  0010C2  0A03               	xorlw	3	; case 2
  1653  0010C4  B4D8               	btfsc	status,2,c
  1654  0010C6  D7DD               	goto	l1079
  1655  0010C8  0A01               	xorlw	1	; case 3
  1656  0010CA  B4D8               	btfsc	status,2,c
  1657  0010CC  D7E3               	goto	l1080
  1658  0010CE  0A07               	xorlw	7	; case 4
  1659  0010D0  B4D8               	btfsc	status,2,c
  1660  0010D2  D7E9               	goto	l1081
  1661  0010D4                     l1078:
  1662                           
  1663                           ;main.c: 156: update = 0;
  1664                           
  1665                           ; BSR set to: 0
  1666  0010D4  0E00               	movlw	0
  1667  0010D6  0100               	movlb	0	; () banked
  1668  0010D8  6FEE               	movwf	_update& (0+255),b	;volatile
  1669  0010DA                     l1075:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 157: }
  1673                           ;main.c: 159: if (PORTAbits.RA1 == 0) {
  1674                           
  1675                           ; BSR set to: 0
  1676  0010DA  B280               	btfsc	3968,1,c	;volatile
  1677  0010DC  D790               	goto	l1063
  1678  0010DE                     u7370:
  1679                           
  1680                           ; BSR set to: 0
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 160: while (PORTAbits.RA1 == 0);
  1684  0010DE  B280               	btfsc	3968,1,c	;volatile
  1685  0010E0  D00D               	goto	l1086
  1686  0010E2  D7FD               	goto	u7370
  1687  0010E4                     
  1688                           ;main.c: 163: monitorizacao();
  1689  0010E4  EC49  F007         	call	_monitorizacao	;wreg free
  1690                           
  1691                           ;main.c: 164: break;
  1692  0010E8  D017               	goto	l1088
  1693  0010EA                     
  1694                           ;main.c: 166: defTempAlarme();
  1695  0010EA  EC36  F009         	call	_defTempAlarme	;wreg free
  1696                           
  1697                           ;main.c: 167: break;
  1698  0010EE  D014               	goto	l1088
  1699  0010F0                     
  1700                           ;main.c: 169: testeTeclado();
  1701  0010F0  EC0A  F00D         	call	_testeTeclado	;wreg free
  1702                           
  1703                           ;main.c: 170: break;
  1704  0010F4  D011               	goto	l1088
  1705  0010F6                     
  1706                           ;main.c: 172: feedbackUSART();
  1707  0010F6  ECA9  F00A         	call	_feedbackUSART	;wreg free
  1708                           
  1709                           ;main.c: 174: }
  1710                           
  1711                           ;main.c: 173: break;
  1712  0010FA  D00E               	goto	l1088
  1713  0010FC                     l1086:
  1714  0010FC  0100               	movlb	0	; () banked
  1715  0010FE  51ED               	movf	_menu_tmp& (0+255),w,b	;volatile
  1716                           
  1717                           ; Switch size 1, requested type "space"
  1718                           ; Number of cases is 4, Range of values is 1 to 4
  1719                           ; switch strategies available:
  1720                           ; Name         Instructions Cycles
  1721                           ; simple_byte           13     7 (average)
  1722                           ;	Chosen strategy is simple_byte
  1723  001100  0A01               	xorlw	1	; case 1
  1724  001102  B4D8               	btfsc	status,2,c
  1725  001104  D7EF               	goto	l1087
  1726  001106  0A03               	xorlw	3	; case 2
  1727  001108  B4D8               	btfsc	status,2,c
  1728  00110A  D7EF               	goto	l1089
  1729  00110C  0A01               	xorlw	1	; case 3
  1730  00110E  B4D8               	btfsc	status,2,c
  1731  001110  D7EF               	goto	l1090
  1732  001112  0A07               	xorlw	7	; case 4
  1733  001114  B4D8               	btfsc	status,2,c
  1734  001116  D7EF               	goto	l1091
  1735  001118                     l1088:
  1736                           
  1737                           ;main.c: 175: update = 1;
  1738                           
  1739                           ; BSR set to: 0
  1740  001118  0E01               	movlw	1
  1741  00111A  0100               	movlb	0	; () banked
  1742  00111C  6FEE               	movwf	_update& (0+255),b	;volatile
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 176: escreveLinhaLCD(128, "Menu         Opcao:");
  1746  00111E  0EB2               	movlw	low STR_3
  1747  001120  0101               	movlb	1	; () banked
  1748  001122  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1749  001124  0E7F               	movlw	high STR_3
  1750  001126  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1751  001128  0E80               	movlw	128
  1752  00112A  ECE2  F00F         	call	_escreveLinhaLCD
  1753  00112E  D767               	goto	l1063
  1754  001130                     __end_of_menu:
  1755                           	opt stack 0
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           intcon	equ	0xFF2
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _testeTeclado *****************
  1766 ;; Defined at:
  1767 ;;		line 222 in file "main.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;		None
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  input           1   35[BANK1 ] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1781 ;;      Params:         0       0       0       0       0       0       0
  1782 ;;      Locals:         0       0       1       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0
  1784 ;;      Totals:         0       0       1       0       0       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:   13
  1788 ;; This function calls:
  1789 ;;		_escreveLinhaLCD
  1790 ;;		_getKBInput
  1791 ;;		_sprintf
  1792 ;; This function is called by:
  1793 ;;		_menu
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text2
  1798  001A14                     __ptext2:
  1799                           	opt stack 0
  1800  001A14                     _testeTeclado:
  1801                           	opt stack 16
  1802                           
  1803                           ;main.c: 224: char input;
  1804                           ;main.c: 226: escreveLinhaLCD(128, "Teste Teclado       ");
  1805                           
  1806                           ;incstack = 0
  1807  001A14  0E88               	movlw	low STR_17
  1808  001A16  0101               	movlb	1	; () banked
  1809  001A18  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1810  001A1A  0E7F               	movlw	high STR_17
  1811  001A1C  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1812  001A1E  0E80               	movlw	128
  1813  001A20  ECE2  F00F         	call	_escreveLinhaLCD
  1814                           
  1815                           ;main.c: 227: escreveLinhaLCD(192, "Numero:             ");
  1816  001A24  0E5E               	movlw	low STR_18
  1817  001A26  0101               	movlb	1	; () banked
  1818  001A28  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1819  001A2A  0E7F               	movlw	high STR_18
  1820  001A2C  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1821  001A2E  0EC0               	movlw	192
  1822  001A30  ECE2  F00F         	call	_escreveLinhaLCD
  1823                           
  1824                           ;main.c: 230: while (PORTAbits.RA1 != 0) {
  1825  001A34  D019               	goto	l1118
  1826  001A36                     
  1827                           ;main.c: 231: input = getKBInput();
  1828  001A36  EC39  F00D         	call	_getKBInput	;wreg free
  1829  001A3A  0101               	movlb	1	; () banked
  1830  001A3C  6F57               	movwf	testeTeclado@input& (0+255),b
  1831                           
  1832                           ; BSR set to: 1
  1833                           ;main.c: 232: sprintf(strLCD, "%c", input);
  1834  001A3E  0E00               	movlw	low _strLCD
  1835  001A40  6F40               	movwf	sprintf@sp& (0+255),b
  1836  001A42  0E01               	movlw	high _strLCD
  1837  001A44  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  1838  001A46  0EF9               	movlw	low STR_19
  1839  001A48  6F42               	movwf	sprintf@f& (0+255),b
  1840  001A4A  0E7F               	movlw	high STR_19
  1841  001A4C  6F43               	movwf	(sprintf@f+1)& (0+255),b
  1842  001A4E  C157  F144         	movff	testeTeclado@input,?_sprintf+4
  1843  001A52  6B45               	clrf	(?_sprintf+5)& (0+255),b
  1844  001A54  EC70  F000         	call	_sprintf	;wreg free
  1845                           
  1846                           ;main.c: 233: escreveLinhaLCD(192 + 8, strLCD);
  1847  001A58  0E00               	movlw	low _strLCD
  1848  001A5A  0101               	movlb	1	; () banked
  1849  001A5C  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1850  001A5E  0E01               	movlw	high _strLCD
  1851  001A60  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1852  001A62  0EC8               	movlw	200
  1853  001A64  ECE2  F00F         	call	_escreveLinhaLCD
  1854  001A68                     l1118:
  1855  001A68  B280               	btfsc	3968,1,c	;volatile
  1856  001A6A  D7E5               	goto	l1119
  1857  001A6C                     u6780:
  1858                           
  1859                           ;main.c: 234: }
  1860                           ;main.c: 236: while (PORTAbits.RA1 == 0);
  1861  001A6C  B280               	btfsc	3968,1,c	;volatile
  1862  001A6E  0012               	return	
  1863  001A70  D7FD               	goto	u6780
  1864  001A72                     __end_of_testeTeclado:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           intcon	equ	0xFF2
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           status	equ	0xFD8
  1874                           
  1875 ;; *************** function _monitorizacao *****************
  1876 ;; Defined at:
  1877 ;;		line 182 in file "main.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      void 
  1884 ;; Registers used:
  1885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1891 ;;      Params:         0       0       0       0       0       0       0
  1892 ;;      Locals:         0       0       0       0       0       0       0
  1893 ;;      Temps:          0       0       0       0       0       0       0
  1894 ;;      Totals:         0       0       0       0       0       0       0
  1895 ;;Total ram usage:        0 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:   13
  1898 ;; This function calls:
  1899 ;;		_escreveLinhaLCD
  1900 ;;		_sprintf
  1901 ;; This function is called by:
  1902 ;;		_menu
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text3
  1907  000E92                     __ptext3:
  1908                           	opt stack 0
  1909  000E92                     _monitorizacao:
  1910                           	opt stack 16
  1911                           
  1912                           ;main.c: 184: sprintf(strLCD, "Temp. Atual:  %2d oC ", tempAtual);
  1913                           
  1914                           ;incstack = 0
  1915  000E92  0E00               	movlw	low _strLCD
  1916  000E94  0101               	movlb	1	; () banked
  1917  000E96  6F40               	movwf	sprintf@sp& (0+255),b
  1918  000E98  0E01               	movlw	high _strLCD
  1919  000E9A  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  1920  000E9C  0E32               	movlw	low STR_10
  1921  000E9E  6F42               	movwf	sprintf@f& (0+255),b
  1922  000EA0  0E7F               	movlw	high STR_10
  1923  000EA2  6F43               	movwf	(sprintf@f+1)& (0+255),b
  1924  000EA4  C046  F144         	movff	_tempAtual,?_sprintf+4	;volatile
  1925  000EA8  6B45               	clrf	(?_sprintf+5)& (0+255),b
  1926  000EAA  EC70  F000         	call	_sprintf	;wreg free
  1927                           
  1928                           ;main.c: 185: escreveLinhaLCD(128, strLCD);
  1929  000EAE  0E00               	movlw	low _strLCD
  1930  000EB0  0101               	movlb	1	; () banked
  1931  000EB2  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1932  000EB4  0E01               	movlw	high _strLCD
  1933  000EB6  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1934  000EB8  0E80               	movlw	128
  1935  000EBA  ECE2  F00F         	call	_escreveLinhaLCD
  1936                           
  1937                           ;main.c: 186: sprintf(strLCD, "Temp. Alarme: %2d oC ", tempAlarme);
  1938  000EBE  0E00               	movlw	low _strLCD
  1939  000EC0  0101               	movlb	1	; () banked
  1940  000EC2  6F40               	movwf	sprintf@sp& (0+255),b
  1941  000EC4  0E01               	movlw	high _strLCD
  1942  000EC6  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  1943  000EC8  0E48               	movlw	low STR_11
  1944  000ECA  6F42               	movwf	sprintf@f& (0+255),b
  1945  000ECC  0E7F               	movlw	high STR_11
  1946  000ECE  6F43               	movwf	(sprintf@f+1)& (0+255),b
  1947  000ED0  C047  F144         	movff	_tempAlarme,?_sprintf+4	;volatile
  1948  000ED4  6B45               	clrf	(?_sprintf+5)& (0+255),b
  1949  000ED6  EC70  F000         	call	_sprintf	;wreg free
  1950                           
  1951                           ;main.c: 187: escreveLinhaLCD(192, strLCD);
  1952  000EDA  0E00               	movlw	low _strLCD
  1953  000EDC  0101               	movlb	1	; () banked
  1954  000EDE  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  1955  000EE0  0E01               	movlw	high _strLCD
  1956  000EE2  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1957  000EE4  0EC0               	movlw	192
  1958  000EE6  ECE2  F00F         	call	_escreveLinhaLCD
  1959                           
  1960                           ;main.c: 190: while (clk4Hz) {
  1961                           
  1962                           ;main.c: 189: do {
  1963  000EEA  D079               	goto	u6660
  1964  000EEC                     
  1965                           ;main.c: 192: if (alarme) {
  1966  000EEC  0100               	movlb	0	; () banked
  1967  000EEE  5175               	movf	_alarme& (0+255),w,b	;volatile
  1968  000EF0  A4D8               	btfss	status,2,c
  1969  000EF2  D01C               	goto	l1101
  1970  000EF4  D02B               	goto	l1100
  1971  000EF6                     
  1972                           ;main.c: 195: sprintf(strLCD, "!ALARME! TEMP>");
  1973                           
  1974                           ; BSR set to: 0
  1975  000EF6  0E00               	movlw	low _strLCD
  1976  000EF8  0101               	movlb	1	; () banked
  1977  000EFA  6F40               	movwf	sprintf@sp& (0+255),b
  1978  000EFC  0E01               	movlw	high _strLCD
  1979  000EFE  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  1980  000F00  0EE6               	movlw	low STR_12
  1981  000F02  6F42               	movwf	sprintf@f& (0+255),b
  1982  000F04  0E7F               	movlw	high STR_12
  1983  000F06  6F43               	movwf	(sprintf@f+1)& (0+255),b
  1984  000F08  EC70  F000         	call	_sprintf	;wreg free
  1985                           
  1986                           ;main.c: 196: update = 1;
  1987  000F0C  0E01               	movlw	1
  1988  000F0E  0100               	movlb	0	; () banked
  1989  000F10  6FEE               	movwf	_update& (0+255),b	;volatile
  1990                           
  1991                           ;main.c: 197: break;
  1992  000F12  D013               	goto	l1103
  1993  000F14                     
  1994                           ;main.c: 199: sprintf(strLCD, "Temp. Alarme: ");
  1995                           
  1996                           ; BSR set to: 0
  1997  000F14  0E00               	movlw	low _strLCD
  1998  000F16  0101               	movlb	1	; () banked
  1999  000F18  6F40               	movwf	sprintf@sp& (0+255),b
  2000  000F1A  0E01               	movlw	high _strLCD
  2001  000F1C  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  2002  000F1E  0ED7               	movlw	low STR_13
  2003  000F20  6F42               	movwf	sprintf@f& (0+255),b
  2004  000F22  0E7F               	movlw	high STR_13
  2005  000F24  6F43               	movwf	(sprintf@f+1)& (0+255),b
  2006  000F26  EC70  F000         	call	_sprintf	;wreg free
  2007                           
  2008                           ;main.c: 201: }
  2009                           
  2010                           ;main.c: 200: break;
  2011  000F2A  D007               	goto	l1103
  2012  000F2C                     l1101:
  2013  000F2C  503C               	movf	_clk1_2Hz,w,c	;volatile
  2014                           
  2015                           ; Switch size 1, requested type "space"
  2016                           ; Number of cases is 2, Range of values is 0 to 1
  2017                           ; switch strategies available:
  2018                           ; Name         Instructions Cycles
  2019                           ; simple_byte            7     4 (average)
  2020                           ;	Chosen strategy is simple_byte
  2021  000F2E  0A00               	xorlw	0	; case 0
  2022  000F30  B4D8               	btfsc	status,2,c
  2023  000F32  D7F0               	goto	l1104
  2024  000F34  0A01               	xorlw	1	; case 1
  2025  000F36  B4D8               	btfsc	status,2,c
  2026  000F38  D7DE               	goto	l1102
  2027  000F3A                     l1103:
  2028                           
  2029                           ;main.c: 202: escreveLinhaLCD(192, strLCD);
  2030  000F3A  0E00               	movlw	low _strLCD
  2031  000F3C  0101               	movlb	1	; () banked
  2032  000F3E  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  2033  000F40  0E01               	movlw	high _strLCD
  2034  000F42  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2035  000F44  0EC0               	movlw	192
  2036  000F46  ECE2  F00F         	call	_escreveLinhaLCD
  2037                           
  2038                           ;main.c: 203: } else if (update) {
  2039  000F4A  D01A               	goto	l1106
  2040  000F4C                     l1100:
  2041  000F4C  0100               	movlb	0	; () banked
  2042  000F4E  51EE               	movf	_update& (0+255),w,b	;volatile
  2043  000F50  B4D8               	btfsc	status,2,c
  2044  000F52  D016               	goto	l1106
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 204: sprintf(strLCD, "Temp. Alarme: ");
  2048  000F54  0E00               	movlw	low _strLCD
  2049  000F56  0101               	movlb	1	; () banked
  2050  000F58  6F40               	movwf	sprintf@sp& (0+255),b
  2051  000F5A  0E01               	movlw	high _strLCD
  2052  000F5C  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  2053  000F5E  0ED7               	movlw	low STR_13
  2054  000F60  6F42               	movwf	sprintf@f& (0+255),b
  2055  000F62  0E7F               	movlw	high STR_13
  2056  000F64  6F43               	movwf	(sprintf@f+1)& (0+255),b
  2057  000F66  EC70  F000         	call	_sprintf	;wreg free
  2058                           
  2059                           ;main.c: 205: escreveLinhaLCD(192, strLCD);
  2060  000F6A  0E00               	movlw	low _strLCD
  2061  000F6C  0101               	movlb	1	; () banked
  2062  000F6E  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  2063  000F70  0E01               	movlw	high _strLCD
  2064  000F72  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2065  000F74  0EC0               	movlw	192
  2066  000F76  ECE2  F00F         	call	_escreveLinhaLCD
  2067                           
  2068                           ;main.c: 206: update = 0;
  2069  000F7A  0E00               	movlw	0
  2070  000F7C  0100               	movlb	0	; () banked
  2071  000F7E  6FEE               	movwf	_update& (0+255),b	;volatile
  2072  000F80                     l1106:
  2073                           
  2074                           ;main.c: 207: }
  2075                           ;main.c: 209: sprintf(strLCD, "%2d", tempAtual);
  2076                           
  2077                           ; BSR set to: 0
  2078                           
  2079                           ; BSR set to: 0
  2080  000F80  0E00               	movlw	low _strLCD
  2081  000F82  0101               	movlb	1	; () banked
  2082  000F84  6F40               	movwf	sprintf@sp& (0+255),b
  2083  000F86  0E01               	movlw	high _strLCD
  2084  000F88  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  2085  000F8A  0EF5               	movlw	low STR_15
  2086  000F8C  6F42               	movwf	sprintf@f& (0+255),b
  2087  000F8E  0E7F               	movlw	high STR_15
  2088  000F90  6F43               	movwf	(sprintf@f+1)& (0+255),b
  2089  000F92  C046  F144         	movff	_tempAtual,?_sprintf+4	;volatile
  2090  000F96  6B45               	clrf	(?_sprintf+5)& (0+255),b
  2091  000F98  EC70  F000         	call	_sprintf	;wreg free
  2092                           
  2093                           ;main.c: 210: escreveLinhaLCD(128 + 14, strLCD);
  2094  000F9C  0E00               	movlw	low _strLCD
  2095  000F9E  0101               	movlb	1	; () banked
  2096  000FA0  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  2097  000FA2  0E01               	movlw	high _strLCD
  2098  000FA4  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2099  000FA6  0E8E               	movlw	142
  2100  000FA8  ECE2  F00F         	call	_escreveLinhaLCD
  2101                           
  2102                           ;main.c: 211: sprintf(strLCD, "%2d", tempAlarme);
  2103  000FAC  0E00               	movlw	low _strLCD
  2104  000FAE  0101               	movlb	1	; () banked
  2105  000FB0  6F40               	movwf	sprintf@sp& (0+255),b
  2106  000FB2  0E01               	movlw	high _strLCD
  2107  000FB4  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  2108  000FB6  0EF5               	movlw	low STR_15
  2109  000FB8  6F42               	movwf	sprintf@f& (0+255),b
  2110  000FBA  0E7F               	movlw	high STR_15
  2111  000FBC  6F43               	movwf	(sprintf@f+1)& (0+255),b
  2112  000FBE  C047  F144         	movff	_tempAlarme,?_sprintf+4	;volatile
  2113  000FC2  6B45               	clrf	(?_sprintf+5)& (0+255),b
  2114  000FC4  EC70  F000         	call	_sprintf	;wreg free
  2115                           
  2116                           ;main.c: 212: escreveLinhaLCD(192 + 14, strLCD);
  2117  000FC8  0E00               	movlw	low _strLCD
  2118  000FCA  0101               	movlb	1	; () banked
  2119  000FCC  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  2120  000FCE  0E01               	movlw	high _strLCD
  2121  000FD0  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2122  000FD2  0ECE               	movlw	206
  2123  000FD4  ECE2  F00F         	call	_escreveLinhaLCD
  2124  000FD8  503F               	movf	_clk4Hz,w,c	;volatile
  2125  000FDA  A4D8               	btfss	status,2,c
  2126  000FDC  D7FD               	goto	l1108
  2127  000FDE                     u6660:
  2128  000FDE  503F               	movf	_clk4Hz,w,c	;volatile
  2129  000FE0  A4D8               	btfss	status,2,c
  2130  000FE2  D784               	goto	l1099
  2131                           
  2132                           ;main.c: 215: }
  2133                           ;main.c: 216: } while (PORTAbits.RA1 != 0);
  2134  000FE4  B280               	btfsc	3968,1,c	;volatile
  2135  000FE6  D7FB               	goto	u6660
  2136  000FE8                     u6680:
  2137                           
  2138                           ;main.c: 218: while (PORTAbits.RA1 == 0);
  2139  000FE8  B280               	btfsc	3968,1,c	;volatile
  2140  000FEA  0012               	return	
  2141  000FEC  D7FD               	goto	u6680
  2142  000FEE                     __end_of_monitorizacao:
  2143                           	opt stack 0
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           intcon	equ	0xFF2
  2149                           postinc0	equ	0xFEE
  2150                           wreg	equ	0xFE8
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _feedbackUSART *****************
  2154 ;; Defined at:
  2155 ;;		line 324 in file "main.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;		None
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2169 ;;      Params:         0       0       0       0       0       0       0
  2170 ;;      Locals:         0       0       0       0       0       0       0
  2171 ;;      Temps:          0       0       0       0       0       0       0
  2172 ;;      Totals:         0       0       0       0       0       0       0
  2173 ;;Total ram usage:        0 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:   13
  2176 ;; This function calls:
  2177 ;;		_BusyXLCD
  2178 ;;		_EUSART1_Write
  2179 ;;		_WriteCmdXLCD
  2180 ;;		_escreveLinhaLCD
  2181 ;; This function is called by:
  2182 ;;		_menu
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text4
  2187  001552                     __ptext4:
  2188                           	opt stack 0
  2189  001552                     _feedbackUSART:
  2190                           	opt stack 16
  2191                           
  2192                           ;main.c: 326: while (BusyXLCD());
  2193                           
  2194                           ;incstack = 0
  2195  001552  EC79  F00F         	call	_BusyXLCD	;wreg free
  2196  001556  0900               	iorlw	0
  2197  001558  A4D8               	btfss	status,2,c
  2198  00155A  D7FB               	goto	_feedbackUSART
  2199                           
  2200                           ;main.c: 327: WriteCmdXLCD(1);
  2201  00155C  0E01               	movlw	1
  2202  00155E  EC77  F00E         	call	_WriteCmdXLCD
  2203                           
  2204                           ;main.c: 329: while (PORTAbits.RA1 != 0) {
  2205  001562  D05A               	goto	l1171
  2206  001564                     
  2207                           ;main.c: 331: eusart_Tx_On = 1;
  2208  001564  0E01               	movlw	1
  2209  001566  0100               	movlb	0	; () banked
  2210  001568  6F73               	movwf	_eusart_Tx_On& (0+255),b	;volatile
  2211                           
  2212                           ;main.c: 332: eusart_Tx_En = 1;
  2213  00156A  0E01               	movlw	1
  2214  00156C  6F74               	movwf	_eusart_Tx_En& (0+255),b	;volatile
  2215  00156E                     
  2216                           ; BSR set to: 0
  2217                           
  2218                           ; BSR set to: 0
  2219                           
  2220                           ; BSR set to: 0
  2221  00156E  0573               	decf	_eusart_Tx_On& (0+255),w,b	;volatile
  2222  001570  B4D8               	btfsc	status,2,c
  2223  001572  D7FD               	goto	l1174
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;main.c: 336: for (i = 0; i < 42 - 1; i++) {
  2227                           
  2228                           ; BSR set to: 0
  2229  001574  0E00               	movlw	0
  2230  001576  6F76               	movwf	_i& (0+255),b	;volatile
  2231  001578                     l6158:
  2232                           
  2233                           ; BSR set to: 0
  2234  001578  0E28               	movlw	40
  2235  00157A  6576               	cpfsgt	_i& (0+255),b	;volatile
  2236  00157C  D001               	goto	l1176
  2237  00157E  D014               	goto	u6830
  2238  001580                     l1176:
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;main.c: 337: strLCD[i] = strUSART[i];
  2242                           
  2243                           ; BSR set to: 0
  2244  001580  5176               	movf	_i& (0+255),w,b	;volatile
  2245  001582  0D01               	mullw	1
  2246  001584  0E78               	movlw	low _strUSART
  2247  001586  24F3               	addwf	prodl,w,c
  2248  001588  6ED9               	movwf	fsr2l,c
  2249  00158A  0E00               	movlw	high _strUSART
  2250  00158C  20F4               	addwfc	prodh,w,c
  2251  00158E  6EDA               	movwf	fsr2h,c
  2252  001590  5176               	movf	_i& (0+255),w,b	;volatile
  2253  001592  0D01               	mullw	1
  2254  001594  0E00               	movlw	low _strLCD
  2255  001596  24F3               	addwf	prodl,w,c
  2256  001598  6EE1               	movwf	fsr1l,c
  2257  00159A  0E01               	movlw	high _strLCD
  2258  00159C  20F4               	addwfc	prodh,w,c
  2259  00159E  6EE2               	movwf	fsr1h,c
  2260  0015A0  CFDF FFE7          	movff	indf2,indf1
  2261                           
  2262                           ; BSR set to: 0
  2263  0015A4  2B76               	incf	_i& (0+255),f,b	;volatile
  2264  0015A6  D7E8               	goto	l6158
  2265  0015A8                     u6830:
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;main.c: 338: }
  2269                           ;main.c: 341: for (i = 0; strUSART[i] != '\0'; i++) {
  2270                           
  2271                           ; BSR set to: 0
  2272  0015A8  0E00               	movlw	0
  2273  0015AA  6F76               	movwf	_i& (0+255),b	;volatile
  2274  0015AC  D017               	goto	l1178
  2275  0015AE                     
  2276                           ; BSR set to: 0
  2277                           ;main.c: 342: EUSART1_Write(strUSART[i]);
  2278                           
  2279                           ; BSR set to: 0
  2280  0015AE  5176               	movf	_i& (0+255),w,b	;volatile
  2281  0015B0  0D01               	mullw	1
  2282  0015B2  0E78               	movlw	low _strUSART
  2283  0015B4  24F3               	addwf	prodl,w,c
  2284  0015B6  6ED9               	movwf	fsr2l,c
  2285  0015B8  0E00               	movlw	high _strUSART
  2286  0015BA  20F4               	addwfc	prodh,w,c
  2287  0015BC  6EDA               	movwf	fsr2h,c
  2288  0015BE  50DF               	movf	indf2,w,c
  2289  0015C0  EC50  F011         	call	_EUSART1_Write
  2290                           
  2291                           ;main.c: 343: strUSART[i] = '\0';
  2292  0015C4  0100               	movlb	0	; () banked
  2293  0015C6  5176               	movf	_i& (0+255),w,b	;volatile
  2294  0015C8  0D01               	mullw	1
  2295  0015CA  0E78               	movlw	low _strUSART
  2296  0015CC  24F3               	addwf	prodl,w,c
  2297  0015CE  6ED9               	movwf	fsr2l,c
  2298  0015D0  0E00               	movlw	high _strUSART
  2299  0015D2  20F4               	addwfc	prodh,w,c
  2300  0015D4  6EDA               	movwf	fsr2h,c
  2301  0015D6  0E00               	movlw	0
  2302  0015D8  6EDF               	movwf	indf2,c
  2303                           
  2304                           ; BSR set to: 0
  2305  0015DA  2B76               	incf	_i& (0+255),f,b	;volatile
  2306  0015DC                     l1178:
  2307                           
  2308                           ; BSR set to: 0
  2309                           
  2310                           ; BSR set to: 0
  2311  0015DC  5176               	movf	_i& (0+255),w,b	;volatile
  2312  0015DE  0D01               	mullw	1
  2313  0015E0  0E78               	movlw	low _strUSART
  2314  0015E2  24F3               	addwf	prodl,w,c
  2315  0015E4  6ED9               	movwf	fsr2l,c
  2316  0015E6  0E00               	movlw	high _strUSART
  2317  0015E8  20F4               	addwfc	prodh,w,c
  2318  0015EA  6EDA               	movwf	fsr2h,c
  2319  0015EC  50DF               	movf	indf2,w,c
  2320  0015EE  A4D8               	btfss	status,2,c
  2321  0015F0  D7DE               	goto	l1179
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;main.c: 344: }
  2325                           ;main.c: 347: EUSART1_Write('\r');
  2326                           
  2327                           ; BSR set to: 0
  2328  0015F2  0E0D               	movlw	13
  2329  0015F4  EC50  F011         	call	_EUSART1_Write
  2330  0015F8  EC79  F00F         	call	_BusyXLCD	;wreg free
  2331  0015FC  0900               	iorlw	0
  2332  0015FE  A4D8               	btfss	status,2,c
  2333  001600  D7FB               	goto	l1182
  2334                           
  2335                           ;main.c: 350: WriteCmdXLCD(1);
  2336  001602  0E01               	movlw	1
  2337  001604  EC77  F00E         	call	_WriteCmdXLCD
  2338                           
  2339                           ;main.c: 351: escreveLinhaLCD(128, strLCD);
  2340  001608  0E00               	movlw	low _strLCD
  2341  00160A  0101               	movlb	1	; () banked
  2342  00160C  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  2343  00160E  0E01               	movlw	high _strLCD
  2344  001610  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2345  001612  0E80               	movlw	128
  2346  001614  ECE2  F00F         	call	_escreveLinhaLCD
  2347  001618                     l1171:
  2348  001618  B280               	btfsc	3968,1,c	;volatile
  2349  00161A  D7A4               	goto	l1172
  2350  00161C                     u6860:
  2351                           
  2352                           ;main.c: 353: }
  2353                           ;main.c: 355: while (PORTAbits.RA1 == 0);
  2354  00161C  A280               	btfss	3968,1,c	;volatile
  2355  00161E  D7FE               	goto	u6860
  2356                           
  2357                           ;main.c: 357: eusart_Tx_On = 0;
  2358  001620  0E00               	movlw	0
  2359  001622  0100               	movlb	0	; () banked
  2360  001624  6F73               	movwf	_eusart_Tx_On& (0+255),b	;volatile
  2361                           
  2362                           ;main.c: 358: eusart_Tx_En = 0;
  2363  001626  0E00               	movlw	0
  2364  001628  6F74               	movwf	_eusart_Tx_En& (0+255),b	;volatile
  2365                           
  2366                           ; BSR set to: 0
  2367  00162A  0012               	return		;funcret
  2368  00162C                     __end_of_feedbackUSART:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           prodh	equ	0xFF4
  2375                           prodl	equ	0xFF3
  2376                           intcon	equ	0xFF2
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           indf1	equ	0xFE7
  2380                           fsr1h	equ	0xFE2
  2381                           fsr1l	equ	0xFE1
  2382                           indf2	equ	0xFDF
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _EUSART1_Write *****************
  2388 ;; Defined at:
  2389 ;;		line 103 in file "mcc_generated_files/eusart1.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  txData          1    wreg     unsigned char 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  txData          1    0[BANK1 ] unsigned char 
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2403 ;;      Params:         0       0       0       0       0       0       0
  2404 ;;      Locals:         0       0       1       0       0       0       0
  2405 ;;      Temps:          0       0       0       0       0       0       0
  2406 ;;      Totals:         0       0       1       0       0       0       0
  2407 ;;Total ram usage:        1 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    9
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_feedbackUSART
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text5
  2418  0022A0                     __ptext5:
  2419                           	opt stack 0
  2420  0022A0                     _EUSART1_Write:
  2421                           	opt stack 19
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;incstack = 0
  2425                           ;EUSART1_Write@txData stored from wreg
  2426  0022A0  0101               	movlb	1	; () banked
  2427  0022A2  6F34               	movwf	EUSART1_Write@txData& (0+255),b
  2428  0022A4                     
  2429                           ;eusart1.c: 104: while (!PIR1bits.TX1IF);
  2430  0022A4  A89E               	btfss	3998,4,c	;volatile
  2431  0022A6  D7FE               	goto	l5802
  2432                           
  2433                           ;eusart1.c: 105: TXREG1 = txData;
  2434  0022A8  C134  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2435  0022AC  0012               	return		;funcret
  2436  0022AE                     __end_of_EUSART1_Write:
  2437                           	opt stack 0
  2438                           tblptru	equ	0xFF8
  2439                           tblptrh	equ	0xFF7
  2440                           tblptrl	equ	0xFF6
  2441                           tablat	equ	0xFF5
  2442                           prodh	equ	0xFF4
  2443                           prodl	equ	0xFF3
  2444                           intcon	equ	0xFF2
  2445                           postinc0	equ	0xFEE
  2446                           wreg	equ	0xFE8
  2447                           indf1	equ	0xFE7
  2448                           fsr1h	equ	0xFE2
  2449                           fsr1l	equ	0xFE1
  2450                           indf2	equ	0xFDF
  2451                           fsr2h	equ	0xFDA
  2452                           fsr2l	equ	0xFD9
  2453                           status	equ	0xFD8
  2454                           
  2455 ;; *************** function _defTempAlarme *****************
  2456 ;; Defined at:
  2457 ;;		line 240 in file "main.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;  c2              1   39[BANK1 ] unsigned char 
  2462 ;;  c1              1   38[BANK1 ] unsigned char 
  2463 ;;  tmp_Alarme      1   37[BANK1 ] unsigned char 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      void 
  2466 ;; Registers used:
  2467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2473 ;;      Params:         0       0       0       0       0       0       0
  2474 ;;      Locals:         0       0       3       0       0       0       0
  2475 ;;      Temps:          0       0       2       0       0       0       0
  2476 ;;      Totals:         0       0       5       0       0       0       0
  2477 ;;Total ram usage:        5 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:   13
  2480 ;; This function calls:
  2481 ;;		_escreveLinhaLCD
  2482 ;;		_getKBInput
  2483 ;;		_sprintf
  2484 ;; This function is called by:
  2485 ;;		_menu
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text6
  2490  00126C                     __ptext6:
  2491                           	opt stack 0
  2492  00126C                     _defTempAlarme:
  2493                           	opt stack 16
  2494                           
  2495                           ;main.c: 242: char c1, c2;
  2496                           ;main.c: 243: char tmp_Alarme = 0;
  2497                           
  2498                           ;incstack = 0
  2499  00126C  0E00               	movlw	0
  2500  00126E  0101               	movlb	1	; () banked
  2501  001270  6F59               	movwf	defTempAlarme@tmp_Alarme& (0+255),b
  2502  001272                     
  2503                           ; BSR set to: 1
  2504                           ;main.c: 263: escreveLinhaLCD(128, "Introduza o alarme  ");
  2505                           
  2506                           ; BSR set to: 1
  2507  001272  0E9D               	movlw	low STR_20
  2508  001274  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  2509  001276  0E7F               	movlw	high STR_20
  2510  001278  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2511  00127A  0E80               	movlw	128
  2512  00127C  ECE2  F00F         	call	_escreveLinhaLCD
  2513                           
  2514                           ;main.c: 264: escreveLinhaLCD(192, "Temp:    oC         ");
  2515  001280  0E73               	movlw	low STR_21
  2516  001282  0101               	movlb	1	; () banked
  2517  001284  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  2518  001286  0E7F               	movlw	high STR_21
  2519  001288  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2520  00128A  0EC0               	movlw	192
  2521  00128C  ECE2  F00F         	call	_escreveLinhaLCD
  2522                           
  2523                           ;main.c: 266: c1 = getKBInput();
  2524  001290  EC39  F00D         	call	_getKBInput	;wreg free
  2525  001294  0101               	movlb	1	; () banked
  2526  001296  6F5A               	movwf	defTempAlarme@c1& (0+255),b
  2527                           
  2528                           ; BSR set to: 1
  2529                           ;main.c: 267: sprintf(strLCD, "%c", c1);
  2530  001298  0E00               	movlw	low _strLCD
  2531  00129A  6F40               	movwf	sprintf@sp& (0+255),b
  2532  00129C  0E01               	movlw	high _strLCD
  2533  00129E  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  2534  0012A0  0EF9               	movlw	low STR_19
  2535  0012A2  6F42               	movwf	sprintf@f& (0+255),b
  2536  0012A4  0E7F               	movlw	high STR_19
  2537  0012A6  6F43               	movwf	(sprintf@f+1)& (0+255),b
  2538  0012A8  C15A  F144         	movff	defTempAlarme@c1,?_sprintf+4
  2539  0012AC  6B45               	clrf	(?_sprintf+5)& (0+255),b
  2540  0012AE  EC70  F000         	call	_sprintf	;wreg free
  2541                           
  2542                           ;main.c: 268: escreveLinhaLCD(192 + 6, strLCD);
  2543  0012B2  0E00               	movlw	low _strLCD
  2544  0012B4  0101               	movlb	1	; () banked
  2545  0012B6  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  2546  0012B8  0E01               	movlw	high _strLCD
  2547  0012BA  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2548  0012BC  0EC6               	movlw	198
  2549  0012BE  ECE2  F00F         	call	_escreveLinhaLCD
  2550                           
  2551                           ;main.c: 269: c2 = getKBInput();
  2552  0012C2  EC39  F00D         	call	_getKBInput	;wreg free
  2553  0012C6  0101               	movlb	1	; () banked
  2554  0012C8  6F5B               	movwf	defTempAlarme@c2& (0+255),b
  2555                           
  2556                           ; BSR set to: 1
  2557                           ;main.c: 270: sprintf(strLCD, "%c", c2);
  2558  0012CA  0E00               	movlw	low _strLCD
  2559  0012CC  6F40               	movwf	sprintf@sp& (0+255),b
  2560  0012CE  0E01               	movlw	high _strLCD
  2561  0012D0  6F41               	movwf	(sprintf@sp+1)& (0+255),b
  2562  0012D2  0EF9               	movlw	low STR_19
  2563  0012D4  6F42               	movwf	sprintf@f& (0+255),b
  2564  0012D6  0E7F               	movlw	high STR_19
  2565  0012D8  6F43               	movwf	(sprintf@f+1)& (0+255),b
  2566  0012DA  C15B  F144         	movff	defTempAlarme@c2,?_sprintf+4
  2567  0012DE  6B45               	clrf	(?_sprintf+5)& (0+255),b
  2568  0012E0  EC70  F000         	call	_sprintf	;wreg free
  2569                           
  2570                           ;main.c: 271: escreveLinhaLCD(192 + 7, strLCD);
  2571  0012E4  0E00               	movlw	low _strLCD
  2572  0012E6  0101               	movlb	1	; () banked
  2573  0012E8  6F37               	movwf	escreveLinhaLCD@texto& (0+255),b
  2574  0012EA  0E01               	movlw	high _strLCD
  2575  0012EC  6F38               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2576  0012EE  0EC7               	movlw	199
  2577  0012F0  ECE2  F00F         	call	_escreveLinhaLCD
  2578                           
  2579                           ;main.c: 273: if (c1 == '*' || c1 == '#' || c2 == '*' || c2 == '#' || c1 == (0) || c2 ==
      +                           (0))
  2580  0012F4  0E2A               	movlw	42
  2581  0012F6  0101               	movlb	1	; () banked
  2582  0012F8  195A               	xorwf	defTempAlarme@c1& (0+255),w,b
  2583  0012FA  B4D8               	btfsc	status,2,c
  2584  0012FC  D012               	goto	u6750
  2585                           
  2586                           ; BSR set to: 1
  2587  0012FE  0E23               	movlw	35
  2588  001300  195A               	xorwf	defTempAlarme@c1& (0+255),w,b
  2589  001302  B4D8               	btfsc	status,2,c
  2590  001304  D00E               	goto	u6750
  2591                           
  2592                           ; BSR set to: 1
  2593  001306  0E2A               	movlw	42
  2594  001308  195B               	xorwf	defTempAlarme@c2& (0+255),w,b
  2595  00130A  B4D8               	btfsc	status,2,c
  2596  00130C  D00A               	goto	u6750
  2597                           
  2598                           ; BSR set to: 1
  2599  00130E  0E23               	movlw	35
  2600  001310  195B               	xorwf	defTempAlarme@c2& (0+255),w,b
  2601  001312  B4D8               	btfsc	status,2,c
  2602  001314  D006               	goto	u6750
  2603                           
  2604                           ; BSR set to: 1
  2605  001316  515A               	movf	defTempAlarme@c1& (0+255),w,b
  2606  001318  B4D8               	btfsc	status,2,c
  2607  00131A  D003               	goto	u6750
  2608                           
  2609                           ; BSR set to: 1
  2610  00131C  515B               	movf	defTempAlarme@c2& (0+255),w,b
  2611  00131E  A4D8               	btfss	status,2,c
  2612  001320  D002               	goto	l1128
  2613  001322                     u6750:
  2614                           
  2615                           ; BSR set to: 1
  2616                           ;main.c: 274: tmp_Alarme = 0;
  2617                           
  2618                           ; BSR set to: 1
  2619  001322  0E00               	movlw	0
  2620  001324  6F59               	movwf	defTempAlarme@tmp_Alarme& (0+255),b
  2621  001326                     l1128:
  2622                           
  2623                           ; BSR set to: 1
  2624                           ;main.c: 276: c1 = c1 - '0';
  2625                           
  2626                           ; BSR set to: 1
  2627  001326  515A               	movf	defTempAlarme@c1& (0+255),w,b
  2628  001328  0FD0               	addlw	208
  2629  00132A  6F5A               	movwf	defTempAlarme@c1& (0+255),b
  2630                           
  2631                           ; BSR set to: 1
  2632                           ;main.c: 277: c2 = c2 - '0';
  2633  00132C  515B               	movf	defTempAlarme@c2& (0+255),w,b
  2634  00132E  0FD0               	addlw	208
  2635  001330  6F5B               	movwf	defTempAlarme@c2& (0+255),b
  2636                           
  2637                           ; BSR set to: 1
  2638                           ;main.c: 278: tmp_Alarme = 10 * c1 + c2;
  2639  001332  515A               	movf	defTempAlarme@c1& (0+255),w,b
  2640  001334  0D0A               	mullw	10
  2641  001336  50F3               	movf	prodl,w,c
  2642  001338  255B               	addwf	defTempAlarme@c2& (0+255),w,b
  2643  00133A  6F59               	movwf	defTempAlarme@tmp_Alarme& (0+255),b
  2644                           
  2645                           ; BSR set to: 1
  2646                           ;main.c: 280: } while (tmp_Alarme < 10 || tmp_Alarme > 40);
  2647  00133C  0E09               	movlw	9
  2648  00133E  6559               	cpfsgt	defTempAlarme@tmp_Alarme& (0+255),b
  2649  001340  D798               	goto	l1127
  2650                           
  2651                           ; BSR set to: 1
  2652  001342  0E29               	movlw	41
  2653  001344  6159               	cpfslt	defTempAlarme@tmp_Alarme& (0+255),b
  2654  001346  D795               	goto	l1127
  2655                           
  2656                           ; BSR set to: 1
  2657                           ;main.c: 282: tempAlarme = tmp_Alarme;
  2658  001348  C159  F047         	movff	defTempAlarme@tmp_Alarme,_tempAlarme	;volatile
  2659                           
  2660                           ; BSR set to: 1
  2661                           ;main.c: 284: _delay((unsigned long)((500)*(6000000/4000.0)));
  2662  00134C  0E04               	movlw	4
  2663  00134E  0101               	movlb	1	; () banked
  2664  001350  6F58               	movwf	(??_defTempAlarme+1)& (0+255),b
  2665  001352  0ECF               	movlw	207
  2666  001354  6F57               	movwf	??_defTempAlarme& (0+255),b
  2667  001356  0E01               	movlw	1
  2668  001358                     u7487:
  2669  001358  2EE8               	decfsz	wreg,f,c
  2670  00135A  D7FE               	bra	u7487
  2671  00135C  2F57               	decfsz	??_defTempAlarme& (0+255),f,b
  2672  00135E  D7FC               	bra	u7487
  2673  001360  2F58               	decfsz	(??_defTempAlarme+1)& (0+255),f,b
  2674  001362  D7FA               	bra	u7487
  2675  001364  D000               	nop2	
  2676  001366  0012               	return		;funcret
  2677  001368                     __end_of_defTempAlarme:
  2678                           	opt stack 0
  2679                           tblptru	equ	0xFF8
  2680                           tblptrh	equ	0xFF7
  2681                           tblptrl	equ	0xFF6
  2682                           tablat	equ	0xFF5
  2683                           prodh	equ	0xFF4
  2684                           prodl	equ	0xFF3
  2685                           intcon	equ	0xFF2
  2686                           postinc0	equ	0xFEE
  2687                           wreg	equ	0xFE8
  2688                           indf1	equ	0xFE7
  2689                           fsr1h	equ	0xFE2
  2690                           fsr1l	equ	0xFE1
  2691                           indf2	equ	0xFDF
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function _sprintf *****************
  2697 ;; Defined at:
  2698 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  sp              2   12[BANK1 ] PTR unsigned char 
  2701 ;;		 -> strLCD(42), i2cWriteBlock(10), strUSART(42), 
  2702 ;;  f               2   14[BANK1 ] PTR const unsigned char 
  2703 ;;		 -> STR_23(3), STR_22(3), STR_19(3), STR_16(4), 
  2704 ;;		 -> STR_15(4), STR_14(15), STR_13(15), STR_12(15), 
  2705 ;;		 -> STR_11(22), STR_10(22), STR_4(3), STR_2(17), 
  2706 ;;		 -> STR_1(23), 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  tmpval          4    0        struct .
  2709 ;;  width           2   32[BANK1 ] int 
  2710 ;;  val             2   30[BANK1 ] unsigned int 
  2711 ;;  len             2   28[BANK1 ] unsigned int 
  2712 ;;  ap              2   26[BANK1 ] PTR void [1]
  2713 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  2714 ;;  cp              2   22[BANK1 ] PTR const unsigned char 
  2715 ;;		 -> sprintf@c(1), 
  2716 ;;  c               1   34[BANK1 ] char 
  2717 ;;  flag            1   25[BANK1 ] unsigned char 
  2718 ;;  prec            1   24[BANK1 ] char 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  2   12[BANK1 ] int 
  2721 ;; Registers used:
  2722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2728 ;;      Params:         0       0       6       0       0       0       0
  2729 ;;      Locals:         0       0      13       0       0       0       0
  2730 ;;      Temps:          0       0       4       0       0       0       0
  2731 ;;      Totals:         0       0      23       0       0       0       0
  2732 ;;Total ram usage:       23 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:   10
  2735 ;; This function calls:
  2736 ;;		___lwdiv
  2737 ;;		___lwmod
  2738 ;;		___wmul
  2739 ;;		_isdigit
  2740 ;; This function is called by:
  2741 ;;		_menu
  2742 ;;		_monitorizacao
  2743 ;;		_testeTeclado
  2744 ;;		_defTempAlarme
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text7
  2749  0000E0                     __ptext7:
  2750                           	opt stack 0
  2751  0000E0                     _sprintf:
  2752                           	opt stack 18
  2753                           
  2754                           ;doprnt.c: 494: va_list ap;
  2755                           ;doprnt.c: 499: signed char c;
  2756                           ;doprnt.c: 501: int width;
  2757                           ;doprnt.c: 506: signed char prec;
  2758                           ;doprnt.c: 508: unsigned char flag;
  2759                           ;doprnt.c: 523: union {
  2760                           ;doprnt.c: 524: unsigned long vd;
  2761                           ;doprnt.c: 525: double integ;
  2762                           ;doprnt.c: 526: } tmpval;
  2763                           ;doprnt.c: 528: unsigned int val;
  2764                           ;doprnt.c: 529: unsigned len;
  2765                           ;doprnt.c: 530: const char * cp;
  2766                           ;doprnt.c: 533: *ap = __va_start();
  2767                           
  2768                           ;incstack = 0
  2769  0000E0  0E44               	movlw	low (?_sprintf+4)
  2770  0000E2  0101               	movlb	1	; () banked
  2771  0000E4  6F4E               	movwf	sprintf@ap& (0+255),b
  2772  0000E6  0E01               	movlw	high (?_sprintf+4)
  2773  0000E8  6F4F               	movwf	(sprintf@ap+1)& (0+255),b
  2774                           
  2775                           ;doprnt.c: 536: while(c = *f++) {
  2776  0000EA  D159               	goto	u6160
  2777  0000EC                     
  2778                           ; BSR set to: 1
  2779                           ;doprnt.c: 538: if(c != '%')
  2780                           
  2781                           ; BSR set to: 1
  2782  0000EC  0E25               	movlw	37
  2783  0000EE  1956               	xorwf	sprintf@c& (0+255),w,b
  2784  0000F0  B4D8               	btfsc	status,2,c
  2785  0000F2  D009               	goto	l1201
  2786                           
  2787                           ; BSR set to: 1
  2788                           ;doprnt.c: 540: {
  2789                           ;doprnt.c: 541: ((*sp++ = (c)));
  2790  0000F4  C140  FFD9         	movff	sprintf@sp,fsr2l
  2791  0000F8  C141  FFDA         	movff	sprintf@sp+1,fsr2h
  2792  0000FC  C156  FFDF         	movff	sprintf@c,indf2
  2793                           
  2794                           ; BSR set to: 1
  2795  000100  4B40               	infsnz	sprintf@sp& (0+255),f,b
  2796  000102  2B41               	incf	(sprintf@sp+1)& (0+255),f,b
  2797                           
  2798                           ;doprnt.c: 542: continue;
  2799  000104  D14C               	goto	u6160
  2800  000106                     l1201:
  2801                           
  2802                           ; BSR set to: 1
  2803                           ;doprnt.c: 543: }
  2804                           ;doprnt.c: 546: width = 0;
  2805                           
  2806                           ; BSR set to: 1
  2807  000106  0E00               	movlw	0
  2808  000108  6F55               	movwf	(sprintf@width+1)& (0+255),b
  2809  00010A  0E00               	movlw	0
  2810  00010C  6F54               	movwf	sprintf@width& (0+255),b
  2811                           
  2812                           ;doprnt.c: 548: flag = 0;
  2813  00010E  0E00               	movlw	0
  2814  000110  6F4D               	movwf	sprintf@flag& (0+255),b
  2815                           
  2816                           ; BSR set to: 1
  2817                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2818  000112  C142  FFF6         	movff	sprintf@f,tblptrl
  2819  000116  C143  FFF7         	movff	sprintf@f+1,tblptrh
  2820  00011A                     	if	0	;tblptru may be non-zero
  2821  00011A                     	endif
  2822  00011A                     	if	0	;tblptru may be non-zero
  2823  00011A                     	endif
  2824  00011A  0008               	tblrd		*
  2825  00011C  50F5               	movf	tablat,w,c
  2826  00011E  EC89  F010         	call	_isdigit
  2827  000122  A0D8               	btfss	status,0,c
  2828  000124  D082               	goto	l1205
  2829                           
  2830                           ;doprnt.c: 598: width = 0;
  2831  000126  0E00               	movlw	0
  2832  000128  0101               	movlb	1	; () banked
  2833  00012A  6F55               	movwf	(sprintf@width+1)& (0+255),b
  2834  00012C  0E00               	movlw	0
  2835  00012E  6F54               	movwf	sprintf@width& (0+255),b
  2836  000130                     
  2837                           ;doprnt.c: 600: width *= 10;
  2838                           
  2839                           ; BSR set to: 1
  2840  000130  C154  F134         	movff	sprintf@width,___wmul@multiplier
  2841  000134  C155  F135         	movff	sprintf@width+1,___wmul@multiplier+1
  2842  000138  0E00               	movlw	0
  2843  00013A  0101               	movlb	1	; () banked
  2844  00013C  6F37               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2845  00013E  0E0A               	movlw	10
  2846  000140  6F36               	movwf	___wmul@multiplicand& (0+255),b
  2847  000142  EC50  F010         	call	___wmul	;wreg free
  2848  000146  C134  F154         	movff	?___wmul,sprintf@width
  2849  00014A  C135  F155         	movff	?___wmul+1,sprintf@width+1
  2850                           
  2851                           ;doprnt.c: 601: width += *f++ - '0';
  2852  00014E  0ED0               	movlw	208
  2853  000150  0101               	movlb	1	; () banked
  2854  000152  6F46               	movwf	??_sprintf& (0+255),b
  2855  000154  0EFF               	movlw	255
  2856  000156  6F47               	movwf	(??_sprintf+1)& (0+255),b
  2857  000158  C142  FFF6         	movff	sprintf@f,tblptrl
  2858  00015C  C143  FFF7         	movff	sprintf@f+1,tblptrh
  2859  000160                     	if	0	;tblptru may be non-zero
  2860  000160                     	endif
  2861  000160                     	if	0	;tblptru may be non-zero
  2862  000160                     	endif
  2863  000160  0008               	tblrd		*
  2864  000162  50F5               	movf	tablat,w,c
  2865  000164  6F48               	movwf	(??_sprintf+2)& (0+255),b
  2866  000166  6B49               	clrf	(??_sprintf+3)& (0+255),b
  2867  000168  5146               	movf	??_sprintf& (0+255),w,b
  2868  00016A  2748               	addwf	(??_sprintf+2)& (0+255),f,b
  2869  00016C  5147               	movf	(??_sprintf+1)& (0+255),w,b
  2870  00016E  2349               	addwfc	(??_sprintf+3)& (0+255),f,b
  2871  000170  5148               	movf	(??_sprintf+2)& (0+255),w,b
  2872  000172  2754               	addwf	sprintf@width& (0+255),f,b
  2873  000174  5149               	movf	(??_sprintf+3)& (0+255),w,b
  2874  000176  2355               	addwfc	(sprintf@width+1)& (0+255),f,b
  2875                           
  2876                           ; BSR set to: 1
  2877  000178  4B42               	infsnz	sprintf@f& (0+255),f,b
  2878  00017A  2B43               	incf	(sprintf@f+1)& (0+255),f,b
  2879                           
  2880                           ; BSR set to: 1
  2881                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2882  00017C  C142  FFF6         	movff	sprintf@f,tblptrl
  2883  000180  C143  FFF7         	movff	sprintf@f+1,tblptrh
  2884  000184                     	if	0	;tblptru may be non-zero
  2885  000184                     	endif
  2886  000184                     	if	0	;tblptru may be non-zero
  2887  000184                     	endif
  2888  000184  0008               	tblrd		*
  2889  000186  50F5               	movf	tablat,w,c
  2890  000188  EC89  F010         	call	_isdigit
  2891  00018C  A0D8               	btfss	status,0,c
  2892  00018E  D04D               	goto	l1205
  2893  000190  D7CF               	goto	l1203
  2894  000192                     
  2895                           ;doprnt.c: 757: if(width > len)
  2896  000192  0101               	movlb	1	; () banked
  2897  000194  5154               	movf	sprintf@width& (0+255),w,b
  2898  000196  5D50               	subwf	sprintf@len& (0+255),w,b
  2899  000198  5155               	movf	(sprintf@width+1)& (0+255),w,b
  2900  00019A  5951               	subwfb	(sprintf@len+1)& (0+255),w,b
  2901  00019C  B0D8               	btfsc	status,0,c
  2902  00019E  D005               	goto	l1212
  2903                           
  2904                           ; BSR set to: 1
  2905                           ;doprnt.c: 758: width -= len;
  2906  0001A0  5150               	movf	sprintf@len& (0+255),w,b
  2907  0001A2  5F54               	subwf	sprintf@width& (0+255),f,b
  2908  0001A4  5151               	movf	(sprintf@len+1)& (0+255),w,b
  2909  0001A6  5B55               	subwfb	(sprintf@width+1)& (0+255),f,b
  2910  0001A8  D00D               	goto	l1214
  2911  0001AA                     l1212:
  2912                           
  2913                           ; BSR set to: 1
  2914                           ;doprnt.c: 759: else
  2915                           ;doprnt.c: 760: width = 0;
  2916                           
  2917                           ; BSR set to: 1
  2918  0001AA  0E00               	movlw	0
  2919  0001AC  6F55               	movwf	(sprintf@width+1)& (0+255),b
  2920  0001AE  0E00               	movlw	0
  2921  0001B0  6F54               	movwf	sprintf@width& (0+255),b
  2922                           
  2923                           ; BSR set to: 1
  2924                           ;doprnt.c: 764: while(width--)
  2925  0001B2  D008               	goto	l1214
  2926  0001B4                     l5710:
  2927                           
  2928                           ; BSR set to: 1
  2929                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2930  0001B4  C140  FFD9         	movff	sprintf@sp,fsr2l
  2931  0001B8  C141  FFDA         	movff	sprintf@sp+1,fsr2h
  2932  0001BC  0E20               	movlw	32
  2933  0001BE  6EDF               	movwf	indf2,c
  2934                           
  2935                           ; BSR set to: 1
  2936  0001C0  4B40               	infsnz	sprintf@sp& (0+255),f,b
  2937  0001C2  2B41               	incf	(sprintf@sp+1)& (0+255),f,b
  2938  0001C4                     l1214:
  2939                           
  2940                           ; BSR set to: 1
  2941                           
  2942                           ; BSR set to: 1
  2943  0001C4  0754               	decf	sprintf@width& (0+255),f,b
  2944  0001C6  A0D8               	btfss	status,0,c
  2945  0001C8  0755               	decf	(sprintf@width+1)& (0+255),f,b
  2946  0001CA  2954               	incf	sprintf@width& (0+255),w,b
  2947  0001CC  E1F3               	bnz	l5710
  2948  0001CE  2955               	incf	(sprintf@width+1)& (0+255),w,b
  2949  0001D0  B4D8               	btfsc	status,2,c
  2950  0001D2  D00F               	goto	l1217
  2951  0001D4  D7EF               	goto	l1215
  2952  0001D6                     l5716:
  2953                           
  2954                           ; BSR set to: 1
  2955                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2956  0001D6  C14A  FFD9         	movff	sprintf@cp,fsr2l
  2957  0001DA  C14B  FFDA         	movff	sprintf@cp+1,fsr2h
  2958  0001DE  C140  FFE1         	movff	sprintf@sp,fsr1l
  2959  0001E2  C141  FFE2         	movff	sprintf@sp+1,fsr1h
  2960  0001E6  CFDF FFE7          	movff	indf2,indf1
  2961                           
  2962                           ; BSR set to: 1
  2963  0001EA  4B4A               	infsnz	sprintf@cp& (0+255),f,b
  2964  0001EC  2B4B               	incf	(sprintf@cp+1)& (0+255),f,b
  2965                           
  2966                           ; BSR set to: 1
  2967  0001EE  4B40               	infsnz	sprintf@sp& (0+255),f,b
  2968  0001F0  2B41               	incf	(sprintf@sp+1)& (0+255),f,b
  2969  0001F2                     l1217:
  2970                           
  2971                           ; BSR set to: 1
  2972                           
  2973                           ; BSR set to: 1
  2974  0001F2  0750               	decf	sprintf@len& (0+255),f,b
  2975  0001F4  A0D8               	btfss	status,0,c
  2976  0001F6  0751               	decf	(sprintf@len+1)& (0+255),f,b
  2977  0001F8  2950               	incf	sprintf@len& (0+255),w,b
  2978  0001FA  E1ED               	bnz	l5716
  2979  0001FC  2951               	incf	(sprintf@len+1)& (0+255),w,b
  2980  0001FE  B4D8               	btfsc	status,2,c
  2981  000200  D0CE               	goto	u6160
  2982  000202  D7E9               	goto	l1218
  2983  000204                     
  2984                           ; BSR set to: 1
  2985                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2986                           
  2987                           ; BSR set to: 1
  2988  000204  C14E  FFD9         	movff	sprintf@ap,fsr2l
  2989  000208  C14F  FFDA         	movff	sprintf@ap+1,fsr2h
  2990  00020C  50DF               	movf	indf2,w,c
  2991  00020E  6F56               	movwf	sprintf@c& (0+255),b
  2992                           
  2993                           ; BSR set to: 1
  2994  000210  0E02               	movlw	2
  2995  000212  274E               	addwf	sprintf@ap& (0+255),f,b
  2996  000214  0E00               	movlw	0
  2997  000216  234F               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2998  000218                     
  2999                           ; BSR set to: 1
  3000                           ;doprnt.c: 805: cp = (char *)&c;
  3001                           
  3002                           ; BSR set to: 1
  3003  000218  0E56               	movlw	low sprintf@c
  3004  00021A  6F4A               	movwf	sprintf@cp& (0+255),b
  3005  00021C  0E01               	movlw	high sprintf@c
  3006  00021E  6F4B               	movwf	(sprintf@cp+1)& (0+255),b
  3007                           
  3008                           ; BSR set to: 1
  3009                           ;doprnt.c: 806: len = 1;
  3010  000220  0E00               	movlw	0
  3011  000222  6F51               	movwf	(sprintf@len+1)& (0+255),b
  3012  000224  0E01               	movlw	1
  3013  000226  6F50               	movwf	sprintf@len& (0+255),b
  3014                           
  3015                           ;doprnt.c: 807: goto dostring;
  3016  000228  D7B4               	goto	l1211
  3017  00022A                     l1205:
  3018                           
  3019                           ; BSR set to: 1
  3020  00022A  C142  FFF6         	movff	sprintf@f,tblptrl
  3021  00022E  C143  FFF7         	movff	sprintf@f+1,tblptrh
  3022  000232  0101               	movlb	1	; () banked
  3023  000234  4B42               	infsnz	sprintf@f& (0+255),f,b
  3024  000236  2B43               	incf	(sprintf@f+1)& (0+255),f,b
  3025  000238                     	if	0	;tblptru may be non-zero
  3026  000238                     	endif
  3027  000238                     	if	0	;tblptru may be non-zero
  3028  000238                     	endif
  3029  000238  0008               	tblrd		*
  3030  00023A  CFF5 F156          	movff	tablat,sprintf@c
  3031  00023E  5156               	movf	sprintf@c& (0+255),w,b
  3032                           
  3033                           ; Switch size 1, requested type "space"
  3034                           ; Number of cases is 4, Range of values is 0 to 105
  3035                           ; switch strategies available:
  3036                           ; Name         Instructions Cycles
  3037                           ; simple_byte           13     7 (average)
  3038                           ;	Chosen strategy is simple_byte
  3039  000240  0A00               	xorlw	0	; case 0
  3040  000242  B4D8               	btfsc	status,2,c
  3041  000244  D0B8               	goto	u6170
  3042  000246  0A63               	xorlw	99	; case 99
  3043  000248  B4D8               	btfsc	status,2,c
  3044  00024A  D7DC               	goto	l1220
  3045  00024C  0A07               	xorlw	7	; case 100
  3046  00024E  B4D8               	btfsc	status,2,c
  3047  000250  D003               	goto	l1210
  3048  000252  0A0D               	xorlw	13	; case 105
  3049  000254  A4D8               	btfss	status,2,c
  3050  000256  D7E0               	goto	l1221
  3051  000258                     l1210:
  3052                           
  3053                           ;doprnt.c: 1253: {
  3054                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3055                           
  3056                           ; BSR set to: 1
  3057  000258  C14E  FFD9         	movff	sprintf@ap,fsr2l
  3058  00025C  C14F  FFDA         	movff	sprintf@ap+1,fsr2h
  3059  000260  CFDE F152          	movff	postinc2,sprintf@val
  3060  000264  CFDD F153          	movff	postdec2,sprintf@val+1
  3061  000268  0E02               	movlw	2
  3062  00026A  0101               	movlb	1	; () banked
  3063  00026C  274E               	addwf	sprintf@ap& (0+255),f,b
  3064  00026E  0E00               	movlw	0
  3065  000270  234F               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3066                           
  3067                           ; BSR set to: 1
  3068                           ;doprnt.c: 1261: if((int)val < 0) {
  3069  000272  AF53               	btfss	(sprintf@val+1)& (0+255),7,b
  3070  000274  D006               	goto	l1222
  3071                           
  3072                           ; BSR set to: 1
  3073                           ;doprnt.c: 1262: flag |= 0x03;
  3074  000276  0E03               	movlw	3
  3075  000278  134D               	iorwf	sprintf@flag& (0+255),f,b
  3076                           
  3077                           ; BSR set to: 1
  3078                           ;doprnt.c: 1263: val = -val;
  3079  00027A  6D52               	negf	sprintf@val& (0+255),b
  3080  00027C  1F53               	comf	(sprintf@val+1)& (0+255),f,b
  3081  00027E  B0D8               	btfsc	status,0,c
  3082  000280  2B53               	incf	(sprintf@val+1)& (0+255),f,b
  3083  000282                     l1222:
  3084                           
  3085                           ; BSR set to: 1
  3086                           ;doprnt.c: 1264: }
  3087                           ;doprnt.c: 1266: }
  3088                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3089                           
  3090                           ; BSR set to: 1
  3091  000282  0E01               	movlw	1
  3092  000284  6F56               	movwf	sprintf@c& (0+255),b
  3093  000286                     l5748:
  3094                           
  3095                           ; BSR set to: 1
  3096  000286  0E05               	movlw	5
  3097  000288  1956               	xorwf	sprintf@c& (0+255),w,b
  3098  00028A  B4D8               	btfsc	status,2,c
  3099  00028C  D012               	goto	u6090
  3100                           
  3101                           ; BSR set to: 1
  3102                           ;doprnt.c: 1306: if(val < dpowers[c])
  3103                           
  3104                           ; BSR set to: 1
  3105                           
  3106                           ; BSR set to: 1
  3107  00028E  5156               	movf	sprintf@c& (0+255),w,b
  3108  000290  0D02               	mullw	2
  3109  000292  0EB9               	movlw	low _dpowers
  3110  000294  24F3               	addwf	prodl,w,c
  3111  000296  6EF6               	movwf	tblptrl,c
  3112  000298  0E7E               	movlw	high _dpowers
  3113  00029A  20F4               	addwfc	prodh,w,c
  3114  00029C  6EF7               	movwf	tblptrh,c
  3115  00029E                     	if	0	;There are less than 3 active tblptr bytes
  3116  00029E                     	endif
  3117  00029E  0009               	tblrd		*+
  3118  0002A0  50F5               	movf	tablat,w,c
  3119  0002A2  5D52               	subwf	sprintf@val& (0+255),w,b
  3120  0002A4  0009               	tblrd		*+
  3121  0002A6  50F5               	movf	tablat,w,c
  3122  0002A8  5953               	subwfb	(sprintf@val+1)& (0+255),w,b
  3123  0002AA  A0D8               	btfss	status,0,c
  3124  0002AC  D002               	goto	u6090
  3125                           
  3126                           ; BSR set to: 1
  3127                           
  3128                           ; BSR set to: 1
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;doprnt.c: 1307: break;
  3132  0002AE  2B56               	incf	sprintf@c& (0+255),f,b
  3133  0002B0  D7EA               	goto	l5748
  3134  0002B2                     u6090:
  3135                           
  3136                           ; BSR set to: 1
  3137                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3138                           
  3139                           ; BSR set to: 1
  3140  0002B2  5154               	movf	sprintf@width& (0+255),w,b
  3141  0002B4  1155               	iorwf	(sprintf@width+1)& (0+255),w,b
  3142  0002B6  B4D8               	btfsc	status,2,c
  3143  0002B8  D009               	goto	l1226
  3144                           
  3145                           ; BSR set to: 1
  3146  0002BA  C14D  F146         	movff	sprintf@flag,??_sprintf
  3147  0002BE  0E03               	movlw	3
  3148  0002C0  1746               	andwf	??_sprintf& (0+255),f,b
  3149  0002C2  B4D8               	btfsc	status,2,c
  3150  0002C4  D003               	goto	l1226
  3151                           
  3152                           ; BSR set to: 1
  3153                           ;doprnt.c: 1346: width--;
  3154  0002C6  0754               	decf	sprintf@width& (0+255),f,b
  3155  0002C8  A0D8               	btfss	status,0,c
  3156  0002CA  0755               	decf	(sprintf@width+1)& (0+255),f,b
  3157  0002CC                     l1226:
  3158                           
  3159                           ; BSR set to: 1
  3160                           ;doprnt.c: 1381: if(width > c)
  3161                           
  3162                           ; BSR set to: 1
  3163  0002CC  0E80               	movlw	128
  3164  0002CE  BF56               	btfsc	sprintf@c& (0+255),7,b
  3165  0002D0  0E7F               	movlw	127
  3166  0002D2  6F46               	movwf	??_sprintf& (0+255),b
  3167  0002D4  5154               	movf	sprintf@width& (0+255),w,b
  3168  0002D6  5D56               	subwf	sprintf@c& (0+255),w,b
  3169  0002D8  5155               	movf	(sprintf@width+1)& (0+255),w,b
  3170  0002DA  0A80               	xorlw	128
  3171  0002DC  5946               	subwfb	??_sprintf& (0+255),w,b
  3172  0002DE  B0D8               	btfsc	status,0,c
  3173  0002E0  D007               	goto	l1227
  3174                           
  3175                           ; BSR set to: 1
  3176                           ;doprnt.c: 1382: width -= c;
  3177  0002E2  5156               	movf	sprintf@c& (0+255),w,b
  3178  0002E4  5F54               	subwf	sprintf@width& (0+255),f,b
  3179  0002E6  0E00               	movlw	0
  3180  0002E8  BF56               	btfsc	sprintf@c& (0+255),7,b
  3181  0002EA  0EFF               	movlw	255
  3182  0002EC  5B55               	subwfb	(sprintf@width+1)& (0+255),f,b
  3183  0002EE  D004               	goto	l1228
  3184  0002F0                     l1227:
  3185                           
  3186                           ; BSR set to: 1
  3187                           ;doprnt.c: 1383: else
  3188                           ;doprnt.c: 1384: width = 0;
  3189                           
  3190                           ; BSR set to: 1
  3191  0002F0  0E00               	movlw	0
  3192  0002F2  6F55               	movwf	(sprintf@width+1)& (0+255),b
  3193  0002F4  0E00               	movlw	0
  3194  0002F6  6F54               	movwf	sprintf@width& (0+255),b
  3195  0002F8                     l1228:
  3196                           
  3197                           ; BSR set to: 1
  3198                           ;doprnt.c: 1422: {
  3199                           ;doprnt.c: 1424: if(width
  3200                           ;doprnt.c: 1428: )
  3201                           
  3202                           ; BSR set to: 1
  3203  0002F8  5154               	movf	sprintf@width& (0+255),w,b
  3204  0002FA  1155               	iorwf	(sprintf@width+1)& (0+255),w,b
  3205  0002FC  B4D8               	btfsc	status,2,c
  3206  0002FE  D00F               	goto	u6140
  3207  000300                     u6130:
  3208                           
  3209                           ; BSR set to: 1
  3210                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3211                           
  3212                           ; BSR set to: 1
  3213                           
  3214                           ;doprnt.c: 1429: do
  3215  000300  C140  FFD9         	movff	sprintf@sp,fsr2l
  3216  000304  C141  FFDA         	movff	sprintf@sp+1,fsr2h
  3217  000308  0E20               	movlw	32
  3218  00030A  6EDF               	movwf	indf2,c
  3219                           
  3220                           ; BSR set to: 1
  3221  00030C  4B40               	infsnz	sprintf@sp& (0+255),f,b
  3222  00030E  2B41               	incf	(sprintf@sp+1)& (0+255),f,b
  3223                           
  3224                           ; BSR set to: 1
  3225                           ;doprnt.c: 1431: while(--width);
  3226  000310  0754               	decf	sprintf@width& (0+255),f,b
  3227  000312  A0D8               	btfss	status,0,c
  3228  000314  0755               	decf	(sprintf@width+1)& (0+255),f,b
  3229  000316  5154               	movf	sprintf@width& (0+255),w,b
  3230  000318  1155               	iorwf	(sprintf@width+1)& (0+255),w,b
  3231  00031A  A4D8               	btfss	status,2,c
  3232  00031C  D7F1               	goto	u6130
  3233  00031E                     u6140:
  3234                           
  3235                           ; BSR set to: 1
  3236                           ;doprnt.c: 1438: if(flag & 0x03)
  3237                           
  3238                           ; BSR set to: 1
  3239                           
  3240                           ; BSR set to: 1
  3241  00031E  C14D  F146         	movff	sprintf@flag,??_sprintf
  3242  000322  0E03               	movlw	3
  3243  000324  1746               	andwf	??_sprintf& (0+255),f,b
  3244  000326  B4D8               	btfsc	status,2,c
  3245  000328  D008               	goto	l1232
  3246                           
  3247                           ; BSR set to: 1
  3248                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3249  00032A  C140  FFD9         	movff	sprintf@sp,fsr2l
  3250  00032E  C141  FFDA         	movff	sprintf@sp+1,fsr2h
  3251  000332  0E2D               	movlw	45
  3252  000334  6EDF               	movwf	indf2,c
  3253                           
  3254                           ; BSR set to: 1
  3255  000336  4B40               	infsnz	sprintf@sp& (0+255),f,b
  3256  000338  2B41               	incf	(sprintf@sp+1)& (0+255),f,b
  3257  00033A                     l1232:
  3258                           
  3259                           ; BSR set to: 1
  3260                           ;doprnt.c: 1469: }
  3261                           ;doprnt.c: 1472: prec = c;
  3262                           
  3263                           ; BSR set to: 1
  3264  00033A  C156  F14C         	movff	sprintf@c,sprintf@prec
  3265                           
  3266                           ;doprnt.c: 1474: while(prec--) {
  3267  00033E  D02B               	goto	l1233
  3268  000340                     
  3269                           ; BSR set to: 1
  3270                           ;doprnt.c: 1478: {
  3271                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3272                           
  3273                           ; BSR set to: 1
  3274  000340  514C               	movf	sprintf@prec& (0+255),w,b
  3275  000342  0D02               	mullw	2
  3276  000344  0EB9               	movlw	low _dpowers
  3277  000346  24F3               	addwf	prodl,w,c
  3278  000348  6EF6               	movwf	tblptrl,c
  3279  00034A  0E7E               	movlw	high _dpowers
  3280  00034C  20F4               	addwfc	prodh,w,c
  3281  00034E  6EF7               	movwf	tblptrh,c
  3282  000350                     	if	0	;There are less than 3 active tblptr bytes
  3283  000350                     	endif
  3284  000350  0009               	tblrd		*+
  3285  000352  CFF5 F136          	movff	tablat,___lwdiv@divisor
  3286  000356  000A               	tblrd		*-
  3287  000358  CFF5 F137          	movff	tablat,___lwdiv@divisor+1
  3288  00035C  C152  F134         	movff	sprintf@val,___lwdiv@dividend
  3289  000360  C153  F135         	movff	sprintf@val+1,___lwdiv@dividend+1
  3290  000364  EC97  F00D         	call	___lwdiv	;wreg free
  3291  000368  C134  F13B         	movff	?___lwdiv,___lwmod@dividend
  3292  00036C  C135  F13C         	movff	?___lwdiv+1,___lwmod@dividend+1
  3293  000370  0E00               	movlw	0
  3294  000372  0101               	movlb	1	; () banked
  3295  000374  6F3E               	movwf	(___lwmod@divisor+1)& (0+255),b
  3296  000376  0E0A               	movlw	10
  3297  000378  6F3D               	movwf	___lwmod@divisor& (0+255),b
  3298  00037A  EC33  F00E         	call	___lwmod	;wreg free
  3299  00037E  0101               	movlb	1	; () banked
  3300  000380  513B               	movf	?___lwmod& (0+255),w,b
  3301  000382  0F30               	addlw	48
  3302  000384  6F56               	movwf	sprintf@c& (0+255),b
  3303                           
  3304                           ; BSR set to: 1
  3305                           ;doprnt.c: 1523: }
  3306                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3307  000386  C140  FFD9         	movff	sprintf@sp,fsr2l
  3308  00038A  C141  FFDA         	movff	sprintf@sp+1,fsr2h
  3309  00038E  C156  FFDF         	movff	sprintf@c,indf2
  3310                           
  3311                           ; BSR set to: 1
  3312  000392  4B40               	infsnz	sprintf@sp& (0+255),f,b
  3313  000394  2B41               	incf	(sprintf@sp+1)& (0+255),f,b
  3314  000396                     l1233:
  3315                           
  3316                           ; BSR set to: 1
  3317                           
  3318                           ; BSR set to: 1
  3319  000396  074C               	decf	sprintf@prec& (0+255),f,b
  3320  000398  294C               	incf	sprintf@prec& (0+255),w,b
  3321  00039A  A4D8               	btfss	status,2,c
  3322  00039C  D7D1               	goto	l1234
  3323  00039E                     u6160:
  3324                           
  3325                           ; BSR set to: 1
  3326                           
  3327                           ; BSR set to: 1
  3328                           
  3329                           ; BSR set to: 1
  3330  00039E  C142  FFF6         	movff	sprintf@f,tblptrl
  3331  0003A2  C143  FFF7         	movff	sprintf@f+1,tblptrh
  3332  0003A6  4B42               	infsnz	sprintf@f& (0+255),f,b
  3333  0003A8  2B43               	incf	(sprintf@f+1)& (0+255),f,b
  3334  0003AA                     	if	0	;tblptru may be non-zero
  3335  0003AA                     	endif
  3336  0003AA                     	if	0	;tblptru may be non-zero
  3337  0003AA                     	endif
  3338  0003AA  0008               	tblrd		*
  3339  0003AC  CFF5 F156          	movff	tablat,sprintf@c
  3340  0003B0  5156               	movf	sprintf@c& (0+255),w,b
  3341  0003B2  A4D8               	btfss	status,2,c
  3342  0003B4  D69B               	goto	l1200
  3343  0003B6                     u6170:
  3344                           
  3345                           ;doprnt.c: 1538: *sp = 0;
  3346                           
  3347                           ; BSR set to: 1
  3348                           
  3349                           ;doprnt.c: 1525: }
  3350                           ;doprnt.c: 1533: }
  3351                           ;doprnt.c: 1535: alldone:
  3352                           
  3353                           ; BSR set to: 1
  3354  0003B6  C140  FFD9         	movff	sprintf@sp,fsr2l
  3355  0003BA  C141  FFDA         	movff	sprintf@sp+1,fsr2h
  3356  0003BE  0E00               	movlw	0
  3357  0003C0  6EDF               	movwf	indf2,c
  3358  0003C2  0012               	return	
  3359  0003C4                     __end_of_sprintf:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           intcon	equ	0xFF2
  3368                           postinc0	equ	0xFEE
  3369                           wreg	equ	0xFE8
  3370                           indf1	equ	0xFE7
  3371                           fsr1h	equ	0xFE2
  3372                           fsr1l	equ	0xFE1
  3373                           indf2	equ	0xFDF
  3374                           postinc2	equ	0xFDE
  3375                           postdec2	equ	0xFDD
  3376                           fsr2h	equ	0xFDA
  3377                           fsr2l	equ	0xFD9
  3378                           status	equ	0xFD8
  3379                           
  3380 ;; *************** function _isdigit *****************
  3381 ;; Defined at:
  3382 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;  c               1    wreg     unsigned char 
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  c               1    2[BANK1 ] unsigned char 
  3387 ;; Return value:  Size  Location     Type
  3388 ;;		None               void
  3389 ;; Registers used:
  3390 ;;		wreg, status,2, status,0
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3396 ;;      Params:         0       0       0       0       0       0       0
  3397 ;;      Locals:         0       0       2       0       0       0       0
  3398 ;;      Temps:          0       0       1       0       0       0       0
  3399 ;;      Totals:         0       0       3       0       0       0       0
  3400 ;;Total ram usage:        3 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    9
  3403 ;; This function calls:
  3404 ;;		Nothing
  3405 ;; This function is called by:
  3406 ;;		_sprintf
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text8
  3411  002112                     __ptext8:
  3412                           	opt stack 0
  3413  002112                     _isdigit:
  3414                           	opt stack 18
  3415                           
  3416                           ;incstack = 0
  3417                           ;isdigit@c stored from wreg
  3418  002112  0101               	movlb	1	; () banked
  3419  002114  6F36               	movwf	isdigit@c& (0+255),b
  3420  002116  0E00               	movlw	0
  3421  002118  0101               	movlb	1	; () banked
  3422  00211A  6F35               	movwf	_isdigit$2679& (0+255),b
  3423                           
  3424                           ; BSR set to: 1
  3425  00211C  0E3A               	movlw	58
  3426  00211E  6136               	cpfslt	isdigit@c& (0+255),b
  3427  002120  D005               	goto	l1567
  3428                           
  3429                           ; BSR set to: 1
  3430  002122  0E2F               	movlw	47
  3431  002124  6536               	cpfsgt	isdigit@c& (0+255),b
  3432  002126  D002               	goto	l1567
  3433                           
  3434                           ; BSR set to: 1
  3435  002128  0E01               	movlw	1
  3436  00212A  6F35               	movwf	_isdigit$2679& (0+255),b
  3437  00212C                     l1567:
  3438                           
  3439                           ; BSR set to: 1
  3440                           
  3441                           ; BSR set to: 1
  3442  00212C  C135  F134         	movff	_isdigit$2679,??_isdigit
  3443  002130  3134               	rrcf	??_isdigit& (0+255),w,b
  3444  002132  0012               	return	
  3445  002134                     __end_of_isdigit:
  3446                           	opt stack 0
  3447                           tblptru	equ	0xFF8
  3448                           tblptrh	equ	0xFF7
  3449                           tblptrl	equ	0xFF6
  3450                           tablat	equ	0xFF5
  3451                           prodh	equ	0xFF4
  3452                           prodl	equ	0xFF3
  3453                           intcon	equ	0xFF2
  3454                           postinc0	equ	0xFEE
  3455                           wreg	equ	0xFE8
  3456                           indf1	equ	0xFE7
  3457                           fsr1h	equ	0xFE2
  3458                           fsr1l	equ	0xFE1
  3459                           indf2	equ	0xFDF
  3460                           postinc2	equ	0xFDE
  3461                           postdec2	equ	0xFDD
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466 ;; *************** function ___wmul *****************
  3467 ;; Defined at:
  3468 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  multiplier      2    0[BANK1 ] unsigned int 
  3471 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  product         2    4[BANK1 ] unsigned int 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  2    0[BANK1 ] unsigned int 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, prodl, prodh
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3483 ;;      Params:         0       0       4       0       0       0       0
  3484 ;;      Locals:         0       0       2       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0
  3486 ;;      Totals:         0       0       6       0       0       0       0
  3487 ;;Total ram usage:        6 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    9
  3490 ;; This function calls:
  3491 ;;		Nothing
  3492 ;; This function is called by:
  3493 ;;		_sprintf
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text9
  3498  0020A0                     __ptext9:
  3499                           	opt stack 0
  3500  0020A0                     ___wmul:
  3501                           	opt stack 18
  3502                           
  3503                           ; BSR set to: 1
  3504                           ;incstack = 0
  3505  0020A0  0101               	movlb	1	; () banked
  3506  0020A2  5134               	movf	___wmul@multiplier& (0+255),w,b
  3507  0020A4  0336               	mulwf	___wmul@multiplicand& (0+255),b
  3508  0020A6  CFF3 F138          	movff	prodl,___wmul@product
  3509  0020AA  CFF4 F139          	movff	prodh,___wmul@product+1
  3510  0020AE  5134               	movf	___wmul@multiplier& (0+255),w,b
  3511  0020B0  0337               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3512  0020B2  50F3               	movf	prodl,w,c
  3513  0020B4  2739               	addwf	(___wmul@product+1)& (0+255),f,b
  3514  0020B6  5135               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3515  0020B8  0336               	mulwf	___wmul@multiplicand& (0+255),b
  3516  0020BA  50F3               	movf	prodl,w,c
  3517  0020BC  2739               	addwf	(___wmul@product+1)& (0+255),f,b
  3518                           
  3519                           ; BSR set to: 1
  3520  0020BE  C138  F134         	movff	___wmul@product,?___wmul
  3521  0020C2  C139  F135         	movff	___wmul@product+1,?___wmul+1
  3522  0020C6  0012               	return	
  3523  0020C8                     __end_of___wmul:
  3524                           	opt stack 0
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           prodh	equ	0xFF4
  3530                           prodl	equ	0xFF3
  3531                           intcon	equ	0xFF2
  3532                           postinc0	equ	0xFEE
  3533                           wreg	equ	0xFE8
  3534                           indf1	equ	0xFE7
  3535                           fsr1h	equ	0xFE2
  3536                           fsr1l	equ	0xFE1
  3537                           indf2	equ	0xFDF
  3538                           postinc2	equ	0xFDE
  3539                           postdec2	equ	0xFDD
  3540                           fsr2h	equ	0xFDA
  3541                           fsr2l	equ	0xFD9
  3542                           status	equ	0xFD8
  3543                           
  3544 ;; *************** function ___lwmod *****************
  3545 ;; Defined at:
  3546 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  dividend        2    7[BANK1 ] unsigned int 
  3549 ;;  divisor         2    9[BANK1 ] unsigned int 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  counter         1   11[BANK1 ] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  2    7[BANK1 ] unsigned int 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         0       0       4       0       0       0       0
  3562 ;;      Locals:         0       0       1       0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0
  3564 ;;      Totals:         0       0       5       0       0       0       0
  3565 ;;Total ram usage:        5 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    9
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_sprintf
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text10
  3576  001C66                     __ptext10:
  3577                           	opt stack 0
  3578  001C66                     ___lwmod:
  3579                           	opt stack 18
  3580                           
  3581                           ; BSR set to: 1
  3582                           ;incstack = 0
  3583  001C66  0101               	movlb	1	; () banked
  3584  001C68  513D               	movf	___lwmod@divisor& (0+255),w,b
  3585  001C6A  113E               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3586  001C6C  B4D8               	btfsc	status,2,c
  3587  001C6E  D018               	goto	l1661
  3588                           
  3589                           ; BSR set to: 1
  3590  001C70  0E01               	movlw	1
  3591  001C72  6F3F               	movwf	___lwmod@counter& (0+255),b
  3592  001C74  D004               	goto	l1656
  3593  001C76                     
  3594                           ; BSR set to: 1
  3595                           
  3596                           ; BSR set to: 1
  3597  001C76  90D8               	bcf	status,0,c
  3598  001C78  373D               	rlcf	___lwmod@divisor& (0+255),f,b
  3599  001C7A  373E               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3600  001C7C  2B3F               	incf	___lwmod@counter& (0+255),f,b
  3601  001C7E                     l1656:
  3602                           
  3603                           ; BSR set to: 1
  3604                           
  3605                           ; BSR set to: 1
  3606  001C7E  AF3E               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3607  001C80  D7FA               	goto	l1657
  3608  001C82                     u5980:
  3609                           
  3610                           ; BSR set to: 1
  3611                           
  3612                           ; BSR set to: 1
  3613                           
  3614                           ; BSR set to: 1
  3615  001C82  513D               	movf	___lwmod@divisor& (0+255),w,b
  3616  001C84  5D3B               	subwf	___lwmod@dividend& (0+255),w,b
  3617  001C86  513E               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3618  001C88  593C               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3619  001C8A  A0D8               	btfss	status,0,c
  3620  001C8C  D004               	goto	l1660
  3621                           
  3622                           ; BSR set to: 1
  3623  001C8E  513D               	movf	___lwmod@divisor& (0+255),w,b
  3624  001C90  5F3B               	subwf	___lwmod@dividend& (0+255),f,b
  3625  001C92  513E               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3626  001C94  5B3C               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3627  001C96                     l1660:
  3628                           
  3629                           ; BSR set to: 1
  3630                           
  3631                           ; BSR set to: 1
  3632  001C96  90D8               	bcf	status,0,c
  3633  001C98  333E               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3634  001C9A  333D               	rrcf	___lwmod@divisor& (0+255),f,b
  3635                           
  3636                           ; BSR set to: 1
  3637  001C9C  2F3F               	decfsz	___lwmod@counter& (0+255),f,b
  3638  001C9E  D7F1               	goto	u5980
  3639  001CA0                     l1661:
  3640                           
  3641                           ; BSR set to: 1
  3642                           
  3643                           ; BSR set to: 1
  3644  001CA0  C13B  F13B         	movff	___lwmod@dividend,?___lwmod
  3645  001CA4  C13C  F13C         	movff	___lwmod@dividend+1,?___lwmod+1
  3646                           
  3647                           ; BSR set to: 1
  3648  001CA8  0012               	return		;funcret
  3649  001CAA                     __end_of___lwmod:
  3650                           	opt stack 0
  3651                           tblptru	equ	0xFF8
  3652                           tblptrh	equ	0xFF7
  3653                           tblptrl	equ	0xFF6
  3654                           tablat	equ	0xFF5
  3655                           prodh	equ	0xFF4
  3656                           prodl	equ	0xFF3
  3657                           intcon	equ	0xFF2
  3658                           postinc0	equ	0xFEE
  3659                           wreg	equ	0xFE8
  3660                           indf1	equ	0xFE7
  3661                           fsr1h	equ	0xFE2
  3662                           fsr1l	equ	0xFE1
  3663                           indf2	equ	0xFDF
  3664                           postinc2	equ	0xFDE
  3665                           postdec2	equ	0xFDD
  3666                           fsr2h	equ	0xFDA
  3667                           fsr2l	equ	0xFD9
  3668                           status	equ	0xFD8
  3669                           
  3670 ;; *************** function ___lwdiv *****************
  3671 ;; Defined at:
  3672 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  dividend        2    0[BANK1 ] unsigned int 
  3675 ;;  divisor         2    2[BANK1 ] unsigned int 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  quotient        2    5[BANK1 ] unsigned int 
  3678 ;;  counter         1    4[BANK1 ] unsigned char 
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  2    0[BANK1 ] unsigned int 
  3681 ;; Registers used:
  3682 ;;		wreg, status,2, status,0
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3688 ;;      Params:         0       0       4       0       0       0       0
  3689 ;;      Locals:         0       0       3       0       0       0       0
  3690 ;;      Temps:          0       0       0       0       0       0       0
  3691 ;;      Totals:         0       0       7       0       0       0       0
  3692 ;;Total ram usage:        7 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    9
  3695 ;; This function calls:
  3696 ;;		Nothing
  3697 ;; This function is called by:
  3698 ;;		_sprintf
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           	psect	text11
  3703  001B2E                     __ptext11:
  3704                           	opt stack 0
  3705  001B2E                     ___lwdiv:
  3706                           	opt stack 18
  3707                           
  3708                           ; BSR set to: 1
  3709                           ;incstack = 0
  3710  001B2E  0E00               	movlw	0
  3711  001B30  0101               	movlb	1	; () banked
  3712  001B32  6F3A               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3713  001B34  0E00               	movlw	0
  3714  001B36  6F39               	movwf	___lwdiv@quotient& (0+255),b
  3715                           
  3716                           ; BSR set to: 1
  3717  001B38  5136               	movf	___lwdiv@divisor& (0+255),w,b
  3718  001B3A  1137               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3719  001B3C  B4D8               	btfsc	status,2,c
  3720  001B3E  D01C               	goto	l1651
  3721                           
  3722                           ; BSR set to: 1
  3723  001B40  0E01               	movlw	1
  3724  001B42  6F38               	movwf	___lwdiv@counter& (0+255),b
  3725  001B44  D004               	goto	l1646
  3726  001B46                     
  3727                           ; BSR set to: 1
  3728                           
  3729                           ; BSR set to: 1
  3730  001B46  90D8               	bcf	status,0,c
  3731  001B48  3736               	rlcf	___lwdiv@divisor& (0+255),f,b
  3732  001B4A  3737               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3733  001B4C  2B38               	incf	___lwdiv@counter& (0+255),f,b
  3734  001B4E                     l1646:
  3735                           
  3736                           ; BSR set to: 1
  3737                           
  3738                           ; BSR set to: 1
  3739  001B4E  AF37               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3740  001B50  D7FA               	goto	l1647
  3741  001B52                     u5950:
  3742                           
  3743                           ; BSR set to: 1
  3744                           
  3745                           ; BSR set to: 1
  3746                           
  3747                           ; BSR set to: 1
  3748  001B52  90D8               	bcf	status,0,c
  3749  001B54  3739               	rlcf	___lwdiv@quotient& (0+255),f,b
  3750  001B56  373A               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3751                           
  3752                           ; BSR set to: 1
  3753  001B58  5136               	movf	___lwdiv@divisor& (0+255),w,b
  3754  001B5A  5D34               	subwf	___lwdiv@dividend& (0+255),w,b
  3755  001B5C  5137               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3756  001B5E  5935               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3757  001B60  A0D8               	btfss	status,0,c
  3758  001B62  D005               	goto	l1650
  3759                           
  3760                           ; BSR set to: 1
  3761  001B64  5136               	movf	___lwdiv@divisor& (0+255),w,b
  3762  001B66  5F34               	subwf	___lwdiv@dividend& (0+255),f,b
  3763  001B68  5137               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3764  001B6A  5B35               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3765                           
  3766                           ; BSR set to: 1
  3767  001B6C  8139               	bsf	___lwdiv@quotient& (0+255),0,b
  3768  001B6E                     l1650:
  3769                           
  3770                           ; BSR set to: 1
  3771                           
  3772                           ; BSR set to: 1
  3773  001B6E  90D8               	bcf	status,0,c
  3774  001B70  3337               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3775  001B72  3336               	rrcf	___lwdiv@divisor& (0+255),f,b
  3776                           
  3777                           ; BSR set to: 1
  3778  001B74  2F38               	decfsz	___lwdiv@counter& (0+255),f,b
  3779  001B76  D7ED               	goto	u5950
  3780  001B78                     l1651:
  3781                           
  3782                           ; BSR set to: 1
  3783                           
  3784                           ; BSR set to: 1
  3785  001B78  C139  F134         	movff	___lwdiv@quotient,?___lwdiv
  3786  001B7C  C13A  F135         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3787                           
  3788                           ; BSR set to: 1
  3789  001B80  0012               	return		;funcret
  3790  001B82                     __end_of___lwdiv:
  3791                           	opt stack 0
  3792                           tblptru	equ	0xFF8
  3793                           tblptrh	equ	0xFF7
  3794                           tblptrl	equ	0xFF6
  3795                           tablat	equ	0xFF5
  3796                           prodh	equ	0xFF4
  3797                           prodl	equ	0xFF3
  3798                           intcon	equ	0xFF2
  3799                           postinc0	equ	0xFEE
  3800                           wreg	equ	0xFE8
  3801                           indf1	equ	0xFE7
  3802                           fsr1h	equ	0xFE2
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _getKBInput *****************
  3812 ;; Defined at:
  3813 ;;		line 288 in file "main.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;		None
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      unsigned char 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3827 ;;      Params:         0       0       0       0       0       0       0
  3828 ;;      Locals:         0       0       0       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0       0       0
  3830 ;;      Totals:         0       0       0       0       0       0       0
  3831 ;;Total ram usage:        0 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    9
  3834 ;; This function calls:
  3835 ;;		Nothing
  3836 ;; This function is called by:
  3837 ;;		_testeTeclado
  3838 ;;		_defTempAlarme
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text12
  3843  001A72                     __ptext12:
  3844                           	opt stack 0
  3845  001A72                     _getKBInput:
  3846                           	opt stack 19
  3847                           
  3848                           ; BSR set to: 1
  3849                           ;incstack = 0
  3850                           ;main.c: 290: do { LATBbits.LATB3 = 1; } while(0);
  3851  001A72  868A               	bsf	3978,3,c	;volatile
  3852  001A74                     
  3853                           ;main.c: 294: if (LATBbits.LATB3 == 1 && WrEnFl == 0) {
  3854                           
  3855                           ;main.c: 292: do {
  3856  001A74  A68A               	btfss	3978,3,c	;volatile
  3857  001A76  D005               	goto	l1142
  3858  001A78  5039               	movf	_WrEnFl,w,c	;volatile
  3859  001A7A  A4D8               	btfss	status,2,c
  3860  001A7C  D002               	goto	l1142
  3861                           
  3862                           ;main.c: 295: do { LATBbits.LATB3 = 0; } while(0);
  3863  001A7E  968A               	bcf	3978,3,c	;volatile
  3864                           
  3865                           ;main.c: 296: do { LATBbits.LATB4 = 1; } while(0);
  3866  001A80  888A               	bsf	3978,4,c	;volatile
  3867  001A82                     l1142:
  3868                           
  3869                           ;main.c: 297: }
  3870                           ;main.c: 298: if (LATBbits.LATB4 == 1 && WrEnFl == 0) {
  3871  001A82  A88A               	btfss	3978,4,c	;volatile
  3872  001A84  D005               	goto	l1147
  3873  001A86  5039               	movf	_WrEnFl,w,c	;volatile
  3874  001A88  A4D8               	btfss	status,2,c
  3875  001A8A  D002               	goto	l1147
  3876                           
  3877                           ;main.c: 299: do { LATBbits.LATB4 = 0; } while(0);
  3878  001A8C  988A               	bcf	3978,4,c	;volatile
  3879                           
  3880                           ;main.c: 300: do { LATBbits.LATB5 = 1; } while(0);
  3881  001A8E  8A8A               	bsf	3978,5,c	;volatile
  3882  001A90                     l1147:
  3883                           
  3884                           ;main.c: 301: }
  3885                           ;main.c: 302: if (LATBbits.LATB5 == 1 && WrEnFl == 0) {
  3886  001A90  AA8A               	btfss	3978,5,c	;volatile
  3887  001A92  D005               	goto	l1152
  3888  001A94  5039               	movf	_WrEnFl,w,c	;volatile
  3889  001A96  A4D8               	btfss	status,2,c
  3890  001A98  D002               	goto	l1152
  3891                           
  3892                           ;main.c: 303: do { LATBbits.LATB5 = 0; } while(0);
  3893  001A9A  9A8A               	bcf	3978,5,c	;volatile
  3894                           
  3895                           ;main.c: 304: do { LATBbits.LATB6 = 1; } while(0);
  3896  001A9C  8C8A               	bsf	3978,6,c	;volatile
  3897  001A9E                     l1152:
  3898                           
  3899                           ;main.c: 305: }
  3900                           ;main.c: 306: if (LATBbits.LATB6 == 1 && WrEnFl == 0) {
  3901  001A9E  AC8A               	btfss	3978,6,c	;volatile
  3902  001AA0  D005               	goto	l1157
  3903  001AA2  5039               	movf	_WrEnFl,w,c	;volatile
  3904  001AA4  A4D8               	btfss	status,2,c
  3905  001AA6  D002               	goto	l1157
  3906                           
  3907                           ;main.c: 307: do { LATBbits.LATB6 = 0; } while(0);
  3908  001AA8  9C8A               	bcf	3978,6,c	;volatile
  3909                           
  3910                           ;main.c: 308: do { LATBbits.LATB3 = 1; } while(0);
  3911  001AAA  868A               	bsf	3978,3,c	;volatile
  3912  001AAC                     l1157:
  3913                           
  3914                           ;main.c: 309: }
  3915                           ;main.c: 311: } while (WrEnFl == 0 && PORTAbits.RA1 != 0);
  3916  001AAC  5039               	movf	_WrEnFl,w,c	;volatile
  3917  001AAE  A4D8               	btfss	status,2,c
  3918  001AB0  D002               	goto	u6300
  3919  001AB2  B280               	btfsc	3968,1,c	;volatile
  3920  001AB4  D7DF               	goto	l1136
  3921  001AB6                     u6300:
  3922                           
  3923                           ;main.c: 312: WrEnFl = 0;
  3924  001AB6  0E00               	movlw	0
  3925  001AB8  6E39               	movwf	_WrEnFl,c	;volatile
  3926  001ABA  A081               	btfss	3969,0,c	;volatile
  3927  001ABC  B281               	btfsc	3969,1,c	;volatile
  3928  001ABE  D7FD               	goto	l1162
  3929  001AC0  B481               	btfsc	3969,2,c	;volatile
  3930  001AC2  D7FB               	goto	l1162
  3931                           
  3932                           ;main.c: 316: if (PORTAbits.RA1 == 0) {
  3933  001AC4  B280               	btfsc	3968,1,c	;volatile
  3934  001AC6  D002               	goto	l1164
  3935                           
  3936                           ;main.c: 317: return (0);
  3937  001AC8  0E00               	movlw	0
  3938  001ACA  0012               	return	
  3939  001ACC                     l1164:
  3940                           
  3941                           ;main.c: 318: }
  3942                           ;main.c: 320: return TeclaTMP;
  3943  001ACC  5041               	movf	_TeclaTMP,w,c	;volatile
  3944  001ACE  0012               	return	
  3945  001AD0                     __end_of_getKBInput:
  3946                           	opt stack 0
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           intcon	equ	0xFF2
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           indf1	equ	0xFE7
  3957                           fsr1h	equ	0xFE2
  3958                           fsr1l	equ	0xFE1
  3959                           indf2	equ	0xFDF
  3960                           postinc2	equ	0xFDE
  3961                           postdec2	equ	0xFDD
  3962                           fsr2h	equ	0xFDA
  3963                           fsr2l	equ	0xFD9
  3964                           status	equ	0xFD8
  3965                           
  3966 ;; *************** function _escreveLinhaLCD *****************
  3967 ;; Defined at:
  3968 ;;		line 104 in file "main.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;  linha           1    wreg     unsigned char 
  3971 ;;  texto           2    3[BANK1 ] PTR unsigned char 
  3972 ;;		 -> STR_21(21), STR_20(21), STR_18(21), STR_17(21), 
  3973 ;;		 -> STR_9(20), STR_8(22), STR_7(22), STR_6(22), 
  3974 ;;		 -> STR_5(22), strLCD(42), STR_3(20), 
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;  linha           1    5[BANK1 ] unsigned char 
  3977 ;; Return value:  Size  Location     Type
  3978 ;;                  1    wreg      void 
  3979 ;; Registers used:
  3980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3986 ;;      Params:         0       0       2       0       0       0       0
  3987 ;;      Locals:         0       0       1       0       0       0       0
  3988 ;;      Temps:          0       0       0       0       0       0       0
  3989 ;;      Totals:         0       0       3       0       0       0       0
  3990 ;;Total ram usage:        3 bytes
  3991 ;; Hardware stack levels used:    1
  3992 ;; Hardware stack levels required when called:   12
  3993 ;; This function calls:
  3994 ;;		_BusyXLCD
  3995 ;;		_WriteCmdXLCD
  3996 ;;		_putsXLCD
  3997 ;; This function is called by:
  3998 ;;		_menu
  3999 ;;		_monitorizacao
  4000 ;;		_testeTeclado
  4001 ;;		_defTempAlarme
  4002 ;;		_feedbackUSART
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text13
  4007  001FC4                     __ptext13:
  4008                           	opt stack 0
  4009  001FC4                     _escreveLinhaLCD:
  4010                           	opt stack 16
  4011                           
  4012                           ;incstack = 0
  4013                           ;escreveLinhaLCD@linha stored from wreg
  4014  001FC4  0101               	movlb	1	; () banked
  4015  001FC6  6F39               	movwf	escreveLinhaLCD@linha& (0+255),b
  4016  001FC8                     
  4017                           ;main.c: 106: while (BusyXLCD());
  4018  001FC8  EC79  F00F         	call	_BusyXLCD	;wreg free
  4019  001FCC  0900               	iorlw	0
  4020  001FCE  A4D8               	btfss	status,2,c
  4021  001FD0  D7FB               	goto	l5806
  4022                           
  4023                           ;main.c: 107: WriteCmdXLCD(linha);
  4024  001FD2  0101               	movlb	1	; () banked
  4025  001FD4  5139               	movf	escreveLinhaLCD@linha& (0+255),w,b
  4026  001FD6  EC77  F00E         	call	_WriteCmdXLCD
  4027  001FDA  EC79  F00F         	call	_BusyXLCD	;wreg free
  4028  001FDE  0900               	iorlw	0
  4029  001FE0  A4D8               	btfss	status,2,c
  4030  001FE2  D7FB               	goto	l1058
  4031                           
  4032                           ;main.c: 109: putsXLCD(texto);
  4033  001FE4  C137  F135         	movff	escreveLinhaLCD@texto,putsXLCD@buffer
  4034  001FE8  C138  F136         	movff	escreveLinhaLCD@texto+1,putsXLCD@buffer+1
  4035  001FEC  EC68  F00D         	call	_putsXLCD	;wreg free
  4036  001FF0  0012               	return		;funcret
  4037  001FF2                     __end_of_escreveLinhaLCD:
  4038                           	opt stack 0
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           intcon	equ	0xFF2
  4046                           postinc0	equ	0xFEE
  4047                           wreg	equ	0xFE8
  4048                           indf1	equ	0xFE7
  4049                           fsr1h	equ	0xFE2
  4050                           fsr1l	equ	0xFE1
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _putsXLCD *****************
  4059 ;; Defined at:
  4060 ;;		line 302 in file "xlcd.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  buffer          2    1[BANK1 ] PTR unsigned char 
  4063 ;;		 -> STR_21(21), STR_20(21), STR_18(21), STR_17(21), 
  4064 ;;		 -> STR_9(20), STR_8(22), STR_7(22), STR_6(22), 
  4065 ;;		 -> STR_5(22), strLCD(42), STR_3(20), 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  1    wreg      void 
  4070 ;; Registers used:
  4071 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4077 ;;      Params:         0       0       2       0       0       0       0
  4078 ;;      Locals:         0       0       0       0       0       0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0
  4080 ;;      Totals:         0       0       2       0       0       0       0
  4081 ;;Total ram usage:        2 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:   11
  4084 ;; This function calls:
  4085 ;;		_BusyXLCD
  4086 ;;		_WriteDataXLCD
  4087 ;; This function is called by:
  4088 ;;		_escreveLinhaLCD
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text14
  4093  001AD0                     __ptext14:
  4094                           	opt stack 0
  4095  001AD0                     _putsXLCD:
  4096                           	opt stack 16
  4097                           
  4098                           ;xlcd.c: 303: while (*buffer)
  4099                           
  4100                           ;incstack = 0
  4101  001AD0  D01A               	goto	l920
  4102  001AD2                     
  4103                           ;xlcd.c: 304: {
  4104                           ;xlcd.c: 305: while (BusyXLCD());
  4105  001AD2  EC79  F00F         	call	_BusyXLCD	;wreg free
  4106  001AD6  0900               	iorlw	0
  4107  001AD8  A4D8               	btfss	status,2,c
  4108  001ADA  D7FB               	goto	l921
  4109                           
  4110                           ;xlcd.c: 306: WriteDataXLCD(*buffer);
  4111  001ADC  C135  FFF6         	movff	putsXLCD@buffer,tblptrl
  4112  001AE0  C136  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  4113  001AE4  6AF8               	clrf	tblptru,c
  4114  001AE6  0E05               	movlw	(high __ramtop+-1)
  4115  001AE8  64F7               	cpfsgt	tblptrh,c
  4116  001AEA  D003               	bra	u5817
  4117  001AEC  0008               	tblrd		*
  4118  001AEE  50F5               	movf	tablat,w,c
  4119  001AF0  D005               	bra	u5810
  4120  001AF2                     u5817:
  4121  001AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
  4122  001AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4123  001AFA  50EF               	movf	indf0,w,c
  4124  001AFC                     u5810:
  4125  001AFC  EC55  F00E         	call	_WriteDataXLCD
  4126                           
  4127                           ;xlcd.c: 307: buffer++;
  4128  001B00  0101               	movlb	1	; () banked
  4129  001B02  4B35               	infsnz	putsXLCD@buffer& (0+255),f,b
  4130  001B04  2B36               	incf	(putsXLCD@buffer+1)& (0+255),f,b
  4131  001B06                     l920:
  4132                           
  4133                           ; BSR set to: 1
  4134  001B06  C135  FFF6         	movff	putsXLCD@buffer,tblptrl
  4135  001B0A  C136  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  4136  001B0E  6AF8               	clrf	tblptru,c
  4137  001B10  0E05               	movlw	(high __ramtop+-1)
  4138  001B12  64F7               	cpfsgt	tblptrh,c
  4139  001B14  D003               	bra	u5827
  4140  001B16  0008               	tblrd		*
  4141  001B18  50F5               	movf	tablat,w,c
  4142  001B1A  D005               	bra	u5820
  4143  001B1C                     u5827:
  4144  001B1C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4145  001B20  CFF7 FFEA          	movff	tblptrh,fsr0h
  4146  001B24  50EF               	movf	indf0,w,c
  4147  001B26                     u5820:
  4148  001B26  0900               	iorlw	0
  4149  001B28  B4D8               	btfsc	status,2,c
  4150  001B2A  0012               	return	
  4151  001B2C  D7D2               	goto	l921
  4152  001B2E                     __end_of_putsXLCD:
  4153                           	opt stack 0
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           indf0	equ	0xFEF
  4162                           postinc0	equ	0xFEE
  4163                           fsr0h	equ	0xFEA
  4164                           fsr0l	equ	0xFE9
  4165                           wreg	equ	0xFE8
  4166                           indf1	equ	0xFE7
  4167                           fsr1h	equ	0xFE2
  4168                           fsr1l	equ	0xFE1
  4169                           indf2	equ	0xFDF
  4170                           postinc2	equ	0xFDE
  4171                           postdec2	equ	0xFDD
  4172                           fsr2h	equ	0xFDA
  4173                           fsr2l	equ	0xFD9
  4174                           status	equ	0xFD8
  4175                           
  4176 ;; *************** function _WriteDataXLCD *****************
  4177 ;; Defined at:
  4178 ;;		line 598 in file "xlcd.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;  data            1    wreg     unsigned char 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  data            1    0[BANK1 ] unsigned char 
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      void 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4192 ;;      Params:         0       0       0       0       0       0       0
  4193 ;;      Locals:         0       0       1       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0
  4195 ;;      Totals:         0       0       1       0       0       0       0
  4196 ;;Total ram usage:        1 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:   10
  4199 ;; This function calls:
  4200 ;;		_DelayFor18TCY
  4201 ;; This function is called by:
  4202 ;;		_putsXLCD
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text15
  4207  001CAA                     __ptext15:
  4208                           	opt stack 0
  4209  001CAA                     _WriteDataXLCD:
  4210                           	opt stack 16
  4211                           
  4212                           ;incstack = 0
  4213                           ;WriteDataXLCD@data stored from wreg
  4214  001CAA  0101               	movlb	1	; () banked
  4215  001CAC  6F34               	movwf	WriteDataXLCD@data& (0+255),b
  4216                           
  4217                           ;xlcd.c: 616: TRISD &= 0xf0;
  4218  001CAE  0EF0               	movlw	240
  4219  001CB0  1695               	andwf	3989,f,c	;volatile
  4220                           
  4221                           ;xlcd.c: 617: PORTD &= 0xf0;
  4222  001CB2  0EF0               	movlw	240
  4223  001CB4  1683               	andwf	3971,f,c	;volatile
  4224                           
  4225                           ;xlcd.c: 618: PORTD |= ((data >> 4)&0x0f);
  4226  001CB6  0101               	movlb	1	; () banked
  4227  001CB8  3934               	swapf	WriteDataXLCD@data& (0+255),w,b
  4228  001CBA  0B0F               	andlw	15
  4229  001CBC  0B0F               	andlw	15
  4230  001CBE  1283               	iorwf	3971,f,c	;volatile
  4231                           
  4232                           ; BSR set to: 1
  4233                           ;xlcd.c: 620: LATDbits.LATD4 = 1;
  4234  001CC0  888C               	bsf	3980,4,c	;volatile
  4235                           
  4236                           ; BSR set to: 1
  4237                           ;xlcd.c: 621: LATDbits.LATD5 = 0;
  4238  001CC2  9A8C               	bcf	3980,5,c	;volatile
  4239                           
  4240                           ; BSR set to: 1
  4241                           ;xlcd.c: 622: DelayFor18TCY();
  4242  001CC4  EC22  F011         	call	_DelayFor18TCY	;wreg free
  4243                           
  4244                           ;xlcd.c: 623: LATDbits.LATD6 = 1;
  4245  001CC8  8C8C               	bsf	3980,6,c	;volatile
  4246                           
  4247                           ;xlcd.c: 624: DelayFor18TCY();
  4248  001CCA  EC22  F011         	call	_DelayFor18TCY	;wreg free
  4249                           
  4250                           ;xlcd.c: 625: LATDbits.LATD6 = 0;
  4251  001CCE  9C8C               	bcf	3980,6,c	;volatile
  4252                           
  4253                           ;xlcd.c: 630: PORTD &= 0xf0;
  4254  001CD0  0EF0               	movlw	240
  4255  001CD2  1683               	andwf	3971,f,c	;volatile
  4256                           
  4257                           ;xlcd.c: 631: PORTD |= (data & 0x0f);
  4258  001CD4  0101               	movlb	1	; () banked
  4259  001CD6  5134               	movf	WriteDataXLCD@data& (0+255),w,b
  4260  001CD8  0B0F               	andlw	15
  4261  001CDA  1283               	iorwf	3971,f,c	;volatile
  4262                           
  4263                           ; BSR set to: 1
  4264                           ;xlcd.c: 633: DelayFor18TCY();
  4265  001CDC  EC22  F011         	call	_DelayFor18TCY	;wreg free
  4266                           
  4267                           ;xlcd.c: 634: LATDbits.LATD6 = 1;
  4268  001CE0  8C8C               	bsf	3980,6,c	;volatile
  4269                           
  4270                           ;xlcd.c: 635: DelayFor18TCY();
  4271  001CE2  EC22  F011         	call	_DelayFor18TCY	;wreg free
  4272                           
  4273                           ;xlcd.c: 636: LATDbits.LATD6 = 0;
  4274  001CE6  9C8C               	bcf	3980,6,c	;volatile
  4275                           
  4276                           ;xlcd.c: 640: TRISD |= 0x0f;
  4277  001CE8  0E0F               	movlw	15
  4278  001CEA  1295               	iorwf	3989,f,c	;volatile
  4279  001CEC  0012               	return	
  4280  001CEE                     __end_of_WriteDataXLCD:
  4281                           	opt stack 0
  4282                           tblptru	equ	0xFF8
  4283                           tblptrh	equ	0xFF7
  4284                           tblptrl	equ	0xFF6
  4285                           tablat	equ	0xFF5
  4286                           prodh	equ	0xFF4
  4287                           prodl	equ	0xFF3
  4288                           intcon	equ	0xFF2
  4289                           indf0	equ	0xFEF
  4290                           postinc0	equ	0xFEE
  4291                           fsr0h	equ	0xFEA
  4292                           fsr0l	equ	0xFE9
  4293                           wreg	equ	0xFE8
  4294                           indf1	equ	0xFE7
  4295                           fsr1h	equ	0xFE2
  4296                           fsr1l	equ	0xFE1
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _SYSTEM_Initialize *****************
  4305 ;; Defined at:
  4306 ;;		line 111 in file "mcc_generated_files/mcc.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;		None
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;		None
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4320 ;;      Params:         0       0       0       0       0       0       0
  4321 ;;      Locals:         0       0       0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0
  4323 ;;      Totals:         0       0       0       0       0       0       0
  4324 ;;Total ram usage:        0 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:   11
  4327 ;; This function calls:
  4328 ;;		_ADC_Initialize
  4329 ;;		_EPWM1_Initialize
  4330 ;;		_EUSART1_Initialize
  4331 ;;		_EXT_INT_Initialize
  4332 ;;		_I2C1_Initialize
  4333 ;;		_INTERRUPT_Initialize
  4334 ;;		_OSCILLATOR_Initialize
  4335 ;;		_PIN_MANAGER_Initialize
  4336 ;;		_TMR0_Initialize
  4337 ;;		_TMR2_Initialize
  4338 ;; This function is called by:
  4339 ;;		_main
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           	psect	text16
  4344  002076                     __ptext16:
  4345                           	opt stack 0
  4346  002076                     _SYSTEM_Initialize:
  4347                           	opt stack 19
  4348                           
  4349                           ;mcc.c: 114: INTERRUPT_Initialize();
  4350                           
  4351                           ;incstack = 0
  4352  002076  EC36  F011         	call	_INTERRUPT_Initialize	;wreg free
  4353                           
  4354                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4355  00207A  EC10  F00E         	call	_PIN_MANAGER_Initialize	;wreg free
  4356                           
  4357                           ;mcc.c: 116: OSCILLATOR_Initialize();
  4358  00207E  EC57  F011         	call	_OSCILLATOR_Initialize	;wreg free
  4359                           
  4360                           ;mcc.c: 117: I2C1_Initialize();
  4361  002082  ECB2  F00F         	call	_I2C1_Initialize	;wreg free
  4362                           
  4363                           ;mcc.c: 118: ADC_Initialize();
  4364  002086  EC0A  F011         	call	_ADC_Initialize	;wreg free
  4365                           
  4366                           ;mcc.c: 119: EPWM1_Initialize();
  4367  00208A  ECDE  F010         	call	_EPWM1_Initialize	;wreg free
  4368                           
  4369                           ;mcc.c: 120: TMR2_Initialize();
  4370  00208E  EC48  F011         	call	_TMR2_Initialize	;wreg free
  4371                           
  4372                           ;mcc.c: 121: EXT_INT_Initialize();
  4373  002092  EC3D  F00F         	call	_EXT_INT_Initialize	;wreg free
  4374                           
  4375                           ;mcc.c: 122: TMR0_Initialize();
  4376  002096  EC5C  F00F         	call	_TMR0_Initialize	;wreg free
  4377                           
  4378                           ;mcc.c: 123: EUSART1_Initialize();
  4379  00209A  ECFD  F010         	call	_EUSART1_Initialize	;wreg free
  4380  00209E  0012               	return		;funcret
  4381  0020A0                     __end_of_SYSTEM_Initialize:
  4382                           	opt stack 0
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           prodh	equ	0xFF4
  4388                           prodl	equ	0xFF3
  4389                           intcon	equ	0xFF2
  4390                           indf0	equ	0xFEF
  4391                           postinc0	equ	0xFEE
  4392                           fsr0h	equ	0xFEA
  4393                           fsr0l	equ	0xFE9
  4394                           wreg	equ	0xFE8
  4395                           indf1	equ	0xFE7
  4396                           fsr1h	equ	0xFE2
  4397                           fsr1l	equ	0xFE1
  4398                           indf2	equ	0xFDF
  4399                           postinc2	equ	0xFDE
  4400                           postdec2	equ	0xFDD
  4401                           fsr2h	equ	0xFDA
  4402                           fsr2l	equ	0xFD9
  4403                           status	equ	0xFD8
  4404                           
  4405 ;; *************** function _TMR2_Initialize *****************
  4406 ;; Defined at:
  4407 ;;		line 61 in file "mcc_generated_files/tmr2.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;		None
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;		None
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  1    wreg      void 
  4414 ;; Registers used:
  4415 ;;		wreg, status,2
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4421 ;;      Params:         0       0       0       0       0       0       0
  4422 ;;      Locals:         0       0       0       0       0       0       0
  4423 ;;      Temps:          0       0       0       0       0       0       0
  4424 ;;      Totals:         0       0       0       0       0       0       0
  4425 ;;Total ram usage:        0 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    9
  4428 ;; This function calls:
  4429 ;;		Nothing
  4430 ;; This function is called by:
  4431 ;;		_SYSTEM_Initialize
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text17
  4436  002290                     __ptext17:
  4437                           	opt stack 0
  4438  002290                     _TMR2_Initialize:
  4439                           	opt stack 20
  4440                           
  4441                           ;tmr2.c: 66: T2CON = 0x02;
  4442                           
  4443                           ;incstack = 0
  4444  002290  0E02               	movlw	2
  4445  002292  6EBA               	movwf	4026,c	;volatile
  4446                           
  4447                           ;tmr2.c: 69: PR2 = 0x95;
  4448  002294  0E95               	movlw	149
  4449  002296  6EBB               	movwf	4027,c	;volatile
  4450                           
  4451                           ;tmr2.c: 72: TMR2 = 0x00;
  4452  002298  0E00               	movlw	0
  4453  00229A  6EBC               	movwf	4028,c	;volatile
  4454                           
  4455                           ;tmr2.c: 75: PIR1bits.TMR2IF = 0;
  4456  00229C  929E               	bcf	3998,1,c	;volatile
  4457  00229E  0012               	return		;funcret
  4458  0022A0                     __end_of_TMR2_Initialize:
  4459                           	opt stack 0
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           prodh	equ	0xFF4
  4465                           prodl	equ	0xFF3
  4466                           intcon	equ	0xFF2
  4467                           indf0	equ	0xFEF
  4468                           postinc0	equ	0xFEE
  4469                           fsr0h	equ	0xFEA
  4470                           fsr0l	equ	0xFE9
  4471                           wreg	equ	0xFE8
  4472                           indf1	equ	0xFE7
  4473                           fsr1h	equ	0xFE2
  4474                           fsr1l	equ	0xFE1
  4475                           indf2	equ	0xFDF
  4476                           postinc2	equ	0xFDE
  4477                           postdec2	equ	0xFDD
  4478                           fsr2h	equ	0xFDA
  4479                           fsr2l	equ	0xFD9
  4480                           status	equ	0xFD8
  4481                           
  4482 ;; *************** function _TMR0_Initialize *****************
  4483 ;; Defined at:
  4484 ;;		line 71 in file "mcc_generated_files/tmr0.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;		None
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;		None
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1    wreg      void 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4498 ;;      Params:         0       0       0       0       0       0       0
  4499 ;;      Locals:         0       0       0       0       0       0       0
  4500 ;;      Temps:          0       0       2       0       0       0       0
  4501 ;;      Totals:         0       0       2       0       0       0       0
  4502 ;;Total ram usage:        2 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:   10
  4505 ;; This function calls:
  4506 ;;		_TMR0_SetInterruptHandler
  4507 ;;		_TMR0_StartTimer
  4508 ;; This function is called by:
  4509 ;;		_SYSTEM_Initialize
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text18
  4514  001EB8                     __ptext18:
  4515                           	opt stack 0
  4516  001EB8                     _TMR0_Initialize:
  4517                           	opt stack 19
  4518                           
  4519                           ;tmr0.c: 75: T0CON = 0x11;
  4520                           
  4521                           ;incstack = 0
  4522  001EB8  0E11               	movlw	17
  4523  001EBA  6ED5               	movwf	4053,c	;volatile
  4524                           
  4525                           ;tmr0.c: 78: TMR0H = 0x48;
  4526  001EBC  0E48               	movlw	72
  4527  001EBE  6ED7               	movwf	4055,c	;volatile
  4528                           
  4529                           ;tmr0.c: 81: TMR0L = 0xE4;
  4530  001EC0  0EE4               	movlw	228
  4531  001EC2  6ED6               	movwf	4054,c	;volatile
  4532                           
  4533                           ;tmr0.c: 84: timer0ReloadVal = ( TMR0H << 8 ) | TMR0L;
  4534  001EC4  50D6               	movf	4054,w,c	;volatile
  4535  001EC6  CFD7 F136          	movff	4055,??_TMR0_Initialize	;volatile
  4536  001ECA  0101               	movlb	1	; () banked
  4537  001ECC  6B37               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  4538  001ECE  C136  F137         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  4539  001ED2  6B36               	clrf	??_TMR0_Initialize& (0+255),b
  4540  001ED4  1136               	iorwf	??_TMR0_Initialize& (0+255),w,b
  4541  001ED6  6E44               	movwf	_timer0ReloadVal,c	;volatile
  4542  001ED8  5137               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  4543  001EDA  6E45               	movwf	_timer0ReloadVal+1,c	;volatile
  4544                           
  4545                           ; BSR set to: 1
  4546                           ;tmr0.c: 87: INTCONbits.TMR0IF = 0;
  4547  001EDC  94F2               	bcf	intcon,2,c	;volatile
  4548                           
  4549                           ; BSR set to: 1
  4550                           ;tmr0.c: 90: INTCONbits.TMR0IE = 1;
  4551  001EDE  8AF2               	bsf	intcon,5,c	;volatile
  4552                           
  4553                           ; BSR set to: 1
  4554                           ;tmr0.c: 93: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  4555  001EE0  0E0C               	movlw	low _TMR0_DefaultInterruptHandler
  4556  001EE2  6F34               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  4557  001EE4  0E23               	movlw	high _TMR0_DefaultInterruptHandler
  4558  001EE6  6F35               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4559  001EE8  EC64  F011         	call	_TMR0_SetInterruptHandler	;wreg free
  4560                           
  4561                           ;tmr0.c: 96: TMR0_StartTimer();
  4562  001EEC  EC7C  F011         	call	_TMR0_StartTimer	;wreg free
  4563  001EF0  0012               	return		;funcret
  4564  001EF2                     __end_of_TMR0_Initialize:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           prodh	equ	0xFF4
  4571                           prodl	equ	0xFF3
  4572                           intcon	equ	0xFF2
  4573                           indf0	equ	0xFEF
  4574                           postinc0	equ	0xFEE
  4575                           fsr0h	equ	0xFEA
  4576                           fsr0l	equ	0xFE9
  4577                           wreg	equ	0xFE8
  4578                           indf1	equ	0xFE7
  4579                           fsr1h	equ	0xFE2
  4580                           fsr1l	equ	0xFE1
  4581                           indf2	equ	0xFDF
  4582                           postinc2	equ	0xFDE
  4583                           postdec2	equ	0xFDD
  4584                           fsr2h	equ	0xFDA
  4585                           fsr2l	equ	0xFD9
  4586                           status	equ	0xFD8
  4587                           
  4588 ;; *************** function _TMR0_StartTimer *****************
  4589 ;; Defined at:
  4590 ;;		line 99 in file "mcc_generated_files/tmr0.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;		None
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;		None
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  1    wreg      void 
  4597 ;; Registers used:
  4598 ;;		None
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4604 ;;      Params:         0       0       0       0       0       0       0
  4605 ;;      Locals:         0       0       0       0       0       0       0
  4606 ;;      Temps:          0       0       0       0       0       0       0
  4607 ;;      Totals:         0       0       0       0       0       0       0
  4608 ;;Total ram usage:        0 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; Hardware stack levels required when called:    9
  4611 ;; This function calls:
  4612 ;;		Nothing
  4613 ;; This function is called by:
  4614 ;;		_TMR0_Initialize
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           	psect	text19
  4619  0022F8                     __ptext19:
  4620                           	opt stack 0
  4621  0022F8                     _TMR0_StartTimer:
  4622                           	opt stack 19
  4623                           
  4624                           ;tmr0.c: 101: T0CONbits.TMR0ON = 1;
  4625                           
  4626                           ;incstack = 0
  4627  0022F8  8ED5               	bsf	4053,7,c	;volatile
  4628  0022FA  0012               	return		;funcret
  4629  0022FC                     __end_of_TMR0_StartTimer:
  4630                           	opt stack 0
  4631                           tblptru	equ	0xFF8
  4632                           tblptrh	equ	0xFF7
  4633                           tblptrl	equ	0xFF6
  4634                           tablat	equ	0xFF5
  4635                           prodh	equ	0xFF4
  4636                           prodl	equ	0xFF3
  4637                           intcon	equ	0xFF2
  4638                           indf0	equ	0xFEF
  4639                           postinc0	equ	0xFEE
  4640                           fsr0h	equ	0xFEA
  4641                           fsr0l	equ	0xFE9
  4642                           wreg	equ	0xFE8
  4643                           indf1	equ	0xFE7
  4644                           fsr1h	equ	0xFE2
  4645                           fsr1l	equ	0xFE1
  4646                           indf2	equ	0xFDF
  4647                           postinc2	equ	0xFDE
  4648                           postdec2	equ	0xFDD
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           
  4653 ;; *************** function _TMR0_SetInterruptHandler *****************
  4654 ;; Defined at:
  4655 ;;		line 188 in file "mcc_generated_files/tmr0.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4658 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4670 ;;      Params:         0       0       2       0       0       0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0
  4673 ;;      Totals:         0       0       2       0       0       0       0
  4674 ;;Total ram usage:        2 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    9
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_TMR0_Initialize
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text20
  4685  0022C8                     __ptext20:
  4686                           	opt stack 0
  4687  0022C8                     _TMR0_SetInterruptHandler:
  4688                           	opt stack 19
  4689                           
  4690                           ;tmr0.c: 189: TMR0_InterruptHandler = InterruptHandler;
  4691                           
  4692                           ;incstack = 0
  4693  0022C8  C134  F0E5         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  4694  0022CC  C135  F0E6         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  4695  0022D0  0012               	return		;funcret
  4696  0022D2                     __end_of_TMR0_SetInterruptHandler:
  4697                           	opt stack 0
  4698                           tblptru	equ	0xFF8
  4699                           tblptrh	equ	0xFF7
  4700                           tblptrl	equ	0xFF6
  4701                           tablat	equ	0xFF5
  4702                           prodh	equ	0xFF4
  4703                           prodl	equ	0xFF3
  4704                           intcon	equ	0xFF2
  4705                           indf0	equ	0xFEF
  4706                           postinc0	equ	0xFEE
  4707                           fsr0h	equ	0xFEA
  4708                           fsr0l	equ	0xFE9
  4709                           wreg	equ	0xFE8
  4710                           indf1	equ	0xFE7
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           postdec2	equ	0xFDD
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _PIN_MANAGER_Initialize *****************
  4721 ;; Defined at:
  4722 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;		None
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;		None
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      void 
  4729 ;; Registers used:
  4730 ;;		wreg, status,2
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4736 ;;      Params:         0       0       0       0       0       0       0
  4737 ;;      Locals:         0       0       0       0       0       0       0
  4738 ;;      Temps:          0       0       0       0       0       0       0
  4739 ;;      Totals:         0       0       0       0       0       0       0
  4740 ;;Total ram usage:        0 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    9
  4743 ;; This function calls:
  4744 ;;		Nothing
  4745 ;; This function is called by:
  4746 ;;		_SYSTEM_Initialize
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text21
  4751  001C20                     __ptext21:
  4752                           	opt stack 0
  4753  001C20                     _PIN_MANAGER_Initialize:
  4754                           	opt stack 20
  4755                           
  4756                           ;pin_manager.c: 57: LATE = 0x00;
  4757                           
  4758                           ;incstack = 0
  4759  001C20  0E00               	movlw	0
  4760  001C22  6E8D               	movwf	3981,c	;volatile
  4761                           
  4762                           ;pin_manager.c: 58: LATD = 0x00;
  4763  001C24  0E00               	movlw	0
  4764  001C26  6E8C               	movwf	3980,c	;volatile
  4765                           
  4766                           ;pin_manager.c: 59: LATA = 0x00;
  4767  001C28  0E00               	movlw	0
  4768  001C2A  6E89               	movwf	3977,c	;volatile
  4769                           
  4770                           ;pin_manager.c: 60: LATB = 0x00;
  4771  001C2C  0E00               	movlw	0
  4772  001C2E  6E8A               	movwf	3978,c	;volatile
  4773                           
  4774                           ;pin_manager.c: 61: LATC = 0x00;
  4775  001C30  0E00               	movlw	0
  4776  001C32  6E8B               	movwf	3979,c	;volatile
  4777                           
  4778                           ;pin_manager.c: 66: TRISE = 0x07;
  4779  001C34  0E07               	movlw	7
  4780  001C36  6E96               	movwf	3990,c	;volatile
  4781                           
  4782                           ;pin_manager.c: 67: TRISA = 0xBF;
  4783  001C38  0EBF               	movlw	191
  4784  001C3A  6E92               	movwf	3986,c	;volatile
  4785                           
  4786                           ;pin_manager.c: 68: TRISB = 0x07;
  4787  001C3C  0E07               	movlw	7
  4788  001C3E  6E93               	movwf	3987,c	;volatile
  4789                           
  4790                           ;pin_manager.c: 69: TRISC = 0xBB;
  4791  001C40  0EBB               	movlw	187
  4792  001C42  6E94               	movwf	3988,c	;volatile
  4793                           
  4794                           ;pin_manager.c: 70: TRISD = 0x00;
  4795  001C44  0E00               	movlw	0
  4796  001C46  6E95               	movwf	3989,c	;volatile
  4797                           
  4798                           ;pin_manager.c: 75: ANSELC = 0x20;
  4799  001C48  0E20               	movlw	32
  4800  001C4A  010F               	movlb	15	; () banked
  4801  001C4C  6F3A               	movwf	58,b	;volatile
  4802                           
  4803                           ;pin_manager.c: 76: ANSELB = 0x00;
  4804  001C4E  0E00               	movlw	0
  4805  001C50  6F39               	movwf	57,b	;volatile
  4806                           
  4807                           ;pin_manager.c: 77: ANSELD = 0x00;
  4808  001C52  0E00               	movlw	0
  4809  001C54  6F3B               	movwf	59,b	;volatile
  4810                           
  4811                           ;pin_manager.c: 78: ANSELE = 0x07;
  4812  001C56  0E07               	movlw	7
  4813  001C58  6F3C               	movwf	60,b	;volatile
  4814                           
  4815                           ;pin_manager.c: 79: ANSELA = 0x28;
  4816  001C5A  0E28               	movlw	40
  4817  001C5C  6F38               	movwf	56,b	;volatile
  4818                           
  4819                           ;pin_manager.c: 84: WPUB = 0x00;
  4820  001C5E  0E00               	movlw	0
  4821  001C60  6E61               	movwf	3937,c	;volatile
  4822                           
  4823                           ; BSR set to: 15
  4824                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  4825  001C62  9EF1               	bcf	intcon2,7,c	;volatile
  4826                           
  4827                           ; BSR set to: 15
  4828  001C64  0012               	return		;funcret
  4829  001C66                     __end_of_PIN_MANAGER_Initialize:
  4830                           	opt stack 0
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           intcon	equ	0xFF2
  4838                           intcon2	equ	0xFF1
  4839                           indf0	equ	0xFEF
  4840                           postinc0	equ	0xFEE
  4841                           fsr0h	equ	0xFEA
  4842                           fsr0l	equ	0xFE9
  4843                           wreg	equ	0xFE8
  4844                           indf1	equ	0xFE7
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function _OSCILLATOR_Initialize *****************
  4855 ;; Defined at:
  4856 ;;		line 126 in file "mcc_generated_files/mcc.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;		None
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      void 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4870 ;;      Params:         0       0       0       0       0       0       0
  4871 ;;      Locals:         0       0       0       0       0       0       0
  4872 ;;      Temps:          0       0       0       0       0       0       0
  4873 ;;      Totals:         0       0       0       0       0       0       0
  4874 ;;Total ram usage:        0 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    9
  4877 ;; This function calls:
  4878 ;;		Nothing
  4879 ;; This function is called by:
  4880 ;;		_SYSTEM_Initialize
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text22
  4885  0022AE                     __ptext22:
  4886                           	opt stack 0
  4887  0022AE                     _OSCILLATOR_Initialize:
  4888                           	opt stack 20
  4889                           
  4890                           ;mcc.c: 129: OSCCON = 0x50;
  4891                           
  4892                           ; BSR set to: 15
  4893                           ;incstack = 0
  4894  0022AE  0E50               	movlw	80
  4895  0022B0  6ED3               	movwf	4051,c	;volatile
  4896                           
  4897                           ;mcc.c: 131: OSCCON2 = 0x04;
  4898  0022B2  0E04               	movlw	4
  4899  0022B4  6ED2               	movwf	4050,c	;volatile
  4900                           
  4901                           ;mcc.c: 133: OSCTUNE = 0x00;
  4902  0022B6  0E00               	movlw	0
  4903  0022B8  6E9B               	movwf	3995,c	;volatile
  4904  0022BA  0012               	return		;funcret
  4905  0022BC                     __end_of_OSCILLATOR_Initialize:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           intcon2	equ	0xFF1
  4915                           indf0	equ	0xFEF
  4916                           postinc0	equ	0xFEE
  4917                           fsr0h	equ	0xFEA
  4918                           fsr0l	equ	0xFE9
  4919                           wreg	equ	0xFE8
  4920                           indf1	equ	0xFE7
  4921                           fsr1h	equ	0xFE2
  4922                           fsr1l	equ	0xFE1
  4923                           indf2	equ	0xFDF
  4924                           postinc2	equ	0xFDE
  4925                           postdec2	equ	0xFDD
  4926                           fsr2h	equ	0xFDA
  4927                           fsr2l	equ	0xFD9
  4928                           status	equ	0xFD8
  4929                           
  4930 ;; *************** function _INTERRUPT_Initialize *****************
  4931 ;; Defined at:
  4932 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;		None
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;		None
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  1    wreg      void 
  4939 ;; Registers used:
  4940 ;;		None
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4946 ;;      Params:         0       0       0       0       0       0       0
  4947 ;;      Locals:         0       0       0       0       0       0       0
  4948 ;;      Temps:          0       0       0       0       0       0       0
  4949 ;;      Totals:         0       0       0       0       0       0       0
  4950 ;;Total ram usage:        0 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    9
  4953 ;; This function calls:
  4954 ;;		Nothing
  4955 ;; This function is called by:
  4956 ;;		_SYSTEM_Initialize
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959                           
  4960                           	psect	text23
  4961  00226C                     __ptext23:
  4962                           	opt stack 0
  4963  00226C                     _INTERRUPT_Initialize:
  4964                           	opt stack 20
  4965                           
  4966                           ;interrupt_manager.c: 54: RCONbits.IPEN = 1;
  4967                           
  4968                           ;incstack = 0
  4969  00226C  8ED0               	bsf	4048,7,c	;volatile
  4970                           
  4971                           ;interrupt_manager.c: 61: INTCON3bits.INT1IP = 1;
  4972  00226E  8CF0               	bsf	intcon3,6,c	;volatile
  4973                           
  4974                           ;interrupt_manager.c: 64: INTCON3bits.INT2IP = 1;
  4975  002270  8EF0               	bsf	intcon3,7,c	;volatile
  4976                           
  4977                           ;interrupt_manager.c: 67: INTCON2bits.TMR0IP = 1;
  4978  002272  84F1               	bsf	intcon2,2,c	;volatile
  4979                           
  4980                           ;interrupt_manager.c: 70: IPR1bits.SSP1IP = 1;
  4981  002274  869F               	bsf	3999,3,c	;volatile
  4982                           
  4983                           ;interrupt_manager.c: 73: IPR2bits.BCL1IP = 1;
  4984  002276  86A2               	bsf	4002,3,c	;volatile
  4985                           
  4986                           ;interrupt_manager.c: 77: IPR1bits.ADIP = 0;
  4987  002278  9C9F               	bcf	3999,6,c	;volatile
  4988                           
  4989                           ;interrupt_manager.c: 80: IPR1bits.RC1IP = 0;
  4990  00227A  9A9F               	bcf	3999,5,c	;volatile
  4991  00227C  0012               	return		;funcret
  4992  00227E                     __end_of_INTERRUPT_Initialize:
  4993                           	opt stack 0
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           intcon	equ	0xFF2
  5001                           intcon2	equ	0xFF1
  5002                           intcon3	equ	0xFF0
  5003                           indf0	equ	0xFEF
  5004                           postinc0	equ	0xFEE
  5005                           fsr0h	equ	0xFEA
  5006                           fsr0l	equ	0xFE9
  5007                           wreg	equ	0xFE8
  5008                           indf1	equ	0xFE7
  5009                           fsr1h	equ	0xFE2
  5010                           fsr1l	equ	0xFE1
  5011                           indf2	equ	0xFDF
  5012                           postinc2	equ	0xFDE
  5013                           postdec2	equ	0xFDD
  5014                           fsr2h	equ	0xFDA
  5015                           fsr2l	equ	0xFD9
  5016                           status	equ	0xFD8
  5017                           
  5018 ;; *************** function _I2C1_Initialize *****************
  5019 ;; Defined at:
  5020 ;;		line 199 in file "mcc_generated_files/i2c1.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;		None
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;		None
  5025 ;; Return value:  Size  Location     Type
  5026 ;;                  1    wreg      void 
  5027 ;; Registers used:
  5028 ;;		wreg, status,2, status,0
  5029 ;; Tracked objects:
  5030 ;;		On entry : 0/0
  5031 ;;		On exit  : 0/0
  5032 ;;		Unchanged: 0/0
  5033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5034 ;;      Params:         0       0       0       0       0       0       0
  5035 ;;      Locals:         0       0       0       0       0       0       0
  5036 ;;      Temps:          0       0       0       0       0       0       0
  5037 ;;      Totals:         0       0       0       0       0       0       0
  5038 ;;Total ram usage:        0 bytes
  5039 ;; Hardware stack levels used:    1
  5040 ;; Hardware stack levels required when called:    9
  5041 ;; This function calls:
  5042 ;;		Nothing
  5043 ;; This function is called by:
  5044 ;;		_SYSTEM_Initialize
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text24
  5049  001F64                     __ptext24:
  5050                           	opt stack 0
  5051  001F64                     _I2C1_Initialize:
  5052                           	opt stack 20
  5053                           
  5054                           ;i2c1.c: 201: i2c1_object.pTrHead = i2c1_tr_queue;
  5055                           
  5056                           ;incstack = 0
  5057  001F64  0EAC               	movlw	low _i2c1_tr_queue
  5058  001F66  0100               	movlb	0	; () banked
  5059  001F68  6F62               	movwf	(_i2c1_object+2)& (0+255),b
  5060  001F6A  0E00               	movlw	high _i2c1_tr_queue
  5061  001F6C  6F63               	movwf	(_i2c1_object+3)& (0+255),b
  5062                           
  5063                           ;i2c1.c: 202: i2c1_object.pTrTail = i2c1_tr_queue;
  5064  001F6E  0EAC               	movlw	low _i2c1_tr_queue
  5065  001F70  6F60               	movwf	_i2c1_object& (0+255),b
  5066  001F72  0E00               	movlw	high _i2c1_tr_queue
  5067  001F74  6F61               	movwf	(_i2c1_object+1)& (0+255),b
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;i2c1.c: 203: i2c1_object.trStatus.s.empty = 1;
  5071  001F76  8364               	bsf	(_i2c1_object+4)& (0+255),1,b
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;i2c1.c: 204: i2c1_object.trStatus.s.full = 0;
  5075  001F78  9164               	bcf	(_i2c1_object+4)& (0+255),0,b
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;i2c1.c: 206: i2c1_object.i2cErrors = 0;
  5079  001F7A  0E00               	movlw	0
  5080  001F7C  6F66               	movwf	(_i2c1_object+6)& (0+255),b
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;i2c1.c: 209: SSP1STAT = 0x00;
  5084  001F7E  0E00               	movlw	0
  5085  001F80  6EC7               	movwf	4039,c	;volatile
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;i2c1.c: 211: SSP1CON1 = 0x28;
  5089  001F82  0E28               	movlw	40
  5090  001F84  6EC6               	movwf	4038,c	;volatile
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;i2c1.c: 213: SSP1CON3 = 0x00;
  5094  001F86  0E00               	movlw	0
  5095  001F88  6ECB               	movwf	4043,c	;volatile
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;i2c1.c: 215: SSP1ADD = 0x03;
  5099  001F8A  0E03               	movlw	3
  5100  001F8C  6EC8               	movwf	4040,c	;volatile
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;i2c1.c: 219: PIR1bits.SSP1IF = 0;
  5104  001F8E  969E               	bcf	3998,3,c	;volatile
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;i2c1.c: 221: PIE1bits.SSP1IE = 1;
  5108  001F90  869D               	bsf	3997,3,c	;volatile
  5109                           
  5110                           ; BSR set to: 0
  5111  001F92  0012               	return		;funcret
  5112  001F94                     __end_of_I2C1_Initialize:
  5113                           	opt stack 0
  5114                           tblptru	equ	0xFF8
  5115                           tblptrh	equ	0xFF7
  5116                           tblptrl	equ	0xFF6
  5117                           tablat	equ	0xFF5
  5118                           prodh	equ	0xFF4
  5119                           prodl	equ	0xFF3
  5120                           intcon	equ	0xFF2
  5121                           intcon2	equ	0xFF1
  5122                           intcon3	equ	0xFF0
  5123                           indf0	equ	0xFEF
  5124                           postinc0	equ	0xFEE
  5125                           fsr0h	equ	0xFEA
  5126                           fsr0l	equ	0xFE9
  5127                           wreg	equ	0xFE8
  5128                           indf1	equ	0xFE7
  5129                           fsr1h	equ	0xFE2
  5130                           fsr1l	equ	0xFE1
  5131                           indf2	equ	0xFDF
  5132                           postinc2	equ	0xFDE
  5133                           postdec2	equ	0xFDD
  5134                           fsr2h	equ	0xFDA
  5135                           fsr2l	equ	0xFD9
  5136                           status	equ	0xFD8
  5137                           
  5138 ;; *************** function _EXT_INT_Initialize *****************
  5139 ;; Defined at:
  5140 ;;		line 213 in file "mcc_generated_files/ext_int.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;		None
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;		None
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  1    wreg      void 
  5147 ;; Registers used:
  5148 ;;		wreg, status,2, status,0, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5154 ;;      Params:         0       0       0       0       0       0       0
  5155 ;;      Locals:         0       0       0       0       0       0       0
  5156 ;;      Temps:          0       0       0       0       0       0       0
  5157 ;;      Totals:         0       0       0       0       0       0       0
  5158 ;;Total ram usage:        0 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:   10
  5161 ;; This function calls:
  5162 ;;		_INT0_SetInterruptHandler
  5163 ;;		_INT1_SetInterruptHandler
  5164 ;;		_INT2_SetInterruptHandler
  5165 ;; This function is called by:
  5166 ;;		_SYSTEM_Initialize
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text25
  5171  001E7A                     __ptext25:
  5172                           	opt stack 0
  5173  001E7A                     _EXT_INT_Initialize:
  5174                           	opt stack 19
  5175                           
  5176                           ;ext_int.c: 221: (INTCON3bits.INT1IF = 0);
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;incstack = 0
  5180  001E7A  90F0               	bcf	intcon3,0,c	;volatile
  5181                           
  5182                           ;ext_int.c: 222: (INTCON2bits.INTEDG1 = 1);
  5183  001E7C  8AF1               	bsf	intcon2,5,c	;volatile
  5184                           
  5185                           ;ext_int.c: 224: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  5186  001E7E  0E10               	movlw	low _INT1_DefaultInterruptHandler
  5187  001E80  0101               	movlb	1	; () banked
  5188  001E82  6F34               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5189  001E84  0E23               	movlw	high _INT1_DefaultInterruptHandler
  5190  001E86  6F35               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5191  001E88  EC6E  F011         	call	_INT1_SetInterruptHandler	;wreg free
  5192                           
  5193                           ;ext_int.c: 225: (INTCON3bits.INT1IE = 1);
  5194  001E8C  86F0               	bsf	intcon3,3,c	;volatile
  5195                           
  5196                           ;ext_int.c: 234: (INTCON3bits.INT2IF = 0);
  5197  001E8E  92F0               	bcf	intcon3,1,c	;volatile
  5198                           
  5199                           ;ext_int.c: 235: (INTCON2bits.INTEDG2 = 1);
  5200  001E90  88F1               	bsf	intcon2,4,c	;volatile
  5201                           
  5202                           ;ext_int.c: 237: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5203  001E92  0E0E               	movlw	low _INT2_DefaultInterruptHandler
  5204  001E94  0101               	movlb	1	; () banked
  5205  001E96  6F34               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5206  001E98  0E23               	movlw	high _INT2_DefaultInterruptHandler
  5207  001E9A  6F35               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5208  001E9C  EC69  F011         	call	_INT2_SetInterruptHandler	;wreg free
  5209                           
  5210                           ;ext_int.c: 238: (INTCON3bits.INT2IE = 1);
  5211  001EA0  88F0               	bsf	intcon3,4,c	;volatile
  5212                           
  5213                           ;ext_int.c: 247: (INTCONbits.INT0IF = 0);
  5214  001EA2  92F2               	bcf	intcon,1,c	;volatile
  5215                           
  5216                           ;ext_int.c: 248: (INTCON2bits.INTEDG0 = 1);
  5217  001EA4  8CF1               	bsf	intcon2,6,c	;volatile
  5218                           
  5219                           ;ext_int.c: 250: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  5220  001EA6  0E12               	movlw	low _INT0_DefaultInterruptHandler
  5221  001EA8  0101               	movlb	1	; () banked
  5222  001EAA  6F34               	movwf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  5223  001EAC  0E23               	movlw	high _INT0_DefaultInterruptHandler
  5224  001EAE  6F35               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5225  001EB0  EC73  F011         	call	_INT0_SetInterruptHandler	;wreg free
  5226                           
  5227                           ;ext_int.c: 251: (INTCONbits.INT0IE = 1);
  5228  001EB4  88F2               	bsf	intcon,4,c	;volatile
  5229  001EB6  0012               	return		;funcret
  5230  001EB8                     __end_of_EXT_INT_Initialize:
  5231                           	opt stack 0
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           intcon2	equ	0xFF1
  5240                           intcon3	equ	0xFF0
  5241                           indf0	equ	0xFEF
  5242                           postinc0	equ	0xFEE
  5243                           fsr0h	equ	0xFEA
  5244                           fsr0l	equ	0xFE9
  5245                           wreg	equ	0xFE8
  5246                           indf1	equ	0xFE7
  5247                           fsr1h	equ	0xFE2
  5248                           fsr1l	equ	0xFE1
  5249                           indf2	equ	0xFDF
  5250                           postinc2	equ	0xFDE
  5251                           postdec2	equ	0xFDD
  5252                           fsr2h	equ	0xFDA
  5253                           fsr2l	equ	0xFD9
  5254                           status	equ	0xFD8
  5255                           
  5256 ;; *************** function _INT2_SetInterruptHandler *****************
  5257 ;; Defined at:
  5258 ;;		line 137 in file "mcc_generated_files/ext_int.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5261 ;;		 -> INT2_DefaultInterruptHandler(1), 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;		None
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  1    wreg      void 
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5273 ;;      Params:         0       0       2       0       0       0       0
  5274 ;;      Locals:         0       0       0       0       0       0       0
  5275 ;;      Temps:          0       0       0       0       0       0       0
  5276 ;;      Totals:         0       0       2       0       0       0       0
  5277 ;;Total ram usage:        2 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    9
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_EXT_INT_Initialize
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text26
  5288  0022D2                     __ptext26:
  5289                           	opt stack 0
  5290  0022D2                     _INT2_SetInterruptHandler:
  5291                           	opt stack 19
  5292                           
  5293                           ;ext_int.c: 138: INT2_InterruptHandler = InterruptHandler;
  5294                           
  5295                           ;incstack = 0
  5296  0022D2  C134  F0E9         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5297  0022D6  C135  F0EA         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5298  0022DA  0012               	return		;funcret
  5299  0022DC                     __end_of_INT2_SetInterruptHandler:
  5300                           	opt stack 0
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           intcon2	equ	0xFF1
  5309                           intcon3	equ	0xFF0
  5310                           indf0	equ	0xFEF
  5311                           postinc0	equ	0xFEE
  5312                           fsr0h	equ	0xFEA
  5313                           fsr0l	equ	0xFE9
  5314                           wreg	equ	0xFE8
  5315                           indf1	equ	0xFE7
  5316                           fsr1h	equ	0xFE2
  5317                           fsr1l	equ	0xFE1
  5318                           indf2	equ	0xFDF
  5319                           postinc2	equ	0xFDE
  5320                           postdec2	equ	0xFDD
  5321                           fsr2h	equ	0xFDA
  5322                           fsr2l	equ	0xFD9
  5323                           status	equ	0xFD8
  5324                           
  5325 ;; *************** function _INT1_SetInterruptHandler *****************
  5326 ;; Defined at:
  5327 ;;		line 84 in file "mcc_generated_files/ext_int.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5330 ;;		 -> INT1_DefaultInterruptHandler(1), 
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;		None
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      void 
  5335 ;; Registers used:
  5336 ;;		wreg, status,2, status,0
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5342 ;;      Params:         0       0       2       0       0       0       0
  5343 ;;      Locals:         0       0       0       0       0       0       0
  5344 ;;      Temps:          0       0       0       0       0       0       0
  5345 ;;      Totals:         0       0       2       0       0       0       0
  5346 ;;Total ram usage:        2 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    9
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_EXT_INT_Initialize
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text27
  5357  0022DC                     __ptext27:
  5358                           	opt stack 0
  5359  0022DC                     _INT1_SetInterruptHandler:
  5360                           	opt stack 19
  5361                           
  5362                           ;ext_int.c: 85: INT1_InterruptHandler = InterruptHandler;
  5363                           
  5364                           ;incstack = 0
  5365  0022DC  C134  F0EB         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5366  0022E0  C135  F0EC         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5367  0022E4  0012               	return		;funcret
  5368  0022E6                     __end_of_INT1_SetInterruptHandler:
  5369                           	opt stack 0
  5370                           tblptru	equ	0xFF8
  5371                           tblptrh	equ	0xFF7
  5372                           tblptrl	equ	0xFF6
  5373                           tablat	equ	0xFF5
  5374                           prodh	equ	0xFF4
  5375                           prodl	equ	0xFF3
  5376                           intcon	equ	0xFF2
  5377                           intcon2	equ	0xFF1
  5378                           intcon3	equ	0xFF0
  5379                           indf0	equ	0xFEF
  5380                           postinc0	equ	0xFEE
  5381                           fsr0h	equ	0xFEA
  5382                           fsr0l	equ	0xFE9
  5383                           wreg	equ	0xFE8
  5384                           indf1	equ	0xFE7
  5385                           fsr1h	equ	0xFE2
  5386                           fsr1l	equ	0xFE1
  5387                           indf2	equ	0xFDF
  5388                           postinc2	equ	0xFDE
  5389                           postdec2	equ	0xFDD
  5390                           fsr2h	equ	0xFDA
  5391                           fsr2l	equ	0xFD9
  5392                           status	equ	0xFD8
  5393                           
  5394 ;; *************** function _INT0_SetInterruptHandler *****************
  5395 ;; Defined at:
  5396 ;;		line 190 in file "mcc_generated_files/ext_int.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5399 ;;		 -> INT0_DefaultInterruptHandler(1), 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;		None
  5402 ;; Return value:  Size  Location     Type
  5403 ;;                  1    wreg      void 
  5404 ;; Registers used:
  5405 ;;		wreg, status,2, status,0
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5411 ;;      Params:         0       0       2       0       0       0       0
  5412 ;;      Locals:         0       0       0       0       0       0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0
  5414 ;;      Totals:         0       0       2       0       0       0       0
  5415 ;;Total ram usage:        2 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    9
  5418 ;; This function calls:
  5419 ;;		Nothing
  5420 ;; This function is called by:
  5421 ;;		_EXT_INT_Initialize
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text28
  5426  0022E6                     __ptext28:
  5427                           	opt stack 0
  5428  0022E6                     _INT0_SetInterruptHandler:
  5429                           	opt stack 19
  5430                           
  5431                           ;ext_int.c: 191: INT0_InterruptHandler = InterruptHandler;
  5432                           
  5433                           ;incstack = 0
  5434  0022E6  C134  F0E7         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  5435  0022EA  C135  F0E8         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  5436  0022EE  0012               	return		;funcret
  5437  0022F0                     __end_of_INT0_SetInterruptHandler:
  5438                           	opt stack 0
  5439                           tblptru	equ	0xFF8
  5440                           tblptrh	equ	0xFF7
  5441                           tblptrl	equ	0xFF6
  5442                           tablat	equ	0xFF5
  5443                           prodh	equ	0xFF4
  5444                           prodl	equ	0xFF3
  5445                           intcon	equ	0xFF2
  5446                           intcon2	equ	0xFF1
  5447                           intcon3	equ	0xFF0
  5448                           indf0	equ	0xFEF
  5449                           postinc0	equ	0xFEE
  5450                           fsr0h	equ	0xFEA
  5451                           fsr0l	equ	0xFE9
  5452                           wreg	equ	0xFE8
  5453                           indf1	equ	0xFE7
  5454                           fsr1h	equ	0xFE2
  5455                           fsr1l	equ	0xFE1
  5456                           indf2	equ	0xFDF
  5457                           postinc2	equ	0xFDE
  5458                           postdec2	equ	0xFDD
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8
  5462                           
  5463 ;; *************** function _EUSART1_Initialize *****************
  5464 ;; Defined at:
  5465 ;;		line 64 in file "mcc_generated_files/eusart1.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;		None
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;		None
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  1    wreg      void 
  5472 ;; Registers used:
  5473 ;;		wreg, status,2
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5479 ;;      Params:         0       0       0       0       0       0       0
  5480 ;;      Locals:         0       0       0       0       0       0       0
  5481 ;;      Temps:          0       0       0       0       0       0       0
  5482 ;;      Totals:         0       0       0       0       0       0       0
  5483 ;;Total ram usage:        0 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    9
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		_SYSTEM_Initialize
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text29
  5494  0021FA                     __ptext29:
  5495                           	opt stack 0
  5496  0021FA                     _EUSART1_Initialize:
  5497                           	opt stack 20
  5498                           
  5499                           ;eusart1.c: 66: PIE1bits.RC1IE = 0;
  5500                           
  5501                           ;incstack = 0
  5502  0021FA  9A9D               	bcf	3997,5,c	;volatile
  5503                           
  5504                           ;eusart1.c: 71: BAUDCON1 = 0x08;
  5505  0021FC  0E08               	movlw	8
  5506  0021FE  6EB8               	movwf	4024,c	;volatile
  5507                           
  5508                           ;eusart1.c: 74: RCSTA1 = 0x90;
  5509  002200  0E90               	movlw	144
  5510  002202  6EAB               	movwf	4011,c	;volatile
  5511                           
  5512                           ;eusart1.c: 77: TXSTA1 = 0x24;
  5513  002204  0E24               	movlw	36
  5514  002206  6EAC               	movwf	4012,c	;volatile
  5515                           
  5516                           ;eusart1.c: 80: SPBRG1 = 0x9B;
  5517  002208  0E9B               	movlw	155
  5518  00220A  6EAF               	movwf	4015,c	;volatile
  5519                           
  5520                           ;eusart1.c: 83: SPBRGH1 = 0x00;
  5521  00220C  0E00               	movlw	0
  5522  00220E  6EB0               	movwf	4016,c	;volatile
  5523                           
  5524                           ;eusart1.c: 86: PIE1bits.RC1IE = 1;
  5525  002210  8A9D               	bsf	3997,5,c	;volatile
  5526  002212  0012               	return		;funcret
  5527  002214                     __end_of_EUSART1_Initialize:
  5528                           	opt stack 0
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodh	equ	0xFF4
  5534                           prodl	equ	0xFF3
  5535                           intcon	equ	0xFF2
  5536                           intcon2	equ	0xFF1
  5537                           intcon3	equ	0xFF0
  5538                           indf0	equ	0xFEF
  5539                           postinc0	equ	0xFEE
  5540                           fsr0h	equ	0xFEA
  5541                           fsr0l	equ	0xFE9
  5542                           wreg	equ	0xFE8
  5543                           indf1	equ	0xFE7
  5544                           fsr1h	equ	0xFE2
  5545                           fsr1l	equ	0xFE1
  5546                           indf2	equ	0xFDF
  5547                           postinc2	equ	0xFDE
  5548                           postdec2	equ	0xFDD
  5549                           fsr2h	equ	0xFDA
  5550                           fsr2l	equ	0xFD9
  5551                           status	equ	0xFD8
  5552                           
  5553 ;; *************** function _EPWM1_Initialize *****************
  5554 ;; Defined at:
  5555 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;		None
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;		None
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  1    wreg      void 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5569 ;;      Params:         0       0       0       0       0       0       0
  5570 ;;      Locals:         0       0       0       0       0       0       0
  5571 ;;      Temps:          0       0       0       0       0       0       0
  5572 ;;      Totals:         0       0       0       0       0       0       0
  5573 ;;Total ram usage:        0 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    9
  5576 ;; This function calls:
  5577 ;;		Nothing
  5578 ;; This function is called by:
  5579 ;;		_SYSTEM_Initialize
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           	psect	text30
  5584  0021BC                     __ptext30:
  5585                           	opt stack 0
  5586  0021BC                     _EPWM1_Initialize:
  5587                           	opt stack 20
  5588                           
  5589                           ;epwm1.c: 68: CCP1CON = 0x2C;
  5590                           
  5591                           ;incstack = 0
  5592  0021BC  0E2C               	movlw	44
  5593  0021BE  6EBD               	movwf	4029,c	;volatile
  5594                           
  5595                           ;epwm1.c: 71: ECCP1AS = 0x00;
  5596  0021C0  0E00               	movlw	0
  5597  0021C2  6EB6               	movwf	4022,c	;volatile
  5598                           
  5599                           ;epwm1.c: 74: PWM1CON = 0x80;
  5600  0021C4  0E80               	movlw	128
  5601  0021C6  6EB7               	movwf	4023,c	;volatile
  5602                           
  5603                           ;epwm1.c: 77: PSTR1CON = 0x01;
  5604  0021C8  0E01               	movlw	1
  5605  0021CA  6EB9               	movwf	4025,c	;volatile
  5606                           
  5607                           ;epwm1.c: 80: CCPR1L = 0x12;
  5608  0021CC  0E12               	movlw	18
  5609  0021CE  6EBE               	movwf	4030,c	;volatile
  5610                           
  5611                           ;epwm1.c: 83: CCPR1H = 0x00;
  5612  0021D0  0E00               	movlw	0
  5613  0021D2  6EBF               	movwf	4031,c	;volatile
  5614                           
  5615                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x0;
  5616  0021D4  0EFC               	movlw	-4
  5617  0021D6  010F               	movlb	15	; () banked
  5618  0021D8  1749               	andwf	73,f,b	;volatile
  5619                           
  5620                           ; BSR set to: 15
  5621  0021DA  0012               	return		;funcret
  5622  0021DC                     __end_of_EPWM1_Initialize:
  5623                           	opt stack 0
  5624                           tblptru	equ	0xFF8
  5625                           tblptrh	equ	0xFF7
  5626                           tblptrl	equ	0xFF6
  5627                           tablat	equ	0xFF5
  5628                           prodh	equ	0xFF4
  5629                           prodl	equ	0xFF3
  5630                           intcon	equ	0xFF2
  5631                           intcon2	equ	0xFF1
  5632                           intcon3	equ	0xFF0
  5633                           indf0	equ	0xFEF
  5634                           postinc0	equ	0xFEE
  5635                           fsr0h	equ	0xFEA
  5636                           fsr0l	equ	0xFE9
  5637                           wreg	equ	0xFE8
  5638                           indf1	equ	0xFE7
  5639                           fsr1h	equ	0xFE2
  5640                           fsr1l	equ	0xFE1
  5641                           indf2	equ	0xFDF
  5642                           postinc2	equ	0xFDE
  5643                           postdec2	equ	0xFDD
  5644                           fsr2h	equ	0xFDA
  5645                           fsr2l	equ	0xFD9
  5646                           status	equ	0xFD8
  5647                           
  5648 ;; *************** function _ADC_Initialize *****************
  5649 ;; Defined at:
  5650 ;;		line 60 in file "mcc_generated_files/adc.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;		None
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;		None
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, status,2
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5664 ;;      Params:         0       0       0       0       0       0       0
  5665 ;;      Locals:         0       0       0       0       0       0       0
  5666 ;;      Temps:          0       0       0       0       0       0       0
  5667 ;;      Totals:         0       0       0       0       0       0       0
  5668 ;;Total ram usage:        0 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    9
  5671 ;; This function calls:
  5672 ;;		Nothing
  5673 ;; This function is called by:
  5674 ;;		_SYSTEM_Initialize
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text31
  5679  002214                     __ptext31:
  5680                           	opt stack 0
  5681  002214                     _ADC_Initialize:
  5682                           	opt stack 20
  5683                           
  5684                           ;adc.c: 64: ADCON0 = 0x0D;
  5685                           
  5686                           ; BSR set to: 15
  5687                           ;incstack = 0
  5688  002214  0E0D               	movlw	13
  5689  002216  6EC2               	movwf	4034,c	;volatile
  5690                           
  5691                           ;adc.c: 67: ADCON1 = 0x00;
  5692  002218  0E00               	movlw	0
  5693  00221A  6EC1               	movwf	4033,c	;volatile
  5694                           
  5695                           ;adc.c: 70: ADCON2 = 0x89;
  5696  00221C  0E89               	movlw	137
  5697  00221E  6EC0               	movwf	4032,c	;volatile
  5698                           
  5699                           ;adc.c: 73: ADRESL = 0x00;
  5700  002220  0E00               	movlw	0
  5701  002222  6EC3               	movwf	4035,c	;volatile
  5702                           
  5703                           ;adc.c: 76: ADRESH = 0x00;
  5704  002224  0E00               	movlw	0
  5705  002226  6EC4               	movwf	4036,c	;volatile
  5706                           
  5707                           ;adc.c: 79: PIE1bits.ADIE = 1;
  5708  002228  8C9D               	bsf	3997,6,c	;volatile
  5709  00222A  0012               	return		;funcret
  5710  00222C                     __end_of_ADC_Initialize:
  5711                           	opt stack 0
  5712                           tblptru	equ	0xFF8
  5713                           tblptrh	equ	0xFF7
  5714                           tblptrl	equ	0xFF6
  5715                           tablat	equ	0xFF5
  5716                           prodh	equ	0xFF4
  5717                           prodl	equ	0xFF3
  5718                           intcon	equ	0xFF2
  5719                           intcon2	equ	0xFF1
  5720                           intcon3	equ	0xFF0
  5721                           indf0	equ	0xFEF
  5722                           postinc0	equ	0xFEE
  5723                           fsr0h	equ	0xFEA
  5724                           fsr0l	equ	0xFE9
  5725                           wreg	equ	0xFE8
  5726                           indf1	equ	0xFE7
  5727                           fsr1h	equ	0xFE2
  5728                           fsr1l	equ	0xFE1
  5729                           indf2	equ	0xFDF
  5730                           postinc2	equ	0xFDE
  5731                           postdec2	equ	0xFDD
  5732                           fsr2h	equ	0xFDA
  5733                           fsr2l	equ	0xFD9
  5734                           status	equ	0xFD8
  5735                           
  5736 ;; *************** function _OpenXLCD *****************
  5737 ;; Defined at:
  5738 ;;		line 56 in file "xlcd.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  lcdtype         1    wreg     unsigned char 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  lcdtype         1    0[COMRAM] unsigned char 
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  1    wreg      void 
  5745 ;; Registers used:
  5746 ;;		wreg, status,2, status,0, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5752 ;;      Params:         0       0       0       0       0       0       0
  5753 ;;      Locals:         0       0       0       0       0       0       0
  5754 ;;      Temps:          0       0       0       0       0       0       0
  5755 ;;      Totals:         0       0       0       0       0       0       0
  5756 ;;Total ram usage:        0 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:   11
  5759 ;; This function calls:
  5760 ;;		_BusyXLCD
  5761 ;;		_DelayFor18TCY
  5762 ;;		_DelayPORXLCD
  5763 ;;		_DelayXLCD
  5764 ;;		_WriteCmdXLCD
  5765 ;; This function is called by:
  5766 ;;		_main
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           	psect	text32
  5771  001706                     __ptext32:
  5772                           	opt stack 0
  5773  001706                     _OpenXLCD:
  5774                           	opt stack 19
  5775                           
  5776                           ;xlcd.c: 60: DelayPORXLCD();
  5777                           
  5778                           ;incstack = 0
  5779  001706  EC9A  F010         	call	_DelayPORXLCD	;wreg free
  5780                           
  5781                           ;xlcd.c: 72: PORTD &= 0xf0;
  5782  00170A  0EF0               	movlw	240
  5783  00170C  1683               	andwf	3971,f,c	;volatile
  5784                           
  5785                           ;xlcd.c: 73: TRISD |= 0x0f;
  5786  00170E  0E0F               	movlw	15
  5787  001710  1295               	iorwf	3989,f,c	;volatile
  5788                           
  5789                           ;xlcd.c: 76: TRISDbits.TRISD5 = 0;
  5790  001712  9A95               	bcf	3989,5,c	;volatile
  5791                           
  5792                           ;xlcd.c: 77: TRISDbits.TRISD4 = 0;
  5793  001714  9895               	bcf	3989,4,c	;volatile
  5794                           
  5795                           ;xlcd.c: 78: TRISDbits.TRISD6 = 0;
  5796  001716  9C95               	bcf	3989,6,c	;volatile
  5797                           
  5798                           ;xlcd.c: 79: LATDbits.LATD5 = 0;
  5799  001718  9A8C               	bcf	3980,5,c	;volatile
  5800                           
  5801                           ;xlcd.c: 80: LATDbits.LATD4 = 0;
  5802  00171A  988C               	bcf	3980,4,c	;volatile
  5803                           
  5804                           ;xlcd.c: 81: LATDbits.LATD6 = 0;
  5805  00171C  9C8C               	bcf	3980,6,c	;volatile
  5806                           
  5807                           ;xlcd.c: 84: DelayPORXLCD();
  5808  00171E  EC9A  F010         	call	_DelayPORXLCD	;wreg free
  5809                           
  5810                           ;xlcd.c: 97: TRISD &= 0xf0;
  5811  001722  0EF0               	movlw	240
  5812  001724  1695               	andwf	3989,f,c	;volatile
  5813                           
  5814                           ;xlcd.c: 98: PORTD &= 0xf0;
  5815  001726  0EF0               	movlw	240
  5816  001728  1683               	andwf	3971,f,c	;volatile
  5817                           
  5818                           ;xlcd.c: 99: PORTD |= 0b00000011;
  5819  00172A  0E03               	movlw	3
  5820  00172C  1283               	iorwf	3971,f,c	;volatile
  5821                           
  5822                           ;xlcd.c: 102: LATDbits.LATD6 = 1;
  5823  00172E  8C8C               	bsf	3980,6,c	;volatile
  5824                           
  5825                           ;xlcd.c: 103: DelayFor18TCY();
  5826  001730  EC22  F011         	call	_DelayFor18TCY	;wreg free
  5827                           
  5828                           ;xlcd.c: 104: LATDbits.LATD6 = 0;
  5829  001734  9C8C               	bcf	3980,6,c	;volatile
  5830                           
  5831                           ;xlcd.c: 107: DelayXLCD();
  5832  001736  EC3F  F011         	call	_DelayXLCD	;wreg free
  5833                           
  5834                           ;xlcd.c: 118: TRISD &= 0xf0;
  5835  00173A  0EF0               	movlw	240
  5836  00173C  1695               	andwf	3989,f,c	;volatile
  5837                           
  5838                           ;xlcd.c: 119: PORTD &= 0xf0;
  5839  00173E  0EF0               	movlw	240
  5840  001740  1683               	andwf	3971,f,c	;volatile
  5841                           
  5842                           ;xlcd.c: 120: PORTD |= 0b00000011;
  5843  001742  0E03               	movlw	3
  5844  001744  1283               	iorwf	3971,f,c	;volatile
  5845                           
  5846                           ;xlcd.c: 123: LATDbits.LATD6 = 1;
  5847  001746  8C8C               	bsf	3980,6,c	;volatile
  5848                           
  5849                           ;xlcd.c: 124: DelayFor18TCY();
  5850  001748  EC22  F011         	call	_DelayFor18TCY	;wreg free
  5851                           
  5852                           ;xlcd.c: 125: LATDbits.LATD6 = 0;
  5853  00174C  9C8C               	bcf	3980,6,c	;volatile
  5854                           
  5855                           ;xlcd.c: 128: DelayXLCD();
  5856  00174E  EC3F  F011         	call	_DelayXLCD	;wreg free
  5857                           
  5858                           ;xlcd.c: 138: PORTD &= 0xf0;
  5859  001752  0EF0               	movlw	240
  5860  001754  1683               	andwf	3971,f,c	;volatile
  5861                           
  5862                           ;xlcd.c: 139: PORTD |= 0b00000011;
  5863  001756  0E03               	movlw	3
  5864  001758  1283               	iorwf	3971,f,c	;volatile
  5865                           
  5866                           ;xlcd.c: 142: LATDbits.LATD6 = 1;
  5867  00175A  8C8C               	bsf	3980,6,c	;volatile
  5868                           
  5869                           ;xlcd.c: 143: DelayFor18TCY();
  5870  00175C  EC22  F011         	call	_DelayFor18TCY	;wreg free
  5871                           
  5872                           ;xlcd.c: 144: LATDbits.LATD6 = 0;
  5873  001760  9C8C               	bcf	3980,6,c	;volatile
  5874                           
  5875                           ;xlcd.c: 147: DelayXLCD();
  5876  001762  EC3F  F011         	call	_DelayXLCD	;wreg free
  5877                           
  5878                           ;xlcd.c: 159: PORTD &= 0xf0;
  5879  001766  0EF0               	movlw	240
  5880  001768  1683               	andwf	3971,f,c	;volatile
  5881                           
  5882                           ;xlcd.c: 160: PORTD |= 0b00000010;
  5883  00176A  8283               	bsf	3971,1,c	;volatile
  5884                           
  5885                           ;xlcd.c: 163: LATDbits.LATD6 = 1;
  5886  00176C  8C8C               	bsf	3980,6,c	;volatile
  5887                           
  5888                           ;xlcd.c: 164: DelayFor18TCY();
  5889  00176E  EC22  F011         	call	_DelayFor18TCY	;wreg free
  5890                           
  5891                           ;xlcd.c: 165: LATDbits.LATD6 = 0;
  5892  001772  9C8C               	bcf	3980,6,c	;volatile
  5893                           
  5894                           ;xlcd.c: 174: TRISD |= 0x0f;
  5895  001774  0E0F               	movlw	15
  5896  001776  1295               	iorwf	3989,f,c	;volatile
  5897  001778  EC79  F00F         	call	_BusyXLCD	;wreg free
  5898  00177C  0900               	iorlw	0
  5899  00177E  A4D8               	btfss	status,2,c
  5900  001780  D7FB               	goto	l895
  5901                           
  5902                           ;xlcd.c: 182: WriteCmdXLCD(0x28);
  5903  001782  0E28               	movlw	40
  5904  001784  EC77  F00E         	call	_WriteCmdXLCD
  5905  001788  EC79  F00F         	call	_BusyXLCD	;wreg free
  5906  00178C  0900               	iorlw	0
  5907  00178E  A4D8               	btfss	status,2,c
  5908  001790  D7FB               	goto	l898
  5909                           
  5910                           ;xlcd.c: 188: WriteCmdXLCD(0x0D);
  5911  001792  0E0D               	movlw	13
  5912  001794  EC77  F00E         	call	_WriteCmdXLCD
  5913  001798  EC79  F00F         	call	_BusyXLCD	;wreg free
  5914  00179C  0900               	iorlw	0
  5915  00179E  A4D8               	btfss	status,2,c
  5916  0017A0  D7FB               	goto	l901
  5917  0017A2                     u7250:
  5918                           
  5919                           ;xlcd.c: 195: while (BusyXLCD());
  5920  0017A2  EC79  F00F         	call	_BusyXLCD	;wreg free
  5921  0017A6  0900               	iorlw	0
  5922  0017A8  A4D8               	btfss	status,2,c
  5923  0017AA  D7FB               	goto	u7250
  5924                           
  5925                           ;xlcd.c: 196: WriteCmdXLCD(0x01);
  5926  0017AC  0E01               	movlw	1
  5927  0017AE  EC77  F00E         	call	_WriteCmdXLCD
  5928  0017B2  EC79  F00F         	call	_BusyXLCD	;wreg free
  5929  0017B6  0900               	iorlw	0
  5930  0017B8  A4D8               	btfss	status,2,c
  5931  0017BA  D7FB               	goto	l907
  5932                           
  5933                           ;xlcd.c: 201: WriteCmdXLCD(0x06);
  5934  0017BC  0E06               	movlw	6
  5935  0017BE  EC77  F00E         	call	_WriteCmdXLCD
  5936  0017C2  EC79  F00F         	call	_BusyXLCD	;wreg free
  5937  0017C6  0900               	iorlw	0
  5938  0017C8  A4D8               	btfss	status,2,c
  5939  0017CA  D7FB               	goto	l910
  5940                           
  5941                           ;xlcd.c: 207: WriteCmdXLCD(0x80);
  5942  0017CC  0E80               	movlw	128
  5943  0017CE  EC77  F00E         	call	_WriteCmdXLCD
  5944  0017D2  0012               	return	
  5945  0017D4                     __end_of_OpenXLCD:
  5946                           	opt stack 0
  5947                           tblptru	equ	0xFF8
  5948                           tblptrh	equ	0xFF7
  5949                           tblptrl	equ	0xFF6
  5950                           tablat	equ	0xFF5
  5951                           prodh	equ	0xFF4
  5952                           prodl	equ	0xFF3
  5953                           intcon	equ	0xFF2
  5954                           intcon2	equ	0xFF1
  5955                           intcon3	equ	0xFF0
  5956                           indf0	equ	0xFEF
  5957                           postinc0	equ	0xFEE
  5958                           fsr0h	equ	0xFEA
  5959                           fsr0l	equ	0xFE9
  5960                           wreg	equ	0xFE8
  5961                           indf1	equ	0xFE7
  5962                           fsr1h	equ	0xFE2
  5963                           fsr1l	equ	0xFE1
  5964                           indf2	equ	0xFDF
  5965                           postinc2	equ	0xFDE
  5966                           postdec2	equ	0xFDD
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           
  5971 ;; *************** function _WriteCmdXLCD *****************
  5972 ;; Defined at:
  5973 ;;		line 538 in file "xlcd.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;  cmd             1    wreg     unsigned char 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  cmd             1    0[BANK1 ] unsigned char 
  5978 ;; Return value:  Size  Location     Type
  5979 ;;                  1    wreg      void 
  5980 ;; Registers used:
  5981 ;;		wreg, status,2, status,0, cstack
  5982 ;; Tracked objects:
  5983 ;;		On entry : 0/0
  5984 ;;		On exit  : 0/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5987 ;;      Params:         0       0       0       0       0       0       0
  5988 ;;      Locals:         0       0       1       0       0       0       0
  5989 ;;      Temps:          0       0       0       0       0       0       0
  5990 ;;      Totals:         0       0       1       0       0       0       0
  5991 ;;Total ram usage:        1 bytes
  5992 ;; Hardware stack levels used:    1
  5993 ;; Hardware stack levels required when called:   10
  5994 ;; This function calls:
  5995 ;;		_DelayFor18TCY
  5996 ;; This function is called by:
  5997 ;;		_OpenXLCD
  5998 ;;		_main
  5999 ;;		_escreveLinhaLCD
  6000 ;;		_feedbackUSART
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           	psect	text33
  6005  001CEE                     __ptext33:
  6006                           	opt stack 0
  6007  001CEE                     _WriteCmdXLCD:
  6008                           	opt stack 17
  6009                           
  6010                           ;incstack = 0
  6011                           ;WriteCmdXLCD@cmd stored from wreg
  6012  001CEE  0101               	movlb	1	; () banked
  6013  001CF0  6F34               	movwf	WriteCmdXLCD@cmd& (0+255),b
  6014                           
  6015                           ;xlcd.c: 556: TRISD &= 0xf0;
  6016  001CF2  0EF0               	movlw	240
  6017  001CF4  1695               	andwf	3989,f,c	;volatile
  6018                           
  6019                           ;xlcd.c: 557: PORTD &= 0xf0;
  6020  001CF6  0EF0               	movlw	240
  6021  001CF8  1683               	andwf	3971,f,c	;volatile
  6022                           
  6023                           ;xlcd.c: 558: PORTD |= (cmd >> 4)&0x0f;
  6024  001CFA  0101               	movlb	1	; () banked
  6025  001CFC  3934               	swapf	WriteCmdXLCD@cmd& (0+255),w,b
  6026  001CFE  0B0F               	andlw	15
  6027  001D00  0B0F               	andlw	15
  6028  001D02  1283               	iorwf	3971,f,c	;volatile
  6029                           
  6030                           ; BSR set to: 1
  6031                           ;xlcd.c: 560: LATDbits.LATD5 = 0;
  6032  001D04  9A8C               	bcf	3980,5,c	;volatile
  6033                           
  6034                           ; BSR set to: 1
  6035                           ;xlcd.c: 561: LATDbits.LATD4 = 0;
  6036  001D06  988C               	bcf	3980,4,c	;volatile
  6037                           
  6038                           ; BSR set to: 1
  6039                           ;xlcd.c: 562: DelayFor18TCY();
  6040  001D08  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6041                           
  6042                           ;xlcd.c: 563: LATDbits.LATD6 = 1;
  6043  001D0C  8C8C               	bsf	3980,6,c	;volatile
  6044                           
  6045                           ;xlcd.c: 564: DelayFor18TCY();
  6046  001D0E  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6047                           
  6048                           ;xlcd.c: 565: LATDbits.LATD6 = 0;
  6049  001D12  9C8C               	bcf	3980,6,c	;volatile
  6050                           
  6051                           ;xlcd.c: 570: PORTD &= 0xf0;
  6052  001D14  0EF0               	movlw	240
  6053  001D16  1683               	andwf	3971,f,c	;volatile
  6054                           
  6055                           ;xlcd.c: 571: PORTD |= cmd & 0x0f;
  6056  001D18  0101               	movlb	1	; () banked
  6057  001D1A  5134               	movf	WriteCmdXLCD@cmd& (0+255),w,b
  6058  001D1C  0B0F               	andlw	15
  6059  001D1E  1283               	iorwf	3971,f,c	;volatile
  6060                           
  6061                           ; BSR set to: 1
  6062                           ;xlcd.c: 573: DelayFor18TCY();
  6063  001D20  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6064                           
  6065                           ;xlcd.c: 574: LATDbits.LATD6 = 1;
  6066  001D24  8C8C               	bsf	3980,6,c	;volatile
  6067                           
  6068                           ;xlcd.c: 575: DelayFor18TCY();
  6069  001D26  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6070                           
  6071                           ;xlcd.c: 576: LATDbits.LATD6 = 0;
  6072  001D2A  9C8C               	bcf	3980,6,c	;volatile
  6073                           
  6074                           ;xlcd.c: 580: TRISD |= 0x0f;
  6075  001D2C  0E0F               	movlw	15
  6076  001D2E  1295               	iorwf	3989,f,c	;volatile
  6077  001D30  0012               	return	
  6078  001D32                     __end_of_WriteCmdXLCD:
  6079                           	opt stack 0
  6080                           tblptru	equ	0xFF8
  6081                           tblptrh	equ	0xFF7
  6082                           tblptrl	equ	0xFF6
  6083                           tablat	equ	0xFF5
  6084                           prodh	equ	0xFF4
  6085                           prodl	equ	0xFF3
  6086                           intcon	equ	0xFF2
  6087                           intcon2	equ	0xFF1
  6088                           intcon3	equ	0xFF0
  6089                           indf0	equ	0xFEF
  6090                           postinc0	equ	0xFEE
  6091                           fsr0h	equ	0xFEA
  6092                           fsr0l	equ	0xFE9
  6093                           wreg	equ	0xFE8
  6094                           indf1	equ	0xFE7
  6095                           fsr1h	equ	0xFE2
  6096                           fsr1l	equ	0xFE1
  6097                           indf2	equ	0xFDF
  6098                           postinc2	equ	0xFDE
  6099                           postdec2	equ	0xFDD
  6100                           fsr2h	equ	0xFDA
  6101                           fsr2l	equ	0xFD9
  6102                           status	equ	0xFD8
  6103                           
  6104 ;; *************** function _DelayXLCD *****************
  6105 ;; Defined at:
  6106 ;;		line 33 in file "xlcd.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;		None
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;		None
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  1    wreg      void 
  6113 ;; Registers used:
  6114 ;;		wreg
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6120 ;;      Params:         0       0       0       0       0       0       0
  6121 ;;      Locals:         0       0       0       0       0       0       0
  6122 ;;      Temps:          0       0       1       0       0       0       0
  6123 ;;      Totals:         0       0       1       0       0       0       0
  6124 ;;Total ram usage:        1 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    9
  6127 ;; This function calls:
  6128 ;;		Nothing
  6129 ;; This function is called by:
  6130 ;;		_OpenXLCD
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text34
  6135  00227E                     __ptext34:
  6136                           	opt stack 0
  6137  00227E                     _DelayXLCD:
  6138                           	opt stack 20
  6139                           
  6140                           ;xlcd.c: 36: _delay((unsigned long)((15)*(6000000/4000.0)));
  6141                           
  6142                           ;incstack = 0
  6143  00227E  0E1E               	movlw	30
  6144  002280  0101               	movlb	1	; () banked
  6145  002282  6F34               	movwf	??_DelayXLCD& (0+255),b
  6146  002284  0E37               	movlw	55
  6147  002286                     u7497:
  6148  002286  2EE8               	decfsz	wreg,f,c
  6149  002288  D7FE               	bra	u7497
  6150  00228A  2F34               	decfsz	??_DelayXLCD& (0+255),f,b
  6151  00228C  D7FC               	bra	u7497
  6152  00228E  0012               	return	
  6153  002290                     __end_of_DelayXLCD:
  6154                           	opt stack 0
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           intcon	equ	0xFF2
  6162                           intcon2	equ	0xFF1
  6163                           intcon3	equ	0xFF0
  6164                           indf0	equ	0xFEF
  6165                           postinc0	equ	0xFEE
  6166                           fsr0h	equ	0xFEA
  6167                           fsr0l	equ	0xFE9
  6168                           wreg	equ	0xFE8
  6169                           indf1	equ	0xFE7
  6170                           fsr1h	equ	0xFE2
  6171                           fsr1l	equ	0xFE1
  6172                           indf2	equ	0xFDF
  6173                           postinc2	equ	0xFDE
  6174                           postdec2	equ	0xFDD
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function _DelayPORXLCD *****************
  6180 ;; Defined at:
  6181 ;;		line 25 in file "xlcd.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;		None
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;		None
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  1    wreg      void 
  6188 ;; Registers used:
  6189 ;;		wreg
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6195 ;;      Params:         0       0       0       0       0       0       0
  6196 ;;      Locals:         0       0       0       0       0       0       0
  6197 ;;      Temps:          0       0       1       0       0       0       0
  6198 ;;      Totals:         0       0       1       0       0       0       0
  6199 ;;Total ram usage:        1 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    9
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		_OpenXLCD
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text35
  6210  002134                     __ptext35:
  6211                           	opt stack 0
  6212  002134                     _DelayPORXLCD:
  6213                           	opt stack 20
  6214                           
  6215                           ;xlcd.c: 28: _delay((unsigned long)((15)*(6000000/4000.0)));
  6216                           
  6217                           ;incstack = 0
  6218  002134  0E1E               	movlw	30
  6219  002136  0101               	movlb	1	; () banked
  6220  002138  6F34               	movwf	??_DelayPORXLCD& (0+255),b
  6221  00213A  0E37               	movlw	55
  6222  00213C                     u7507:
  6223  00213C  2EE8               	decfsz	wreg,f,c
  6224  00213E  D7FE               	bra	u7507
  6225  002140  2F34               	decfsz	??_DelayPORXLCD& (0+255),f,b
  6226  002142  D7FC               	bra	u7507
  6227                           
  6228                           ;xlcd.c: 29: _delay((unsigned long)((15)*(6000000/4000.0)));
  6229  002144  0E1E               	movlw	30
  6230  002146  0101               	movlb	1	; () banked
  6231  002148  6F34               	movwf	??_DelayPORXLCD& (0+255),b
  6232  00214A  0E37               	movlw	55
  6233  00214C                     u7517:
  6234  00214C  2EE8               	decfsz	wreg,f,c
  6235  00214E  D7FE               	bra	u7517
  6236  002150  2F34               	decfsz	??_DelayPORXLCD& (0+255),f,b
  6237  002152  D7FC               	bra	u7517
  6238  002154  0012               	return	
  6239  002156                     __end_of_DelayPORXLCD:
  6240                           	opt stack 0
  6241                           tblptru	equ	0xFF8
  6242                           tblptrh	equ	0xFF7
  6243                           tblptrl	equ	0xFF6
  6244                           tablat	equ	0xFF5
  6245                           prodh	equ	0xFF4
  6246                           prodl	equ	0xFF3
  6247                           intcon	equ	0xFF2
  6248                           intcon2	equ	0xFF1
  6249                           intcon3	equ	0xFF0
  6250                           indf0	equ	0xFEF
  6251                           postinc0	equ	0xFEE
  6252                           fsr0h	equ	0xFEA
  6253                           fsr0l	equ	0xFE9
  6254                           wreg	equ	0xFE8
  6255                           indf1	equ	0xFE7
  6256                           fsr1h	equ	0xFE2
  6257                           fsr1l	equ	0xFE1
  6258                           indf2	equ	0xFDF
  6259                           postinc2	equ	0xFDE
  6260                           postdec2	equ	0xFDD
  6261                           fsr2h	equ	0xFDA
  6262                           fsr2l	equ	0xFD9
  6263                           status	equ	0xFD8
  6264                           
  6265 ;; *************** function _BusyXLCD *****************
  6266 ;; Defined at:
  6267 ;;		line 218 in file "xlcd.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;		None
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;		None
  6272 ;; Return value:  Size  Location     Type
  6273 ;;                  1    wreg      unsigned char 
  6274 ;; Registers used:
  6275 ;;		wreg, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6281 ;;      Params:         0       0       0       0       0       0       0
  6282 ;;      Locals:         0       0       0       0       0       0       0
  6283 ;;      Temps:          0       0       0       0       0       0       0
  6284 ;;      Totals:         0       0       0       0       0       0       0
  6285 ;;Total ram usage:        0 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:   10
  6288 ;; This function calls:
  6289 ;;		_DelayFor18TCY
  6290 ;; This function is called by:
  6291 ;;		_OpenXLCD
  6292 ;;		_putsXLCD
  6293 ;;		_main
  6294 ;;		_escreveLinhaLCD
  6295 ;;		_feedbackUSART
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text36
  6300  001EF2                     __ptext36:
  6301                           	opt stack 0
  6302  001EF2                     _BusyXLCD:
  6303                           	opt stack 16
  6304                           
  6305                           ;xlcd.c: 219: LATDbits.LATD5 = 1;
  6306                           
  6307                           ;incstack = 0
  6308  001EF2  8A8C               	bsf	3980,5,c	;volatile
  6309                           
  6310                           ;xlcd.c: 220: LATDbits.LATD4 = 0;
  6311  001EF4  988C               	bcf	3980,4,c	;volatile
  6312                           
  6313                           ;xlcd.c: 221: DelayFor18TCY();
  6314  001EF6  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6315                           
  6316                           ;xlcd.c: 222: LATDbits.LATD6 = 1;
  6317  001EFA  8C8C               	bsf	3980,6,c	;volatile
  6318                           
  6319                           ;xlcd.c: 223: DelayFor18TCY();
  6320  001EFC  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6321                           
  6322                           ;xlcd.c: 240: if (PORTD & 0x08)
  6323  001F00  A683               	btfss	3971,3,c	;volatile
  6324  001F02  D00A               	goto	l915
  6325                           
  6326                           ;xlcd.c: 242: {
  6327                           ;xlcd.c: 243: LATDbits.LATD6 = 0;
  6328  001F04  9C8C               	bcf	3980,6,c	;volatile
  6329                           
  6330                           ;xlcd.c: 244: DelayFor18TCY();
  6331  001F06  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6332                           
  6333                           ;xlcd.c: 245: LATDbits.LATD6 = 1;
  6334  001F0A  8C8C               	bsf	3980,6,c	;volatile
  6335                           
  6336                           ;xlcd.c: 246: DelayFor18TCY();
  6337  001F0C  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6338                           
  6339                           ;xlcd.c: 247: LATDbits.LATD6 = 0;
  6340  001F10  9C8C               	bcf	3980,6,c	;volatile
  6341                           
  6342                           ;xlcd.c: 248: LATDbits.LATD5 = 0;
  6343  001F12  9A8C               	bcf	3980,5,c	;volatile
  6344                           
  6345                           ;xlcd.c: 249: return 1;
  6346  001F14  0E01               	movlw	1
  6347                           
  6348                           ;xlcd.c: 250: } else
  6349  001F16  0012               	return	
  6350  001F18                     l915:
  6351                           
  6352                           ;xlcd.c: 251: {
  6353                           ;xlcd.c: 252: LATDbits.LATD6 = 0;
  6354  001F18  9C8C               	bcf	3980,6,c	;volatile
  6355                           
  6356                           ;xlcd.c: 253: DelayFor18TCY();
  6357  001F1A  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6358                           
  6359                           ;xlcd.c: 254: LATDbits.LATD6 = 1;
  6360  001F1E  8C8C               	bsf	3980,6,c	;volatile
  6361                           
  6362                           ;xlcd.c: 255: DelayFor18TCY();
  6363  001F20  EC22  F011         	call	_DelayFor18TCY	;wreg free
  6364                           
  6365                           ;xlcd.c: 256: LATDbits.LATD6 = 0;
  6366  001F24  9C8C               	bcf	3980,6,c	;volatile
  6367                           
  6368                           ;xlcd.c: 257: LATDbits.LATD5 = 0;
  6369  001F26  9A8C               	bcf	3980,5,c	;volatile
  6370                           
  6371                           ;xlcd.c: 258: return 0;
  6372  001F28  0E00               	movlw	0
  6373  001F2A  0012               	return	
  6374  001F2C                     __end_of_BusyXLCD:
  6375                           	opt stack 0
  6376                           tblptru	equ	0xFF8
  6377                           tblptrh	equ	0xFF7
  6378                           tblptrl	equ	0xFF6
  6379                           tablat	equ	0xFF5
  6380                           prodh	equ	0xFF4
  6381                           prodl	equ	0xFF3
  6382                           intcon	equ	0xFF2
  6383                           intcon2	equ	0xFF1
  6384                           intcon3	equ	0xFF0
  6385                           indf0	equ	0xFEF
  6386                           postinc0	equ	0xFEE
  6387                           fsr0h	equ	0xFEA
  6388                           fsr0l	equ	0xFE9
  6389                           wreg	equ	0xFE8
  6390                           indf1	equ	0xFE7
  6391                           fsr1h	equ	0xFE2
  6392                           fsr1l	equ	0xFE1
  6393                           indf2	equ	0xFDF
  6394                           postinc2	equ	0xFDE
  6395                           postdec2	equ	0xFDD
  6396                           fsr2h	equ	0xFDA
  6397                           fsr2l	equ	0xFD9
  6398                           status	equ	0xFD8
  6399                           
  6400 ;; *************** function _DelayFor18TCY *****************
  6401 ;; Defined at:
  6402 ;;		line 18 in file "xlcd.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;		None
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;		None
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  1    wreg      void 
  6409 ;; Registers used:
  6410 ;;		wreg
  6411 ;; Tracked objects:
  6412 ;;		On entry : 0/0
  6413 ;;		On exit  : 0/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6416 ;;      Params:         0       0       0       0       0       0       0
  6417 ;;      Locals:         0       0       0       0       0       0       0
  6418 ;;      Temps:          0       0       0       0       0       0       0
  6419 ;;      Totals:         0       0       0       0       0       0       0
  6420 ;;Total ram usage:        0 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:    9
  6423 ;; This function calls:
  6424 ;;		Nothing
  6425 ;; This function is called by:
  6426 ;;		_OpenXLCD
  6427 ;;		_BusyXLCD
  6428 ;;		_WriteCmdXLCD
  6429 ;;		_WriteDataXLCD
  6430 ;;		_ReadAddrXLCD
  6431 ;;		_ReadDataXLCD
  6432 ;;		_SetCGRamAddr
  6433 ;;		_SetDDRamAddr
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           	psect	text37
  6438  002244                     __ptext37:
  6439                           	opt stack 0
  6440  002244                     _DelayFor18TCY:
  6441                           	opt stack 16
  6442                           
  6443                           ;xlcd.c: 20: _delay((unsigned long)((18)*(6000000/4000000.0)));
  6444                           
  6445                           ;incstack = 0
  6446  002244  0E09               	movlw	9
  6447  002246                     u7527:
  6448  002246  2EE8               	decfsz	wreg,f,c
  6449  002248  D7FE               	bra	u7527
  6450                           
  6451                           ;xlcd.c: 21: _delay((unsigned long)((1)*(6000000/4000.0)));
  6452  00224A  0ED6               	movlw	214
  6453  00224C                     u7537:
  6454  00224C  D000               	nop2	
  6455  00224E  D000               	nop2	
  6456  002250  2EE8               	decfsz	wreg,f,c
  6457  002252  D7FC               	bra	u7537
  6458  002254  D000               	nop2	
  6459  002256  0012               	return	
  6460  002258                     __end_of_DelayFor18TCY:
  6461                           	opt stack 0
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           intcon2	equ	0xFF1
  6470                           intcon3	equ	0xFF0
  6471                           indf0	equ	0xFEF
  6472                           postinc0	equ	0xFEE
  6473                           fsr0h	equ	0xFEA
  6474                           fsr0l	equ	0xFE9
  6475                           wreg	equ	0xFE8
  6476                           indf1	equ	0xFE7
  6477                           fsr1h	equ	0xFE2
  6478                           fsr1l	equ	0xFE1
  6479                           indf2	equ	0xFDF
  6480                           postinc2	equ	0xFDE
  6481                           postdec2	equ	0xFDD
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function _INTERRUPT_InterruptManagerLow *****************
  6487 ;; Defined at:
  6488 ;;		line 117 in file "mcc_generated_files/interrupt_manager.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;		None
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  1    wreg      void 
  6495 ;; Registers used:
  6496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6502 ;;      Params:         0       0       0       0       0       0       0
  6503 ;;      Locals:         0       0       0       0       0       0       0
  6504 ;;      Temps:          0      21       0       0       0       0       0
  6505 ;;      Totals:         0      21       0       0       0       0       0
  6506 ;;Total ram usage:       21 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    8
  6509 ;; This function calls:
  6510 ;;		_ADC_ISR
  6511 ;;		_EUSART1_Receive_ISR
  6512 ;; This function is called by:
  6513 ;;		Interrupt level 1
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	intcodelo
  6518  000018                     __pintcodelo:
  6519                           	opt stack 0
  6520  000018                     _INTERRUPT_InterruptManagerLow:
  6521                           	opt stack 16
  6522                           
  6523                           ;incstack = 0
  6524  000018  8048               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6525  00001A  CFD8 F0D0          	movff	status,??_INTERRUPT_InterruptManagerLow
  6526  00001E  CFE8 F0D1          	movff	wreg,??_INTERRUPT_InterruptManagerLow+1
  6527  000022  CFE0 F0D2          	movff	bsr,??_INTERRUPT_InterruptManagerLow+2
  6528  000026  CFFA F0D3          	movff	pclath,??_INTERRUPT_InterruptManagerLow+3
  6529  00002A  CFFB F0D4          	movff	pclatu,??_INTERRUPT_InterruptManagerLow+4
  6530  00002E  CFE9 F0D5          	movff	fsr0l,??_INTERRUPT_InterruptManagerLow+5
  6531  000032  CFEA F0D6          	movff	fsr0h,??_INTERRUPT_InterruptManagerLow+6
  6532  000036  CFE1 F0D7          	movff	fsr1l,??_INTERRUPT_InterruptManagerLow+7
  6533  00003A  CFE2 F0D8          	movff	fsr1h,??_INTERRUPT_InterruptManagerLow+8
  6534  00003E  CFD9 F0D9          	movff	fsr2l,??_INTERRUPT_InterruptManagerLow+9
  6535  000042  CFDA F0DA          	movff	fsr2h,??_INTERRUPT_InterruptManagerLow+10
  6536  000046  CFF3 F0DB          	movff	prodl,??_INTERRUPT_InterruptManagerLow+11
  6537  00004A  CFF4 F0DC          	movff	prodh,??_INTERRUPT_InterruptManagerLow+12
  6538  00004E  CFF6 F0DD          	movff	tblptrl,??_INTERRUPT_InterruptManagerLow+13
  6539  000052  CFF7 F0DE          	movff	tblptrh,??_INTERRUPT_InterruptManagerLow+14
  6540  000056  CFF8 F0DF          	movff	tblptru,??_INTERRUPT_InterruptManagerLow+15
  6541  00005A  CFF5 F0E0          	movff	tablat,??_INTERRUPT_InterruptManagerLow+16
  6542  00005E  C048  F0E1         	movff	btemp,??_INTERRUPT_InterruptManagerLow+17
  6543  000062  C049  F0E2         	movff	btemp+1,??_INTERRUPT_InterruptManagerLow+18
  6544  000066  C04A  F0E3         	movff	btemp+2,??_INTERRUPT_InterruptManagerLow+19
  6545  00006A  C04B  F0E4         	movff	btemp+3,??_INTERRUPT_InterruptManagerLow+20
  6546                           
  6547                           ;interrupt_manager.c: 120: if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  6548  00006E  BC9D               	btfsc	3997,6,c	;volatile
  6549  000070  AC9E               	btfss	3998,6,c	;volatile
  6550  000072  D003               	goto	i1l133
  6551                           
  6552                           ;interrupt_manager.c: 121: {
  6553                           ;interrupt_manager.c: 122: ADC_ISR();
  6554  000074  EC77  F004         	call	_ADC_ISR	;wreg free
  6555                           
  6556                           ;interrupt_manager.c: 123: }
  6557  000078  D005               	goto	i1l135
  6558  00007A                     i1l133:
  6559                           
  6560                           ;interrupt_manager.c: 124: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6561  00007A  BA9D               	btfsc	3997,5,c	;volatile
  6562  00007C  AA9E               	btfss	3998,5,c	;volatile
  6563  00007E  D002               	goto	i1l135
  6564                           
  6565                           ;interrupt_manager.c: 125: {
  6566                           ;interrupt_manager.c: 126: EUSART1_Receive_ISR();
  6567  000080  EC91  F005         	call	_EUSART1_Receive_ISR	;wreg free
  6568  000084                     i1l135:
  6569                           
  6570                           ;interrupt_manager.c: 128: else
  6571                           ;interrupt_manager.c: 129: {
  6572  000084  C0E4  F04B         	movff	??_INTERRUPT_InterruptManagerLow+20,btemp+3
  6573  000088  C0E3  F04A         	movff	??_INTERRUPT_InterruptManagerLow+19,btemp+2
  6574  00008C  C0E2  F049         	movff	??_INTERRUPT_InterruptManagerLow+18,btemp+1
  6575  000090  C0E1  F048         	movff	??_INTERRUPT_InterruptManagerLow+17,btemp
  6576  000094  C0E0  FFF5         	movff	??_INTERRUPT_InterruptManagerLow+16,tablat
  6577  000098  C0DF  FFF8         	movff	??_INTERRUPT_InterruptManagerLow+15,tblptru
  6578  00009C  C0DE  FFF7         	movff	??_INTERRUPT_InterruptManagerLow+14,tblptrh
  6579  0000A0  C0DD  FFF6         	movff	??_INTERRUPT_InterruptManagerLow+13,tblptrl
  6580  0000A4  C0DC  FFF4         	movff	??_INTERRUPT_InterruptManagerLow+12,prodh
  6581  0000A8  C0DB  FFF3         	movff	??_INTERRUPT_InterruptManagerLow+11,prodl
  6582  0000AC  C0DA  FFDA         	movff	??_INTERRUPT_InterruptManagerLow+10,fsr2h
  6583  0000B0  C0D9  FFD9         	movff	??_INTERRUPT_InterruptManagerLow+9,fsr2l
  6584  0000B4  C0D8  FFE2         	movff	??_INTERRUPT_InterruptManagerLow+8,fsr1h
  6585  0000B8  C0D7  FFE1         	movff	??_INTERRUPT_InterruptManagerLow+7,fsr1l
  6586  0000BC  C0D6  FFEA         	movff	??_INTERRUPT_InterruptManagerLow+6,fsr0h
  6587  0000C0  C0D5  FFE9         	movff	??_INTERRUPT_InterruptManagerLow+5,fsr0l
  6588  0000C4  C0D4  FFFB         	movff	??_INTERRUPT_InterruptManagerLow+4,pclatu
  6589  0000C8  C0D3  FFFA         	movff	??_INTERRUPT_InterruptManagerLow+3,pclath
  6590  0000CC  C0D2  FFE0         	movff	??_INTERRUPT_InterruptManagerLow+2,bsr
  6591  0000D0  C0D1  FFE8         	movff	??_INTERRUPT_InterruptManagerLow+1,wreg
  6592  0000D4  C0D0  FFD8         	movff	??_INTERRUPT_InterruptManagerLow,status
  6593  0000D8  9048               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6594  0000DA  0010               	retfie	
  6595  0000DC                     __end_of_INTERRUPT_InterruptManagerLow:
  6596                           	opt stack 0
  6597                           pclatu	equ	0xFFB
  6598                           pclath	equ	0xFFA
  6599                           tblptru	equ	0xFF8
  6600                           tblptrh	equ	0xFF7
  6601                           tblptrl	equ	0xFF6
  6602                           tablat	equ	0xFF5
  6603                           prodh	equ	0xFF4
  6604                           prodl	equ	0xFF3
  6605                           intcon	equ	0xFF2
  6606                           intcon2	equ	0xFF1
  6607                           intcon3	equ	0xFF0
  6608                           indf0	equ	0xFEF
  6609                           postinc0	equ	0xFEE
  6610                           fsr0h	equ	0xFEA
  6611                           fsr0l	equ	0xFE9
  6612                           wreg	equ	0xFE8
  6613                           indf1	equ	0xFE7
  6614                           fsr1h	equ	0xFE2
  6615                           fsr1l	equ	0xFE1
  6616                           bsr	equ	0xFE0
  6617                           indf2	equ	0xFDF
  6618                           postinc2	equ	0xFDE
  6619                           postdec2	equ	0xFDD
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8
  6623                           
  6624 ;; *************** function _EUSART1_Receive_ISR *****************
  6625 ;; Defined at:
  6626 ;;		line 108 in file "mcc_generated_files/eusart1.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;		None
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  tmpAlarme       1   32[COMRAM] unsigned char 
  6631 ;;  i2              2   30[COMRAM] int 
  6632 ;;  i1              2   28[COMRAM] int 
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  1    wreg      void 
  6635 ;; Registers used:
  6636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6642 ;;      Params:         0       0       0       0       0       0       0
  6643 ;;      Locals:         5       0       0       0       0       0       0
  6644 ;;      Temps:          5       0       0       0       0       0       0
  6645 ;;      Totals:        10       0       0       0       0       0       0
  6646 ;;Total ram usage:       10 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    4
  6649 ;; This function calls:
  6650 ;;		Nothing
  6651 ;; This function is called by:
  6652 ;;		_INTERRUPT_InterruptManagerLow
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text39
  6657  000B22                     __ptext39:
  6658                           	opt stack 0
  6659  000B22                     _EUSART1_Receive_ISR:
  6660                           	opt stack 19
  6661                           
  6662                           ;eusart1.c: 110: if (RCSTA1bits.OERR) {
  6663                           
  6664                           ;incstack = 0
  6665  000B22  A2AB               	btfss	4011,1,c	;volatile
  6666  000B24  D002               	goto	i1l647
  6667                           
  6668                           ;eusart1.c: 112: RCSTA1bits.CREN = 0;
  6669  000B26  98AB               	bcf	4011,4,c	;volatile
  6670                           
  6671                           ;eusart1.c: 113: RCSTA1bits.CREN = 1;
  6672  000B28  88AB               	bsf	4011,4,c	;volatile
  6673  000B2A                     i1l647:
  6674                           
  6675                           ;eusart1.c: 114: }
  6676                           ;eusart1.c: 116: if (j >= 0 && j < 42 - 1 && strUSART[j] != '\r') {
  6677  000B2A  BE40               	btfsc	_j,7,c	;volatile
  6678  000B2C  D063               	goto	i1l648
  6679  000B2E  5040               	movf	_j,w,c	;volatile
  6680  000B30  0A80               	xorlw	128
  6681  000B32  0F57               	addlw	-169
  6682  000B34  B0D8               	btfsc	status,0,c
  6683  000B36  D05E               	goto	i1l648
  6684  000B38  5040               	movf	_j,w,c	;volatile
  6685  000B3A  0D01               	mullw	1
  6686  000B3C  0E78               	movlw	low _strUSART
  6687  000B3E  24F3               	addwf	prodl,w,c
  6688  000B40  6ED9               	movwf	fsr2l,c
  6689  000B42  0E00               	movlw	high _strUSART
  6690  000B44  20F4               	addwfc	prodh,w,c
  6691  000B46  6EDA               	movwf	fsr2h,c
  6692  000B48  0E0D               	movlw	13
  6693  000B4A  18DE               	xorwf	postinc2,w,c
  6694  000B4C  B4D8               	btfsc	status,2,c
  6695  000B4E  D052               	goto	i1l648
  6696                           
  6697                           ;eusart1.c: 118: eusart_Tx_On = 1;
  6698  000B50  0E01               	movlw	1
  6699  000B52  0100               	movlb	0	; () banked
  6700  000B54  6F73               	movwf	_eusart_Tx_On& (0+255),b	;volatile
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;eusart1.c: 119: strUSART[j] = RCREG1;
  6704  000B56  5040               	movf	_j,w,c	;volatile
  6705  000B58  0D01               	mullw	1
  6706  000B5A  0E78               	movlw	low _strUSART
  6707  000B5C  24F3               	addwf	prodl,w,c
  6708  000B5E  6ED9               	movwf	fsr2l,c
  6709  000B60  0E00               	movlw	high _strUSART
  6710  000B62  20F4               	addwfc	prodh,w,c
  6711  000B64  6EDA               	movwf	fsr2h,c
  6712  000B66  CFAE FFDF          	movff	4014,indf2	;volatile
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;eusart1.c: 122: if (j == 40) {
  6716  000B6A  0E28               	movlw	40
  6717  000B6C  1840               	xorwf	_j,w,c	;volatile
  6718  000B6E  A4D8               	btfss	status,2,c
  6719  000B70  D004               	goto	i1l649
  6720  000B72                     i1u521_20:
  6721                           
  6722                           ; BSR set to: 0
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;eusart1.c: 123: while (!PIR1bits.TX1IF);
  6726  000B72  A89E               	btfss	3998,4,c	;volatile
  6727  000B74  D7FE               	goto	i1u521_20
  6728                           
  6729                           ;eusart1.c: 124: TXREG1 = '\r';
  6730  000B76  0E0D               	movlw	13
  6731  000B78  D00B               	goto	L1
  6732  000B7A                     i1l649:
  6733                           
  6734                           ;eusart1.c: 126: while (!PIR1bits.TX1IF);
  6735  000B7A  A89E               	btfss	3998,4,c	;volatile
  6736  000B7C  D7FE               	goto	i1l649
  6737                           
  6738                           ;eusart1.c: 127: TXREG1 = strUSART[j];
  6739  000B7E  5040               	movf	_j,w,c	;volatile
  6740  000B80  0D01               	mullw	1
  6741  000B82  0E78               	movlw	low _strUSART
  6742  000B84  24F3               	addwf	prodl,w,c
  6743  000B86  6ED9               	movwf	fsr2l,c
  6744  000B88  0E00               	movlw	high _strUSART
  6745  000B8A  20F4               	addwfc	prodh,w,c
  6746  000B8C  6EDA               	movwf	fsr2h,c
  6747  000B8E  50DF               	movf	indf2,w,c
  6748  000B90                     L1:
  6749  000B90  6EAD               	movwf	4013,c	;volatile
  6750                           
  6751                           ;eusart1.c: 128: }
  6752                           ;eusart1.c: 131: if (strUSART[j] != '\r' && strUSART[j] == 8) {
  6753  000B92  5040               	movf	_j,w,c	;volatile
  6754  000B94  0D01               	mullw	1
  6755  000B96  0E78               	movlw	low _strUSART
  6756  000B98  24F3               	addwf	prodl,w,c
  6757  000B9A  6ED9               	movwf	fsr2l,c
  6758  000B9C  0E00               	movlw	high _strUSART
  6759  000B9E  20F4               	addwfc	prodh,w,c
  6760  000BA0  6EDA               	movwf	fsr2h,c
  6761  000BA2  0E0D               	movlw	13
  6762  000BA4  18DE               	xorwf	postinc2,w,c
  6763  000BA6  B4D8               	btfsc	status,2,c
  6764  000BA8  D024               	goto	i1l658
  6765  000BAA  5040               	movf	_j,w,c	;volatile
  6766  000BAC  0D01               	mullw	1
  6767  000BAE  0E78               	movlw	low _strUSART
  6768  000BB0  24F3               	addwf	prodl,w,c
  6769  000BB2  6ED9               	movwf	fsr2l,c
  6770  000BB4  0E00               	movlw	high _strUSART
  6771  000BB6  20F4               	addwfc	prodh,w,c
  6772  000BB8  6EDA               	movwf	fsr2h,c
  6773  000BBA  0E08               	movlw	8
  6774  000BBC  18DE               	xorwf	postinc2,w,c
  6775  000BBE  A4D8               	btfss	status,2,c
  6776  000BC0  D018               	goto	i1l658
  6777                           
  6778                           ;eusart1.c: 132: strUSART[j] = '\0';
  6779  000BC2  5040               	movf	_j,w,c	;volatile
  6780  000BC4  0D01               	mullw	1
  6781  000BC6  0E78               	movlw	low _strUSART
  6782  000BC8  24F3               	addwf	prodl,w,c
  6783  000BCA  6ED9               	movwf	fsr2l,c
  6784  000BCC  0E00               	movlw	high _strUSART
  6785  000BCE  20F4               	addwfc	prodh,w,c
  6786  000BD0  6EDA               	movwf	fsr2h,c
  6787  000BD2  0E00               	movlw	0
  6788  000BD4  6EDF               	movwf	indf2,c
  6789                           
  6790                           ;eusart1.c: 133: j--;
  6791  000BD6  0640               	decf	_j,f,c	;volatile
  6792                           
  6793                           ;eusart1.c: 134: if (j >= 0) {
  6794  000BD8  BE40               	btfsc	_j,7,c	;volatile
  6795  000BDA  D00B               	goto	i1l658
  6796                           
  6797                           ;eusart1.c: 135: strUSART[j] = '\0';
  6798  000BDC  5040               	movf	_j,w,c	;volatile
  6799  000BDE  0D01               	mullw	1
  6800  000BE0  0E78               	movlw	low _strUSART
  6801  000BE2  24F3               	addwf	prodl,w,c
  6802  000BE4  6ED9               	movwf	fsr2l,c
  6803  000BE6  0E00               	movlw	high _strUSART
  6804  000BE8  20F4               	addwfc	prodh,w,c
  6805  000BEA  6EDA               	movwf	fsr2h,c
  6806  000BEC  0E00               	movlw	0
  6807  000BEE  6EDF               	movwf	indf2,c
  6808                           
  6809                           ;eusart1.c: 136: j--;
  6810  000BF0  0640               	decf	_j,f,c	;volatile
  6811  000BF2                     i1l658:
  6812                           
  6813                           ;eusart1.c: 137: }
  6814                           ;eusart1.c: 138: }
  6815                           ;eusart1.c: 139: j++;
  6816  000BF2  2A40               	incf	_j,f,c	;volatile
  6817  000BF4                     i1l648:
  6818                           
  6819                           ;eusart1.c: 140: }
  6820                           ;eusart1.c: 143: if (( ( strUSART[0] == 'S' ) && ( strUSART[1] == 'A' ) && ( strUSART[2]
      +                           == '=' ) && ( strUSART[3] != '\0' ) && ( strUSART[4] != '\0' ) && ( strUSART[5] == '\r'
      +                           ) )) {
  6821  000BF4  0E53               	movlw	83
  6822  000BF6  0100               	movlb	0	; () banked
  6823  000BF8  1978               	xorwf	_strUSART& (0+255),w,b	;volatile
  6824  000BFA  A4D8               	btfss	status,2,c
  6825  000BFC  D03F               	goto	i1l661
  6826                           
  6827                           ; BSR set to: 0
  6828  000BFE  0E41               	movlw	65
  6829  000C00  1979               	xorwf	(_strUSART+1)& (0+255),w,b	;volatile
  6830  000C02  A4D8               	btfss	status,2,c
  6831  000C04  D03B               	goto	i1l661
  6832                           
  6833                           ; BSR set to: 0
  6834  000C06  0E3D               	movlw	61
  6835  000C08  197A               	xorwf	(_strUSART+2)& (0+255),w,b	;volatile
  6836  000C0A  A4D8               	btfss	status,2,c
  6837  000C0C  D037               	goto	i1l661
  6838                           
  6839                           ; BSR set to: 0
  6840  000C0E  517B               	movf	(_strUSART+3)& (0+255),w,b	;volatile
  6841  000C10  B4D8               	btfsc	status,2,c
  6842  000C12  D034               	goto	i1l661
  6843                           
  6844                           ; BSR set to: 0
  6845  000C14  517C               	movf	(_strUSART+4)& (0+255),w,b	;volatile
  6846  000C16  B4D8               	btfsc	status,2,c
  6847  000C18  D031               	goto	i1l661
  6848                           
  6849                           ; BSR set to: 0
  6850  000C1A  0E0D               	movlw	13
  6851  000C1C  197D               	xorwf	(_strUSART+5)& (0+255),w,b	;volatile
  6852  000C1E  A4D8               	btfss	status,2,c
  6853  000C20  D02D               	goto	i1l661
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;eusart1.c: 145: int i1, i2;
  6857                           ;eusart1.c: 147: i1 = strUSART[3] - '0';
  6858  000C22  0ED0               	movlw	208
  6859  000C24  257B               	addwf	(_strUSART+3)& (0+255),w,b	;volatile
  6860  000C26  6E1D               	movwf	EUSART1_Receive_ISR@i1,c
  6861  000C28  6A1E               	clrf	EUSART1_Receive_ISR@i1+1,c
  6862  000C2A  0EFF               	movlw	255
  6863  000C2C  221E               	addwfc	EUSART1_Receive_ISR@i1+1,f,c
  6864                           
  6865                           ;eusart1.c: 148: i2 = strUSART[4] - '0';
  6866  000C2E  0ED0               	movlw	208
  6867  000C30  257C               	addwf	(_strUSART+4)& (0+255),w,b	;volatile
  6868  000C32  6E1F               	movwf	EUSART1_Receive_ISR@i2,c
  6869  000C34  6A20               	clrf	EUSART1_Receive_ISR@i2+1,c
  6870  000C36  0EFF               	movlw	255
  6871  000C38  2220               	addwfc	EUSART1_Receive_ISR@i2+1,f,c
  6872                           
  6873                           ;eusart1.c: 150: if (i1 >= 0 && i1 <= 9 && i2 >= 0 && i2 <= 9) {
  6874  000C3A  BE1E               	btfsc	EUSART1_Receive_ISR@i1+1,7,c
  6875  000C3C  D01F               	goto	i1l661
  6876                           
  6877                           ; BSR set to: 0
  6878  000C3E  BE1E               	btfsc	EUSART1_Receive_ISR@i1+1,7,c
  6879  000C40  D006               	goto	i1u534_20
  6880  000C42  501E               	movf	EUSART1_Receive_ISR@i1+1,w,c
  6881  000C44  E11B               	bnz	i1l5160
  6882  000C46  0E0A               	movlw	10
  6883  000C48  5C1D               	subwf	EUSART1_Receive_ISR@i1,w,c
  6884  000C4A  B0D8               	btfsc	status,0,c
  6885  000C4C  D017               	goto	i1l661
  6886  000C4E                     i1u534_20:
  6887                           
  6888                           ; BSR set to: 0
  6889  000C4E  BE20               	btfsc	EUSART1_Receive_ISR@i2+1,7,c
  6890  000C50  D015               	goto	i1l661
  6891                           
  6892                           ; BSR set to: 0
  6893  000C52  BE20               	btfsc	EUSART1_Receive_ISR@i2+1,7,c
  6894  000C54  D006               	goto	i1u536_20
  6895  000C56  5020               	movf	EUSART1_Receive_ISR@i2+1,w,c
  6896  000C58  E111               	bnz	i1l5160
  6897  000C5A  0E0A               	movlw	10
  6898  000C5C  5C1F               	subwf	EUSART1_Receive_ISR@i2,w,c
  6899  000C5E  B0D8               	btfsc	status,0,c
  6900  000C60  D00D               	goto	i1l661
  6901  000C62                     i1u536_20:
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;eusart1.c: 152: char tmpAlarme = 10 * i1 + i2;
  6905  000C62  501D               	movf	EUSART1_Receive_ISR@i1,w,c
  6906  000C64  0D0A               	mullw	10
  6907  000C66  50F3               	movf	prodl,w,c
  6908  000C68  241F               	addwf	EUSART1_Receive_ISR@i2,w,c
  6909  000C6A  6E21               	movwf	EUSART1_Receive_ISR@tmpAlarme,c
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;eusart1.c: 154: if (tmpAlarme >= 10 && tmpAlarme <= 40)
  6913  000C6C  0E09               	movlw	9
  6914  000C6E  6421               	cpfsgt	EUSART1_Receive_ISR@tmpAlarme,c
  6915  000C70  D005               	goto	i1l661
  6916                           
  6917                           ; BSR set to: 0
  6918  000C72  0E29               	movlw	41
  6919  000C74  6021               	cpfslt	EUSART1_Receive_ISR@tmpAlarme,c
  6920  000C76  D002               	goto	i1l661
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;eusart1.c: 155: tempAlarme = tmpAlarme;
  6924  000C78  C021  F047         	movff	EUSART1_Receive_ISR@tmpAlarme,_tempAlarme	;volatile
  6925  000C7C                     i1l661:
  6926  000C7C                     i1l5160:
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;eusart1.c: 156: }
  6930                           ;eusart1.c: 158: }
  6931                           ;eusart1.c: 160: if (j == 42 - 1 || strUSART[( j - 1 )] == '\r') {
  6932  000C7C  0E29               	movlw	41
  6933  000C7E  1840               	xorwf	_j,w,c	;volatile
  6934  000C80  B4D8               	btfsc	status,2,c
  6935  000C82  D017               	goto	i1u540_20
  6936                           
  6937                           ; BSR set to: 0
  6938  000C84  0EFF               	movlw	255
  6939  000C86  6E18               	movwf	??_EUSART1_Receive_ISR& (0+255),c
  6940  000C88  0EFF               	movlw	255
  6941  000C8A  6E19               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
  6942  000C8C  C040  F01A         	movff	_j,??_EUSART1_Receive_ISR+2	;volatile
  6943  000C90  6A1B               	clrf	(??_EUSART1_Receive_ISR+3)& (0+255),c
  6944  000C92  BE1A               	btfsc	(??_EUSART1_Receive_ISR+2)& (0+255),7,c
  6945  000C94  061B               	decf	(??_EUSART1_Receive_ISR+3)& (0+255),f,c
  6946  000C96  5018               	movf	??_EUSART1_Receive_ISR,w,c
  6947  000C98  261A               	addwf	??_EUSART1_Receive_ISR+2,f,c
  6948  000C9A  5019               	movf	??_EUSART1_Receive_ISR+1,w,c
  6949  000C9C  221B               	addwfc	??_EUSART1_Receive_ISR+3,f,c
  6950  000C9E  0E78               	movlw	low _strUSART
  6951  000CA0  241A               	addwf	??_EUSART1_Receive_ISR+2,w,c
  6952  000CA2  6ED9               	movwf	fsr2l,c
  6953  000CA4  0E00               	movlw	high _strUSART
  6954  000CA6  201B               	addwfc	??_EUSART1_Receive_ISR+3,w,c
  6955  000CA8  6EDA               	movwf	fsr2h,c
  6956  000CAA  0E0D               	movlw	13
  6957  000CAC  18DE               	xorwf	postinc2,w,c
  6958  000CAE  A4D8               	btfss	status,2,c
  6959  000CB0  0012               	return	
  6960  000CB2                     i1u540_20:
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;eusart1.c: 161: strUSART[j - 1] = '\0';
  6964                           
  6965                           ; BSR set to: 0
  6966  000CB2  0EFF               	movlw	255
  6967  000CB4  6E18               	movwf	??_EUSART1_Receive_ISR& (0+255),c
  6968  000CB6  0EFF               	movlw	255
  6969  000CB8  6E19               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
  6970  000CBA  C040  F01A         	movff	_j,??_EUSART1_Receive_ISR+2	;volatile
  6971  000CBE  6A1B               	clrf	(??_EUSART1_Receive_ISR+3)& (0+255),c
  6972  000CC0  BE1A               	btfsc	(??_EUSART1_Receive_ISR+2)& (0+255),7,c
  6973  000CC2  061B               	decf	(??_EUSART1_Receive_ISR+3)& (0+255),f,c
  6974  000CC4  5018               	movf	??_EUSART1_Receive_ISR,w,c
  6975  000CC6  261A               	addwf	??_EUSART1_Receive_ISR+2,f,c
  6976  000CC8  5019               	movf	??_EUSART1_Receive_ISR+1,w,c
  6977  000CCA  221B               	addwfc	??_EUSART1_Receive_ISR+3,f,c
  6978  000CCC  0E78               	movlw	low _strUSART
  6979  000CCE  241A               	addwf	??_EUSART1_Receive_ISR+2,w,c
  6980  000CD0  6ED9               	movwf	fsr2l,c
  6981  000CD2  0E00               	movlw	high _strUSART
  6982  000CD4  201B               	addwfc	??_EUSART1_Receive_ISR+3,w,c
  6983  000CD6  6EDA               	movwf	fsr2h,c
  6984  000CD8  0E00               	movlw	0
  6985  000CDA  6EDF               	movwf	indf2,c
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;eusart1.c: 162: j = 0;
  6989  000CDC  0E00               	movlw	0
  6990  000CDE  6E40               	movwf	_j,c	;volatile
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;eusart1.c: 163: eusart_Tx_On = 0;
  6994  000CE0  0E00               	movlw	0
  6995  000CE2  6F73               	movwf	_eusart_Tx_On& (0+255),b	;volatile
  6996  000CE4  0012               	return	
  6997  000CE6                     __end_of_EUSART1_Receive_ISR:
  6998                           	opt stack 0
  6999                           pclatu	equ	0xFFB
  7000                           pclath	equ	0xFFA
  7001                           tblptru	equ	0xFF8
  7002                           tblptrh	equ	0xFF7
  7003                           tblptrl	equ	0xFF6
  7004                           tablat	equ	0xFF5
  7005                           prodh	equ	0xFF4
  7006                           prodl	equ	0xFF3
  7007                           intcon	equ	0xFF2
  7008                           intcon2	equ	0xFF1
  7009                           intcon3	equ	0xFF0
  7010                           indf0	equ	0xFEF
  7011                           postinc0	equ	0xFEE
  7012                           fsr0h	equ	0xFEA
  7013                           fsr0l	equ	0xFE9
  7014                           wreg	equ	0xFE8
  7015                           indf1	equ	0xFE7
  7016                           fsr1h	equ	0xFE2
  7017                           fsr1l	equ	0xFE1
  7018                           bsr	equ	0xFE0
  7019                           indf2	equ	0xFDF
  7020                           postinc2	equ	0xFDE
  7021                           postdec2	equ	0xFDD
  7022                           fsr2h	equ	0xFDA
  7023                           fsr2l	equ	0xFD9
  7024                           status	equ	0xFD8
  7025                           
  7026 ;; *************** function _ADC_ISR *****************
  7027 ;; Defined at:
  7028 ;;		line 122 in file "mcc_generated_files/adc.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;		None
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;  var1            3   28[BANK0 ] void 
  7033 ;;  var2            1   27[BANK0 ] unsigned char 
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7043 ;;      Params:         0       0       0       0       0       0       0
  7044 ;;      Locals:         0       4       0       0       0       0       0
  7045 ;;      Temps:          2       0       0       0       0       0       0
  7046 ;;      Totals:         2       4       0       0       0       0       0
  7047 ;;Total ram usage:        6 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    7
  7050 ;; This function calls:
  7051 ;;		_ADC_GetConversionResult
  7052 ;;		_I2C1_MasterWrite
  7053 ;;		___awtoft
  7054 ;;		___ftge
  7055 ;;		___ftmul
  7056 ;;		___ftsub
  7057 ;;		___fttol
  7058 ;;		___lbtoft
  7059 ;;		i1_EUSART1_Write
  7060 ;;		i1_sprintf
  7061 ;; This function is called by:
  7062 ;;		_INTERRUPT_InterruptManagerLow
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           	psect	text40
  7067  0008EE                     __ptext40:
  7068                           	opt stack 0
  7069  0008EE                     _ADC_ISR:
  7070                           	opt stack 16
  7071                           
  7072                           ;adc.c: 124: binADC = ADC_GetConversionResult();
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;incstack = 0
  7076  0008EE  EC2C  F011         	call	_ADC_GetConversionResult	;wreg free
  7077  0008F2  C018  F070         	movff	?_ADC_GetConversionResult,_binADC	;volatile
  7078  0008F6  C019  F071         	movff	?_ADC_GetConversionResult+1,_binADC+1	;volatile
  7079                           
  7080                           ;adc.c: 127: tmpTemp = ( binADC - 83 ) * ( 0.24841333435 );
  7081  0008FA  0EAD               	movlw	173
  7082  0008FC  0100               	movlb	0	; () banked
  7083  0008FE  2570               	addwf	_binADC& (0+255),w,b	;volatile
  7084  000900  6E20               	movwf	___awtoft@c,c
  7085  000902  0EFF               	movlw	255
  7086  000904  2171               	addwfc	(_binADC+1)& (0+255),w,b	;volatile
  7087  000906  6E21               	movwf	___awtoft@c+1,c
  7088  000908  EC96  F00F         	call	___awtoft	;wreg free
  7089  00090C  C020  F024         	movff	?___awtoft,___ftmul@f1
  7090  000910  C021  F025         	movff	?___awtoft+1,___ftmul@f1+1
  7091  000914  C022  F026         	movff	?___awtoft+2,___ftmul@f1+2
  7092  000918  0E60               	movlw	96
  7093  00091A  6E27               	movwf	___ftmul@f2,c
  7094  00091C  0E7E               	movlw	126
  7095  00091E  6E28               	movwf	___ftmul@f2+1,c
  7096  000920  0E3E               	movlw	62
  7097  000922  6E29               	movwf	___ftmul@f2+2,c
  7098  000924  ECB4  F009         	call	___ftmul	;wreg free
  7099  000928  C024  F067         	movff	?___ftmul,_tmpTemp	;volatile
  7100  00092C  C025  F068         	movff	?___ftmul+1,_tmpTemp+1	;volatile
  7101  000930  C026  F069         	movff	?___ftmul+2,_tmpTemp+2	;volatile
  7102                           
  7103                           ;adc.c: 131: double var1 = tmpTemp;
  7104  000934  C067  F0CD         	movff	_tmpTemp,ADC_ISR@var1	;volatile
  7105  000938  C068  F0CE         	movff	_tmpTemp+1,ADC_ISR@var1+1	;volatile
  7106  00093C  C069  F0CF         	movff	_tmpTemp+2,ADC_ISR@var1+2	;volatile
  7107                           
  7108                           ;adc.c: 132: char var2 = ( char ) tmpTemp;
  7109  000940  C067  F018         	movff	_tmpTemp,___fttol@f1	;volatile
  7110  000944  C068  F019         	movff	_tmpTemp+1,___fttol@f1+1	;volatile
  7111  000948  C069  F01A         	movff	_tmpTemp+2,___fttol@f1+2	;volatile
  7112  00094C  EC2F  F00A         	call	___fttol	;wreg free
  7113  000950  5018               	movf	?___fttol,w,c
  7114  000952  0100               	movlb	0	; () banked
  7115  000954  6FCC               	movwf	ADC_ISR@var2& (0+255),b
  7116                           
  7117                           ;adc.c: 133: var1 -= ( double ) var2;
  7118  000956  C0CD  F0B1         	movff	ADC_ISR@var1,___ftsub@f1
  7119  00095A  C0CE  F0B2         	movff	ADC_ISR@var1+1,___ftsub@f1+1
  7120  00095E  C0CF  F0B3         	movff	ADC_ISR@var1+2,___ftsub@f1+2
  7121  000962  51CC               	movf	ADC_ISR@var2& (0+255),w,b
  7122  000964  EC77  F010         	call	___lbtoft
  7123  000968  C020  F0B4         	movff	?___lbtoft,___ftsub@f2
  7124  00096C  C021  F0B5         	movff	?___lbtoft+1,___ftsub@f2+1
  7125  000970  C022  F0B6         	movff	?___lbtoft+2,___ftsub@f2+2
  7126  000974  ECDC  F00E         	call	___ftsub	;wreg free
  7127  000978  C0B1  F0CD         	movff	?___ftsub,ADC_ISR@var1
  7128  00097C  C0B2  F0CE         	movff	?___ftsub+1,ADC_ISR@var1+1
  7129  000980  C0B3  F0CF         	movff	?___ftsub+2,ADC_ISR@var1+2
  7130                           
  7131                           ;adc.c: 135: tempAtual = ( char ) tmpTemp;
  7132  000984  C067  F018         	movff	_tmpTemp,___fttol@f1	;volatile
  7133  000988  C068  F019         	movff	_tmpTemp+1,___fttol@f1+1	;volatile
  7134  00098C  C069  F01A         	movff	_tmpTemp+2,___fttol@f1+2	;volatile
  7135  000990  EC2F  F00A         	call	___fttol	;wreg free
  7136  000994  5018               	movf	?___fttol,w,c
  7137  000996  6E46               	movwf	_tempAtual,c	;volatile
  7138                           
  7139                           ;adc.c: 137: if (var1 >= 0.5)
  7140  000998  C0CD  F018         	movff	ADC_ISR@var1,___ftge@ff1
  7141  00099C  C0CE  F019         	movff	ADC_ISR@var1+1,___ftge@ff1+1
  7142  0009A0  C0CF  F01A         	movff	ADC_ISR@var1+2,___ftge@ff1+2
  7143  0009A4  0E00               	movlw	0
  7144  0009A6  6E1B               	movwf	___ftge@ff2,c
  7145  0009A8  0E00               	movlw	0
  7146  0009AA  6E1C               	movwf	___ftge@ff2+1,c
  7147  0009AC  0E3F               	movlw	63
  7148  0009AE  6E1D               	movwf	___ftge@ff2+2,c
  7149  0009B0  EC91  F00C         	call	___ftge	;wreg free
  7150  0009B4  B0D8               	btfsc	status,0,c
  7151                           
  7152                           ;adc.c: 138: tempAtual++;
  7153  0009B6  2A46               	incf	_tempAtual,f,c	;volatile
  7154                           
  7155                           ;adc.c: 140: if (eusart_Tx_On == 0 && eusart_Tx_En == 0) {
  7156  0009B8  0100               	movlb	0	; () banked
  7157  0009BA  5173               	movf	_eusart_Tx_On& (0+255),w,b	;volatile
  7158  0009BC  A4D8               	btfss	status,2,c
  7159  0009BE  D03C               	goto	i1u717_20
  7160                           
  7161                           ; BSR set to: 0
  7162  0009C0  5174               	movf	_eusart_Tx_En& (0+255),w,b	;volatile
  7163  0009C2  A4D8               	btfss	status,2,c
  7164  0009C4  D039               	goto	i1u717_20
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;adc.c: 141: sprintf(strUSART, "\fTM=%2d_TA=%2d_AA=%1d\r", tempAtual, tempAlarme, alarme
      +                          );
  7168  0009C6  0E78               	movlw	low _strUSART
  7169  0009C8  6FB1               	movwf	i1sprintf@sp& (0+255),b
  7170  0009CA  0E00               	movlw	high _strUSART
  7171  0009CC  6FB2               	movwf	(i1sprintf@sp+1)& (0+255),b
  7172  0009CE  0EC3               	movlw	low STR_1
  7173  0009D0  6FB3               	movwf	i1sprintf@f& (0+255),b
  7174  0009D2  0E7E               	movlw	high STR_1
  7175  0009D4  6FB4               	movwf	(i1sprintf@f+1)& (0+255),b
  7176  0009D6  C046  F0B5         	movff	_tempAtual,?i1_sprintf+4	;volatile
  7177  0009DA  6BB6               	clrf	(?i1_sprintf+5)& (0+255),b
  7178  0009DC  C047  F0B7         	movff	_tempAlarme,?i1_sprintf+6	;volatile
  7179  0009E0  6BB8               	clrf	(?i1_sprintf+7)& (0+255),b
  7180  0009E2  C075  F0B9         	movff	_alarme,?i1_sprintf+8	;volatile
  7181  0009E6  6BBA               	clrf	(?i1_sprintf+9)& (0+255),b
  7182  0009E8  ECE2  F001         	call	i1_sprintf	;wreg free
  7183                           
  7184                           ;adc.c: 142: for (i = 0; strUSART[i] != '\0'; i++) {
  7185  0009EC  0E00               	movlw	0
  7186  0009EE  0100               	movlb	0	; () banked
  7187  0009F0  6F76               	movwf	_i& (0+255),b	;volatile
  7188  0009F2  D017               	goto	i1l550
  7189  0009F4                     
  7190                           ; BSR set to: 0
  7191                           ;adc.c: 143: EUSART1_Write(strUSART[i]);
  7192                           
  7193                           ; BSR set to: 0
  7194  0009F4  5176               	movf	_i& (0+255),w,b	;volatile
  7195  0009F6  0D01               	mullw	1
  7196  0009F8  0E78               	movlw	low _strUSART
  7197  0009FA  24F3               	addwf	prodl,w,c
  7198  0009FC  6ED9               	movwf	fsr2l,c
  7199  0009FE  0E00               	movlw	high _strUSART
  7200  000A00  20F4               	addwfc	prodh,w,c
  7201  000A02  6EDA               	movwf	fsr2h,c
  7202  000A04  50DF               	movf	indf2,w,c
  7203  000A06  EC5E  F011         	call	i1_EUSART1_Write
  7204                           
  7205                           ;adc.c: 144: strUSART[i] = '\0';
  7206  000A0A  0100               	movlb	0	; () banked
  7207  000A0C  5176               	movf	_i& (0+255),w,b	;volatile
  7208  000A0E  0D01               	mullw	1
  7209  000A10  0E78               	movlw	low _strUSART
  7210  000A12  24F3               	addwf	prodl,w,c
  7211  000A14  6ED9               	movwf	fsr2l,c
  7212  000A16  0E00               	movlw	high _strUSART
  7213  000A18  20F4               	addwfc	prodh,w,c
  7214  000A1A  6EDA               	movwf	fsr2h,c
  7215  000A1C  0E00               	movlw	0
  7216  000A1E  6EDF               	movwf	indf2,c
  7217                           
  7218                           ; BSR set to: 0
  7219  000A20  2B76               	incf	_i& (0+255),f,b	;volatile
  7220  000A22                     i1l550:
  7221                           
  7222                           ; BSR set to: 0
  7223                           
  7224                           ; BSR set to: 0
  7225  000A22  5176               	movf	_i& (0+255),w,b	;volatile
  7226  000A24  0D01               	mullw	1
  7227  000A26  0E78               	movlw	low _strUSART
  7228  000A28  24F3               	addwf	prodl,w,c
  7229  000A2A  6ED9               	movwf	fsr2l,c
  7230  000A2C  0E00               	movlw	high _strUSART
  7231  000A2E  20F4               	addwfc	prodh,w,c
  7232  000A30  6EDA               	movwf	fsr2h,c
  7233  000A32  50DF               	movf	indf2,w,c
  7234  000A34  A4D8               	btfss	status,2,c
  7235  000A36  D7DE               	goto	i1l551
  7236  000A38                     i1u717_20:
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;adc.c: 145: }
  7240                           ;adc.c: 146: }
  7241                           ;adc.c: 148: if (regNum < 4095)
  7242                           
  7243                           ; BSR set to: 0
  7244                           
  7245                           ; BSR set to: 0
  7246  000A38  BF6B               	btfsc	(_regNum+1)& (0+255),7,b	;volatile
  7247  000A3A  D005               	goto	i1u718_20
  7248  000A3C  296A               	incf	_regNum& (0+255),w,b	;volatile
  7249  000A3E  0E0F               	movlw	15
  7250  000A40  596B               	subwfb	(_regNum+1)& (0+255),w,b	;volatile
  7251  000A42  B0D8               	btfsc	status,0,c
  7252  000A44  D003               	goto	i1l553
  7253  000A46                     i1u718_20:
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;adc.c: 149: regNum++;
  7257  000A46  4B6A               	infsnz	_regNum& (0+255),f,b	;volatile
  7258  000A48  2B6B               	incf	(_regNum+1)& (0+255),f,b	;volatile
  7259  000A4A  D004               	goto	i1l554
  7260  000A4C                     i1l553:
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;adc.c: 150: else
  7264                           ;adc.c: 151: regNum = 0;
  7265                           
  7266                           ; BSR set to: 0
  7267  000A4C  0E00               	movlw	0
  7268  000A4E  6F6B               	movwf	(_regNum+1)& (0+255),b	;volatile
  7269  000A50  0E00               	movlw	0
  7270  000A52  6F6A               	movwf	_regNum& (0+255),b	;volatile
  7271  000A54                     i1l554:
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;adc.c: 153: memAddr = regNum * 8;
  7275                           
  7276                           ; BSR set to: 0
  7277  000A54  C06A  F02D         	movff	_regNum,??_ADC_ISR	;volatile
  7278  000A58  C06B  F02E         	movff	_regNum+1,??_ADC_ISR+1	;volatile
  7279  000A5C  90D8               	bcf	status,0,c
  7280  000A5E  362D               	rlcf	??_ADC_ISR,f,c
  7281  000A60  362E               	rlcf	??_ADC_ISR+1,f,c
  7282  000A62  90D8               	bcf	status,0,c
  7283  000A64  362D               	rlcf	??_ADC_ISR,f,c
  7284  000A66  362E               	rlcf	??_ADC_ISR+1,f,c
  7285  000A68  90D8               	bcf	status,0,c
  7286  000A6A  362D               	rlcf	??_ADC_ISR,f,c
  7287  000A6C  362E               	rlcf	??_ADC_ISR+1,f,c
  7288  000A6E  C02D  F06E         	movff	??_ADC_ISR,_memAddr	;volatile
  7289  000A72  C02E  F06F         	movff	??_ADC_ISR+1,_memAddr+1	;volatile
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;adc.c: 154: memAddrBytes[0] = (memAddr >> 8);
  7293  000A76  516F               	movf	(_memAddr+1)& (0+255),w,b	;volatile
  7294  000A78  6F6C               	movwf	_memAddrBytes& (0+255),b	;volatile
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;adc.c: 155: memAddrBytes[1] = (memAddr & 0xff);
  7298  000A7A  C06E  F06D         	movff	_memAddr,_memAddrBytes+1	;volatile
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;adc.c: 157: sprintf(i2cWriteBlock, "%c%cM%2dA%2dE%1d", memAddrBytes[0], memAddrBytes[1]
      +                          , tempAtual, tempAlarme, alarme);
  7302  000A7E  0E2A               	movlw	low _i2cWriteBlock
  7303  000A80  6FB1               	movwf	i1sprintf@sp& (0+255),b
  7304  000A82  0E01               	movlw	high _i2cWriteBlock
  7305  000A84  6FB2               	movwf	(i1sprintf@sp+1)& (0+255),b
  7306  000A86  0EC6               	movlw	low STR_2
  7307  000A88  6FB3               	movwf	i1sprintf@f& (0+255),b
  7308  000A8A  0E7F               	movlw	high STR_2
  7309  000A8C  6FB4               	movwf	(i1sprintf@f+1)& (0+255),b
  7310  000A8E  C06C  F0B5         	movff	_memAddrBytes,?i1_sprintf+4	;volatile
  7311  000A92  6BB6               	clrf	(?i1_sprintf+5)& (0+255),b
  7312  000A94  C06D  F0B7         	movff	_memAddrBytes+1,?i1_sprintf+6	;volatile
  7313  000A98  6BB8               	clrf	(?i1_sprintf+7)& (0+255),b
  7314  000A9A  C046  F0B9         	movff	_tempAtual,?i1_sprintf+8	;volatile
  7315  000A9E  6BBA               	clrf	(?i1_sprintf+9)& (0+255),b
  7316  000AA0  C047  F0BB         	movff	_tempAlarme,?i1_sprintf+10	;volatile
  7317  000AA4  6BBC               	clrf	(?i1_sprintf+11)& (0+255),b
  7318  000AA6  C075  F0BD         	movff	_alarme,?i1_sprintf+12	;volatile
  7319  000AAA  6BBE               	clrf	(?i1_sprintf+13)& (0+255),b
  7320  000AAC  ECE2  F001         	call	i1_sprintf	;wreg free
  7321                           
  7322                           ;adc.c: 159: I2C1_MasterWrite(i2cWriteBlock, 10, 0b01010000, stateMsgI2c);
  7323  000AB0  0E2A               	movlw	low _i2cWriteBlock
  7324  000AB2  6E21               	movwf	I2C1_MasterWrite@pdata,c
  7325  000AB4  0E01               	movlw	high _i2cWriteBlock
  7326  000AB6  6E22               	movwf	I2C1_MasterWrite@pdata+1,c
  7327  000AB8  0E0A               	movlw	10
  7328  000ABA  6E23               	movwf	I2C1_MasterWrite@length,c
  7329  000ABC  0E00               	movlw	0
  7330  000ABE  6E25               	movwf	I2C1_MasterWrite@address+1,c
  7331  000AC0  0E50               	movlw	80
  7332  000AC2  6E24               	movwf	I2C1_MasterWrite@address,c
  7333  000AC4  0100               	movlb	0	; () banked
  7334  000AC6  5172               	movf	_stateMsgI2c& (0+255),w,b	;volatile
  7335  000AC8  6E2D               	movwf	??_ADC_ISR& (0+255),c
  7336  000ACA  6A2E               	clrf	(??_ADC_ISR+1)& (0+255),c
  7337  000ACC  C02D  F026         	movff	??_ADC_ISR,I2C1_MasterWrite@pflag
  7338  000AD0  C02E  F027         	movff	??_ADC_ISR+1,I2C1_MasterWrite@pflag+1
  7339  000AD4  ECEA  F00D         	call	_I2C1_MasterWrite	;wreg free
  7340  000AD8                     
  7341                           ;adc.c: 163: while (stateMsgI2c == I2C1_MESSAGE_PENDING);
  7342  000AD8  0E02               	movlw	2
  7343  000ADA  0100               	movlb	0	; () banked
  7344  000ADC  1972               	xorwf	_stateMsgI2c& (0+255),w,b	;volatile
  7345  000ADE  B4D8               	btfsc	status,2,c
  7346  000AE0  D7FB               	goto	i1l555
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;adc.c: 165: if (stateMsgI2c != I2C1_MESSAGE_PENDING && stateMsgI2c != I2C1_MESSAGE_COMP
      +                          LETE) {
  7350                           
  7351                           ; BSR set to: 0
  7352  000AE2  0E02               	movlw	2
  7353  000AE4  1972               	xorwf	_stateMsgI2c& (0+255),w,b	;volatile
  7354  000AE6  B4D8               	btfsc	status,2,c
  7355  000AE8  D016               	goto	i1l559
  7356                           
  7357                           ; BSR set to: 0
  7358  000AEA  5172               	movf	_stateMsgI2c& (0+255),w,b	;volatile
  7359  000AEC  B4D8               	btfsc	status,2,c
  7360  000AEE  D013               	goto	i1l559
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;adc.c: 166: I2C1_MasterWrite(i2cWriteBlock, 10, 0b01010000, stateMsgI2c);
  7364  000AF0  0E2A               	movlw	low _i2cWriteBlock
  7365  000AF2  6E21               	movwf	I2C1_MasterWrite@pdata,c
  7366  000AF4  0E01               	movlw	high _i2cWriteBlock
  7367  000AF6  6E22               	movwf	I2C1_MasterWrite@pdata+1,c
  7368  000AF8  0E0A               	movlw	10
  7369  000AFA  6E23               	movwf	I2C1_MasterWrite@length,c
  7370  000AFC  0E00               	movlw	0
  7371  000AFE  6E25               	movwf	I2C1_MasterWrite@address+1,c
  7372  000B00  0E50               	movlw	80
  7373  000B02  6E24               	movwf	I2C1_MasterWrite@address,c
  7374  000B04  5172               	movf	_stateMsgI2c& (0+255),w,b	;volatile
  7375  000B06  6E2D               	movwf	??_ADC_ISR& (0+255),c
  7376  000B08  6A2E               	clrf	(??_ADC_ISR+1)& (0+255),c
  7377  000B0A  C02D  F026         	movff	??_ADC_ISR,I2C1_MasterWrite@pflag
  7378  000B0E  C02E  F027         	movff	??_ADC_ISR+1,I2C1_MasterWrite@pflag+1
  7379  000B12  ECEA  F00D         	call	_I2C1_MasterWrite	;wreg free
  7380  000B16                     i1l559:
  7381                           
  7382                           ;adc.c: 167: }
  7383                           ;adc.c: 168: } while (stateMsgI2c != I2C1_MESSAGE_COMPLETE);
  7384  000B16  0100               	movlb	0	; () banked
  7385  000B18  5172               	movf	_stateMsgI2c& (0+255),w,b	;volatile
  7386  000B1A  A4D8               	btfss	status,2,c
  7387  000B1C  D7DD               	goto	i1l555
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;adc.c: 171: PIR1bits.ADIF = 0;
  7391  000B1E  9C9E               	bcf	3998,6,c	;volatile
  7392                           
  7393                           ; BSR set to: 0
  7394  000B20  0012               	return		;funcret
  7395  000B22                     __end_of_ADC_ISR:
  7396                           	opt stack 0
  7397                           pclatu	equ	0xFFB
  7398                           pclath	equ	0xFFA
  7399                           tblptru	equ	0xFF8
  7400                           tblptrh	equ	0xFF7
  7401                           tblptrl	equ	0xFF6
  7402                           tablat	equ	0xFF5
  7403                           prodh	equ	0xFF4
  7404                           prodl	equ	0xFF3
  7405                           intcon	equ	0xFF2
  7406                           intcon2	equ	0xFF1
  7407                           intcon3	equ	0xFF0
  7408                           indf0	equ	0xFEF
  7409                           postinc0	equ	0xFEE
  7410                           fsr0h	equ	0xFEA
  7411                           fsr0l	equ	0xFE9
  7412                           wreg	equ	0xFE8
  7413                           indf1	equ	0xFE7
  7414                           fsr1h	equ	0xFE2
  7415                           fsr1l	equ	0xFE1
  7416                           bsr	equ	0xFE0
  7417                           indf2	equ	0xFDF
  7418                           postinc2	equ	0xFDE
  7419                           postdec2	equ	0xFDD
  7420                           fsr2h	equ	0xFDA
  7421                           fsr2l	equ	0xFD9
  7422                           status	equ	0xFD8
  7423                           
  7424 ;; *************** function i1_sprintf *****************
  7425 ;; Defined at:
  7426 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  7429 ;;		 -> strLCD(42), i2cWriteBlock(10), strUSART(42), 
  7430 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  7431 ;;		 -> STR_23(3), STR_22(3), STR_19(3), STR_16(4), 
  7432 ;;		 -> STR_15(4), STR_14(15), STR_13(15), STR_12(15), 
  7433 ;;		 -> STR_11(22), STR_10(22), STR_4(3), STR_2(17), 
  7434 ;;		 -> STR_1(23), 
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;  sprintf         4    0        struct .
  7437 ;;  sprintf         2   24[BANK0 ] int 
  7438 ;;  sprintf         2   22[BANK0 ] unsigned int 
  7439 ;;  sprintf         2   20[BANK0 ] unsigned int 
  7440 ;;  sprintf         2   18[BANK0 ] PTR void [1]
  7441 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  7442 ;;  sprintf         2   14[BANK0 ] PTR const unsigned char 
  7443 ;;		 -> sprintf@c(1), 
  7444 ;;  sprintf         1   26[BANK0 ] char 
  7445 ;;  sprintf         1   17[BANK0 ] unsigned char 
  7446 ;;  sprintf         1   16[BANK0 ] char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  2    0[BANK0 ] int 
  7449 ;; Registers used:
  7450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7456 ;;      Params:         0      14       0       0       0       0       0
  7457 ;;      Locals:         0      13       0       0       0       0       0
  7458 ;;      Temps:          4       0       0       0       0       0       0
  7459 ;;      Totals:         4      27       0       0       0       0       0
  7460 ;;Total ram usage:       31 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    5
  7463 ;; This function calls:
  7464 ;;		i1___lwdiv
  7465 ;;		i1___lwmod
  7466 ;;		i1___wmul
  7467 ;;		i1_isdigit
  7468 ;; This function is called by:
  7469 ;;		_ADC_ISR
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           	psect	text41
  7474  0003C4                     __ptext41:
  7475                           	opt stack 0
  7476  0003C4                     i1_sprintf:
  7477                           	opt stack 17
  7478                           
  7479                           ;doprnt.c: 494: va_list ap;
  7480                           ;doprnt.c: 499: signed char c;
  7481                           ;doprnt.c: 501: int width;
  7482                           ;doprnt.c: 506: signed char prec;
  7483                           ;doprnt.c: 508: unsigned char flag;
  7484                           ;doprnt.c: 523: union {
  7485                           ;doprnt.c: 524: unsigned long vd;
  7486                           ;doprnt.c: 525: double integ;
  7487                           ;doprnt.c: 526: } tmpval;
  7488                           ;doprnt.c: 528: unsigned int val;
  7489                           ;doprnt.c: 529: unsigned len;
  7490                           ;doprnt.c: 530: const char * cp;
  7491                           ;doprnt.c: 533: *ap = __va_start();
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;incstack = 0
  7495  0003C4  0EB5               	movlw	low (?i1_sprintf+4)
  7496  0003C6  0100               	movlb	0	; () banked
  7497  0003C8  6FC3               	movwf	i1sprintf@ap& (0+255),b
  7498  0003CA  0E00               	movlw	high (?i1_sprintf+4)
  7499  0003CC  6FC4               	movwf	(i1sprintf@ap+1)& (0+255),b
  7500                           
  7501                           ;doprnt.c: 536: while(c = *f++) {
  7502  0003CE  D157               	goto	i1u712_20
  7503  0003D0                     
  7504                           ; BSR set to: 0
  7505                           ;doprnt.c: 538: if(c != '%')
  7506                           
  7507                           ; BSR set to: 0
  7508  0003D0  0E25               	movlw	37
  7509  0003D2  19CB               	xorwf	i1sprintf@c& (0+255),w,b
  7510  0003D4  B4D8               	btfsc	status,2,c
  7511  0003D6  D009               	goto	i1l1201
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;doprnt.c: 540: {
  7515                           ;doprnt.c: 541: ((*sp++ = (c)));
  7516  0003D8  C0B1  FFD9         	movff	i1sprintf@sp,fsr2l
  7517  0003DC  C0B2  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7518  0003E0  C0CB  FFDF         	movff	i1sprintf@c,indf2
  7519                           
  7520                           ; BSR set to: 0
  7521  0003E4  4BB1               	infsnz	i1sprintf@sp& (0+255),f,b
  7522  0003E6  2BB2               	incf	(i1sprintf@sp+1)& (0+255),f,b
  7523                           
  7524                           ;doprnt.c: 542: continue;
  7525  0003E8  D14A               	goto	i1u712_20
  7526  0003EA                     i1l1201:
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;doprnt.c: 543: }
  7530                           ;doprnt.c: 546: width = 0;
  7531                           
  7532                           ; BSR set to: 0
  7533  0003EA  0E00               	movlw	0
  7534  0003EC  6FCA               	movwf	(i1sprintf@width+1)& (0+255),b
  7535  0003EE  0E00               	movlw	0
  7536  0003F0  6FC9               	movwf	i1sprintf@width& (0+255),b
  7537                           
  7538                           ;doprnt.c: 548: flag = 0;
  7539  0003F2  0E00               	movlw	0
  7540  0003F4  6FC2               	movwf	i1sprintf@flag& (0+255),b
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7544  0003F6  C0B3  FFF6         	movff	i1sprintf@f,tblptrl
  7545  0003FA  C0B4  FFF7         	movff	i1sprintf@f+1,tblptrh
  7546  0003FE                     	if	0	;tblptru may be non-zero
  7547  0003FE                     	endif
  7548  0003FE                     	if	0	;tblptru may be non-zero
  7549  0003FE                     	endif
  7550  0003FE  0008               	tblrd		*
  7551  000400  50F5               	movf	tablat,w,c
  7552  000402  ECEE  F010         	call	i1_isdigit
  7553  000406  A0D8               	btfss	status,0,c
  7554  000408  D081               	goto	i1l1205
  7555                           
  7556                           ;doprnt.c: 598: width = 0;
  7557  00040A  0E00               	movlw	0
  7558  00040C  0100               	movlb	0	; () banked
  7559  00040E  6FCA               	movwf	(i1sprintf@width+1)& (0+255),b
  7560  000410  0E00               	movlw	0
  7561  000412  6FC9               	movwf	i1sprintf@width& (0+255),b
  7562  000414                     
  7563                           ;doprnt.c: 600: width *= 10;
  7564                           
  7565                           ; BSR set to: 0
  7566  000414  C0C9  F018         	movff	i1sprintf@width,i1___wmul@multiplier
  7567  000418  C0CA  F019         	movff	i1sprintf@width+1,i1___wmul@multiplier+1
  7568  00041C  0E00               	movlw	0
  7569  00041E  6E1B               	movwf	i1___wmul@multiplicand+1,c
  7570  000420  0E0A               	movlw	10
  7571  000422  6E1A               	movwf	i1___wmul@multiplicand,c
  7572  000424  EC64  F010         	call	i1___wmul	;wreg free
  7573  000428  C018  F0C9         	movff	?i1___wmul,i1sprintf@width
  7574  00042C  C019  F0CA         	movff	?i1___wmul+1,i1sprintf@width+1
  7575                           
  7576                           ;doprnt.c: 601: width += *f++ - '0';
  7577  000430  0ED0               	movlw	208
  7578  000432  6E24               	movwf	??i1_sprintf& (0+255),c
  7579  000434  0EFF               	movlw	255
  7580  000436  6E25               	movwf	(??i1_sprintf+1)& (0+255),c
  7581  000438  C0B3  FFF6         	movff	i1sprintf@f,tblptrl
  7582  00043C  C0B4  FFF7         	movff	i1sprintf@f+1,tblptrh
  7583  000440                     	if	0	;tblptru may be non-zero
  7584  000440                     	endif
  7585  000440                     	if	0	;tblptru may be non-zero
  7586  000440                     	endif
  7587  000440  0008               	tblrd		*
  7588  000442  50F5               	movf	tablat,w,c
  7589  000444  6E26               	movwf	(??i1_sprintf+2)& (0+255),c
  7590  000446  6A27               	clrf	(??i1_sprintf+3)& (0+255),c
  7591  000448  5024               	movf	??i1_sprintf,w,c
  7592  00044A  2626               	addwf	??i1_sprintf+2,f,c
  7593  00044C  5025               	movf	??i1_sprintf+1,w,c
  7594  00044E  2227               	addwfc	??i1_sprintf+3,f,c
  7595  000450  5026               	movf	??i1_sprintf+2,w,c
  7596  000452  0100               	movlb	0	; () banked
  7597  000454  27C9               	addwf	i1sprintf@width& (0+255),f,b
  7598  000456  5027               	movf	??i1_sprintf+3,w,c
  7599  000458  23CA               	addwfc	(i1sprintf@width+1)& (0+255),f,b
  7600                           
  7601                           ; BSR set to: 0
  7602  00045A  4BB3               	infsnz	i1sprintf@f& (0+255),f,b
  7603  00045C  2BB4               	incf	(i1sprintf@f+1)& (0+255),f,b
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7607  00045E  C0B3  FFF6         	movff	i1sprintf@f,tblptrl
  7608  000462  C0B4  FFF7         	movff	i1sprintf@f+1,tblptrh
  7609  000466                     	if	0	;tblptru may be non-zero
  7610  000466                     	endif
  7611  000466                     	if	0	;tblptru may be non-zero
  7612  000466                     	endif
  7613  000466  0008               	tblrd		*
  7614  000468  50F5               	movf	tablat,w,c
  7615  00046A  ECEE  F010         	call	i1_isdigit
  7616  00046E  A0D8               	btfss	status,0,c
  7617  000470  D04D               	goto	i1l1205
  7618  000472  D7D0               	goto	i1l1203
  7619  000474                     
  7620                           ;doprnt.c: 757: if(width > len)
  7621  000474  0100               	movlb	0	; () banked
  7622  000476  51C9               	movf	i1sprintf@width& (0+255),w,b
  7623  000478  5DC5               	subwf	i1sprintf@len& (0+255),w,b
  7624  00047A  51CA               	movf	(i1sprintf@width+1)& (0+255),w,b
  7625  00047C  59C6               	subwfb	(i1sprintf@len+1)& (0+255),w,b
  7626  00047E  B0D8               	btfsc	status,0,c
  7627  000480  D005               	goto	i1l1212
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;doprnt.c: 758: width -= len;
  7631  000482  51C5               	movf	i1sprintf@len& (0+255),w,b
  7632  000484  5FC9               	subwf	i1sprintf@width& (0+255),f,b
  7633  000486  51C6               	movf	(i1sprintf@len+1)& (0+255),w,b
  7634  000488  5BCA               	subwfb	(i1sprintf@width+1)& (0+255),f,b
  7635  00048A  D00D               	goto	i1l1214
  7636  00048C                     i1l1212:
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;doprnt.c: 759: else
  7640                           ;doprnt.c: 760: width = 0;
  7641                           
  7642                           ; BSR set to: 0
  7643  00048C  0E00               	movlw	0
  7644  00048E  6FCA               	movwf	(i1sprintf@width+1)& (0+255),b
  7645  000490  0E00               	movlw	0
  7646  000492  6FC9               	movwf	i1sprintf@width& (0+255),b
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;doprnt.c: 764: while(width--)
  7650  000494  D008               	goto	i1l1214
  7651  000496                     i1l6290:
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;doprnt.c: 765: ((*sp++ = (' ')));
  7655  000496  C0B1  FFD9         	movff	i1sprintf@sp,fsr2l
  7656  00049A  C0B2  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7657  00049E  0E20               	movlw	32
  7658  0004A0  6EDF               	movwf	indf2,c
  7659                           
  7660                           ; BSR set to: 0
  7661  0004A2  4BB1               	infsnz	i1sprintf@sp& (0+255),f,b
  7662  0004A4  2BB2               	incf	(i1sprintf@sp+1)& (0+255),f,b
  7663  0004A6                     i1l1214:
  7664                           
  7665                           ; BSR set to: 0
  7666                           
  7667                           ; BSR set to: 0
  7668  0004A6  07C9               	decf	i1sprintf@width& (0+255),f,b
  7669  0004A8  A0D8               	btfss	status,0,c
  7670  0004AA  07CA               	decf	(i1sprintf@width+1)& (0+255),f,b
  7671  0004AC  29C9               	incf	i1sprintf@width& (0+255),w,b
  7672  0004AE  E1F3               	bnz	i1l6290
  7673  0004B0  29CA               	incf	(i1sprintf@width+1)& (0+255),w,b
  7674  0004B2  B4D8               	btfsc	status,2,c
  7675  0004B4  D00F               	goto	i1l1217
  7676  0004B6  D7EF               	goto	i1l1215
  7677  0004B8                     i1l6296:
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  7681  0004B8  C0BF  FFD9         	movff	i1sprintf@cp,fsr2l
  7682  0004BC  C0C0  FFDA         	movff	i1sprintf@cp+1,fsr2h
  7683  0004C0  C0B1  FFE1         	movff	i1sprintf@sp,fsr1l
  7684  0004C4  C0B2  FFE2         	movff	i1sprintf@sp+1,fsr1h
  7685  0004C8  CFDF FFE7          	movff	indf2,indf1
  7686                           
  7687                           ; BSR set to: 0
  7688  0004CC  4BBF               	infsnz	i1sprintf@cp& (0+255),f,b
  7689  0004CE  2BC0               	incf	(i1sprintf@cp+1)& (0+255),f,b
  7690                           
  7691                           ; BSR set to: 0
  7692  0004D0  4BB1               	infsnz	i1sprintf@sp& (0+255),f,b
  7693  0004D2  2BB2               	incf	(i1sprintf@sp+1)& (0+255),f,b
  7694  0004D4                     i1l1217:
  7695                           
  7696                           ; BSR set to: 0
  7697                           
  7698                           ; BSR set to: 0
  7699  0004D4  07C5               	decf	i1sprintf@len& (0+255),f,b
  7700  0004D6  A0D8               	btfss	status,0,c
  7701  0004D8  07C6               	decf	(i1sprintf@len+1)& (0+255),f,b
  7702  0004DA  29C5               	incf	i1sprintf@len& (0+255),w,b
  7703  0004DC  E1ED               	bnz	i1l6296
  7704  0004DE  29C6               	incf	(i1sprintf@len+1)& (0+255),w,b
  7705  0004E0  B4D8               	btfsc	status,2,c
  7706  0004E2  D0CD               	goto	i1u712_20
  7707  0004E4  D7E9               	goto	i1l1218
  7708  0004E6                     
  7709                           ; BSR set to: 0
  7710                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7711                           
  7712                           ; BSR set to: 0
  7713  0004E6  C0C3  FFD9         	movff	i1sprintf@ap,fsr2l
  7714  0004EA  C0C4  FFDA         	movff	i1sprintf@ap+1,fsr2h
  7715  0004EE  50DF               	movf	indf2,w,c
  7716  0004F0  6FCB               	movwf	i1sprintf@c& (0+255),b
  7717                           
  7718                           ; BSR set to: 0
  7719  0004F2  0E02               	movlw	2
  7720  0004F4  27C3               	addwf	i1sprintf@ap& (0+255),f,b
  7721  0004F6  0E00               	movlw	0
  7722  0004F8  23C4               	addwfc	(i1sprintf@ap+1)& (0+255),f,b
  7723  0004FA                     
  7724                           ; BSR set to: 0
  7725                           ;doprnt.c: 805: cp = (char *)&c;
  7726                           
  7727                           ; BSR set to: 0
  7728  0004FA  0ECB               	movlw	low i1sprintf@c
  7729  0004FC  6FBF               	movwf	i1sprintf@cp& (0+255),b
  7730  0004FE  0E00               	movlw	high i1sprintf@c
  7731  000500  6FC0               	movwf	(i1sprintf@cp+1)& (0+255),b
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;doprnt.c: 806: len = 1;
  7735  000502  0E00               	movlw	0
  7736  000504  6FC6               	movwf	(i1sprintf@len+1)& (0+255),b
  7737  000506  0E01               	movlw	1
  7738  000508  6FC5               	movwf	i1sprintf@len& (0+255),b
  7739                           
  7740                           ;doprnt.c: 807: goto dostring;
  7741  00050A  D7B4               	goto	i1l1211
  7742  00050C                     i1l1205:
  7743                           
  7744                           ; BSR set to: 0
  7745  00050C  C0B3  FFF6         	movff	i1sprintf@f,tblptrl
  7746  000510  C0B4  FFF7         	movff	i1sprintf@f+1,tblptrh
  7747  000514  0100               	movlb	0	; () banked
  7748  000516  4BB3               	infsnz	i1sprintf@f& (0+255),f,b
  7749  000518  2BB4               	incf	(i1sprintf@f+1)& (0+255),f,b
  7750  00051A                     	if	0	;tblptru may be non-zero
  7751  00051A                     	endif
  7752  00051A                     	if	0	;tblptru may be non-zero
  7753  00051A                     	endif
  7754  00051A  0008               	tblrd		*
  7755  00051C  CFF5 F0CB          	movff	tablat,i1sprintf@c
  7756  000520  51CB               	movf	i1sprintf@c& (0+255),w,b
  7757                           
  7758                           ; Switch size 1, requested type "space"
  7759                           ; Number of cases is 4, Range of values is 0 to 105
  7760                           ; switch strategies available:
  7761                           ; Name         Instructions Cycles
  7762                           ; simple_byte           13     7 (average)
  7763                           ;	Chosen strategy is simple_byte
  7764  000522  0A00               	xorlw	0	; case 0
  7765  000524  B4D8               	btfsc	status,2,c
  7766  000526  D0B7               	goto	i1u713_20
  7767  000528  0A63               	xorlw	99	; case 99
  7768  00052A  B4D8               	btfsc	status,2,c
  7769  00052C  D7DC               	goto	i1l1220
  7770  00052E  0A07               	xorlw	7	; case 100
  7771  000530  B4D8               	btfsc	status,2,c
  7772  000532  D003               	goto	i1l1210
  7773  000534  0A0D               	xorlw	13	; case 105
  7774  000536  A4D8               	btfss	status,2,c
  7775  000538  D7E0               	goto	i1l1221
  7776  00053A                     i1l1210:
  7777                           
  7778                           ;doprnt.c: 1253: {
  7779                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7780                           
  7781                           ; BSR set to: 0
  7782  00053A  C0C3  FFD9         	movff	i1sprintf@ap,fsr2l
  7783  00053E  C0C4  FFDA         	movff	i1sprintf@ap+1,fsr2h
  7784  000542  CFDE F0C7          	movff	postinc2,i1sprintf@val
  7785  000546  CFDD F0C8          	movff	postdec2,i1sprintf@val+1
  7786  00054A  0E02               	movlw	2
  7787  00054C  0100               	movlb	0	; () banked
  7788  00054E  27C3               	addwf	i1sprintf@ap& (0+255),f,b
  7789  000550  0E00               	movlw	0
  7790  000552  23C4               	addwfc	(i1sprintf@ap+1)& (0+255),f,b
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;doprnt.c: 1261: if((int)val < 0) {
  7794  000554  AFC8               	btfss	(i1sprintf@val+1)& (0+255),7,b
  7795  000556  D006               	goto	i1l1222
  7796                           
  7797                           ; BSR set to: 0
  7798                           ;doprnt.c: 1262: flag |= 0x03;
  7799  000558  0E03               	movlw	3
  7800  00055A  13C2               	iorwf	i1sprintf@flag& (0+255),f,b
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;doprnt.c: 1263: val = -val;
  7804  00055C  6DC7               	negf	i1sprintf@val& (0+255),b
  7805  00055E  1FC8               	comf	(i1sprintf@val+1)& (0+255),f,b
  7806  000560  B0D8               	btfsc	status,0,c
  7807  000562  2BC8               	incf	(i1sprintf@val+1)& (0+255),f,b
  7808  000564                     i1l1222:
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;doprnt.c: 1264: }
  7812                           ;doprnt.c: 1266: }
  7813                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7814                           
  7815                           ; BSR set to: 0
  7816  000564  0E01               	movlw	1
  7817  000566  6FCB               	movwf	i1sprintf@c& (0+255),b
  7818  000568                     i1l6328:
  7819                           
  7820                           ; BSR set to: 0
  7821  000568  0E05               	movlw	5
  7822  00056A  19CB               	xorwf	i1sprintf@c& (0+255),w,b
  7823  00056C  B4D8               	btfsc	status,2,c
  7824  00056E  D012               	goto	i1u705_20
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;doprnt.c: 1306: if(val < dpowers[c])
  7828                           
  7829                           ; BSR set to: 0
  7830                           
  7831                           ; BSR set to: 0
  7832  000570  51CB               	movf	i1sprintf@c& (0+255),w,b
  7833  000572  0D02               	mullw	2
  7834  000574  0EB9               	movlw	low _dpowers
  7835  000576  24F3               	addwf	prodl,w,c
  7836  000578  6EF6               	movwf	tblptrl,c
  7837  00057A  0E7E               	movlw	high _dpowers
  7838  00057C  20F4               	addwfc	prodh,w,c
  7839  00057E  6EF7               	movwf	tblptrh,c
  7840  000580                     	if	0	;There are less than 3 active tblptr bytes
  7841  000580                     	endif
  7842  000580  0009               	tblrd		*+
  7843  000582  50F5               	movf	tablat,w,c
  7844  000584  5DC7               	subwf	i1sprintf@val& (0+255),w,b
  7845  000586  0009               	tblrd		*+
  7846  000588  50F5               	movf	tablat,w,c
  7847  00058A  59C8               	subwfb	(i1sprintf@val+1)& (0+255),w,b
  7848  00058C  A0D8               	btfss	status,0,c
  7849  00058E  D002               	goto	i1u705_20
  7850                           
  7851                           ; BSR set to: 0
  7852                           
  7853                           ; BSR set to: 0
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;doprnt.c: 1307: break;
  7857  000590  2BCB               	incf	i1sprintf@c& (0+255),f,b
  7858  000592  D7EA               	goto	i1l6328
  7859  000594                     i1u705_20:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7863                           
  7864                           ; BSR set to: 0
  7865  000594  51C9               	movf	i1sprintf@width& (0+255),w,b
  7866  000596  11CA               	iorwf	(i1sprintf@width+1)& (0+255),w,b
  7867  000598  B4D8               	btfsc	status,2,c
  7868  00059A  D009               	goto	i1l1226
  7869                           
  7870                           ; BSR set to: 0
  7871  00059C  C0C2  F024         	movff	i1sprintf@flag,??i1_sprintf
  7872  0005A0  0E03               	movlw	3
  7873  0005A2  1624               	andwf	??i1_sprintf,f,c
  7874  0005A4  B4D8               	btfsc	status,2,c
  7875  0005A6  D003               	goto	i1l1226
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;doprnt.c: 1346: width--;
  7879  0005A8  07C9               	decf	i1sprintf@width& (0+255),f,b
  7880  0005AA  A0D8               	btfss	status,0,c
  7881  0005AC  07CA               	decf	(i1sprintf@width+1)& (0+255),f,b
  7882  0005AE                     i1l1226:
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;doprnt.c: 1381: if(width > c)
  7886                           
  7887                           ; BSR set to: 0
  7888  0005AE  0E80               	movlw	128
  7889  0005B0  BFCB               	btfsc	i1sprintf@c& (0+255),7,b
  7890  0005B2  0E7F               	movlw	127
  7891  0005B4  6E24               	movwf	??i1_sprintf& (0+255),c
  7892  0005B6  51C9               	movf	i1sprintf@width& (0+255),w,b
  7893  0005B8  5DCB               	subwf	i1sprintf@c& (0+255),w,b
  7894  0005BA  51CA               	movf	(i1sprintf@width+1)& (0+255),w,b
  7895  0005BC  0A80               	xorlw	128
  7896  0005BE  5824               	subwfb	??i1_sprintf& (0+255),w,c
  7897  0005C0  B0D8               	btfsc	status,0,c
  7898  0005C2  D007               	goto	i1l1227
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;doprnt.c: 1382: width -= c;
  7902  0005C4  51CB               	movf	i1sprintf@c& (0+255),w,b
  7903  0005C6  5FC9               	subwf	i1sprintf@width& (0+255),f,b
  7904  0005C8  0E00               	movlw	0
  7905  0005CA  BFCB               	btfsc	i1sprintf@c& (0+255),7,b
  7906  0005CC  0EFF               	movlw	255
  7907  0005CE  5BCA               	subwfb	(i1sprintf@width+1)& (0+255),f,b
  7908  0005D0  D004               	goto	i1l1228
  7909  0005D2                     i1l1227:
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;doprnt.c: 1383: else
  7913                           ;doprnt.c: 1384: width = 0;
  7914                           
  7915                           ; BSR set to: 0
  7916  0005D2  0E00               	movlw	0
  7917  0005D4  6FCA               	movwf	(i1sprintf@width+1)& (0+255),b
  7918  0005D6  0E00               	movlw	0
  7919  0005D8  6FC9               	movwf	i1sprintf@width& (0+255),b
  7920  0005DA                     i1l1228:
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;doprnt.c: 1422: {
  7924                           ;doprnt.c: 1424: if(width
  7925                           ;doprnt.c: 1428: )
  7926                           
  7927                           ; BSR set to: 0
  7928  0005DA  51C9               	movf	i1sprintf@width& (0+255),w,b
  7929  0005DC  11CA               	iorwf	(i1sprintf@width+1)& (0+255),w,b
  7930  0005DE  B4D8               	btfsc	status,2,c
  7931  0005E0  D00F               	goto	i1u710_20
  7932  0005E2                     i1u709_20:
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7936                           
  7937                           ; BSR set to: 0
  7938                           
  7939                           ;doprnt.c: 1429: do
  7940  0005E2  C0B1  FFD9         	movff	i1sprintf@sp,fsr2l
  7941  0005E6  C0B2  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7942  0005EA  0E20               	movlw	32
  7943  0005EC  6EDF               	movwf	indf2,c
  7944                           
  7945                           ; BSR set to: 0
  7946  0005EE  4BB1               	infsnz	i1sprintf@sp& (0+255),f,b
  7947  0005F0  2BB2               	incf	(i1sprintf@sp+1)& (0+255),f,b
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;doprnt.c: 1431: while(--width);
  7951  0005F2  07C9               	decf	i1sprintf@width& (0+255),f,b
  7952  0005F4  A0D8               	btfss	status,0,c
  7953  0005F6  07CA               	decf	(i1sprintf@width+1)& (0+255),f,b
  7954  0005F8  51C9               	movf	i1sprintf@width& (0+255),w,b
  7955  0005FA  11CA               	iorwf	(i1sprintf@width+1)& (0+255),w,b
  7956  0005FC  A4D8               	btfss	status,2,c
  7957  0005FE  D7F1               	goto	i1u709_20
  7958  000600                     i1u710_20:
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;doprnt.c: 1438: if(flag & 0x03)
  7962                           
  7963                           ; BSR set to: 0
  7964                           
  7965                           ; BSR set to: 0
  7966  000600  C0C2  F024         	movff	i1sprintf@flag,??i1_sprintf
  7967  000604  0E03               	movlw	3
  7968  000606  1624               	andwf	??i1_sprintf,f,c
  7969  000608  B4D8               	btfsc	status,2,c
  7970  00060A  D008               	goto	i1l1232
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7974  00060C  C0B1  FFD9         	movff	i1sprintf@sp,fsr2l
  7975  000610  C0B2  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7976  000614  0E2D               	movlw	45
  7977  000616  6EDF               	movwf	indf2,c
  7978                           
  7979                           ; BSR set to: 0
  7980  000618  4BB1               	infsnz	i1sprintf@sp& (0+255),f,b
  7981  00061A  2BB2               	incf	(i1sprintf@sp+1)& (0+255),f,b
  7982  00061C                     i1l1232:
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;doprnt.c: 1469: }
  7986                           ;doprnt.c: 1472: prec = c;
  7987                           
  7988                           ; BSR set to: 0
  7989  00061C  C0CB  F0C1         	movff	i1sprintf@c,i1sprintf@prec
  7990                           
  7991                           ;doprnt.c: 1474: while(prec--) {
  7992  000620  D02A               	goto	i1l1233
  7993  000622                     
  7994                           ; BSR set to: 0
  7995                           ;doprnt.c: 1478: {
  7996                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7997                           
  7998                           ; BSR set to: 0
  7999  000622  51C1               	movf	i1sprintf@prec& (0+255),w,b
  8000  000624  0D02               	mullw	2
  8001  000626  0EB9               	movlw	low _dpowers
  8002  000628  24F3               	addwf	prodl,w,c
  8003  00062A  6EF6               	movwf	tblptrl,c
  8004  00062C  0E7E               	movlw	high _dpowers
  8005  00062E  20F4               	addwfc	prodh,w,c
  8006  000630  6EF7               	movwf	tblptrh,c
  8007  000632                     	if	0	;There are less than 3 active tblptr bytes
  8008  000632                     	endif
  8009  000632  0009               	tblrd		*+
  8010  000634  CFF5 F01A          	movff	tablat,i1___lwdiv@divisor
  8011  000638  000A               	tblrd		*-
  8012  00063A  CFF5 F01B          	movff	tablat,i1___lwdiv@divisor+1
  8013  00063E  C0C7  F018         	movff	i1sprintf@val,i1___lwdiv@dividend
  8014  000642  C0C8  F019         	movff	i1sprintf@val+1,i1___lwdiv@dividend+1
  8015  000646  ECC1  F00D         	call	i1___lwdiv	;wreg free
  8016  00064A  C018  F01F         	movff	?i1___lwdiv,i1___lwmod@dividend
  8017  00064E  C019  F020         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
  8018  000652  0E00               	movlw	0
  8019  000654  6E22               	movwf	i1___lwmod@divisor+1,c
  8020  000656  0E0A               	movlw	10
  8021  000658  6E21               	movwf	i1___lwmod@divisor,c
  8022  00065A  ECBB  F00E         	call	i1___lwmod	;wreg free
  8023  00065E  501F               	movf	?i1___lwmod,w,c
  8024  000660  0F30               	addlw	48
  8025  000662  0100               	movlb	0	; () banked
  8026  000664  6FCB               	movwf	i1sprintf@c& (0+255),b
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;doprnt.c: 1523: }
  8030                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8031  000666  C0B1  FFD9         	movff	i1sprintf@sp,fsr2l
  8032  00066A  C0B2  FFDA         	movff	i1sprintf@sp+1,fsr2h
  8033  00066E  C0CB  FFDF         	movff	i1sprintf@c,indf2
  8034                           
  8035                           ; BSR set to: 0
  8036  000672  4BB1               	infsnz	i1sprintf@sp& (0+255),f,b
  8037  000674  2BB2               	incf	(i1sprintf@sp+1)& (0+255),f,b
  8038  000676                     i1l1233:
  8039                           
  8040                           ; BSR set to: 0
  8041                           
  8042                           ; BSR set to: 0
  8043  000676  07C1               	decf	i1sprintf@prec& (0+255),f,b
  8044  000678  29C1               	incf	i1sprintf@prec& (0+255),w,b
  8045  00067A  A4D8               	btfss	status,2,c
  8046  00067C  D7D2               	goto	i1l1234
  8047  00067E                     i1u712_20:
  8048                           
  8049                           ; BSR set to: 0
  8050                           
  8051                           ; BSR set to: 0
  8052                           
  8053                           ; BSR set to: 0
  8054  00067E  C0B3  FFF6         	movff	i1sprintf@f,tblptrl
  8055  000682  C0B4  FFF7         	movff	i1sprintf@f+1,tblptrh
  8056  000686  4BB3               	infsnz	i1sprintf@f& (0+255),f,b
  8057  000688  2BB4               	incf	(i1sprintf@f+1)& (0+255),f,b
  8058  00068A                     	if	0	;tblptru may be non-zero
  8059  00068A                     	endif
  8060  00068A                     	if	0	;tblptru may be non-zero
  8061  00068A                     	endif
  8062  00068A  0008               	tblrd		*
  8063  00068C  CFF5 F0CB          	movff	tablat,i1sprintf@c
  8064  000690  51CB               	movf	i1sprintf@c& (0+255),w,b
  8065  000692  A4D8               	btfss	status,2,c
  8066  000694  D69D               	goto	i1l1200
  8067  000696                     i1u713_20:
  8068                           
  8069                           ;doprnt.c: 1538: *sp = 0;
  8070                           
  8071                           ; BSR set to: 0
  8072                           
  8073                           ;doprnt.c: 1525: }
  8074                           ;doprnt.c: 1533: }
  8075                           ;doprnt.c: 1535: alldone:
  8076                           
  8077                           ; BSR set to: 0
  8078  000696  C0B1  FFD9         	movff	i1sprintf@sp,fsr2l
  8079  00069A  C0B2  FFDA         	movff	i1sprintf@sp+1,fsr2h
  8080  00069E  0E00               	movlw	0
  8081  0006A0  6EDF               	movwf	indf2,c
  8082  0006A2  0012               	return	
  8083  0006A4                     __end_ofi1_sprintf:
  8084                           	opt stack 0
  8085                           pclatu	equ	0xFFB
  8086                           pclath	equ	0xFFA
  8087                           tblptru	equ	0xFF8
  8088                           tblptrh	equ	0xFF7
  8089                           tblptrl	equ	0xFF6
  8090                           tablat	equ	0xFF5
  8091                           prodh	equ	0xFF4
  8092                           prodl	equ	0xFF3
  8093                           intcon	equ	0xFF2
  8094                           intcon2	equ	0xFF1
  8095                           intcon3	equ	0xFF0
  8096                           indf0	equ	0xFEF
  8097                           postinc0	equ	0xFEE
  8098                           fsr0h	equ	0xFEA
  8099                           fsr0l	equ	0xFE9
  8100                           wreg	equ	0xFE8
  8101                           indf1	equ	0xFE7
  8102                           fsr1h	equ	0xFE2
  8103                           fsr1l	equ	0xFE1
  8104                           bsr	equ	0xFE0
  8105                           indf2	equ	0xFDF
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function i1_isdigit *****************
  8113 ;; Defined at:
  8114 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;  c               1    wreg     unsigned char 
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;  c               1   25[COMRAM] unsigned char 
  8119 ;; Return value:  Size  Location     Type
  8120 ;;		None               void
  8121 ;; Registers used:
  8122 ;;		wreg, status,2, status,0
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8128 ;;      Params:         0       0       0       0       0       0       0
  8129 ;;      Locals:         2       0       0       0       0       0       0
  8130 ;;      Temps:          1       0       0       0       0       0       0
  8131 ;;      Totals:         3       0       0       0       0       0       0
  8132 ;;Total ram usage:        3 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    4
  8135 ;; This function calls:
  8136 ;;		Nothing
  8137 ;; This function is called by:
  8138 ;;		i1_sprintf
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text42
  8143  0021DC                     __ptext42:
  8144                           	opt stack 0
  8145  0021DC                     i1_isdigit:
  8146                           	opt stack 17
  8147                           
  8148                           ;incstack = 0
  8149                           ;i1isdigit@c stored from wreg
  8150  0021DC  6E1A               	movwf	i1isdigit@c,c
  8151  0021DE  0E00               	movlw	0
  8152  0021E0  6E19               	movwf	i1_isdigit$2679,c
  8153  0021E2  0E3A               	movlw	58
  8154  0021E4  601A               	cpfslt	i1isdigit@c,c
  8155  0021E6  D005               	goto	i1l1567
  8156  0021E8  0E2F               	movlw	47
  8157  0021EA  641A               	cpfsgt	i1isdigit@c,c
  8158  0021EC  D002               	goto	i1l1567
  8159  0021EE  0E01               	movlw	1
  8160  0021F0  6E19               	movwf	i1_isdigit$2679,c
  8161  0021F2                     i1l1567:
  8162  0021F2  C019  F018         	movff	i1_isdigit$2679,??i1_isdigit
  8163  0021F6  3018               	rrcf	??i1_isdigit,w,c
  8164  0021F8  0012               	return	
  8165  0021FA                     __end_ofi1_isdigit:
  8166                           	opt stack 0
  8167                           pclatu	equ	0xFFB
  8168                           pclath	equ	0xFFA
  8169                           tblptru	equ	0xFF8
  8170                           tblptrh	equ	0xFF7
  8171                           tblptrl	equ	0xFF6
  8172                           tablat	equ	0xFF5
  8173                           prodh	equ	0xFF4
  8174                           prodl	equ	0xFF3
  8175                           intcon	equ	0xFF2
  8176                           intcon2	equ	0xFF1
  8177                           intcon3	equ	0xFF0
  8178                           indf0	equ	0xFEF
  8179                           postinc0	equ	0xFEE
  8180                           fsr0h	equ	0xFEA
  8181                           fsr0l	equ	0xFE9
  8182                           wreg	equ	0xFE8
  8183                           indf1	equ	0xFE7
  8184                           fsr1h	equ	0xFE2
  8185                           fsr1l	equ	0xFE1
  8186                           bsr	equ	0xFE0
  8187                           indf2	equ	0xFDF
  8188                           postinc2	equ	0xFDE
  8189                           postdec2	equ	0xFDD
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function i1___wmul *****************
  8195 ;; Defined at:
  8196 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;  multiplier      2   23[COMRAM] unsigned int 
  8199 ;;  multiplicand    2   25[COMRAM] unsigned int 
  8200 ;; Auto vars:     Size  Location     Type
  8201 ;;  __wmul          2   27[COMRAM] unsigned int 
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  2   23[COMRAM] unsigned int 
  8204 ;; Registers used:
  8205 ;;		wreg, status,2, status,0, prodl, prodh
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8211 ;;      Params:         4       0       0       0       0       0       0
  8212 ;;      Locals:         2       0       0       0       0       0       0
  8213 ;;      Temps:          0       0       0       0       0       0       0
  8214 ;;      Totals:         6       0       0       0       0       0       0
  8215 ;;Total ram usage:        6 bytes
  8216 ;; Hardware stack levels used:    1
  8217 ;; Hardware stack levels required when called:    4
  8218 ;; This function calls:
  8219 ;;		Nothing
  8220 ;; This function is called by:
  8221 ;;		i1_sprintf
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           	psect	text43
  8226  0020C8                     __ptext43:
  8227                           	opt stack 0
  8228  0020C8                     i1___wmul:
  8229                           	opt stack 17
  8230                           
  8231                           ;incstack = 0
  8232  0020C8  5018               	movf	i1___wmul@multiplier,w,c
  8233  0020CA  021A               	mulwf	i1___wmul@multiplicand,c
  8234  0020CC  CFF3 F01C          	movff	prodl,i1___wmul@product
  8235  0020D0  CFF4 F01D          	movff	prodh,i1___wmul@product+1
  8236  0020D4  5018               	movf	i1___wmul@multiplier,w,c
  8237  0020D6  021B               	mulwf	i1___wmul@multiplicand+1,c
  8238  0020D8  50F3               	movf	prodl,w,c
  8239  0020DA  261D               	addwf	i1___wmul@product+1,f,c
  8240  0020DC  5019               	movf	i1___wmul@multiplier+1,w,c
  8241  0020DE  021A               	mulwf	i1___wmul@multiplicand,c
  8242  0020E0  50F3               	movf	prodl,w,c
  8243  0020E2  261D               	addwf	i1___wmul@product+1,f,c
  8244  0020E4  C01C  F018         	movff	i1___wmul@product,?i1___wmul
  8245  0020E8  C01D  F019         	movff	i1___wmul@product+1,?i1___wmul+1
  8246  0020EC  0012               	return	
  8247  0020EE                     __end_ofi1___wmul:
  8248                           	opt stack 0
  8249                           pclatu	equ	0xFFB
  8250                           pclath	equ	0xFFA
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           intcon2	equ	0xFF1
  8259                           intcon3	equ	0xFF0
  8260                           indf0	equ	0xFEF
  8261                           postinc0	equ	0xFEE
  8262                           fsr0h	equ	0xFEA
  8263                           fsr0l	equ	0xFE9
  8264                           wreg	equ	0xFE8
  8265                           indf1	equ	0xFE7
  8266                           fsr1h	equ	0xFE2
  8267                           fsr1l	equ	0xFE1
  8268                           bsr	equ	0xFE0
  8269                           indf2	equ	0xFDF
  8270                           postinc2	equ	0xFDE
  8271                           postdec2	equ	0xFDD
  8272                           fsr2h	equ	0xFDA
  8273                           fsr2l	equ	0xFD9
  8274                           status	equ	0xFD8
  8275                           
  8276 ;; *************** function i1___lwmod *****************
  8277 ;; Defined at:
  8278 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  dividend        2   30[COMRAM] unsigned int 
  8281 ;;  divisor         2   32[COMRAM] unsigned int 
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;  __lwmod         1   34[COMRAM] unsigned char 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  2   30[COMRAM] unsigned int 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2, status,0
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8293 ;;      Params:         4       0       0       0       0       0       0
  8294 ;;      Locals:         1       0       0       0       0       0       0
  8295 ;;      Temps:          0       0       0       0       0       0       0
  8296 ;;      Totals:         5       0       0       0       0       0       0
  8297 ;;Total ram usage:        5 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    4
  8300 ;; This function calls:
  8301 ;;		Nothing
  8302 ;; This function is called by:
  8303 ;;		i1_sprintf
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           	psect	text44
  8308  001D76                     __ptext44:
  8309                           	opt stack 0
  8310  001D76                     i1___lwmod:
  8311                           	opt stack 17
  8312                           
  8313                           ;incstack = 0
  8314  001D76  5021               	movf	i1___lwmod@divisor,w,c
  8315  001D78  1022               	iorwf	i1___lwmod@divisor+1,w,c
  8316  001D7A  B4D8               	btfsc	status,2,c
  8317  001D7C  D018               	goto	i1l1661
  8318  001D7E  0E01               	movlw	1
  8319  001D80  6E23               	movwf	i1___lwmod@counter,c
  8320  001D82  D004               	goto	i1l1656
  8321  001D84  90D8               	bcf	status,0,c
  8322  001D86  3621               	rlcf	i1___lwmod@divisor,f,c
  8323  001D88  3622               	rlcf	i1___lwmod@divisor+1,f,c
  8324  001D8A  2A23               	incf	i1___lwmod@counter,f,c
  8325  001D8C                     i1l1656:
  8326  001D8C  AE22               	btfss	i1___lwmod@divisor+1,7,c
  8327  001D8E  D7FA               	goto	i1l1657
  8328  001D90                     i1u662_20:
  8329  001D90  5021               	movf	i1___lwmod@divisor,w,c
  8330  001D92  5C1F               	subwf	i1___lwmod@dividend,w,c
  8331  001D94  5022               	movf	i1___lwmod@divisor+1,w,c
  8332  001D96  5820               	subwfb	i1___lwmod@dividend+1,w,c
  8333  001D98  A0D8               	btfss	status,0,c
  8334  001D9A  D004               	goto	i1l1660
  8335  001D9C  5021               	movf	i1___lwmod@divisor,w,c
  8336  001D9E  5E1F               	subwf	i1___lwmod@dividend,f,c
  8337  001DA0  5022               	movf	i1___lwmod@divisor+1,w,c
  8338  001DA2  5A20               	subwfb	i1___lwmod@dividend+1,f,c
  8339  001DA4                     i1l1660:
  8340  001DA4  90D8               	bcf	status,0,c
  8341  001DA6  3222               	rrcf	i1___lwmod@divisor+1,f,c
  8342  001DA8  3221               	rrcf	i1___lwmod@divisor,f,c
  8343  001DAA  2E23               	decfsz	i1___lwmod@counter,f,c
  8344  001DAC  D7F1               	goto	i1u662_20
  8345  001DAE                     i1l1661:
  8346  001DAE  C01F  F01F         	movff	i1___lwmod@dividend,?i1___lwmod
  8347  001DB2  C020  F020         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
  8348  001DB6  0012               	return		;funcret
  8349  001DB8                     __end_ofi1___lwmod:
  8350                           	opt stack 0
  8351                           pclatu	equ	0xFFB
  8352                           pclath	equ	0xFFA
  8353                           tblptru	equ	0xFF8
  8354                           tblptrh	equ	0xFF7
  8355                           tblptrl	equ	0xFF6
  8356                           tablat	equ	0xFF5
  8357                           prodh	equ	0xFF4
  8358                           prodl	equ	0xFF3
  8359                           intcon	equ	0xFF2
  8360                           intcon2	equ	0xFF1
  8361                           intcon3	equ	0xFF0
  8362                           indf0	equ	0xFEF
  8363                           postinc0	equ	0xFEE
  8364                           fsr0h	equ	0xFEA
  8365                           fsr0l	equ	0xFE9
  8366                           wreg	equ	0xFE8
  8367                           indf1	equ	0xFE7
  8368                           fsr1h	equ	0xFE2
  8369                           fsr1l	equ	0xFE1
  8370                           bsr	equ	0xFE0
  8371                           indf2	equ	0xFDF
  8372                           postinc2	equ	0xFDE
  8373                           postdec2	equ	0xFDD
  8374                           fsr2h	equ	0xFDA
  8375                           fsr2l	equ	0xFD9
  8376                           status	equ	0xFD8
  8377                           
  8378 ;; *************** function i1___lwdiv *****************
  8379 ;; Defined at:
  8380 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;  dividend        2   23[COMRAM] unsigned int 
  8383 ;;  divisor         2   25[COMRAM] unsigned int 
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  __lwdiv         2   28[COMRAM] unsigned int 
  8386 ;;  __lwdiv         1   27[COMRAM] unsigned char 
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  2   23[COMRAM] unsigned int 
  8389 ;; Registers used:
  8390 ;;		wreg, status,2, status,0
  8391 ;; Tracked objects:
  8392 ;;		On entry : 0/0
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8396 ;;      Params:         4       0       0       0       0       0       0
  8397 ;;      Locals:         3       0       0       0       0       0       0
  8398 ;;      Temps:          0       0       0       0       0       0       0
  8399 ;;      Totals:         7       0       0       0       0       0       0
  8400 ;;Total ram usage:        7 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:    4
  8403 ;; This function calls:
  8404 ;;		Nothing
  8405 ;; This function is called by:
  8406 ;;		i1_sprintf
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text45
  8411  001B82                     __ptext45:
  8412                           	opt stack 0
  8413  001B82                     i1___lwdiv:
  8414                           	opt stack 17
  8415                           
  8416                           ;incstack = 0
  8417  001B82  0E00               	movlw	0
  8418  001B84  6E1E               	movwf	i1___lwdiv@quotient+1,c
  8419  001B86  0E00               	movlw	0
  8420  001B88  6E1D               	movwf	i1___lwdiv@quotient,c
  8421  001B8A  501A               	movf	i1___lwdiv@divisor,w,c
  8422  001B8C  101B               	iorwf	i1___lwdiv@divisor+1,w,c
  8423  001B8E  B4D8               	btfsc	status,2,c
  8424  001B90  D01C               	goto	i1l1651
  8425  001B92  0E01               	movlw	1
  8426  001B94  6E1C               	movwf	i1___lwdiv@counter,c
  8427  001B96  D004               	goto	i1l1646
  8428  001B98  90D8               	bcf	status,0,c
  8429  001B9A  361A               	rlcf	i1___lwdiv@divisor,f,c
  8430  001B9C  361B               	rlcf	i1___lwdiv@divisor+1,f,c
  8431  001B9E  2A1C               	incf	i1___lwdiv@counter,f,c
  8432  001BA0                     i1l1646:
  8433  001BA0  AE1B               	btfss	i1___lwdiv@divisor+1,7,c
  8434  001BA2  D7FA               	goto	i1l1647
  8435  001BA4                     i1u659_20:
  8436  001BA4  90D8               	bcf	status,0,c
  8437  001BA6  361D               	rlcf	i1___lwdiv@quotient,f,c
  8438  001BA8  361E               	rlcf	i1___lwdiv@quotient+1,f,c
  8439  001BAA  501A               	movf	i1___lwdiv@divisor,w,c
  8440  001BAC  5C18               	subwf	i1___lwdiv@dividend,w,c
  8441  001BAE  501B               	movf	i1___lwdiv@divisor+1,w,c
  8442  001BB0  5819               	subwfb	i1___lwdiv@dividend+1,w,c
  8443  001BB2  A0D8               	btfss	status,0,c
  8444  001BB4  D005               	goto	i1l1650
  8445  001BB6  501A               	movf	i1___lwdiv@divisor,w,c
  8446  001BB8  5E18               	subwf	i1___lwdiv@dividend,f,c
  8447  001BBA  501B               	movf	i1___lwdiv@divisor+1,w,c
  8448  001BBC  5A19               	subwfb	i1___lwdiv@dividend+1,f,c
  8449  001BBE  801D               	bsf	i1___lwdiv@quotient,0,c
  8450  001BC0                     i1l1650:
  8451  001BC0  90D8               	bcf	status,0,c
  8452  001BC2  321B               	rrcf	i1___lwdiv@divisor+1,f,c
  8453  001BC4  321A               	rrcf	i1___lwdiv@divisor,f,c
  8454  001BC6  2E1C               	decfsz	i1___lwdiv@counter,f,c
  8455  001BC8  D7ED               	goto	i1u659_20
  8456  001BCA                     i1l1651:
  8457  001BCA  C01D  F018         	movff	i1___lwdiv@quotient,?i1___lwdiv
  8458  001BCE  C01E  F019         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  8459  001BD2  0012               	return		;funcret
  8460  001BD4                     __end_ofi1___lwdiv:
  8461                           	opt stack 0
  8462                           pclatu	equ	0xFFB
  8463                           pclath	equ	0xFFA
  8464                           tblptru	equ	0xFF8
  8465                           tblptrh	equ	0xFF7
  8466                           tblptrl	equ	0xFF6
  8467                           tablat	equ	0xFF5
  8468                           prodh	equ	0xFF4
  8469                           prodl	equ	0xFF3
  8470                           intcon	equ	0xFF2
  8471                           intcon2	equ	0xFF1
  8472                           intcon3	equ	0xFF0
  8473                           indf0	equ	0xFEF
  8474                           postinc0	equ	0xFEE
  8475                           fsr0h	equ	0xFEA
  8476                           fsr0l	equ	0xFE9
  8477                           wreg	equ	0xFE8
  8478                           indf1	equ	0xFE7
  8479                           fsr1h	equ	0xFE2
  8480                           fsr1l	equ	0xFE1
  8481                           bsr	equ	0xFE0
  8482                           indf2	equ	0xFDF
  8483                           postinc2	equ	0xFDE
  8484                           postdec2	equ	0xFDD
  8485                           fsr2h	equ	0xFDA
  8486                           fsr2l	equ	0xFD9
  8487                           status	equ	0xFD8
  8488                           
  8489 ;; *************** function i1_EUSART1_Write *****************
  8490 ;; Defined at:
  8491 ;;		line 103 in file "mcc_generated_files/eusart1.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  txData          1    wreg     unsigned char 
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;  txData          1   23[COMRAM] unsigned char 
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  1    wreg      void 
  8498 ;; Registers used:
  8499 ;;		wreg
  8500 ;; Tracked objects:
  8501 ;;		On entry : 0/0
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8505 ;;      Params:         0       0       0       0       0       0       0
  8506 ;;      Locals:         1       0       0       0       0       0       0
  8507 ;;      Temps:          0       0       0       0       0       0       0
  8508 ;;      Totals:         1       0       0       0       0       0       0
  8509 ;;Total ram usage:        1 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    4
  8512 ;; This function calls:
  8513 ;;		Nothing
  8514 ;; This function is called by:
  8515 ;;		_ADC_ISR
  8516 ;; This function uses a non-reentrant model
  8517 ;;
  8518                           
  8519                           	psect	text46
  8520  0022BC                     __ptext46:
  8521                           	opt stack 0
  8522  0022BC                     i1_EUSART1_Write:
  8523                           	opt stack 18
  8524                           
  8525                           ;incstack = 0
  8526                           ;i1EUSART1_Write@txData stored from wreg
  8527  0022BC  6E18               	movwf	i1EUSART1_Write@txData,c
  8528  0022BE                     
  8529                           ;eusart1.c: 104: while (!PIR1bits.TX1IF);
  8530  0022BE  A89E               	btfss	3998,4,c	;volatile
  8531  0022C0  D7FE               	goto	i1l4634
  8532                           
  8533                           ;eusart1.c: 105: TXREG1 = txData;
  8534  0022C2  C018  FFAD         	movff	i1EUSART1_Write@txData,4013	;volatile
  8535  0022C6  0012               	return		;funcret
  8536  0022C8                     __end_ofi1_EUSART1_Write:
  8537                           	opt stack 0
  8538                           pclatu	equ	0xFFB
  8539                           pclath	equ	0xFFA
  8540                           tblptru	equ	0xFF8
  8541                           tblptrh	equ	0xFF7
  8542                           tblptrl	equ	0xFF6
  8543                           tablat	equ	0xFF5
  8544                           prodh	equ	0xFF4
  8545                           prodl	equ	0xFF3
  8546                           intcon	equ	0xFF2
  8547                           intcon2	equ	0xFF1
  8548                           intcon3	equ	0xFF0
  8549                           indf0	equ	0xFEF
  8550                           postinc0	equ	0xFEE
  8551                           fsr0h	equ	0xFEA
  8552                           fsr0l	equ	0xFE9
  8553                           wreg	equ	0xFE8
  8554                           indf1	equ	0xFE7
  8555                           fsr1h	equ	0xFE2
  8556                           fsr1l	equ	0xFE1
  8557                           bsr	equ	0xFE0
  8558                           indf2	equ	0xFDF
  8559                           postinc2	equ	0xFDE
  8560                           postdec2	equ	0xFDD
  8561                           fsr2h	equ	0xFDA
  8562                           fsr2l	equ	0xFD9
  8563                           status	equ	0xFD8
  8564                           
  8565 ;; *************** function ___lbtoft *****************
  8566 ;; Defined at:
  8567 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  c               1    wreg     unsigned char 
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;  c               1   34[COMRAM] unsigned char 
  8572 ;; Return value:  Size  Location     Type
  8573 ;;                  3   31[COMRAM] float 
  8574 ;; Registers used:
  8575 ;;		wreg, status,2, status,0, cstack
  8576 ;; Tracked objects:
  8577 ;;		On entry : 0/0
  8578 ;;		On exit  : 0/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8581 ;;      Params:         3       0       0       0       0       0       0
  8582 ;;      Locals:         1       0       0       0       0       0       0
  8583 ;;      Temps:          0       0       0       0       0       0       0
  8584 ;;      Totals:         4       0       0       0       0       0       0
  8585 ;;Total ram usage:        4 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:    5
  8588 ;; This function calls:
  8589 ;;		___ftpack
  8590 ;; This function is called by:
  8591 ;;		_ADC_ISR
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           	psect	text47
  8596  0020EE                     __ptext47:
  8597                           	opt stack 0
  8598  0020EE                     ___lbtoft:
  8599                           	opt stack 17
  8600                           
  8601                           ;incstack = 0
  8602                           ;___lbtoft@c stored from wreg
  8603  0020EE  6E23               	movwf	___lbtoft@c,c
  8604  0020F0  5023               	movf	___lbtoft@c,w,c
  8605  0020F2  6E18               	movwf	___ftpack@arg,c
  8606  0020F4  6A19               	clrf	___ftpack@arg+1,c
  8607  0020F6  6A1A               	clrf	___ftpack@arg+2,c
  8608  0020F8  0E8E               	movlw	142
  8609  0020FA  6E1B               	movwf	___ftpack@exp,c
  8610  0020FC  0E00               	movlw	0
  8611  0020FE  6E1C               	movwf	___ftpack@sign,c
  8612  002100  ECEA  F00B         	call	___ftpack	;wreg free
  8613  002104  C018  F020         	movff	?___ftpack,?___lbtoft
  8614  002108  C019  F021         	movff	?___ftpack+1,?___lbtoft+1
  8615  00210C  C01A  F022         	movff	?___ftpack+2,?___lbtoft+2
  8616  002110  0012               	return	
  8617  002112                     __end_of___lbtoft:
  8618                           	opt stack 0
  8619                           pclatu	equ	0xFFB
  8620                           pclath	equ	0xFFA
  8621                           tblptru	equ	0xFF8
  8622                           tblptrh	equ	0xFF7
  8623                           tblptrl	equ	0xFF6
  8624                           tablat	equ	0xFF5
  8625                           prodh	equ	0xFF4
  8626                           prodl	equ	0xFF3
  8627                           intcon	equ	0xFF2
  8628                           intcon2	equ	0xFF1
  8629                           intcon3	equ	0xFF0
  8630                           indf0	equ	0xFEF
  8631                           postinc0	equ	0xFEE
  8632                           fsr0h	equ	0xFEA
  8633                           fsr0l	equ	0xFE9
  8634                           wreg	equ	0xFE8
  8635                           indf1	equ	0xFE7
  8636                           fsr1h	equ	0xFE2
  8637                           fsr1l	equ	0xFE1
  8638                           bsr	equ	0xFE0
  8639                           indf2	equ	0xFDF
  8640                           postinc2	equ	0xFDE
  8641                           postdec2	equ	0xFDD
  8642                           fsr2h	equ	0xFDA
  8643                           fsr2l	equ	0xFD9
  8644                           status	equ	0xFD8
  8645                           
  8646 ;; *************** function ___fttol *****************
  8647 ;; Defined at:
  8648 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  f1              3   23[COMRAM] float 
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  lval            4   33[COMRAM] unsigned long 
  8653 ;;  exp1            1   37[COMRAM] unsigned char 
  8654 ;;  sign1           1   32[COMRAM] unsigned char 
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  4   23[COMRAM] long 
  8657 ;; Registers used:
  8658 ;;		wreg, status,2, status,0
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8664 ;;      Params:         4       0       0       0       0       0       0
  8665 ;;      Locals:         6       0       0       0       0       0       0
  8666 ;;      Temps:          5       0       0       0       0       0       0
  8667 ;;      Totals:        15       0       0       0       0       0       0
  8668 ;;Total ram usage:       15 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    4
  8671 ;; This function calls:
  8672 ;;		Nothing
  8673 ;; This function is called by:
  8674 ;;		_ADC_ISR
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           
  8678                           	psect	text48
  8679  00145E                     __ptext48:
  8680                           	opt stack 0
  8681  00145E                     ___fttol:
  8682                           	opt stack 18
  8683                           
  8684                           ;incstack = 0
  8685  00145E  C01A  F01C         	movff	___fttol@f1+2,??___fttol
  8686  001462  6A1D               	clrf	(??___fttol+1)& (0+255),c
  8687  001464  6A1E               	clrf	(??___fttol+2)& (0+255),c
  8688  001466  3419               	rlcf	___fttol@f1+1,w,c
  8689  001468  361C               	rlcf	??___fttol& (0+255),f,c
  8690  00146A  E301               	bnc	u424_21
  8691  00146C  801D               	bsf	(??___fttol+1)& (0+255),0,c
  8692  00146E                     u424_21:
  8693  00146E  501C               	movf	??___fttol,w,c
  8694  001470  6E26               	movwf	___fttol@exp1,c
  8695  001472  5026               	movf	___fttol@exp1,w,c
  8696  001474  A4D8               	btfss	status,2,c
  8697  001476  D009               	goto	i1l1552
  8698  001478  0E00               	movlw	0
  8699  00147A  6E18               	movwf	?___fttol,c
  8700  00147C  0E00               	movlw	0
  8701  00147E  6E19               	movwf	?___fttol+1,c
  8702  001480  0E00               	movlw	0
  8703  001482  6E1A               	movwf	?___fttol+2,c
  8704  001484  0E00               	movlw	0
  8705  001486  6E1B               	movwf	?___fttol+3,c
  8706  001488  0012               	return	
  8707  00148A                     i1l1552:
  8708  00148A  0E17               	movlw	23
  8709  00148C  6E1C               	movwf	??___fttol& (0+255),c
  8710  00148E  C018  F01D         	movff	___fttol@f1,??___fttol+1
  8711  001492  C019  F01E         	movff	___fttol@f1+1,??___fttol+2
  8712  001496  C01A  F01F         	movff	___fttol@f1+2,??___fttol+3
  8713  00149A  281C               	incf	??___fttol,w,c
  8714  00149C  6E20               	movwf	(??___fttol+4)& (0+255),c
  8715  00149E  D004               	goto	i1u426_20
  8716  0014A0                     i1u426_25:
  8717  0014A0  90D8               	bcf	status,0,c
  8718  0014A2  321F               	rrcf	??___fttol+3,f,c
  8719  0014A4  321E               	rrcf	??___fttol+2,f,c
  8720  0014A6  321D               	rrcf	??___fttol+1,f,c
  8721  0014A8                     i1u426_20:
  8722  0014A8  2E20               	decfsz	(??___fttol+4)& (0+255),f,c
  8723  0014AA  D7FA               	goto	i1u426_25
  8724  0014AC  501D               	movf	??___fttol+1,w,c
  8725  0014AE  6E21               	movwf	___fttol@sign1,c
  8726  0014B0  8E19               	bsf	___fttol@f1+1,7,c
  8727  0014B2  0EFF               	movlw	255
  8728  0014B4  1618               	andwf	___fttol@f1,f,c
  8729  0014B6  0EFF               	movlw	255
  8730  0014B8  1619               	andwf	___fttol@f1+1,f,c
  8731  0014BA  0E00               	movlw	0
  8732  0014BC  161A               	andwf	___fttol@f1+2,f,c
  8733  0014BE  5018               	movf	___fttol@f1,w,c
  8734  0014C0  6E22               	movwf	___fttol@lval,c
  8735  0014C2  5019               	movf	___fttol@f1+1,w,c
  8736  0014C4  6E23               	movwf	___fttol@lval+1,c
  8737  0014C6  501A               	movf	___fttol@f1+2,w,c
  8738  0014C8  6E24               	movwf	___fttol@lval+2,c
  8739  0014CA  6A25               	clrf	___fttol@lval+3,c
  8740  0014CC  0E8E               	movlw	142
  8741  0014CE  5E26               	subwf	___fttol@exp1,f,c
  8742  0014D0  AE26               	btfss	___fttol@exp1,7,c
  8743  0014D2  D016               	goto	i1l1554
  8744  0014D4  5026               	movf	___fttol@exp1,w,c
  8745  0014D6  0A80               	xorlw	128
  8746  0014D8  0F8F               	addlw	143
  8747  0014DA  B0D8               	btfsc	status,0,c
  8748  0014DC  D009               	goto	i1l1555
  8749  0014DE  0E00               	movlw	0
  8750  0014E0  6E18               	movwf	?___fttol,c
  8751  0014E2  0E00               	movlw	0
  8752  0014E4  6E19               	movwf	?___fttol+1,c
  8753  0014E6  0E00               	movlw	0
  8754  0014E8  6E1A               	movwf	?___fttol+2,c
  8755  0014EA  0E00               	movlw	0
  8756  0014EC  6E1B               	movwf	?___fttol+3,c
  8757  0014EE  0012               	return	
  8758  0014F0                     i1l1555:
  8759  0014F0  90D8               	bcf	status,0,c
  8760  0014F2  3225               	rrcf	___fttol@lval+3,f,c
  8761  0014F4  3224               	rrcf	___fttol@lval+2,f,c
  8762  0014F6  3223               	rrcf	___fttol@lval+1,f,c
  8763  0014F8  3222               	rrcf	___fttol@lval,f,c
  8764  0014FA  3E26               	incfsz	___fttol@exp1,f,c
  8765  0014FC  D7F9               	goto	i1l1555
  8766  0014FE  D015               	goto	i1u430_20
  8767  001500                     i1l1554:
  8768  001500  0E17               	movlw	23
  8769  001502  6426               	cpfsgt	___fttol@exp1,c
  8770  001504  D00F               	goto	i1l1560
  8771  001506  0E00               	movlw	0
  8772  001508  6E18               	movwf	?___fttol,c
  8773  00150A  0E00               	movlw	0
  8774  00150C  6E19               	movwf	?___fttol+1,c
  8775  00150E  0E00               	movlw	0
  8776  001510  6E1A               	movwf	?___fttol+2,c
  8777  001512  0E00               	movlw	0
  8778  001514  6E1B               	movwf	?___fttol+3,c
  8779  001516  0012               	return	
  8780  001518  90D8               	bcf	status,0,c
  8781  00151A  3622               	rlcf	___fttol@lval,f,c
  8782  00151C  3623               	rlcf	___fttol@lval+1,f,c
  8783  00151E  3624               	rlcf	___fttol@lval+2,f,c
  8784  001520  3625               	rlcf	___fttol@lval+3,f,c
  8785  001522  0626               	decf	___fttol@exp1,f,c
  8786  001524                     i1l1560:
  8787  001524  5026               	movf	___fttol@exp1,w,c
  8788  001526  A4D8               	btfss	status,2,c
  8789  001528  D7F7               	goto	i1l1561
  8790  00152A                     i1u430_20:
  8791  00152A  5021               	movf	___fttol@sign1,w,c
  8792  00152C  B4D8               	btfsc	status,2,c
  8793  00152E  D008               	goto	i1l1563
  8794  001530  1E25               	comf	___fttol@lval+3,f,c
  8795  001532  1E24               	comf	___fttol@lval+2,f,c
  8796  001534  1E23               	comf	___fttol@lval+1,f,c
  8797  001536  6C22               	negf	___fttol@lval,c
  8798  001538  0E00               	movlw	0
  8799  00153A  2223               	addwfc	___fttol@lval+1,f,c
  8800  00153C  2224               	addwfc	___fttol@lval+2,f,c
  8801  00153E  2225               	addwfc	___fttol@lval+3,f,c
  8802  001540                     i1l1563:
  8803  001540  C022  F018         	movff	___fttol@lval,?___fttol
  8804  001544  C023  F019         	movff	___fttol@lval+1,?___fttol+1
  8805  001548  C024  F01A         	movff	___fttol@lval+2,?___fttol+2
  8806  00154C  C025  F01B         	movff	___fttol@lval+3,?___fttol+3
  8807  001550  0012               	return	
  8808  001552                     __end_of___fttol:
  8809                           	opt stack 0
  8810                           pclatu	equ	0xFFB
  8811                           pclath	equ	0xFFA
  8812                           tblptru	equ	0xFF8
  8813                           tblptrh	equ	0xFF7
  8814                           tblptrl	equ	0xFF6
  8815                           tablat	equ	0xFF5
  8816                           prodh	equ	0xFF4
  8817                           prodl	equ	0xFF3
  8818                           intcon	equ	0xFF2
  8819                           intcon2	equ	0xFF1
  8820                           intcon3	equ	0xFF0
  8821                           indf0	equ	0xFEF
  8822                           postinc0	equ	0xFEE
  8823                           fsr0h	equ	0xFEA
  8824                           fsr0l	equ	0xFE9
  8825                           wreg	equ	0xFE8
  8826                           indf1	equ	0xFE7
  8827                           fsr1h	equ	0xFE2
  8828                           fsr1l	equ	0xFE1
  8829                           bsr	equ	0xFE0
  8830                           indf2	equ	0xFDF
  8831                           postinc2	equ	0xFDE
  8832                           postdec2	equ	0xFDD
  8833                           fsr2h	equ	0xFDA
  8834                           fsr2l	equ	0xFD9
  8835                           status	equ	0xFD8
  8836                           
  8837 ;; *************** function ___ftsub *****************
  8838 ;; Defined at:
  8839 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;  f1              3    0[BANK0 ] float 
  8842 ;;  f2              3    3[BANK0 ] float 
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;		None
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  3    0[BANK0 ] float 
  8847 ;; Registers used:
  8848 ;;		wreg, status,2, status,0, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8854 ;;      Params:         0       6       0       0       0       0       0
  8855 ;;      Locals:         0       0       0       0       0       0       0
  8856 ;;      Temps:          0       0       0       0       0       0       0
  8857 ;;      Totals:         0       6       0       0       0       0       0
  8858 ;;Total ram usage:        6 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    6
  8861 ;; This function calls:
  8862 ;;		___ftadd
  8863 ;; This function is called by:
  8864 ;;		_ADC_ISR
  8865 ;; This function uses a non-reentrant model
  8866 ;;
  8867                           
  8868                           	psect	text49
  8869  001DB8                     __ptext49:
  8870                           	opt stack 0
  8871  001DB8                     ___ftsub:
  8872                           	opt stack 16
  8873                           
  8874                           ;incstack = 0
  8875  001DB8  0100               	movlb	0	; () banked
  8876  001DBA  51B4               	movf	___ftsub@f2& (0+255),w,b
  8877  001DBC  11B5               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8878  001DBE  11B6               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8879  001DC0  B4D8               	btfsc	status,2,c
  8880  001DC2  D006               	goto	i1l1548
  8881                           
  8882                           ; BSR set to: 0
  8883  001DC4  0E00               	movlw	0
  8884  001DC6  1BB4               	xorwf	___ftsub@f2& (0+255),f,b
  8885  001DC8  0E00               	movlw	0
  8886  001DCA  1BB5               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8887  001DCC  0E80               	movlw	128
  8888  001DCE  1BB6               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8889  001DD0                     i1l1548:
  8890                           
  8891                           ; BSR set to: 0
  8892                           
  8893                           ; BSR set to: 0
  8894  001DD0  C0B1  F020         	movff	___ftsub@f1,___ftadd@f1
  8895  001DD4  C0B2  F021         	movff	___ftsub@f1+1,___ftadd@f1+1
  8896  001DD8  C0B3  F022         	movff	___ftsub@f1+2,___ftadd@f1+2
  8897  001DDC  C0B4  F023         	movff	___ftsub@f2,___ftadd@f2
  8898  001DE0  C0B5  F024         	movff	___ftsub@f2+1,___ftadd@f2+1
  8899  001DE4  C0B6  F025         	movff	___ftsub@f2+2,___ftadd@f2+2
  8900  001DE8  EC73  F006         	call	___ftadd	;wreg free
  8901  001DEC  C020  F0B1         	movff	?___ftadd,?___ftsub
  8902  001DF0  C021  F0B2         	movff	?___ftadd+1,?___ftsub+1
  8903  001DF4  C022  F0B3         	movff	?___ftadd+2,?___ftsub+2
  8904  001DF8  0012               	return	
  8905  001DFA                     __end_of___ftsub:
  8906                           	opt stack 0
  8907                           pclatu	equ	0xFFB
  8908                           pclath	equ	0xFFA
  8909                           tblptru	equ	0xFF8
  8910                           tblptrh	equ	0xFF7
  8911                           tblptrl	equ	0xFF6
  8912                           tablat	equ	0xFF5
  8913                           prodh	equ	0xFF4
  8914                           prodl	equ	0xFF3
  8915                           intcon	equ	0xFF2
  8916                           intcon2	equ	0xFF1
  8917                           intcon3	equ	0xFF0
  8918                           indf0	equ	0xFEF
  8919                           postinc0	equ	0xFEE
  8920                           fsr0h	equ	0xFEA
  8921                           fsr0l	equ	0xFE9
  8922                           wreg	equ	0xFE8
  8923                           indf1	equ	0xFE7
  8924                           fsr1h	equ	0xFE2
  8925                           fsr1l	equ	0xFE1
  8926                           bsr	equ	0xFE0
  8927                           indf2	equ	0xFDF
  8928                           postinc2	equ	0xFDE
  8929                           postdec2	equ	0xFDD
  8930                           fsr2h	equ	0xFDA
  8931                           fsr2l	equ	0xFD9
  8932                           status	equ	0xFD8
  8933                           
  8934 ;; *************** function ___ftadd *****************
  8935 ;; Defined at:
  8936 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;  f1              3   31[COMRAM] float 
  8939 ;;  f2              3   34[COMRAM] float 
  8940 ;; Auto vars:     Size  Location     Type
  8941 ;;  exp1            1   42[COMRAM] unsigned char 
  8942 ;;  exp2            1   41[COMRAM] unsigned char 
  8943 ;;  sign            1   40[COMRAM] unsigned char 
  8944 ;; Return value:  Size  Location     Type
  8945 ;;                  3   31[COMRAM] float 
  8946 ;; Registers used:
  8947 ;;		wreg, status,2, status,0, cstack
  8948 ;; Tracked objects:
  8949 ;;		On entry : 0/0
  8950 ;;		On exit  : 0/0
  8951 ;;		Unchanged: 0/0
  8952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8953 ;;      Params:         6       0       0       0       0       0       0
  8954 ;;      Locals:         3       0       0       0       0       0       0
  8955 ;;      Temps:          3       0       0       0       0       0       0
  8956 ;;      Totals:        12       0       0       0       0       0       0
  8957 ;;Total ram usage:       12 bytes
  8958 ;; Hardware stack levels used:    1
  8959 ;; Hardware stack levels required when called:    5
  8960 ;; This function calls:
  8961 ;;		___ftpack
  8962 ;; This function is called by:
  8963 ;;		___ftsub
  8964 ;; This function uses a non-reentrant model
  8965 ;;
  8966                           
  8967                           	psect	text50
  8968  000CE6                     __ptext50:
  8969                           	opt stack 0
  8970  000CE6                     ___ftadd:
  8971                           	opt stack 16
  8972                           
  8973                           ;incstack = 0
  8974  000CE6  C022  F026         	movff	___ftadd@f1+2,??___ftadd
  8975  000CEA  6A27               	clrf	(??___ftadd+1)& (0+255),c
  8976  000CEC  6A28               	clrf	(??___ftadd+2)& (0+255),c
  8977  000CEE  3421               	rlcf	___ftadd@f1+1,w,c
  8978  000CF0  3626               	rlcf	??___ftadd& (0+255),f,c
  8979  000CF2  E301               	bnc	u635_21
  8980  000CF4  8027               	bsf	(??___ftadd+1)& (0+255),0,c
  8981  000CF6                     u635_21:
  8982  000CF6  5026               	movf	??___ftadd,w,c
  8983  000CF8  6E2B               	movwf	___ftadd@exp1,c
  8984  000CFA  C025  F026         	movff	___ftadd@f2+2,??___ftadd
  8985  000CFE  6A27               	clrf	(??___ftadd+1)& (0+255),c
  8986  000D00  6A28               	clrf	(??___ftadd+2)& (0+255),c
  8987  000D02  3424               	rlcf	___ftadd@f2+1,w,c
  8988  000D04  3626               	rlcf	??___ftadd& (0+255),f,c
  8989  000D06  E301               	bnc	u636_21
  8990  000D08  8027               	bsf	(??___ftadd+1)& (0+255),0,c
  8991  000D0A                     u636_21:
  8992  000D0A  5026               	movf	??___ftadd,w,c
  8993  000D0C  6E2A               	movwf	___ftadd@exp2,c
  8994  000D0E  502B               	movf	___ftadd@exp1,w,c
  8995  000D10  B4D8               	btfsc	status,2,c
  8996  000D12  D00B               	goto	i1u639_20
  8997  000D14  502A               	movf	___ftadd@exp2,w,c
  8998  000D16  5C2B               	subwf	___ftadd@exp1,w,c
  8999  000D18  B0D8               	btfsc	status,0,c
  9000  000D1A  D00E               	goto	i1l1483
  9001  000D1C  502B               	movf	___ftadd@exp1,w,c
  9002  000D1E  0800               	sublw	0
  9003  000D20  242A               	addwf	___ftadd@exp2,w,c
  9004  000D22  6E26               	movwf	??___ftadd& (0+255),c
  9005  000D24  0E18               	movlw	24
  9006  000D26  6426               	cpfsgt	??___ftadd,c
  9007  000D28  D007               	goto	i1l1483
  9008  000D2A                     i1u639_20:
  9009  000D2A  C023  F020         	movff	___ftadd@f2,?___ftadd
  9010  000D2E  C024  F021         	movff	___ftadd@f2+1,?___ftadd+1
  9011  000D32  C025  F022         	movff	___ftadd@f2+2,?___ftadd+2
  9012  000D36  0012               	return	
  9013  000D38                     i1l1483:
  9014  000D38  502A               	movf	___ftadd@exp2,w,c
  9015  000D3A  B4D8               	btfsc	status,2,c
  9016  000D3C  D00B               	goto	i1u642_20
  9017  000D3E  502B               	movf	___ftadd@exp1,w,c
  9018  000D40  5C2A               	subwf	___ftadd@exp2,w,c
  9019  000D42  B0D8               	btfsc	status,0,c
  9020  000D44  D00E               	goto	i1l1487
  9021  000D46  502A               	movf	___ftadd@exp2,w,c
  9022  000D48  0800               	sublw	0
  9023  000D4A  242B               	addwf	___ftadd@exp1,w,c
  9024  000D4C  6E26               	movwf	??___ftadd& (0+255),c
  9025  000D4E  0E18               	movlw	24
  9026  000D50  6426               	cpfsgt	??___ftadd,c
  9027  000D52  D007               	goto	i1l1487
  9028  000D54                     i1u642_20:
  9029  000D54  C020  F020         	movff	___ftadd@f1,?___ftadd
  9030  000D58  C021  F021         	movff	___ftadd@f1+1,?___ftadd+1
  9031  000D5C  C022  F022         	movff	___ftadd@f1+2,?___ftadd+2
  9032  000D60  0012               	return	
  9033  000D62                     i1l1487:
  9034  000D62  0E06               	movlw	6
  9035  000D64  6E29               	movwf	___ftadd@sign,c
  9036  000D66  BE22               	btfsc	___ftadd@f1+2,7,c
  9037  000D68  8E29               	bsf	___ftadd@sign,7,c
  9038  000D6A  BE25               	btfsc	___ftadd@f2+2,7,c
  9039  000D6C  8C29               	bsf	___ftadd@sign,6,c
  9040  000D6E  8E21               	bsf	___ftadd@f1+1,7,c
  9041  000D70  0EFF               	movlw	255
  9042  000D72  1620               	andwf	___ftadd@f1,f,c
  9043  000D74  0EFF               	movlw	255
  9044  000D76  1621               	andwf	___ftadd@f1+1,f,c
  9045  000D78  0E00               	movlw	0
  9046  000D7A  1622               	andwf	___ftadd@f1+2,f,c
  9047  000D7C  8E24               	bsf	___ftadd@f2+1,7,c
  9048  000D7E  0EFF               	movlw	255
  9049  000D80  1623               	andwf	___ftadd@f2,f,c
  9050  000D82  0EFF               	movlw	255
  9051  000D84  1624               	andwf	___ftadd@f2+1,f,c
  9052  000D86  0E00               	movlw	0
  9053  000D88  1625               	andwf	___ftadd@f2+2,f,c
  9054  000D8A  502A               	movf	___ftadd@exp2,w,c
  9055  000D8C  5C2B               	subwf	___ftadd@exp1,w,c
  9056  000D8E  B0D8               	btfsc	status,0,c
  9057  000D90  D01B               	goto	i1l1492
  9058  000D92                     i1u645_20:
  9059  000D92  90D8               	bcf	status,0,c
  9060  000D94  3623               	rlcf	___ftadd@f2,f,c
  9061  000D96  3624               	rlcf	___ftadd@f2+1,f,c
  9062  000D98  3625               	rlcf	___ftadd@f2+2,f,c
  9063  000D9A  062A               	decf	___ftadd@exp2,f,c
  9064  000D9C  502B               	movf	___ftadd@exp1,w,c
  9065  000D9E  182A               	xorwf	___ftadd@exp2,w,c
  9066  000DA0  B4D8               	btfsc	status,2,c
  9067  000DA2  D00D               	goto	i1l1497
  9068  000DA4  0629               	decf	___ftadd@sign,f,c
  9069  000DA6  C029  F026         	movff	___ftadd@sign,??___ftadd
  9070  000DAA  0E07               	movlw	7
  9071  000DAC  1626               	andwf	??___ftadd,f,c
  9072  000DAE  B4D8               	btfsc	status,2,c
  9073  000DB0  D006               	goto	i1l1497
  9074  000DB2  D7EF               	goto	i1u645_20
  9075  000DB4  90D8               	bcf	status,0,c
  9076  000DB6  3222               	rrcf	___ftadd@f1+2,f,c
  9077  000DB8  3221               	rrcf	___ftadd@f1+1,f,c
  9078  000DBA  3220               	rrcf	___ftadd@f1,f,c
  9079  000DBC  2A2B               	incf	___ftadd@exp1,f,c
  9080  000DBE                     i1l1497:
  9081  000DBE  502A               	movf	___ftadd@exp2,w,c
  9082  000DC0  182B               	xorwf	___ftadd@exp1,w,c
  9083  000DC2  B4D8               	btfsc	status,2,c
  9084  000DC4  D01F               	goto	i1u652_20
  9085  000DC6  D7F6               	goto	i1l1498
  9086  000DC8                     i1l1492:
  9087  000DC8  502B               	movf	___ftadd@exp1,w,c
  9088  000DCA  5C2A               	subwf	___ftadd@exp2,w,c
  9089  000DCC  B0D8               	btfsc	status,0,c
  9090  000DCE  D01A               	goto	i1u652_20
  9091  000DD0                     i1u649_20:
  9092  000DD0  90D8               	bcf	status,0,c
  9093  000DD2  3620               	rlcf	___ftadd@f1,f,c
  9094  000DD4  3621               	rlcf	___ftadd@f1+1,f,c
  9095  000DD6  3622               	rlcf	___ftadd@f1+2,f,c
  9096  000DD8  062B               	decf	___ftadd@exp1,f,c
  9097  000DDA  502B               	movf	___ftadd@exp1,w,c
  9098  000DDC  182A               	xorwf	___ftadd@exp2,w,c
  9099  000DDE  B4D8               	btfsc	status,2,c
  9100  000DE0  D00D               	goto	i1l1506
  9101  000DE2  0629               	decf	___ftadd@sign,f,c
  9102  000DE4  C029  F026         	movff	___ftadd@sign,??___ftadd
  9103  000DE8  0E07               	movlw	7
  9104  000DEA  1626               	andwf	??___ftadd,f,c
  9105  000DEC  B4D8               	btfsc	status,2,c
  9106  000DEE  D006               	goto	i1l1506
  9107  000DF0  D7EF               	goto	i1u649_20
  9108  000DF2  90D8               	bcf	status,0,c
  9109  000DF4  3225               	rrcf	___ftadd@f2+2,f,c
  9110  000DF6  3224               	rrcf	___ftadd@f2+1,f,c
  9111  000DF8  3223               	rrcf	___ftadd@f2,f,c
  9112  000DFA  2A2A               	incf	___ftadd@exp2,f,c
  9113  000DFC                     i1l1506:
  9114  000DFC  502A               	movf	___ftadd@exp2,w,c
  9115  000DFE  182B               	xorwf	___ftadd@exp1,w,c
  9116  000E00  A4D8               	btfss	status,2,c
  9117  000E02  D7F7               	goto	i1l1507
  9118  000E04                     i1u652_20:
  9119  000E04  AE29               	btfss	___ftadd@sign,7,c
  9120  000E06  D00C               	goto	i1l1509
  9121  000E08  0EFF               	movlw	255
  9122  000E0A  1A20               	xorwf	___ftadd@f1,f,c
  9123  000E0C  0EFF               	movlw	255
  9124  000E0E  1A21               	xorwf	___ftadd@f1+1,f,c
  9125  000E10  0EFF               	movlw	255
  9126  000E12  1A22               	xorwf	___ftadd@f1+2,f,c
  9127  000E14  0E01               	movlw	1
  9128  000E16  2620               	addwf	___ftadd@f1,f,c
  9129  000E18  0E00               	movlw	0
  9130  000E1A  2221               	addwfc	___ftadd@f1+1,f,c
  9131  000E1C  0E00               	movlw	0
  9132  000E1E  2222               	addwfc	___ftadd@f1+2,f,c
  9133  000E20                     i1l1509:
  9134  000E20  AC29               	btfss	___ftadd@sign,6,c
  9135  000E22  D00C               	goto	i1l1510
  9136  000E24  0EFF               	movlw	255
  9137  000E26  1A23               	xorwf	___ftadd@f2,f,c
  9138  000E28  0EFF               	movlw	255
  9139  000E2A  1A24               	xorwf	___ftadd@f2+1,f,c
  9140  000E2C  0EFF               	movlw	255
  9141  000E2E  1A25               	xorwf	___ftadd@f2+2,f,c
  9142  000E30  0E01               	movlw	1
  9143  000E32  2623               	addwf	___ftadd@f2,f,c
  9144  000E34  0E00               	movlw	0
  9145  000E36  2224               	addwfc	___ftadd@f2+1,f,c
  9146  000E38  0E00               	movlw	0
  9147  000E3A  2225               	addwfc	___ftadd@f2+2,f,c
  9148  000E3C                     i1l1510:
  9149  000E3C  0E00               	movlw	0
  9150  000E3E  6E29               	movwf	___ftadd@sign,c
  9151  000E40  5020               	movf	___ftadd@f1,w,c
  9152  000E42  2623               	addwf	___ftadd@f2,f,c
  9153  000E44  5021               	movf	___ftadd@f1+1,w,c
  9154  000E46  2224               	addwfc	___ftadd@f2+1,f,c
  9155  000E48  5022               	movf	___ftadd@f1+2,w,c
  9156  000E4A  2225               	addwfc	___ftadd@f2+2,f,c
  9157  000E4C  AE25               	btfss	___ftadd@f2+2,7,c
  9158  000E4E  D00E               	goto	i1l1511
  9159  000E50  0EFF               	movlw	255
  9160  000E52  1A23               	xorwf	___ftadd@f2,f,c
  9161  000E54  0EFF               	movlw	255
  9162  000E56  1A24               	xorwf	___ftadd@f2+1,f,c
  9163  000E58  0EFF               	movlw	255
  9164  000E5A  1A25               	xorwf	___ftadd@f2+2,f,c
  9165  000E5C  0E01               	movlw	1
  9166  000E5E  2623               	addwf	___ftadd@f2,f,c
  9167  000E60  0E00               	movlw	0
  9168  000E62  2224               	addwfc	___ftadd@f2+1,f,c
  9169  000E64  0E00               	movlw	0
  9170  000E66  2225               	addwfc	___ftadd@f2+2,f,c
  9171  000E68  0E01               	movlw	1
  9172  000E6A  6E29               	movwf	___ftadd@sign,c
  9173  000E6C                     i1l1511:
  9174  000E6C  C023  F018         	movff	___ftadd@f2,___ftpack@arg
  9175  000E70  C024  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  9176  000E74  C025  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  9177  000E78  C02B  F01B         	movff	___ftadd@exp1,___ftpack@exp
  9178  000E7C  C029  F01C         	movff	___ftadd@sign,___ftpack@sign
  9179  000E80  ECEA  F00B         	call	___ftpack	;wreg free
  9180  000E84  C018  F020         	movff	?___ftpack,?___ftadd
  9181  000E88  C019  F021         	movff	?___ftpack+1,?___ftadd+1
  9182  000E8C  C01A  F022         	movff	?___ftpack+2,?___ftadd+2
  9183  000E90  0012               	return	
  9184  000E92                     __end_of___ftadd:
  9185                           	opt stack 0
  9186                           pclatu	equ	0xFFB
  9187                           pclath	equ	0xFFA
  9188                           tblptru	equ	0xFF8
  9189                           tblptrh	equ	0xFF7
  9190                           tblptrl	equ	0xFF6
  9191                           tablat	equ	0xFF5
  9192                           prodh	equ	0xFF4
  9193                           prodl	equ	0xFF3
  9194                           intcon	equ	0xFF2
  9195                           intcon2	equ	0xFF1
  9196                           intcon3	equ	0xFF0
  9197                           indf0	equ	0xFEF
  9198                           postinc0	equ	0xFEE
  9199                           fsr0h	equ	0xFEA
  9200                           fsr0l	equ	0xFE9
  9201                           wreg	equ	0xFE8
  9202                           indf1	equ	0xFE7
  9203                           fsr1h	equ	0xFE2
  9204                           fsr1l	equ	0xFE1
  9205                           bsr	equ	0xFE0
  9206                           indf2	equ	0xFDF
  9207                           postinc2	equ	0xFDE
  9208                           postdec2	equ	0xFDD
  9209                           fsr2h	equ	0xFDA
  9210                           fsr2l	equ	0xFD9
  9211                           status	equ	0xFD8
  9212                           
  9213 ;; *************** function ___ftmul *****************
  9214 ;; Defined at:
  9215 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;  f1              3   35[COMRAM] float 
  9218 ;;  f2              3   38[COMRAM] float 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  9221 ;;  sign            1    5[BANK0 ] unsigned char 
  9222 ;;  cntr            1    4[BANK0 ] unsigned char 
  9223 ;;  exp             1    0[BANK0 ] unsigned char 
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  3   35[COMRAM] float 
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9233 ;;      Params:         6       0       0       0       0       0       0
  9234 ;;      Locals:         0       6       0       0       0       0       0
  9235 ;;      Temps:          3       0       0       0       0       0       0
  9236 ;;      Totals:         9       6       0       0       0       0       0
  9237 ;;Total ram usage:       15 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    5
  9240 ;; This function calls:
  9241 ;;		___ftpack
  9242 ;; This function is called by:
  9243 ;;		_ADC_ISR
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text51
  9248  001368                     __ptext51:
  9249                           	opt stack 0
  9250  001368                     ___ftmul:
  9251                           	opt stack 17
  9252                           
  9253                           ;incstack = 0
  9254  001368  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  9255  00136C  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  9256  00136E  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  9257  001370  3425               	rlcf	___ftmul@f1+1,w,c
  9258  001372  362A               	rlcf	??___ftmul& (0+255),f,c
  9259  001374  E301               	bnc	u688_21
  9260  001376  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  9261  001378                     u688_21:
  9262  001378  502A               	movf	??___ftmul,w,c
  9263  00137A  0100               	movlb	0	; () banked
  9264  00137C  6FB1               	movwf	___ftmul@exp& (0+255),b
  9265  00137E  51B1               	movf	___ftmul@exp& (0+255),w,b
  9266  001380  A4D8               	btfss	status,2,c
  9267  001382  D007               	goto	i1l1531
  9268                           
  9269                           ; BSR set to: 0
  9270  001384  0E00               	movlw	0
  9271  001386  6E24               	movwf	?___ftmul,c
  9272  001388  0E00               	movlw	0
  9273  00138A  6E25               	movwf	?___ftmul+1,c
  9274  00138C  0E00               	movlw	0
  9275  00138E  6E26               	movwf	?___ftmul+2,c
  9276                           
  9277                           ; BSR set to: 0
  9278  001390  0012               	return	
  9279  001392                     i1l1531:
  9280                           
  9281                           ; BSR set to: 0
  9282                           
  9283                           ; BSR set to: 0
  9284  001392  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  9285  001396  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  9286  001398  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  9287  00139A  3428               	rlcf	___ftmul@f2+1,w,c
  9288  00139C  362A               	rlcf	??___ftmul& (0+255),f,c
  9289  00139E  E301               	bnc	u690_21
  9290  0013A0  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  9291  0013A2                     u690_21:
  9292  0013A2  502A               	movf	??___ftmul,w,c
  9293  0013A4  6FB6               	movwf	___ftmul@sign& (0+255),b
  9294  0013A6  51B6               	movf	___ftmul@sign& (0+255),w,b
  9295  0013A8  A4D8               	btfss	status,2,c
  9296  0013AA  D007               	goto	i1l1533
  9297                           
  9298                           ; BSR set to: 0
  9299  0013AC  0E00               	movlw	0
  9300  0013AE  6E24               	movwf	?___ftmul,c
  9301  0013B0  0E00               	movlw	0
  9302  0013B2  6E25               	movwf	?___ftmul+1,c
  9303  0013B4  0E00               	movlw	0
  9304  0013B6  6E26               	movwf	?___ftmul+2,c
  9305                           
  9306                           ; BSR set to: 0
  9307  0013B8  0012               	return	
  9308  0013BA                     i1l1533:
  9309                           
  9310                           ; BSR set to: 0
  9311                           
  9312                           ; BSR set to: 0
  9313  0013BA  51B6               	movf	___ftmul@sign& (0+255),w,b
  9314  0013BC  0F7B               	addlw	123
  9315  0013BE  27B1               	addwf	___ftmul@exp& (0+255),f,b
  9316                           
  9317                           ; BSR set to: 0
  9318  0013C0  C026  F0B6         	movff	___ftmul@f1+2,___ftmul@sign
  9319  0013C4  5029               	movf	___ftmul@f2+2,w,c
  9320  0013C6  1BB6               	xorwf	___ftmul@sign& (0+255),f,b
  9321  0013C8  0E80               	movlw	128
  9322  0013CA  17B6               	andwf	___ftmul@sign& (0+255),f,b
  9323                           
  9324                           ; BSR set to: 0
  9325  0013CC  8E25               	bsf	___ftmul@f1+1,7,c
  9326                           
  9327                           ; BSR set to: 0
  9328  0013CE  8E28               	bsf	___ftmul@f2+1,7,c
  9329                           
  9330                           ; BSR set to: 0
  9331  0013D0  0EFF               	movlw	255
  9332  0013D2  1627               	andwf	___ftmul@f2,f,c
  9333  0013D4  0EFF               	movlw	255
  9334  0013D6  1628               	andwf	___ftmul@f2+1,f,c
  9335  0013D8  0E00               	movlw	0
  9336  0013DA  1629               	andwf	___ftmul@f2+2,f,c
  9337                           
  9338                           ; BSR set to: 0
  9339  0013DC  0E00               	movlw	0
  9340  0013DE  6FB2               	movwf	___ftmul@f3_as_product& (0+255),b
  9341  0013E0  0E00               	movlw	0
  9342  0013E2  6FB3               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9343  0013E4  0E00               	movlw	0
  9344  0013E6  6FB4               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9345                           
  9346                           ; BSR set to: 0
  9347  0013E8  0E07               	movlw	7
  9348  0013EA  6FB5               	movwf	___ftmul@cntr& (0+255),b
  9349  0013EC                     
  9350                           ; BSR set to: 0
  9351                           
  9352                           ; BSR set to: 0
  9353  0013EC  A024               	btfss	___ftmul@f1,0,c
  9354  0013EE  D006               	goto	i1l1535
  9355                           
  9356                           ; BSR set to: 0
  9357  0013F0  5027               	movf	___ftmul@f2,w,c
  9358  0013F2  27B2               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9359  0013F4  5028               	movf	___ftmul@f2+1,w,c
  9360  0013F6  23B3               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9361  0013F8  5029               	movf	___ftmul@f2+2,w,c
  9362  0013FA  23B4               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9363  0013FC                     i1l1535:
  9364                           
  9365                           ; BSR set to: 0
  9366                           
  9367                           ; BSR set to: 0
  9368  0013FC  90D8               	bcf	status,0,c
  9369  0013FE  3226               	rrcf	___ftmul@f1+2,f,c
  9370  001400  3225               	rrcf	___ftmul@f1+1,f,c
  9371  001402  3224               	rrcf	___ftmul@f1,f,c
  9372  001404  90D8               	bcf	status,0,c
  9373  001406  3627               	rlcf	___ftmul@f2,f,c
  9374  001408  3628               	rlcf	___ftmul@f2+1,f,c
  9375  00140A  3629               	rlcf	___ftmul@f2+2,f,c
  9376                           
  9377                           ; BSR set to: 0
  9378  00140C  2FB5               	decfsz	___ftmul@cntr& (0+255),f,b
  9379  00140E  D7EE               	goto	i1l1534
  9380                           
  9381                           ; BSR set to: 0
  9382                           
  9383                           ; BSR set to: 0
  9384  001410  0E09               	movlw	9
  9385  001412  6FB5               	movwf	___ftmul@cntr& (0+255),b
  9386  001414                     
  9387                           ; BSR set to: 0
  9388                           
  9389                           ; BSR set to: 0
  9390  001414  A024               	btfss	___ftmul@f1,0,c
  9391  001416  D006               	goto	i1l1538
  9392                           
  9393                           ; BSR set to: 0
  9394  001418  5027               	movf	___ftmul@f2,w,c
  9395  00141A  27B2               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9396  00141C  5028               	movf	___ftmul@f2+1,w,c
  9397  00141E  23B3               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9398  001420  5029               	movf	___ftmul@f2+2,w,c
  9399  001422  23B4               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9400  001424                     i1l1538:
  9401                           
  9402                           ; BSR set to: 0
  9403                           
  9404                           ; BSR set to: 0
  9405  001424  90D8               	bcf	status,0,c
  9406  001426  3226               	rrcf	___ftmul@f1+2,f,c
  9407  001428  3225               	rrcf	___ftmul@f1+1,f,c
  9408  00142A  3224               	rrcf	___ftmul@f1,f,c
  9409  00142C  90D8               	bcf	status,0,c
  9410  00142E  33B4               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9411  001430  33B3               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9412  001432  33B2               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9413                           
  9414                           ; BSR set to: 0
  9415  001434  2FB5               	decfsz	___ftmul@cntr& (0+255),f,b
  9416  001436  D7EE               	goto	i1l1537
  9417                           
  9418                           ; BSR set to: 0
  9419                           
  9420                           ; BSR set to: 0
  9421  001438  C0B2  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  9422  00143C  C0B3  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9423  001440  C0B4  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9424  001444  C0B1  F01B         	movff	___ftmul@exp,___ftpack@exp
  9425  001448  C0B6  F01C         	movff	___ftmul@sign,___ftpack@sign
  9426  00144C  ECEA  F00B         	call	___ftpack	;wreg free
  9427  001450  C018  F024         	movff	?___ftpack,?___ftmul
  9428  001454  C019  F025         	movff	?___ftpack+1,?___ftmul+1
  9429  001458  C01A  F026         	movff	?___ftpack+2,?___ftmul+2
  9430  00145C  0012               	return	
  9431  00145E                     __end_of___ftmul:
  9432                           	opt stack 0
  9433                           pclatu	equ	0xFFB
  9434                           pclath	equ	0xFFA
  9435                           tblptru	equ	0xFF8
  9436                           tblptrh	equ	0xFF7
  9437                           tblptrl	equ	0xFF6
  9438                           tablat	equ	0xFF5
  9439                           prodh	equ	0xFF4
  9440                           prodl	equ	0xFF3
  9441                           intcon	equ	0xFF2
  9442                           intcon2	equ	0xFF1
  9443                           intcon3	equ	0xFF0
  9444                           indf0	equ	0xFEF
  9445                           postinc0	equ	0xFEE
  9446                           fsr0h	equ	0xFEA
  9447                           fsr0l	equ	0xFE9
  9448                           wreg	equ	0xFE8
  9449                           indf1	equ	0xFE7
  9450                           fsr1h	equ	0xFE2
  9451                           fsr1l	equ	0xFE1
  9452                           bsr	equ	0xFE0
  9453                           indf2	equ	0xFDF
  9454                           postinc2	equ	0xFDE
  9455                           postdec2	equ	0xFDD
  9456                           fsr2h	equ	0xFDA
  9457                           fsr2l	equ	0xFD9
  9458                           status	equ	0xFD8
  9459                           
  9460 ;; *************** function ___ftge *****************
  9461 ;; Defined at:
  9462 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  9463 ;; Parameters:    Size  Location     Type
  9464 ;;  ff1             3   23[COMRAM] float 
  9465 ;;  ff2             3   26[COMRAM] float 
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;		None
  9468 ;; Return value:  Size  Location     Type
  9469 ;;		None               void
  9470 ;; Registers used:
  9471 ;;		wreg, status,2, status,0
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9477 ;;      Params:         6       0       0       0       0       0       0
  9478 ;;      Locals:         0       0       0       0       0       0       0
  9479 ;;      Temps:          3       0       0       0       0       0       0
  9480 ;;      Totals:         9       0       0       0       0       0       0
  9481 ;;Total ram usage:        9 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; Hardware stack levels required when called:    4
  9484 ;; This function calls:
  9485 ;;		Nothing
  9486 ;; This function is called by:
  9487 ;;		_ADC_ISR
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           	psect	text52
  9492  001922                     __ptext52:
  9493                           	opt stack 0
  9494  001922                     ___ftge:
  9495                           	opt stack 18
  9496                           
  9497                           ;incstack = 0
  9498  001922  AE1A               	btfss	___ftge@ff1+2,7,c
  9499  001924  D016               	goto	i1l1524
  9500  001926  C018  F01E         	movff	___ftge@ff1,??___ftge
  9501  00192A  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  9502  00192E  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  9503  001932  1E1E               	comf	??___ftge,f,c
  9504  001934  1E1F               	comf	??___ftge+1,f,c
  9505  001936  1E20               	comf	??___ftge+2,f,c
  9506  001938  2A1E               	incf	??___ftge,f,c
  9507  00193A  0E00               	movlw	0
  9508  00193C  221F               	addwfc	??___ftge+1,f,c
  9509  00193E  2220               	addwfc	??___ftge+2,f,c
  9510  001940  0E00               	movlw	0
  9511  001942  241E               	addwf	??___ftge,w,c
  9512  001944  6E18               	movwf	___ftge@ff1,c
  9513  001946  0E00               	movlw	0
  9514  001948  201F               	addwfc	??___ftge+1,w,c
  9515  00194A  6E19               	movwf	___ftge@ff1+1,c
  9516  00194C  0E80               	movlw	128
  9517  00194E  2020               	addwfc	??___ftge+2,w,c
  9518  001950  6E1A               	movwf	___ftge@ff1+2,c
  9519  001952                     i1l1524:
  9520  001952  AE1D               	btfss	___ftge@ff2+2,7,c
  9521  001954  D016               	goto	i1l1525
  9522  001956  C01B  F01E         	movff	___ftge@ff2,??___ftge
  9523  00195A  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  9524  00195E  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  9525  001962  1E1E               	comf	??___ftge,f,c
  9526  001964  1E1F               	comf	??___ftge+1,f,c
  9527  001966  1E20               	comf	??___ftge+2,f,c
  9528  001968  2A1E               	incf	??___ftge,f,c
  9529  00196A  0E00               	movlw	0
  9530  00196C  221F               	addwfc	??___ftge+1,f,c
  9531  00196E  2220               	addwfc	??___ftge+2,f,c
  9532  001970  0E00               	movlw	0
  9533  001972  241E               	addwf	??___ftge,w,c
  9534  001974  6E1B               	movwf	___ftge@ff2,c
  9535  001976  0E00               	movlw	0
  9536  001978  201F               	addwfc	??___ftge+1,w,c
  9537  00197A  6E1C               	movwf	___ftge@ff2+1,c
  9538  00197C  0E80               	movlw	128
  9539  00197E  2020               	addwfc	??___ftge+2,w,c
  9540  001980  6E1D               	movwf	___ftge@ff2+2,c
  9541  001982                     i1l1525:
  9542  001982  0E00               	movlw	0
  9543  001984  1A18               	xorwf	___ftge@ff1,f,c
  9544  001986  0E00               	movlw	0
  9545  001988  1A19               	xorwf	___ftge@ff1+1,f,c
  9546  00198A  0E80               	movlw	128
  9547  00198C  1A1A               	xorwf	___ftge@ff1+2,f,c
  9548  00198E  0E00               	movlw	0
  9549  001990  1A1B               	xorwf	___ftge@ff2,f,c
  9550  001992  0E00               	movlw	0
  9551  001994  1A1C               	xorwf	___ftge@ff2+1,f,c
  9552  001996  0E80               	movlw	128
  9553  001998  1A1D               	xorwf	___ftge@ff2+2,f,c
  9554  00199A  501B               	movf	___ftge@ff2,w,c
  9555  00199C  5C18               	subwf	___ftge@ff1,w,c
  9556  00199E  501C               	movf	___ftge@ff2+1,w,c
  9557  0019A0  5819               	subwfb	___ftge@ff1+1,w,c
  9558  0019A2  501D               	movf	___ftge@ff2+2,w,c
  9559  0019A4  581A               	subwfb	___ftge@ff1+2,w,c
  9560  0019A6  B0D8               	btfsc	status,0,c
  9561  0019A8  D002               	goto	i1l3702
  9562  0019AA  90D8               	bcf	status,0,c
  9563  0019AC  0012               	return	
  9564  0019AE                     i1l3702:
  9565  0019AE  80D8               	bsf	status,0,c
  9566  0019B0  0012               	return	
  9567  0019B2                     __end_of___ftge:
  9568                           	opt stack 0
  9569                           pclatu	equ	0xFFB
  9570                           pclath	equ	0xFFA
  9571                           tblptru	equ	0xFF8
  9572                           tblptrh	equ	0xFF7
  9573                           tblptrl	equ	0xFF6
  9574                           tablat	equ	0xFF5
  9575                           prodh	equ	0xFF4
  9576                           prodl	equ	0xFF3
  9577                           intcon	equ	0xFF2
  9578                           intcon2	equ	0xFF1
  9579                           intcon3	equ	0xFF0
  9580                           indf0	equ	0xFEF
  9581                           postinc0	equ	0xFEE
  9582                           fsr0h	equ	0xFEA
  9583                           fsr0l	equ	0xFE9
  9584                           wreg	equ	0xFE8
  9585                           indf1	equ	0xFE7
  9586                           fsr1h	equ	0xFE2
  9587                           fsr1l	equ	0xFE1
  9588                           bsr	equ	0xFE0
  9589                           indf2	equ	0xFDF
  9590                           postinc2	equ	0xFDE
  9591                           postdec2	equ	0xFDD
  9592                           fsr2h	equ	0xFDA
  9593                           fsr2l	equ	0xFD9
  9594                           status	equ	0xFD8
  9595                           
  9596 ;; *************** function ___awtoft *****************
  9597 ;; Defined at:
  9598 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;  c               2   31[COMRAM] int 
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;  sign            1   34[COMRAM] unsigned char 
  9603 ;; Return value:  Size  Location     Type
  9604 ;;                  3   31[COMRAM] float 
  9605 ;; Registers used:
  9606 ;;		wreg, status,2, status,0, cstack
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9612 ;;      Params:         3       0       0       0       0       0       0
  9613 ;;      Locals:         1       0       0       0       0       0       0
  9614 ;;      Temps:          0       0       0       0       0       0       0
  9615 ;;      Totals:         4       0       0       0       0       0       0
  9616 ;;Total ram usage:        4 bytes
  9617 ;; Hardware stack levels used:    1
  9618 ;; Hardware stack levels required when called:    5
  9619 ;; This function calls:
  9620 ;;		___ftpack
  9621 ;; This function is called by:
  9622 ;;		_ADC_ISR
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           	psect	text53
  9627  001F2C                     __ptext53:
  9628                           	opt stack 0
  9629  001F2C                     ___awtoft:
  9630                           	opt stack 17
  9631                           
  9632                           ;incstack = 0
  9633  001F2C  0E00               	movlw	0
  9634  001F2E  6E23               	movwf	___awtoft@sign,c
  9635  001F30  AE21               	btfss	___awtoft@c+1,7,c
  9636  001F32  D006               	goto	i1l1433
  9637  001F34  6C20               	negf	___awtoft@c,c
  9638  001F36  1E21               	comf	___awtoft@c+1,f,c
  9639  001F38  B0D8               	btfsc	status,0,c
  9640  001F3A  2A21               	incf	___awtoft@c+1,f,c
  9641  001F3C  0E01               	movlw	1
  9642  001F3E  6E23               	movwf	___awtoft@sign,c
  9643  001F40                     i1l1433:
  9644  001F40  C020  F018         	movff	___awtoft@c,___ftpack@arg
  9645  001F44  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
  9646  001F48  6A1A               	clrf	___ftpack@arg+2,c
  9647  001F4A  0E8E               	movlw	142
  9648  001F4C  6E1B               	movwf	___ftpack@exp,c
  9649  001F4E  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
  9650  001F52  ECEA  F00B         	call	___ftpack	;wreg free
  9651  001F56  C018  F020         	movff	?___ftpack,?___awtoft
  9652  001F5A  C019  F021         	movff	?___ftpack+1,?___awtoft+1
  9653  001F5E  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
  9654  001F62  0012               	return	
  9655  001F64                     __end_of___awtoft:
  9656                           	opt stack 0
  9657                           pclatu	equ	0xFFB
  9658                           pclath	equ	0xFFA
  9659                           tblptru	equ	0xFF8
  9660                           tblptrh	equ	0xFF7
  9661                           tblptrl	equ	0xFF6
  9662                           tablat	equ	0xFF5
  9663                           prodh	equ	0xFF4
  9664                           prodl	equ	0xFF3
  9665                           intcon	equ	0xFF2
  9666                           intcon2	equ	0xFF1
  9667                           intcon3	equ	0xFF0
  9668                           indf0	equ	0xFEF
  9669                           postinc0	equ	0xFEE
  9670                           fsr0h	equ	0xFEA
  9671                           fsr0l	equ	0xFE9
  9672                           wreg	equ	0xFE8
  9673                           indf1	equ	0xFE7
  9674                           fsr1h	equ	0xFE2
  9675                           fsr1l	equ	0xFE1
  9676                           bsr	equ	0xFE0
  9677                           indf2	equ	0xFDF
  9678                           postinc2	equ	0xFDE
  9679                           postdec2	equ	0xFDD
  9680                           fsr2h	equ	0xFDA
  9681                           fsr2l	equ	0xFD9
  9682                           status	equ	0xFD8
  9683                           
  9684 ;; *************** function ___ftpack *****************
  9685 ;; Defined at:
  9686 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;  arg             3   23[COMRAM] unsigned um
  9689 ;;  exp             1   26[COMRAM] unsigned char 
  9690 ;;  sign            1   27[COMRAM] unsigned char 
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;		None
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  3   23[COMRAM] float 
  9695 ;; Registers used:
  9696 ;;		wreg, status,2, status,0
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9702 ;;      Params:         5       0       0       0       0       0       0
  9703 ;;      Locals:         0       0       0       0       0       0       0
  9704 ;;      Temps:          3       0       0       0       0       0       0
  9705 ;;      Totals:         8       0       0       0       0       0       0
  9706 ;;Total ram usage:        8 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    4
  9709 ;; This function calls:
  9710 ;;		Nothing
  9711 ;; This function is called by:
  9712 ;;		___awtoft
  9713 ;;		___ftadd
  9714 ;;		___ftmul
  9715 ;;		___lbtoft
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	text54
  9720  0017D4                     __ptext54:
  9721                           	opt stack 0
  9722  0017D4                     ___ftpack:
  9723                           	opt stack 17
  9724                           
  9725                           ;incstack = 0
  9726  0017D4  501B               	movf	___ftpack@exp,w,c
  9727  0017D6  B4D8               	btfsc	status,2,c
  9728  0017D8  D005               	goto	i1u587_20
  9729  0017DA  5018               	movf	___ftpack@arg,w,c
  9730  0017DC  1019               	iorwf	___ftpack@arg+1,w,c
  9731  0017DE  101A               	iorwf	___ftpack@arg+2,w,c
  9732  0017E0  A4D8               	btfss	status,2,c
  9733  0017E2  D00C               	goto	i1l1452
  9734  0017E4                     i1u587_20:
  9735  0017E4  0E00               	movlw	0
  9736  0017E6  6E18               	movwf	?___ftpack,c
  9737  0017E8  0E00               	movlw	0
  9738  0017EA  6E19               	movwf	?___ftpack+1,c
  9739  0017EC  0E00               	movlw	0
  9740  0017EE  6E1A               	movwf	?___ftpack+2,c
  9741  0017F0  0012               	return	
  9742  0017F2  2A1B               	incf	___ftpack@exp,f,c
  9743  0017F4  90D8               	bcf	status,0,c
  9744  0017F6  321A               	rrcf	___ftpack@arg+2,f,c
  9745  0017F8  3219               	rrcf	___ftpack@arg+1,f,c
  9746  0017FA  3218               	rrcf	___ftpack@arg,f,c
  9747  0017FC                     i1l1452:
  9748  0017FC  0E00               	movlw	0
  9749  0017FE  1418               	andwf	___ftpack@arg,w,c
  9750  001800  6E1D               	movwf	??___ftpack& (0+255),c
  9751  001802  0E00               	movlw	0
  9752  001804  1419               	andwf	___ftpack@arg+1,w,c
  9753  001806  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  9754  001808  0EFE               	movlw	254
  9755  00180A  141A               	andwf	___ftpack@arg+2,w,c
  9756  00180C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  9757  00180E  501D               	movf	??___ftpack,w,c
  9758  001810  101E               	iorwf	??___ftpack+1,w,c
  9759  001812  101F               	iorwf	??___ftpack+2,w,c
  9760  001814  B4D8               	btfsc	status,2,c
  9761  001816  D00C               	goto	i1l1455
  9762  001818  D7EC               	goto	i1l1453
  9763  00181A  2A1B               	incf	___ftpack@exp,f,c
  9764  00181C  0E01               	movlw	1
  9765  00181E  2618               	addwf	___ftpack@arg,f,c
  9766  001820  0E00               	movlw	0
  9767  001822  2219               	addwfc	___ftpack@arg+1,f,c
  9768  001824  0E00               	movlw	0
  9769  001826  221A               	addwfc	___ftpack@arg+2,f,c
  9770  001828  90D8               	bcf	status,0,c
  9771  00182A  321A               	rrcf	___ftpack@arg+2,f,c
  9772  00182C  3219               	rrcf	___ftpack@arg+1,f,c
  9773  00182E  3218               	rrcf	___ftpack@arg,f,c
  9774  001830                     i1l1455:
  9775  001830  0E00               	movlw	0
  9776  001832  1418               	andwf	___ftpack@arg,w,c
  9777  001834  6E1D               	movwf	??___ftpack& (0+255),c
  9778  001836  0E00               	movlw	0
  9779  001838  1419               	andwf	___ftpack@arg+1,w,c
  9780  00183A  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  9781  00183C  0EFF               	movlw	255
  9782  00183E  141A               	andwf	___ftpack@arg+2,w,c
  9783  001840  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  9784  001842  501D               	movf	??___ftpack,w,c
  9785  001844  101E               	iorwf	??___ftpack+1,w,c
  9786  001846  101F               	iorwf	??___ftpack+2,w,c
  9787  001848  B4D8               	btfsc	status,2,c
  9788  00184A  D006               	goto	i1l1458
  9789  00184C  D7E6               	goto	i1l1456
  9790  00184E  061B               	decf	___ftpack@exp,f,c
  9791  001850  90D8               	bcf	status,0,c
  9792  001852  3618               	rlcf	___ftpack@arg,f,c
  9793  001854  3619               	rlcf	___ftpack@arg+1,f,c
  9794  001856  361A               	rlcf	___ftpack@arg+2,f,c
  9795  001858                     i1l1458:
  9796  001858  BE19               	btfsc	___ftpack@arg+1,7,c
  9797  00185A  D003               	goto	i1u591_20
  9798  00185C  0E02               	movlw	2
  9799  00185E  601B               	cpfslt	___ftpack@exp,c
  9800  001860  D7F6               	goto	i1l1459
  9801  001862                     i1u591_20:
  9802  001862  A01B               	btfss	___ftpack@exp,0,c
  9803  001864  9E19               	bcf	___ftpack@arg+1,7,c
  9804  001866  90D8               	bcf	status,0,c
  9805  001868  321B               	rrcf	___ftpack@exp,f,c
  9806  00186A  501B               	movf	___ftpack@exp,w,c
  9807  00186C  121A               	iorwf	___ftpack@arg+2,f,c
  9808  00186E  501C               	movf	___ftpack@sign,w,c
  9809  001870  A4D8               	btfss	status,2,c
  9810  001872  8E1A               	bsf	___ftpack@arg+2,7,c
  9811  001874  C018  F018         	movff	___ftpack@arg,?___ftpack
  9812  001878  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  9813  00187C  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  9814  001880  0012               	return	
  9815  001882                     __end_of___ftpack:
  9816                           	opt stack 0
  9817                           pclatu	equ	0xFFB
  9818                           pclath	equ	0xFFA
  9819                           tblptru	equ	0xFF8
  9820                           tblptrh	equ	0xFF7
  9821                           tblptrl	equ	0xFF6
  9822                           tablat	equ	0xFF5
  9823                           prodh	equ	0xFF4
  9824                           prodl	equ	0xFF3
  9825                           intcon	equ	0xFF2
  9826                           intcon2	equ	0xFF1
  9827                           intcon3	equ	0xFF0
  9828                           indf0	equ	0xFEF
  9829                           postinc0	equ	0xFEE
  9830                           fsr0h	equ	0xFEA
  9831                           fsr0l	equ	0xFE9
  9832                           wreg	equ	0xFE8
  9833                           indf1	equ	0xFE7
  9834                           fsr1h	equ	0xFE2
  9835                           fsr1l	equ	0xFE1
  9836                           bsr	equ	0xFE0
  9837                           indf2	equ	0xFDF
  9838                           postinc2	equ	0xFDE
  9839                           postdec2	equ	0xFDD
  9840                           fsr2h	equ	0xFDA
  9841                           fsr2l	equ	0xFD9
  9842                           status	equ	0xFD8
  9843                           
  9844 ;; *************** function _I2C1_MasterWrite *****************
  9845 ;; Defined at:
  9846 ;;		line 600 in file "mcc_generated_files/i2c1.c"
  9847 ;; Parameters:    Size  Location     Type
  9848 ;;  pdata           2   32[COMRAM] PTR unsigned char 
  9849 ;;		 -> i2cWriteBlock(10), 
  9850 ;;  length          1   34[COMRAM] unsigned char 
  9851 ;;  address         2   35[COMRAM] unsigned int 
  9852 ;;  pflag           2   37[COMRAM] PTR enum E6972
  9853 ;;		 -> RAM(1535), 
  9854 ;; Auto vars:     Size  Location     Type
  9855 ;;		None
  9856 ;; Return value:  Size  Location     Type
  9857 ;;                  1    wreg      void 
  9858 ;; Registers used:
  9859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9865 ;;      Params:         7       0       0       0       0       0       0
  9866 ;;      Locals:         0       0       0       0       0       0       0
  9867 ;;      Temps:          0       0       0       0       0       0       0
  9868 ;;      Totals:         7       0       0       0       0       0       0
  9869 ;;Total ram usage:        7 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    5
  9872 ;; This function calls:
  9873 ;;		_I2C1_MasterTRBInsert
  9874 ;;		_I2C1_MasterWriteTRBBuild
  9875 ;; This function is called by:
  9876 ;;		_ADC_ISR
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           	psect	text55
  9881  001BD4                     __ptext55:
  9882                           	opt stack 0
  9883  001BD4                     _I2C1_MasterWrite:
  9884                           	opt stack 17
  9885                           
  9886                           ;i2c1.c: 606: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9887                           ;i2c1.c: 609: if (i2c1_object.trStatus.s.full != 1)
  9888                           
  9889                           ;incstack = 0
  9890  001BD4  0100               	movlb	0	; () banked
  9891  001BD6  B164               	btfsc	(_i2c1_object+4)& (0+255),0,b
  9892  001BD8  D01C               	goto	i1l831
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;i2c1.c: 610: {
  9896                           ;i2c1.c: 611: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  9897  001BDA  0EA7               	movlw	low I2C1_MasterWrite@trBlock
  9898  001BDC  6E18               	movwf	I2C1_MasterWriteTRBBuild@ptrb,c
  9899  001BDE  0E00               	movlw	high I2C1_MasterWrite@trBlock
  9900  001BE0  6E19               	movwf	I2C1_MasterWriteTRBBuild@ptrb+1,c
  9901  001BE2  C021  F01A         	movff	I2C1_MasterWrite@pdata,I2C1_MasterWriteTRBBuild@pdata
  9902  001BE6  C022  F01B         	movff	I2C1_MasterWrite@pdata+1,I2C1_MasterWriteTRBBuild@pdata+1
  9903  001BEA  C023  F01C         	movff	I2C1_MasterWrite@length,I2C1_MasterWriteTRBBuild@length
  9904  001BEE  C024  F01D         	movff	I2C1_MasterWrite@address,I2C1_MasterWriteTRBBuild@address
  9905  001BF2  C025  F01E         	movff	I2C1_MasterWrite@address+1,I2C1_MasterWriteTRBBuild@address+1
  9906  001BF6  EC99  F00E         	call	_I2C1_MasterWriteTRBBuild	;wreg free
  9907                           
  9908                           ;i2c1.c: 612: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9909  001BFA  0EA7               	movlw	low I2C1_MasterWrite@trBlock
  9910  001BFC  6E18               	movwf	I2C1_MasterTRBInsert@ptrb_list,c
  9911  001BFE  0E00               	movlw	high I2C1_MasterWrite@trBlock
  9912  001C00  6E19               	movwf	I2C1_MasterTRBInsert@ptrb_list+1,c
  9913  001C02  C026  F01A         	movff	I2C1_MasterWrite@pflag,I2C1_MasterTRBInsert@pflag
  9914  001C06  C027  F01B         	movff	I2C1_MasterWrite@pflag+1,I2C1_MasterTRBInsert@pflag+1
  9915  001C0A  0E01               	movlw	1
  9916  001C0C  EC41  F00C         	call	_I2C1_MasterTRBInsert
  9917                           
  9918                           ;i2c1.c: 613: }
  9919  001C10  0012               	return	
  9920  001C12                     i1l831:
  9921                           
  9922                           ;i2c1.c: 614: else
  9923                           ;i2c1.c: 615: {
  9924                           ;i2c1.c: 616: *pflag = I2C1_MESSAGE_FAIL;
  9925  001C12  C026  FFD9         	movff	I2C1_MasterWrite@pflag,fsr2l
  9926  001C16  C027  FFDA         	movff	I2C1_MasterWrite@pflag+1,fsr2h
  9927  001C1A  0E01               	movlw	1
  9928  001C1C  6EDF               	movwf	indf2,c
  9929  001C1E  0012               	return	
  9930  001C20                     __end_of_I2C1_MasterWrite:
  9931                           	opt stack 0
  9932                           pclatu	equ	0xFFB
  9933                           pclath	equ	0xFFA
  9934                           tblptru	equ	0xFF8
  9935                           tblptrh	equ	0xFF7
  9936                           tblptrl	equ	0xFF6
  9937                           tablat	equ	0xFF5
  9938                           prodh	equ	0xFF4
  9939                           prodl	equ	0xFF3
  9940                           intcon	equ	0xFF2
  9941                           intcon2	equ	0xFF1
  9942                           intcon3	equ	0xFF0
  9943                           indf0	equ	0xFEF
  9944                           postinc0	equ	0xFEE
  9945                           fsr0h	equ	0xFEA
  9946                           fsr0l	equ	0xFE9
  9947                           wreg	equ	0xFE8
  9948                           indf1	equ	0xFE7
  9949                           fsr1h	equ	0xFE2
  9950                           fsr1l	equ	0xFE1
  9951                           bsr	equ	0xFE0
  9952                           indf2	equ	0xFDF
  9953                           postinc2	equ	0xFDE
  9954                           postdec2	equ	0xFDD
  9955                           fsr2h	equ	0xFDA
  9956                           fsr2l	equ	0xFD9
  9957                           status	equ	0xFD8
  9958                           
  9959 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  9960 ;; Defined at:
  9961 ;;		line 709 in file "mcc_generated_files/i2c1.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;  ptrb            2   23[COMRAM] PTR struct .
  9964 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  9965 ;;  pdata           2   25[COMRAM] PTR unsigned char 
  9966 ;;		 -> i2cWriteBlock(10), 
  9967 ;;  length          1   27[COMRAM] unsigned char 
  9968 ;;  address         2   28[COMRAM] unsigned int 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  1    wreg      void 
  9973 ;; Registers used:
  9974 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9980 ;;      Params:         7       0       0       0       0       0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0
  9982 ;;      Temps:          2       0       0       0       0       0       0
  9983 ;;      Totals:         9       0       0       0       0       0       0
  9984 ;;Total ram usage:        9 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    4
  9987 ;; This function calls:
  9988 ;;		Nothing
  9989 ;; This function is called by:
  9990 ;;		_I2C1_MasterWrite
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           	psect	text56
  9995  001D32                     __ptext56:
  9996                           	opt stack 0
  9997  001D32                     _I2C1_MasterWriteTRBBuild:
  9998                           	opt stack 17
  9999                           
 10000                           ;i2c1.c: 715: ptrb->address = address << 1;
 10001                           
 10002                           ;incstack = 0
 10003  001D32  C01D  F01F         	movff	I2C1_MasterWriteTRBBuild@address,??_I2C1_MasterWriteTRBBuild
 10004  001D36  C01E  F020         	movff	I2C1_MasterWriteTRBBuild@address+1,??_I2C1_MasterWriteTRBBuild+1
 10005  001D3A  90D8               	bcf	status,0,c
 10006  001D3C  361F               	rlcf	??_I2C1_MasterWriteTRBBuild,f,c
 10007  001D3E  3620               	rlcf	??_I2C1_MasterWriteTRBBuild+1,f,c
 10008  001D40  C018  FFD9         	movff	I2C1_MasterWriteTRBBuild@ptrb,fsr2l
 10009  001D44  C019  FFDA         	movff	I2C1_MasterWriteTRBBuild@ptrb+1,fsr2h
 10010  001D48  C01F  FFDE         	movff	??_I2C1_MasterWriteTRBBuild,postinc2
 10011  001D4C  C020  FFDD         	movff	??_I2C1_MasterWriteTRBBuild+1,postdec2
 10012                           
 10013                           ;i2c1.c: 716: ptrb->length = length;
 10014  001D50  EE20 F002          	lfsr	2,2
 10015  001D54  5018               	movf	I2C1_MasterWriteTRBBuild@ptrb,w,c
 10016  001D56  26D9               	addwf	fsr2l,f,c
 10017  001D58  5019               	movf	I2C1_MasterWriteTRBBuild@ptrb+1,w,c
 10018  001D5A  22DA               	addwfc	fsr2h,f,c
 10019  001D5C  C01C  FFDF         	movff	I2C1_MasterWriteTRBBuild@length,indf2
 10020                           
 10021                           ;i2c1.c: 717: ptrb->pbuffer = pdata;
 10022  001D60  EE20 F003          	lfsr	2,3
 10023  001D64  5018               	movf	I2C1_MasterWriteTRBBuild@ptrb,w,c
 10024  001D66  26D9               	addwf	fsr2l,f,c
 10025  001D68  5019               	movf	I2C1_MasterWriteTRBBuild@ptrb+1,w,c
 10026  001D6A  22DA               	addwfc	fsr2h,f,c
 10027  001D6C  C01A  FFDE         	movff	I2C1_MasterWriteTRBBuild@pdata,postinc2
 10028  001D70  C01B  FFDD         	movff	I2C1_MasterWriteTRBBuild@pdata+1,postdec2
 10029  001D74  0012               	return		;funcret
 10030  001D76                     __end_of_I2C1_MasterWriteTRBBuild:
 10031                           	opt stack 0
 10032                           pclatu	equ	0xFFB
 10033                           pclath	equ	0xFFA
 10034                           tblptru	equ	0xFF8
 10035                           tblptrh	equ	0xFF7
 10036                           tblptrl	equ	0xFF6
 10037                           tablat	equ	0xFF5
 10038                           prodh	equ	0xFF4
 10039                           prodl	equ	0xFF3
 10040                           intcon	equ	0xFF2
 10041                           intcon2	equ	0xFF1
 10042                           intcon3	equ	0xFF0
 10043                           indf0	equ	0xFEF
 10044                           postinc0	equ	0xFEE
 10045                           fsr0h	equ	0xFEA
 10046                           fsr0l	equ	0xFE9
 10047                           wreg	equ	0xFE8
 10048                           indf1	equ	0xFE7
 10049                           fsr1h	equ	0xFE2
 10050                           fsr1l	equ	0xFE1
 10051                           bsr	equ	0xFE0
 10052                           indf2	equ	0xFDF
 10053                           postinc2	equ	0xFDE
 10054                           postdec2	equ	0xFDD
 10055                           fsr2h	equ	0xFDA
 10056                           fsr2l	equ	0xFD9
 10057                           status	equ	0xFD8
 10058                           
 10059 ;; *************** function _I2C1_MasterTRBInsert *****************
 10060 ;; Defined at:
 10061 ;;		line 643 in file "mcc_generated_files/i2c1.c"
 10062 ;; Parameters:    Size  Location     Type
 10063 ;;  count           1    wreg     unsigned char 
 10064 ;;  ptrb_list       2   23[COMRAM] PTR struct .
 10065 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), 
 10066 ;;  pflag           2   25[COMRAM] PTR enum E6972
 10067 ;;		 -> RAM(1535), 
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;  count           1   28[COMRAM] unsigned char 
 10070 ;; Return value:  Size  Location     Type
 10071 ;;                  1    wreg      void 
 10072 ;; Registers used:
 10073 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10079 ;;      Params:         4       0       0       0       0       0       0
 10080 ;;      Locals:         1       0       0       0       0       0       0
 10081 ;;      Temps:          1       0       0       0       0       0       0
 10082 ;;      Totals:         6       0       0       0       0       0       0
 10083 ;;Total ram usage:        6 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    4
 10086 ;; This function calls:
 10087 ;;		Nothing
 10088 ;; This function is called by:
 10089 ;;		_I2C1_MasterWrite
 10090 ;;		_I2C1_MasterRead
 10091 ;; This function uses a non-reentrant model
 10092 ;;
 10093                           
 10094                           	psect	text57
 10095  001882                     __ptext57:
 10096                           	opt stack 0
 10097  001882                     _I2C1_MasterTRBInsert:
 10098                           	opt stack 17
 10099                           
 10100                           ;incstack = 0
 10101                           ;I2C1_MasterTRBInsert@count stored from wreg
 10102  001882  6E1D               	movwf	I2C1_MasterTRBInsert@count,c
 10103                           
 10104                           ;i2c1.c: 650: if (i2c1_object.trStatus.s.full != 1)
 10105  001884  0100               	movlb	0	; () banked
 10106  001886  B164               	btfsc	(_i2c1_object+4)& (0+255),0,b
 10107  001888  D039               	goto	i1l843
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;i2c1.c: 651: {
 10111                           ;i2c1.c: 652: *pflag = I2C1_MESSAGE_PENDING;
 10112  00188A  C01A  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 10113  00188E  C01B  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 10114  001892  0E02               	movlw	2
 10115  001894  6EDF               	movwf	indf2,c
 10116                           
 10117                           ; BSR set to: 0
 10118                           ;i2c1.c: 654: i2c1_object.pTrTail->ptrb_list = ptrb_list;
 10119  001896  EE20 F001          	lfsr	2,1
 10120  00189A  5160               	movf	_i2c1_object& (0+255),w,b
 10121  00189C  26D9               	addwf	fsr2l,f,c
 10122  00189E  5161               	movf	(_i2c1_object+1)& (0+255),w,b
 10123  0018A0  22DA               	addwfc	fsr2h,f,c
 10124  0018A2  C018  FFDE         	movff	I2C1_MasterTRBInsert@ptrb_list,postinc2
 10125  0018A6  C019  FFDD         	movff	I2C1_MasterTRBInsert@ptrb_list+1,postdec2
 10126                           
 10127                           ; BSR set to: 0
 10128                           ;i2c1.c: 655: i2c1_object.pTrTail->count = count;
 10129  0018AA  C060  FFD9         	movff	_i2c1_object,fsr2l
 10130  0018AE  C061  FFDA         	movff	_i2c1_object+1,fsr2h
 10131  0018B2  C01D  FFDF         	movff	I2C1_MasterTRBInsert@count,indf2
 10132                           
 10133                           ; BSR set to: 0
 10134                           ;i2c1.c: 656: i2c1_object.pTrTail->pTrFlag = pflag;
 10135  0018B6  EE20 F003          	lfsr	2,3
 10136  0018BA  5160               	movf	_i2c1_object& (0+255),w,b
 10137  0018BC  26D9               	addwf	fsr2l,f,c
 10138  0018BE  5161               	movf	(_i2c1_object+1)& (0+255),w,b
 10139  0018C0  22DA               	addwfc	fsr2h,f,c
 10140  0018C2  C01A  FFDE         	movff	I2C1_MasterTRBInsert@pflag,postinc2
 10141  0018C6  C01B  FFDD         	movff	I2C1_MasterTRBInsert@pflag+1,postdec2
 10142                           
 10143                           ; BSR set to: 0
 10144                           ;i2c1.c: 657: i2c1_object.pTrTail++;
 10145  0018CA  0E05               	movlw	5
 10146  0018CC  2760               	addwf	_i2c1_object& (0+255),f,b
 10147  0018CE  0E00               	movlw	0
 10148  0018D0  2361               	addwfc	(_i2c1_object+1)& (0+255),f,b
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;i2c1.c: 660: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
 10152  0018D2  0EB1               	movlw	low (_i2c1_tr_queue+5)
 10153  0018D4  1960               	xorwf	_i2c1_object& (0+255),w,b
 10154  0018D6  E108               	bnz	i1l4052
 10155  0018D8  0E00               	movlw	high (_i2c1_tr_queue+5)
 10156  0018DA  1961               	xorwf	(_i2c1_object+1)& (0+255),w,b
 10157  0018DC  A4D8               	btfss	status,2,c
 10158  0018DE  D004               	goto	i1l844
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;i2c1.c: 661: {
 10162                           ;i2c1.c: 663: i2c1_object.pTrTail = i2c1_tr_queue;
 10163  0018E0  0EAC               	movlw	low _i2c1_tr_queue
 10164  0018E2  6F60               	movwf	_i2c1_object& (0+255),b
 10165  0018E4  0E00               	movlw	high _i2c1_tr_queue
 10166  0018E6  6F61               	movwf	(_i2c1_object+1)& (0+255),b
 10167  0018E8                     i1l844:
 10168  0018E8                     i1l4052:
 10169                           
 10170                           ; BSR set to: 0
 10171                           ;i2c1.c: 664: }
 10172                           ;i2c1.c: 668: i2c1_object.trStatus.s.empty = 0;
 10173  0018E8  9364               	bcf	(_i2c1_object+4)& (0+255),1,b
 10174                           
 10175                           ;i2c1.c: 671: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
 10176  0018EA  5160               	movf	_i2c1_object& (0+255),w,b
 10177  0018EC  1962               	xorwf	(_i2c1_object+2)& (0+255),w,b
 10178  0018EE  E10C               	bnz	i1l4058
 10179  0018F0  5161               	movf	(_i2c1_object+1)& (0+255),w,b
 10180  0018F2  1963               	xorwf	(_i2c1_object+3)& (0+255),w,b
 10181  0018F4  A4D8               	btfss	status,2,c
 10182  0018F6  D008               	goto	i1l846
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;i2c1.c: 672: {
 10186                           ;i2c1.c: 674: i2c1_object.trStatus.s.full = 1;
 10187  0018F8  8164               	bsf	(_i2c1_object+4)& (0+255),0,b
 10188                           
 10189                           ; BSR set to: 0
 10190                           ;i2c1.c: 675: }
 10191                           ;i2c1.c: 677: }
 10192  0018FA  D006               	goto	i1l846
 10193  0018FC                     i1l843:
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;i2c1.c: 678: else
 10197                           ;i2c1.c: 679: {
 10198                           ;i2c1.c: 680: *pflag = I2C1_MESSAGE_FAIL;
 10199                           
 10200                           ; BSR set to: 0
 10201  0018FC  C01A  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 10202  001900  C01B  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 10203  001904  0E01               	movlw	1
 10204  001906  6EDF               	movwf	indf2,c
 10205  001908                     i1l846:
 10206  001908                     i1l4058:
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;i2c1.c: 681: }
 10210                           ;i2c1.c: 684: if (*pflag == I2C1_MESSAGE_PENDING)
 10211  001908  C01A  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 10212  00190C  C01B  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 10213  001910  0E02               	movlw	2
 10214  001912  18DE               	xorwf	postinc2,w,c
 10215  001914  A4D8               	btfss	status,2,c
 10216  001916  0012               	return	
 10217  001918                     i1u334_20:
 10218                           
 10219                           ; BSR set to: 0
 10220                           
 10221                           ; BSR set to: 0
 10222                           
 10223                           ; BSR set to: 0
 10224                           ;i2c1.c: 685: {
 10225                           ;i2c1.c: 686: while(i2c1_state != S_MASTER_IDLE);
 10226  001918  5038               	movf	_i2c1_state,w,c
 10227  00191A  A4D8               	btfss	status,2,c
 10228  00191C  D7FD               	goto	i1u334_20
 10229                           
 10230                           ;i2c1.c: 687: {
 10231                           ;i2c1.c: 690: PIR1bits.SSP1IF = 1;
 10232  00191E  869E               	bsf	3998,3,c	;volatile
 10233  001920  0012               	return	
 10234  001922                     __end_of_I2C1_MasterTRBInsert:
 10235                           	opt stack 0
 10236                           pclatu	equ	0xFFB
 10237                           pclath	equ	0xFFA
 10238                           tblptru	equ	0xFF8
 10239                           tblptrh	equ	0xFF7
 10240                           tblptrl	equ	0xFF6
 10241                           tablat	equ	0xFF5
 10242                           prodh	equ	0xFF4
 10243                           prodl	equ	0xFF3
 10244                           intcon	equ	0xFF2
 10245                           intcon2	equ	0xFF1
 10246                           intcon3	equ	0xFF0
 10247                           indf0	equ	0xFEF
 10248                           postinc0	equ	0xFEE
 10249                           fsr0h	equ	0xFEA
 10250                           fsr0l	equ	0xFE9
 10251                           wreg	equ	0xFE8
 10252                           indf1	equ	0xFE7
 10253                           fsr1h	equ	0xFE2
 10254                           fsr1l	equ	0xFE1
 10255                           bsr	equ	0xFE0
 10256                           indf2	equ	0xFDF
 10257                           postinc2	equ	0xFDE
 10258                           postdec2	equ	0xFDD
 10259                           fsr2h	equ	0xFDA
 10260                           fsr2l	equ	0xFD9
 10261                           status	equ	0xFD8
 10262                           
 10263 ;; *************** function _ADC_GetConversionResult *****************
 10264 ;; Defined at:
 10265 ;;		line 99 in file "mcc_generated_files/adc.c"
 10266 ;; Parameters:    Size  Location     Type
 10267 ;;		None
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;		None
 10270 ;; Return value:  Size  Location     Type
 10271 ;;                  2   23[COMRAM] unsigned int 
 10272 ;; Registers used:
 10273 ;;		wreg, status,2, status,0
 10274 ;; Tracked objects:
 10275 ;;		On entry : 0/0
 10276 ;;		On exit  : 0/0
 10277 ;;		Unchanged: 0/0
 10278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10279 ;;      Params:         2       0       0       0       0       0       0
 10280 ;;      Locals:         0       0       0       0       0       0       0
 10281 ;;      Temps:          2       0       0       0       0       0       0
 10282 ;;      Totals:         4       0       0       0       0       0       0
 10283 ;;Total ram usage:        4 bytes
 10284 ;; Hardware stack levels used:    1
 10285 ;; Hardware stack levels required when called:    4
 10286 ;; This function calls:
 10287 ;;		Nothing
 10288 ;; This function is called by:
 10289 ;;		_ADC_ISR
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           	psect	text58
 10294  002258                     __ptext58:
 10295                           	opt stack 0
 10296  002258                     _ADC_GetConversionResult:
 10297                           	opt stack 18
 10298                           
 10299                           ;adc.c: 101: return (( adc_result_t ) ( ( ADRESH << 8 ) + ADRESL ) );
 10300                           
 10301                           ;incstack = 0
 10302  002258  50C4               	movf	4036,w,c	;volatile
 10303  00225A  6E1B               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
 10304  00225C  6A1A               	clrf	??_ADC_GetConversionResult& (0+255),c
 10305  00225E  50C3               	movf	4035,w,c	;volatile
 10306  002260  241A               	addwf	??_ADC_GetConversionResult,w,c
 10307  002262  6E18               	movwf	?_ADC_GetConversionResult,c
 10308  002264  0E00               	movlw	0
 10309  002266  201B               	addwfc	??_ADC_GetConversionResult+1,w,c
 10310  002268  6E19               	movwf	?_ADC_GetConversionResult+1,c
 10311  00226A  0012               	return	
 10312  00226C                     __end_of_ADC_GetConversionResult:
 10313                           	opt stack 0
 10314                           pclatu	equ	0xFFB
 10315                           pclath	equ	0xFFA
 10316                           tblptru	equ	0xFF8
 10317                           tblptrh	equ	0xFF7
 10318                           tblptrl	equ	0xFF6
 10319                           tablat	equ	0xFF5
 10320                           prodh	equ	0xFF4
 10321                           prodl	equ	0xFF3
 10322                           intcon	equ	0xFF2
 10323                           intcon2	equ	0xFF1
 10324                           intcon3	equ	0xFF0
 10325                           indf0	equ	0xFEF
 10326                           postinc0	equ	0xFEE
 10327                           fsr0h	equ	0xFEA
 10328                           fsr0l	equ	0xFE9
 10329                           wreg	equ	0xFE8
 10330                           indf1	equ	0xFE7
 10331                           fsr1h	equ	0xFE2
 10332                           fsr1l	equ	0xFE1
 10333                           bsr	equ	0xFE0
 10334                           indf2	equ	0xFDF
 10335                           postinc2	equ	0xFDE
 10336                           postdec2	equ	0xFDD
 10337                           fsr2h	equ	0xFDA
 10338                           fsr2l	equ	0xFD9
 10339                           status	equ	0xFD8
 10340                           
 10341 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 10342 ;; Defined at:
 10343 ;;		line 84 in file "mcc_generated_files/interrupt_manager.c"
 10344 ;; Parameters:    Size  Location     Type
 10345 ;;		None
 10346 ;; Auto vars:     Size  Location     Type
 10347 ;;		None
 10348 ;; Return value:  Size  Location     Type
 10349 ;;                  1    wreg      void 
 10350 ;; Registers used:
 10351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10357 ;;      Params:         0       0       0       0       0       0       0
 10358 ;;      Locals:         0       0       0       0       0       0       0
 10359 ;;      Temps:         18       0       0       0       0       0       0
 10360 ;;      Totals:        18       0       0       0       0       0       0
 10361 ;;Total ram usage:       18 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    3
 10364 ;; This function calls:
 10365 ;;		_I2C1_BusCollisionISR
 10366 ;;		_I2C1_ISR
 10367 ;;		_INT0_ISR
 10368 ;;		_INT1_ISR
 10369 ;;		_INT2_ISR
 10370 ;;		_TMR0_ISR
 10371 ;; This function is called by:
 10372 ;;		Interrupt level 2
 10373 ;; This function uses a non-reentrant model
 10374 ;;
 10375                           
 10376                           	psect	intcode
 10377  000008                     __pintcode:
 10378                           	opt stack 0
 10379  000008                     _INTERRUPT_InterruptManagerHigh:
 10380                           	opt stack 16
 10381                           
 10382                           ;incstack = 0
 10383  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10384  00000A  EF16  F00B         	goto	int_func
 10385                           pclatu	equ	0xFFB
 10386                           pclath	equ	0xFFA
 10387                           tblptru	equ	0xFF8
 10388                           tblptrh	equ	0xFF7
 10389                           tblptrl	equ	0xFF6
 10390                           tablat	equ	0xFF5
 10391                           prodh	equ	0xFF4
 10392                           prodl	equ	0xFF3
 10393                           intcon	equ	0xFF2
 10394                           intcon2	equ	0xFF1
 10395                           intcon3	equ	0xFF0
 10396                           indf0	equ	0xFEF
 10397                           postinc0	equ	0xFEE
 10398                           fsr0h	equ	0xFEA
 10399                           fsr0l	equ	0xFE9
 10400                           wreg	equ	0xFE8
 10401                           indf1	equ	0xFE7
 10402                           fsr1h	equ	0xFE2
 10403                           fsr1l	equ	0xFE1
 10404                           bsr	equ	0xFE0
 10405                           indf2	equ	0xFDF
 10406                           postinc2	equ	0xFDE
 10407                           postdec2	equ	0xFDD
 10408                           fsr2h	equ	0xFDA
 10409                           fsr2l	equ	0xFD9
 10410                           status	equ	0xFD8
 10411                           
 10412                           	psect	intcode_body
 10413  00162C                     __pintcode_body:
 10414                           	opt stack 16
 10415  00162C                     int_func:
 10416                           	opt stack 16
 10417  00162C  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 10418  001630  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 10419  001634  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 10420  001638  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 10421  00163C  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 10422  001640  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 10423  001644  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 10424  001648  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 10425  00164C  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 10426  001650  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 10427  001654  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 10428  001658  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 10429  00165C  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 10430  001660  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 10431  001664  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
 10432  001668  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
 10433  00166C  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
 10434  001670  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
 10435                           
 10436                           ;interrupt_manager.c: 87: if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
 10437  001674  B8F2               	btfsc	intcon,4,c	;volatile
 10438  001676  A2F2               	btfss	intcon,1,c	;volatile
 10439  001678  D003               	goto	i2l116
 10440                           
 10441                           ;interrupt_manager.c: 88: {
 10442                           ;interrupt_manager.c: 89: INT0_ISR();
 10443  00167A  EC25  F010         	call	_INT0_ISR	;wreg free
 10444                           
 10445                           ;interrupt_manager.c: 90: }
 10446  00167E  D01D               	goto	i2l126
 10447  001680                     i2l116:
 10448                           
 10449                           ;interrupt_manager.c: 91: else if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
 10450  001680  B6F0               	btfsc	intcon3,3,c	;volatile
 10451  001682  A0F0               	btfss	intcon3,0,c	;volatile
 10452  001684  D003               	goto	i2l118
 10453                           
 10454                           ;interrupt_manager.c: 92: {
 10455                           ;interrupt_manager.c: 93: INT1_ISR();
 10456  001686  EC0F  F010         	call	_INT1_ISR	;wreg free
 10457                           
 10458                           ;interrupt_manager.c: 94: }
 10459  00168A  D017               	goto	i2l126
 10460  00168C                     i2l118:
 10461                           
 10462                           ;interrupt_manager.c: 95: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
 10463  00168C  B8F0               	btfsc	intcon3,4,c	;volatile
 10464  00168E  A2F0               	btfss	intcon3,1,c	;volatile
 10465  001690  D003               	goto	i2l120
 10466                           
 10467                           ;interrupt_manager.c: 96: {
 10468                           ;interrupt_manager.c: 97: INT2_ISR();
 10469  001692  ECF9  F00F         	call	_INT2_ISR	;wreg free
 10470                           
 10471                           ;interrupt_manager.c: 98: }
 10472  001696  D011               	goto	i2l126
 10473  001698                     i2l120:
 10474                           
 10475                           ;interrupt_manager.c: 99: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 10476  001698  BAF2               	btfsc	intcon,5,c	;volatile
 10477  00169A  A4F2               	btfss	intcon,2,c	;volatile
 10478  00169C  D003               	goto	i2l122
 10479                           
 10480                           ;interrupt_manager.c: 100: {
 10481                           ;interrupt_manager.c: 101: TMR0_ISR();
 10482  00169E  EC98  F008         	call	_TMR0_ISR	;wreg free
 10483                           
 10484                           ;interrupt_manager.c: 102: }
 10485  0016A2  D00B               	goto	i2l126
 10486  0016A4                     i2l122:
 10487                           
 10488                           ;interrupt_manager.c: 103: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
 10489  0016A4  B69D               	btfsc	3997,3,c	;volatile
 10490  0016A6  A69E               	btfss	3998,3,c	;volatile
 10491  0016A8  D003               	goto	i2l124
 10492                           
 10493                           ;interrupt_manager.c: 104: {
 10494                           ;interrupt_manager.c: 105: I2C1_ISR();
 10495  0016AA  EC52  F003         	call	_I2C1_ISR	;wreg free
 10496                           
 10497                           ;interrupt_manager.c: 106: }
 10498  0016AE  D005               	goto	i2l126
 10499  0016B0                     i2l124:
 10500                           
 10501                           ;interrupt_manager.c: 107: else if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
 10502  0016B0  B6A0               	btfsc	4000,3,c	;volatile
 10503  0016B2  A6A1               	btfss	4001,3,c	;volatile
 10504  0016B4  D002               	goto	i2l126
 10505                           
 10506                           ;interrupt_manager.c: 108: {
 10507                           ;interrupt_manager.c: 109: I2C1_BusCollisionISR();
 10508  0016B6  EC8A  F011         	call	_I2C1_BusCollisionISR	;wreg free
 10509  0016BA                     i2l126:
 10510                           
 10511                           ;interrupt_manager.c: 111: else
 10512                           ;interrupt_manager.c: 112: {
 10513  0016BA  C017  F04B         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
 10514  0016BE  C016  F04A         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
 10515  0016C2  C015  F049         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
 10516  0016C6  C014  F048         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
 10517  0016CA  C013  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 10518  0016CE  C012  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 10519  0016D2  C011  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 10520  0016D6  C010  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 10521  0016DA  C00F  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 10522  0016DE  C00E  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 10523  0016E2  C00D  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 10524  0016E6  C00C  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 10525  0016EA  C00B  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 10526  0016EE  C00A  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 10527  0016F2  C009  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 10528  0016F6  C008  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 10529  0016FA  C007  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 10530  0016FE  C006  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 10531  001702  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10532  001704  0011               	retfie		f
 10533  001706                     __end_of_INTERRUPT_InterruptManagerHigh:
 10534                           	opt stack 0
 10535                           pclatu	equ	0xFFB
 10536                           pclath	equ	0xFFA
 10537                           tblptru	equ	0xFF8
 10538                           tblptrh	equ	0xFF7
 10539                           tblptrl	equ	0xFF6
 10540                           tablat	equ	0xFF5
 10541                           prodh	equ	0xFF4
 10542                           prodl	equ	0xFF3
 10543                           intcon	equ	0xFF2
 10544                           intcon2	equ	0xFF1
 10545                           intcon3	equ	0xFF0
 10546                           indf0	equ	0xFEF
 10547                           postinc0	equ	0xFEE
 10548                           fsr0h	equ	0xFEA
 10549                           fsr0l	equ	0xFE9
 10550                           wreg	equ	0xFE8
 10551                           indf1	equ	0xFE7
 10552                           fsr1h	equ	0xFE2
 10553                           fsr1l	equ	0xFE1
 10554                           bsr	equ	0xFE0
 10555                           indf2	equ	0xFDF
 10556                           postinc2	equ	0xFDE
 10557                           postdec2	equ	0xFDD
 10558                           fsr2h	equ	0xFDA
 10559                           fsr2l	equ	0xFD9
 10560                           status	equ	0xFD8
 10561                           
 10562 ;; *************** function _TMR0_ISR *****************
 10563 ;; Defined at:
 10564 ;;		line 133 in file "mcc_generated_files/tmr0.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;		None
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;		None
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  1    wreg      void 
 10571 ;; Registers used:
 10572 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10578 ;;      Params:         0       0       0       0       0       0       0
 10579 ;;      Locals:         0       0       0       0       0       0       0
 10580 ;;      Temps:          0       0       0       0       0       0       0
 10581 ;;      Totals:         0       0       0       0       0       0       0
 10582 ;;Total ram usage:        0 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    1
 10585 ;; This function calls:
 10586 ;;		Absolute function
 10587 ;;		_ADC_StartConversion
 10588 ;;		_EPWM1_LoadDutyValue
 10589 ;;		_TMR0_DefaultInterruptHandler
 10590 ;;		_TMR2_LoadPeriodRegister
 10591 ;;		_TMR2_StartTimer
 10592 ;;		_TMR2_StopTimer
 10593 ;; This function is called by:
 10594 ;;		_INTERRUPT_InterruptManagerHigh
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text60
 10599  001130                     __ptext60:
 10600                           	opt stack 0
 10601  001130                     _TMR0_ISR:
 10602                           	opt stack 17
 10603                           
 10604                           ;tmr0.c: 136: INTCONbits.TMR0IF = 0;
 10605                           
 10606                           ;incstack = 0
 10607  001130  94F2               	bcf	intcon,2,c	;volatile
 10608                           
 10609                           ;tmr0.c: 140: TMR0H = timer0ReloadVal >> 8;
 10610  001132  5045               	movf	_timer0ReloadVal+1,w,c	;volatile
 10611  001134  6ED7               	movwf	4055,c	;volatile
 10612                           
 10613                           ;tmr0.c: 141: TMR0L = ( uint8_t ) timer0ReloadVal;
 10614  001136  C044  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 10615                           
 10616                           ;tmr0.c: 143: if (TMR0_InterruptHandler) {
 10617  00113A  0100               	movlb	0	; () banked
 10618  00113C  51E5               	movf	_TMR0_InterruptHandler& (0+255),w,b
 10619  00113E  11E6               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 10620  001140  B4D8               	btfsc	status,2,c
 10621  001142  D00C               	goto	i2u464_49
 10622                           
 10623                           ; BSR set to: 0
 10624                           ;tmr0.c: 144: TMR0_InterruptHandler();
 10625  001144  D801               	call	i2u464_48
 10626  001146  D00A               	goto	i2u464_49
 10627  001148                     i2u464_48:
 10628  001148  0005               	push	
 10629  00114A  6EFA               	movwf	pclath,c
 10630  00114C  51E5               	movf	_TMR0_InterruptHandler& (0+255),w,b
 10631  00114E  6EFD               	movwf	tosl,c
 10632  001150  51E6               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 10633  001152  6EFE               	movwf	tosh,c
 10634  001154  50F8               	movf	tblptru,w,c
 10635  001156  6EFF               	movwf	tosu,c
 10636  001158  50FA               	movf	pclath,w,c
 10637  00115A  0012               	return		;indir
 10638  00115C                     i2u464_49:
 10639                           
 10640                           ;tmr0.c: 145: }
 10641                           ;tmr0.c: 148: clk4Hz = !clk4Hz;
 10642  00115C  503F               	movf	_clk4Hz,w,c	;volatile
 10643  00115E  A4D8               	btfss	status,2,c
 10644  001160  D002               	goto	i2u465_40
 10645  001162  0E01               	movlw	1
 10646  001164  D001               	goto	i2u466_40
 10647  001166                     i2u465_40:
 10648  001166  0E00               	movlw	0
 10649  001168                     i2u466_40:
 10650  001168  6E3F               	movwf	_clk4Hz,c	;volatile
 10651                           
 10652                           ;tmr0.c: 149: if (clk4Hz) {
 10653  00116A  503F               	movf	_clk4Hz,w,c	;volatile
 10654  00116C  B4D8               	btfsc	status,2,c
 10655  00116E  D009               	goto	i2l373
 10656                           
 10657                           ;tmr0.c: 150: ADC_StartConversion();
 10658  001170  EC82  F011         	call	_ADC_StartConversion	;wreg free
 10659                           
 10660                           ;tmr0.c: 151: clk2Hz = !clk2Hz;
 10661  001174  503E               	movf	_clk2Hz,w,c	;volatile
 10662  001176  A4D8               	btfss	status,2,c
 10663  001178  D002               	goto	i2u468_40
 10664  00117A  0E01               	movlw	1
 10665  00117C  D001               	goto	i2u469_40
 10666  00117E                     i2u468_40:
 10667  00117E  0E00               	movlw	0
 10668  001180                     i2u469_40:
 10669  001180  6E3E               	movwf	_clk2Hz,c	;volatile
 10670  001182                     i2l373:
 10671                           
 10672                           ;tmr0.c: 152: }
 10673                           ;tmr0.c: 153: if (clk2Hz && clk4Hz)
 10674  001182  503E               	movf	_clk2Hz,w,c	;volatile
 10675  001184  B4D8               	btfsc	status,2,c
 10676  001186  D00A               	goto	i2l374
 10677  001188  503F               	movf	_clk4Hz,w,c	;volatile
 10678  00118A  B4D8               	btfsc	status,2,c
 10679  00118C  D007               	goto	i2l374
 10680                           
 10681                           ;tmr0.c: 154: clk1Hz = !clk1Hz;
 10682  00118E  503D               	movf	_clk1Hz,w,c	;volatile
 10683  001190  A4D8               	btfss	status,2,c
 10684  001192  D002               	goto	i2u472_40
 10685  001194  0E01               	movlw	1
 10686  001196  D001               	goto	i2u473_40
 10687  001198                     i2u472_40:
 10688  001198  0E00               	movlw	0
 10689  00119A                     i2u473_40:
 10690  00119A  6E3D               	movwf	_clk1Hz,c	;volatile
 10691  00119C                     i2l374:
 10692                           
 10693                           ;tmr0.c: 155: if (clk1Hz && clk2Hz && clk4Hz)
 10694  00119C  503D               	movf	_clk1Hz,w,c	;volatile
 10695  00119E  B4D8               	btfsc	status,2,c
 10696  0011A0  D00D               	goto	i2l375
 10697  0011A2  503E               	movf	_clk2Hz,w,c	;volatile
 10698  0011A4  B4D8               	btfsc	status,2,c
 10699  0011A6  D00A               	goto	i2l375
 10700  0011A8  503F               	movf	_clk4Hz,w,c	;volatile
 10701  0011AA  B4D8               	btfsc	status,2,c
 10702  0011AC  D007               	goto	i2l375
 10703                           
 10704                           ;tmr0.c: 156: clk1_2Hz = !clk1_2Hz;
 10705  0011AE  503C               	movf	_clk1_2Hz,w,c	;volatile
 10706  0011B0  A4D8               	btfss	status,2,c
 10707  0011B2  D002               	goto	i2u477_40
 10708  0011B4  0E01               	movlw	1
 10709  0011B6  D001               	goto	i2u478_40
 10710  0011B8                     i2u477_40:
 10711  0011B8  0E00               	movlw	0
 10712  0011BA                     i2u478_40:
 10713  0011BA  6E3C               	movwf	_clk1_2Hz,c	;volatile
 10714  0011BC                     i2l375:
 10715                           
 10716                           ;tmr0.c: 157: if (clk1_2Hz && clk1Hz && clk2Hz && clk4Hz)
 10717  0011BC  503C               	movf	_clk1_2Hz,w,c	;volatile
 10718  0011BE  B4D8               	btfsc	status,2,c
 10719  0011C0  D010               	goto	i2l376
 10720  0011C2  503D               	movf	_clk1Hz,w,c	;volatile
 10721  0011C4  B4D8               	btfsc	status,2,c
 10722  0011C6  D00D               	goto	i2l376
 10723  0011C8  503E               	movf	_clk2Hz,w,c	;volatile
 10724  0011CA  B4D8               	btfsc	status,2,c
 10725  0011CC  D00A               	goto	i2l376
 10726  0011CE  503F               	movf	_clk4Hz,w,c	;volatile
 10727  0011D0  B4D8               	btfsc	status,2,c
 10728  0011D2  D007               	goto	i2l376
 10729                           
 10730                           ;tmr0.c: 158: clk1_4Hz = !clk1_4Hz;
 10731  0011D4  503B               	movf	_clk1_4Hz,w,c	;volatile
 10732  0011D6  A4D8               	btfss	status,2,c
 10733  0011D8  D002               	goto	i2u483_40
 10734  0011DA  0E01               	movlw	1
 10735  0011DC  D001               	goto	i2u484_40
 10736  0011DE                     i2u483_40:
 10737  0011DE  0E00               	movlw	0
 10738  0011E0                     i2u484_40:
 10739  0011E0  6E3B               	movwf	_clk1_4Hz,c	;volatile
 10740  0011E2                     i2l376:
 10741                           
 10742                           ;tmr0.c: 159: if (clk1_4Hz && clk1_2Hz && clk1Hz && clk2Hz && clk4Hz)
 10743  0011E2  503B               	movf	_clk1_4Hz,w,c	;volatile
 10744  0011E4  B4D8               	btfsc	status,2,c
 10745  0011E6  D013               	goto	i2l377
 10746  0011E8  503C               	movf	_clk1_2Hz,w,c	;volatile
 10747  0011EA  B4D8               	btfsc	status,2,c
 10748  0011EC  D010               	goto	i2l377
 10749  0011EE  503D               	movf	_clk1Hz,w,c	;volatile
 10750  0011F0  B4D8               	btfsc	status,2,c
 10751  0011F2  D00D               	goto	i2l377
 10752  0011F4  503E               	movf	_clk2Hz,w,c	;volatile
 10753  0011F6  B4D8               	btfsc	status,2,c
 10754  0011F8  D00A               	goto	i2l377
 10755  0011FA  503F               	movf	_clk4Hz,w,c	;volatile
 10756  0011FC  B4D8               	btfsc	status,2,c
 10757  0011FE  D007               	goto	i2l377
 10758                           
 10759                           ;tmr0.c: 160: clk1_8Hz = !clk1_8Hz;
 10760  001200  503A               	movf	_clk1_8Hz,w,c	;volatile
 10761  001202  A4D8               	btfss	status,2,c
 10762  001204  D002               	goto	i2u490_40
 10763  001206  0E01               	movlw	1
 10764  001208  D001               	goto	i2u491_40
 10765  00120A                     i2u490_40:
 10766  00120A  0E00               	movlw	0
 10767  00120C                     i2u491_40:
 10768  00120C  6E3A               	movwf	_clk1_8Hz,c	;volatile
 10769  00120E                     i2l377:
 10770                           
 10771                           ;tmr0.c: 162: if (( int ) tempAtual > tempAlarme) {
 10772  00120E  5046               	movf	_tempAtual,w,c	;volatile
 10773  001210  5C47               	subwf	_tempAlarme,w,c	;volatile
 10774  001212  B0D8               	btfsc	status,0,c
 10775  001214  D024               	goto	i2l378
 10776                           
 10777                           ;tmr0.c: 163: alarme = 1;
 10778  001216  0E01               	movlw	1
 10779  001218  0100               	movlb	0	; () banked
 10780  00121A  6F75               	movwf	_alarme& (0+255),b	;volatile
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;tmr0.c: 165: TMR2_StartTimer();
 10784  00121C  EC80  F011         	call	_TMR2_StartTimer	;wreg free
 10785                           
 10786                           ;tmr0.c: 168: switch (clk2Hz) {
 10787  001220  D016               	goto	i2l379
 10788  001222                     
 10789                           ;tmr0.c: 170: EPWM1_LoadDutyValue(124);
 10790  001222  0E00               	movlw	0
 10791  001224  6E02               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
 10792  001226  0E7C               	movlw	124
 10793  001228  6E01               	movwf	EPWM1_LoadDutyValue@dutyValue,c
 10794  00122A  ECCA  F00F         	call	_EPWM1_LoadDutyValue	;wreg free
 10795                           
 10796                           ;tmr0.c: 171: TMR2_LoadPeriodRegister(249);
 10797  00122E  0EF9               	movlw	249
 10798  001230  EC78  F011         	call	_TMR2_LoadPeriodRegister
 10799                           
 10800                           ;tmr0.c: 172: do { LATBbits.LATB7 = 0; } while(0);
 10801  001234  9E8A               	bcf	3978,7,c	;volatile
 10802                           
 10803                           ;tmr0.c: 173: break;
 10804  001236  0012               	return	
 10805  001238                     
 10806                           ;tmr0.c: 175: EPWM1_LoadDutyValue(74);
 10807  001238  0E00               	movlw	0
 10808  00123A  6E02               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
 10809  00123C  0E4A               	movlw	74
 10810  00123E  6E01               	movwf	EPWM1_LoadDutyValue@dutyValue,c
 10811  001240  ECCA  F00F         	call	_EPWM1_LoadDutyValue	;wreg free
 10812                           
 10813                           ;tmr0.c: 176: TMR2_LoadPeriodRegister(149);
 10814  001244  0E95               	movlw	149
 10815  001246  EC78  F011         	call	_TMR2_LoadPeriodRegister
 10816                           
 10817                           ;tmr0.c: 177: do { LATBbits.LATB7 = 1; } while(0);
 10818  00124A  8E8A               	bsf	3978,7,c	;volatile
 10819                           
 10820                           ;tmr0.c: 179: }
 10821                           
 10822                           ;tmr0.c: 178: break;
 10823  00124C  0012               	return	
 10824  00124E                     i2l379:
 10825  00124E  503E               	movf	_clk2Hz,w,c	;volatile
 10826                           
 10827                           ; Switch size 1, requested type "space"
 10828                           ; Number of cases is 2, Range of values is 0 to 1
 10829                           ; switch strategies available:
 10830                           ; Name         Instructions Cycles
 10831                           ; simple_byte            7     4 (average)
 10832                           ;	Chosen strategy is simple_byte
 10833  001250  0A00               	xorlw	0	; case 0
 10834  001252  B4D8               	btfsc	status,2,c
 10835  001254  D7E6               	goto	i2l380
 10836  001256  0A01               	xorlw	1	; case 1
 10837  001258  A4D8               	btfss	status,2,c
 10838                           
 10839                           ;tmr0.c: 180: } else {
 10840  00125A  0012               	return	
 10841  00125C  D7ED               	goto	i2l384
 10842  00125E                     i2l378:
 10843                           
 10844                           ;tmr0.c: 181: alarme = 0;
 10845  00125E  0E00               	movlw	0
 10846  001260  0100               	movlb	0	; () banked
 10847  001262  6F75               	movwf	_alarme& (0+255),b	;volatile
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;tmr0.c: 182: TMR2_StopTimer();
 10851  001264  EC7E  F011         	call	_TMR2_StopTimer	;wreg free
 10852                           
 10853                           ;tmr0.c: 183: do { LATBbits.LATB7 = 0; } while(0);
 10854  001268  9E8A               	bcf	3978,7,c	;volatile
 10855  00126A  0012               	return	
 10856  00126C                     __end_of_TMR0_ISR:
 10857                           	opt stack 0
 10858                           tosu	equ	0xFFF
 10859                           tosh	equ	0xFFE
 10860                           tosl	equ	0xFFD
 10861                           pclatu	equ	0xFFB
 10862                           pclath	equ	0xFFA
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           intcon	equ	0xFF2
 10870                           intcon2	equ	0xFF1
 10871                           intcon3	equ	0xFF0
 10872                           indf0	equ	0xFEF
 10873                           postinc0	equ	0xFEE
 10874                           fsr0h	equ	0xFEA
 10875                           fsr0l	equ	0xFE9
 10876                           wreg	equ	0xFE8
 10877                           indf1	equ	0xFE7
 10878                           fsr1h	equ	0xFE2
 10879                           fsr1l	equ	0xFE1
 10880                           bsr	equ	0xFE0
 10881                           indf2	equ	0xFDF
 10882                           postinc2	equ	0xFDE
 10883                           postdec2	equ	0xFDD
 10884                           fsr2h	equ	0xFDA
 10885                           fsr2l	equ	0xFD9
 10886                           status	equ	0xFD8
 10887                           
 10888 ;; *************** function _TMR2_StopTimer *****************
 10889 ;; Defined at:
 10890 ;;		line 84 in file "mcc_generated_files/tmr2.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;		None
 10893 ;; Auto vars:     Size  Location     Type
 10894 ;;		None
 10895 ;; Return value:  Size  Location     Type
 10896 ;;                  1    wreg      void 
 10897 ;; Registers used:
 10898 ;;		None
 10899 ;; Tracked objects:
 10900 ;;		On entry : 0/0
 10901 ;;		On exit  : 0/0
 10902 ;;		Unchanged: 0/0
 10903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10904 ;;      Params:         0       0       0       0       0       0       0
 10905 ;;      Locals:         0       0       0       0       0       0       0
 10906 ;;      Temps:          0       0       0       0       0       0       0
 10907 ;;      Totals:         0       0       0       0       0       0       0
 10908 ;;Total ram usage:        0 bytes
 10909 ;; Hardware stack levels used:    1
 10910 ;; This function calls:
 10911 ;;		Nothing
 10912 ;; This function is called by:
 10913 ;;		_TMR0_ISR
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text61
 10918  0022FC                     __ptext61:
 10919                           	opt stack 0
 10920  0022FC                     _TMR2_StopTimer:
 10921                           	opt stack 17
 10922                           
 10923                           ;tmr2.c: 87: T2CONbits.TMR2ON = 0;
 10924                           
 10925                           ;incstack = 0
 10926  0022FC  94BA               	bcf	4026,2,c	;volatile
 10927  0022FE  0012               	return		;funcret
 10928  002300                     __end_of_TMR2_StopTimer:
 10929                           	opt stack 0
 10930                           tosu	equ	0xFFF
 10931                           tosh	equ	0xFFE
 10932                           tosl	equ	0xFFD
 10933                           pclatu	equ	0xFFB
 10934                           pclath	equ	0xFFA
 10935                           tblptru	equ	0xFF8
 10936                           tblptrh	equ	0xFF7
 10937                           tblptrl	equ	0xFF6
 10938                           tablat	equ	0xFF5
 10939                           prodh	equ	0xFF4
 10940                           prodl	equ	0xFF3
 10941                           intcon	equ	0xFF2
 10942                           intcon2	equ	0xFF1
 10943                           intcon3	equ	0xFF0
 10944                           indf0	equ	0xFEF
 10945                           postinc0	equ	0xFEE
 10946                           fsr0h	equ	0xFEA
 10947                           fsr0l	equ	0xFE9
 10948                           wreg	equ	0xFE8
 10949                           indf1	equ	0xFE7
 10950                           fsr1h	equ	0xFE2
 10951                           fsr1l	equ	0xFE1
 10952                           bsr	equ	0xFE0
 10953                           indf2	equ	0xFDF
 10954                           postinc2	equ	0xFDE
 10955                           postdec2	equ	0xFDD
 10956                           fsr2h	equ	0xFDA
 10957                           fsr2l	equ	0xFD9
 10958                           status	equ	0xFD8
 10959                           
 10960 ;; *************** function _TMR2_StartTimer *****************
 10961 ;; Defined at:
 10962 ;;		line 78 in file "mcc_generated_files/tmr2.c"
 10963 ;; Parameters:    Size  Location     Type
 10964 ;;		None
 10965 ;; Auto vars:     Size  Location     Type
 10966 ;;		None
 10967 ;; Return value:  Size  Location     Type
 10968 ;;                  1    wreg      void 
 10969 ;; Registers used:
 10970 ;;		None
 10971 ;; Tracked objects:
 10972 ;;		On entry : 0/0
 10973 ;;		On exit  : 0/0
 10974 ;;		Unchanged: 0/0
 10975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10976 ;;      Params:         0       0       0       0       0       0       0
 10977 ;;      Locals:         0       0       0       0       0       0       0
 10978 ;;      Temps:          0       0       0       0       0       0       0
 10979 ;;      Totals:         0       0       0       0       0       0       0
 10980 ;;Total ram usage:        0 bytes
 10981 ;; Hardware stack levels used:    1
 10982 ;; This function calls:
 10983 ;;		Nothing
 10984 ;; This function is called by:
 10985 ;;		_TMR0_ISR
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           	psect	text62
 10990  002300                     __ptext62:
 10991                           	opt stack 0
 10992  002300                     _TMR2_StartTimer:
 10993                           	opt stack 17
 10994                           
 10995                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
 10996                           
 10997                           ;incstack = 0
 10998  002300  84BA               	bsf	4026,2,c	;volatile
 10999  002302  0012               	return		;funcret
 11000  002304                     __end_of_TMR2_StartTimer:
 11001                           	opt stack 0
 11002                           tosu	equ	0xFFF
 11003                           tosh	equ	0xFFE
 11004                           tosl	equ	0xFFD
 11005                           pclatu	equ	0xFFB
 11006                           pclath	equ	0xFFA
 11007                           tblptru	equ	0xFF8
 11008                           tblptrh	equ	0xFF7
 11009                           tblptrl	equ	0xFF6
 11010                           tablat	equ	0xFF5
 11011                           prodh	equ	0xFF4
 11012                           prodl	equ	0xFF3
 11013                           intcon	equ	0xFF2
 11014                           intcon2	equ	0xFF1
 11015                           intcon3	equ	0xFF0
 11016                           indf0	equ	0xFEF
 11017                           postinc0	equ	0xFEE
 11018                           fsr0h	equ	0xFEA
 11019                           fsr0l	equ	0xFE9
 11020                           wreg	equ	0xFE8
 11021                           indf1	equ	0xFE7
 11022                           fsr1h	equ	0xFE2
 11023                           fsr1l	equ	0xFE1
 11024                           bsr	equ	0xFE0
 11025                           indf2	equ	0xFDF
 11026                           postinc2	equ	0xFDE
 11027                           postdec2	equ	0xFDD
 11028                           fsr2h	equ	0xFDA
 11029                           fsr2l	equ	0xFD9
 11030                           status	equ	0xFD8
 11031                           
 11032 ;; *************** function _TMR2_LoadPeriodRegister *****************
 11033 ;; Defined at:
 11034 ;;		line 105 in file "mcc_generated_files/tmr2.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;  periodVal       1    wreg     unsigned char 
 11037 ;; Auto vars:     Size  Location     Type
 11038 ;;  periodVal       1    0[COMRAM] unsigned char 
 11039 ;; Return value:  Size  Location     Type
 11040 ;;                  1    wreg      void 
 11041 ;; Registers used:
 11042 ;;		wreg
 11043 ;; Tracked objects:
 11044 ;;		On entry : 0/0
 11045 ;;		On exit  : 0/0
 11046 ;;		Unchanged: 0/0
 11047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11048 ;;      Params:         0       0       0       0       0       0       0
 11049 ;;      Locals:         1       0       0       0       0       0       0
 11050 ;;      Temps:          0       0       0       0       0       0       0
 11051 ;;      Totals:         1       0       0       0       0       0       0
 11052 ;;Total ram usage:        1 bytes
 11053 ;; Hardware stack levels used:    1
 11054 ;; This function calls:
 11055 ;;		Nothing
 11056 ;; This function is called by:
 11057 ;;		_TMR0_ISR
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           	psect	text63
 11062  0022F0                     __ptext63:
 11063                           	opt stack 0
 11064  0022F0                     _TMR2_LoadPeriodRegister:
 11065                           	opt stack 17
 11066                           
 11067                           ;incstack = 0
 11068                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 11069  0022F0  6E01               	movwf	TMR2_LoadPeriodRegister@periodVal,c
 11070                           
 11071                           ;tmr2.c: 107: PR2 = periodVal;
 11072  0022F2  C001  FFBB         	movff	TMR2_LoadPeriodRegister@periodVal,4027	;volatile
 11073  0022F6  0012               	return		;funcret
 11074  0022F8                     __end_of_TMR2_LoadPeriodRegister:
 11075                           	opt stack 0
 11076                           tosu	equ	0xFFF
 11077                           tosh	equ	0xFFE
 11078                           tosl	equ	0xFFD
 11079                           pclatu	equ	0xFFB
 11080                           pclath	equ	0xFFA
 11081                           tblptru	equ	0xFF8
 11082                           tblptrh	equ	0xFF7
 11083                           tblptrl	equ	0xFF6
 11084                           tablat	equ	0xFF5
 11085                           prodh	equ	0xFF4
 11086                           prodl	equ	0xFF3
 11087                           intcon	equ	0xFF2
 11088                           intcon2	equ	0xFF1
 11089                           intcon3	equ	0xFF0
 11090                           indf0	equ	0xFEF
 11091                           postinc0	equ	0xFEE
 11092                           fsr0h	equ	0xFEA
 11093                           fsr0l	equ	0xFE9
 11094                           wreg	equ	0xFE8
 11095                           indf1	equ	0xFE7
 11096                           fsr1h	equ	0xFE2
 11097                           fsr1l	equ	0xFE1
 11098                           bsr	equ	0xFE0
 11099                           indf2	equ	0xFDF
 11100                           postinc2	equ	0xFDE
 11101                           postdec2	equ	0xFDD
 11102                           fsr2h	equ	0xFDA
 11103                           fsr2l	equ	0xFD9
 11104                           status	equ	0xFD8
 11105                           
 11106 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11107 ;; Defined at:
 11108 ;;		line 192 in file "mcc_generated_files/tmr0.c"
 11109 ;; Parameters:    Size  Location     Type
 11110 ;;		None
 11111 ;; Auto vars:     Size  Location     Type
 11112 ;;		None
 11113 ;; Return value:  Size  Location     Type
 11114 ;;                  1    wreg      void 
 11115 ;; Registers used:
 11116 ;;		None
 11117 ;; Tracked objects:
 11118 ;;		On entry : 0/0
 11119 ;;		On exit  : 0/0
 11120 ;;		Unchanged: 0/0
 11121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11122 ;;      Params:         0       0       0       0       0       0       0
 11123 ;;      Locals:         0       0       0       0       0       0       0
 11124 ;;      Temps:          0       0       0       0       0       0       0
 11125 ;;      Totals:         0       0       0       0       0       0       0
 11126 ;;Total ram usage:        0 bytes
 11127 ;; Hardware stack levels used:    1
 11128 ;; This function calls:
 11129 ;;		Nothing
 11130 ;; This function is called by:
 11131 ;;		_TMR0_Initialize
 11132 ;;		_TMR0_ISR
 11133 ;; This function uses a non-reentrant model
 11134 ;;
 11135                           
 11136                           	psect	text64
 11137  00230C                     __ptext64:
 11138                           	opt stack 0
 11139  00230C                     _TMR0_DefaultInterruptHandler:
 11140                           	opt stack 17
 11141                           
 11142                           ;incstack = 0
 11143  00230C  0012               	return		;funcret
 11144  00230E                     __end_of_TMR0_DefaultInterruptHandler:
 11145                           	opt stack 0
 11146                           tosu	equ	0xFFF
 11147                           tosh	equ	0xFFE
 11148                           tosl	equ	0xFFD
 11149                           pclatu	equ	0xFFB
 11150                           pclath	equ	0xFFA
 11151                           tblptru	equ	0xFF8
 11152                           tblptrh	equ	0xFF7
 11153                           tblptrl	equ	0xFF6
 11154                           tablat	equ	0xFF5
 11155                           prodh	equ	0xFF4
 11156                           prodl	equ	0xFF3
 11157                           intcon	equ	0xFF2
 11158                           intcon2	equ	0xFF1
 11159                           intcon3	equ	0xFF0
 11160                           indf0	equ	0xFEF
 11161                           postinc0	equ	0xFEE
 11162                           fsr0h	equ	0xFEA
 11163                           fsr0l	equ	0xFE9
 11164                           wreg	equ	0xFE8
 11165                           indf1	equ	0xFE7
 11166                           fsr1h	equ	0xFE2
 11167                           fsr1l	equ	0xFE1
 11168                           bsr	equ	0xFE0
 11169                           indf2	equ	0xFDF
 11170                           postinc2	equ	0xFDE
 11171                           postdec2	equ	0xFDD
 11172                           fsr2h	equ	0xFDA
 11173                           fsr2l	equ	0xFD9
 11174                           status	equ	0xFD8
 11175                           
 11176 ;; *************** function _EPWM1_LoadDutyValue *****************
 11177 ;; Defined at:
 11178 ;;		line 90 in file "mcc_generated_files/epwm1.c"
 11179 ;; Parameters:    Size  Location     Type
 11180 ;;  dutyValue       2    0[COMRAM] unsigned int 
 11181 ;; Auto vars:     Size  Location     Type
 11182 ;;		None
 11183 ;; Return value:  Size  Location     Type
 11184 ;;                  1    wreg      void 
 11185 ;; Registers used:
 11186 ;;		wreg, status,2, status,0
 11187 ;; Tracked objects:
 11188 ;;		On entry : 0/0
 11189 ;;		On exit  : 0/0
 11190 ;;		Unchanged: 0/0
 11191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11192 ;;      Params:         2       0       0       0       0       0       0
 11193 ;;      Locals:         0       0       0       0       0       0       0
 11194 ;;      Temps:          2       0       0       0       0       0       0
 11195 ;;      Totals:         4       0       0       0       0       0       0
 11196 ;;Total ram usage:        4 bytes
 11197 ;; Hardware stack levels used:    1
 11198 ;; This function calls:
 11199 ;;		Nothing
 11200 ;; This function is called by:
 11201 ;;		_TMR0_ISR
 11202 ;; This function uses a non-reentrant model
 11203 ;;
 11204                           
 11205                           	psect	text65
 11206  001F94                     __ptext65:
 11207                           	opt stack 0
 11208  001F94                     _EPWM1_LoadDutyValue:
 11209                           	opt stack 17
 11210                           
 11211                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
 11212                           
 11213                           ;incstack = 0
 11214  001F94  C001  F003         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 11215  001F98  C002  F004         	movff	EPWM1_LoadDutyValue@dutyValue+1,??_EPWM1_LoadDutyValue+1
 11216  001F9C  90D8               	bcf	status,0,c
 11217  001F9E  3204               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
 11218  001FA0  3203               	rrcf	??_EPWM1_LoadDutyValue,f,c
 11219  001FA2  90D8               	bcf	status,0,c
 11220  001FA4  3204               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
 11221  001FA6  3203               	rrcf	??_EPWM1_LoadDutyValue,f,c
 11222  001FA8  5003               	movf	??_EPWM1_LoadDutyValue,w,c
 11223  001FAA  6EBE               	movwf	4030,c	;volatile
 11224                           
 11225                           ;epwm1.c: 96: CCP1CON = ((uint8_t)(CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4));
 11226  001FAC  C001  F003         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 11227  001FB0  0E03               	movlw	3
 11228  001FB2  1603               	andwf	??_EPWM1_LoadDutyValue,f,c
 11229  001FB4  3A03               	swapf	??_EPWM1_LoadDutyValue,f,c
 11230  001FB6  0EF0               	movlw	240
 11231  001FB8  1603               	andwf	??_EPWM1_LoadDutyValue,f,c
 11232  001FBA  50BD               	movf	4029,w,c	;volatile
 11233  001FBC  0BCF               	andlw	207
 11234  001FBE  1003               	iorwf	??_EPWM1_LoadDutyValue,w,c
 11235  001FC0  6EBD               	movwf	4029,c	;volatile
 11236  001FC2  0012               	return		;funcret
 11237  001FC4                     __end_of_EPWM1_LoadDutyValue:
 11238                           	opt stack 0
 11239                           tosu	equ	0xFFF
 11240                           tosh	equ	0xFFE
 11241                           tosl	equ	0xFFD
 11242                           pclatu	equ	0xFFB
 11243                           pclath	equ	0xFFA
 11244                           tblptru	equ	0xFF8
 11245                           tblptrh	equ	0xFF7
 11246                           tblptrl	equ	0xFF6
 11247                           tablat	equ	0xFF5
 11248                           prodh	equ	0xFF4
 11249                           prodl	equ	0xFF3
 11250                           intcon	equ	0xFF2
 11251                           intcon2	equ	0xFF1
 11252                           intcon3	equ	0xFF0
 11253                           indf0	equ	0xFEF
 11254                           postinc0	equ	0xFEE
 11255                           fsr0h	equ	0xFEA
 11256                           fsr0l	equ	0xFE9
 11257                           wreg	equ	0xFE8
 11258                           indf1	equ	0xFE7
 11259                           fsr1h	equ	0xFE2
 11260                           fsr1l	equ	0xFE1
 11261                           bsr	equ	0xFE0
 11262                           indf2	equ	0xFDF
 11263                           postinc2	equ	0xFDE
 11264                           postdec2	equ	0xFDD
 11265                           fsr2h	equ	0xFDA
 11266                           fsr2l	equ	0xFD9
 11267                           status	equ	0xFD8
 11268                           
 11269 ;; *************** function _ADC_StartConversion *****************
 11270 ;; Defined at:
 11271 ;;		line 89 in file "mcc_generated_files/adc.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;		None
 11274 ;; Auto vars:     Size  Location     Type
 11275 ;;		None
 11276 ;; Return value:  Size  Location     Type
 11277 ;;                  1    wreg      void 
 11278 ;; Registers used:
 11279 ;;		None
 11280 ;; Tracked objects:
 11281 ;;		On entry : 0/0
 11282 ;;		On exit  : 0/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11285 ;;      Params:         0       0       0       0       0       0       0
 11286 ;;      Locals:         0       0       0       0       0       0       0
 11287 ;;      Temps:          0       0       0       0       0       0       0
 11288 ;;      Totals:         0       0       0       0       0       0       0
 11289 ;;Total ram usage:        0 bytes
 11290 ;; Hardware stack levels used:    1
 11291 ;; This function calls:
 11292 ;;		Nothing
 11293 ;; This function is called by:
 11294 ;;		_TMR0_ISR
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           	psect	text66
 11299  002304                     __ptext66:
 11300                           	opt stack 0
 11301  002304                     _ADC_StartConversion:
 11302                           	opt stack 17
 11303                           
 11304                           ;adc.c: 91: ADCON0bits.GO_nDONE = 1;
 11305                           
 11306                           ;incstack = 0
 11307  002304  82C2               	bsf	4034,1,c	;volatile
 11308  002306  0012               	return		;funcret
 11309  002308                     __end_of_ADC_StartConversion:
 11310                           	opt stack 0
 11311                           tosu	equ	0xFFF
 11312                           tosh	equ	0xFFE
 11313                           tosl	equ	0xFFD
 11314                           pclatu	equ	0xFFB
 11315                           pclath	equ	0xFFA
 11316                           tblptru	equ	0xFF8
 11317                           tblptrh	equ	0xFF7
 11318                           tblptrl	equ	0xFF6
 11319                           tablat	equ	0xFF5
 11320                           prodh	equ	0xFF4
 11321                           prodl	equ	0xFF3
 11322                           intcon	equ	0xFF2
 11323                           intcon2	equ	0xFF1
 11324                           intcon3	equ	0xFF0
 11325                           indf0	equ	0xFEF
 11326                           postinc0	equ	0xFEE
 11327                           fsr0h	equ	0xFEA
 11328                           fsr0l	equ	0xFE9
 11329                           wreg	equ	0xFE8
 11330                           indf1	equ	0xFE7
 11331                           fsr1h	equ	0xFE2
 11332                           fsr1l	equ	0xFE1
 11333                           bsr	equ	0xFE0
 11334                           indf2	equ	0xFDF
 11335                           postinc2	equ	0xFDE
 11336                           postdec2	equ	0xFDD
 11337                           fsr2h	equ	0xFDA
 11338                           fsr2l	equ	0xFD9
 11339                           status	equ	0xFD8
 11340                           
 11341 ;; *************** function _INT2_ISR *****************
 11342 ;; Defined at:
 11343 ;;		line 99 in file "mcc_generated_files/ext_int.c"
 11344 ;; Parameters:    Size  Location     Type
 11345 ;;		None
 11346 ;; Auto vars:     Size  Location     Type
 11347 ;;		None
 11348 ;; Return value:  Size  Location     Type
 11349 ;;                  1    wreg      void 
 11350 ;; Registers used:
 11351 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11352 ;; Tracked objects:
 11353 ;;		On entry : 0/0
 11354 ;;		On exit  : 0/0
 11355 ;;		Unchanged: 0/0
 11356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11357 ;;      Params:         0       0       0       0       0       0       0
 11358 ;;      Locals:         0       0       0       0       0       0       0
 11359 ;;      Temps:          0       0       0       0       0       0       0
 11360 ;;      Totals:         0       0       0       0       0       0       0
 11361 ;;Total ram usage:        0 bytes
 11362 ;; Hardware stack levels used:    1
 11363 ;; Hardware stack levels required when called:    2
 11364 ;; This function calls:
 11365 ;;		_INT2_CallBack
 11366 ;; This function is called by:
 11367 ;;		_INTERRUPT_InterruptManagerHigh
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           	psect	text67
 11372  001FF2                     __ptext67:
 11373                           	opt stack 0
 11374  001FF2                     _INT2_ISR:
 11375                           	opt stack 16
 11376                           
 11377                           ;ext_int.c: 102: if (PORTBbits.RB3 == 1) {
 11378                           
 11379                           ;incstack = 0
 11380  001FF2  A681               	btfss	3969,3,c	;volatile
 11381  001FF4  D002               	goto	i2l231
 11382                           
 11383                           ;ext_int.c: 103: TeclaTMP = '3';
 11384  001FF6  0E33               	movlw	51
 11385  001FF8  6E41               	movwf	_TeclaTMP,c	;volatile
 11386  001FFA                     i2l231:
 11387                           
 11388                           ;ext_int.c: 104: }
 11389                           ;ext_int.c: 105: if (PORTBbits.RB4 == 1) {
 11390  001FFA  A881               	btfss	3969,4,c	;volatile
 11391  001FFC  D002               	goto	i2l232
 11392                           
 11393                           ;ext_int.c: 106: TeclaTMP = '6';
 11394  001FFE  0E36               	movlw	54
 11395  002000  6E41               	movwf	_TeclaTMP,c	;volatile
 11396  002002                     i2l232:
 11397                           
 11398                           ;ext_int.c: 107: }
 11399                           ;ext_int.c: 108: if (PORTBbits.RB5 == 1) {
 11400  002002  AA81               	btfss	3969,5,c	;volatile
 11401  002004  D002               	goto	i2l233
 11402                           
 11403                           ;ext_int.c: 109: TeclaTMP = '9';
 11404  002006  0E39               	movlw	57
 11405  002008  6E41               	movwf	_TeclaTMP,c	;volatile
 11406  00200A                     i2l233:
 11407                           
 11408                           ;ext_int.c: 110: }
 11409                           ;ext_int.c: 111: if (PORTBbits.RB6 == 1) {
 11410  00200A  AC81               	btfss	3969,6,c	;volatile
 11411  00200C  D002               	goto	i2l234
 11412                           
 11413                           ;ext_int.c: 112: TeclaTMP = '#';
 11414  00200E  0E23               	movlw	35
 11415  002010  6E41               	movwf	_TeclaTMP,c	;volatile
 11416  002012                     i2l234:
 11417                           
 11418                           ;ext_int.c: 113: }
 11419                           ;ext_int.c: 114: WrEnFl = 1;
 11420  002012  0E01               	movlw	1
 11421  002014  6E39               	movwf	_WrEnFl,c	;volatile
 11422                           
 11423                           ;ext_int.c: 118: (INTCON3bits.INT2IF = 0);
 11424  002016  92F0               	bcf	intcon3,1,c	;volatile
 11425                           
 11426                           ;ext_int.c: 121: INT2_CallBack();
 11427  002018  ECAB  F010         	call	_INT2_CallBack	;wreg free
 11428  00201C  0012               	return		;funcret
 11429  00201E                     __end_of_INT2_ISR:
 11430                           	opt stack 0
 11431                           tosu	equ	0xFFF
 11432                           tosh	equ	0xFFE
 11433                           tosl	equ	0xFFD
 11434                           pclatu	equ	0xFFB
 11435                           pclath	equ	0xFFA
 11436                           tblptru	equ	0xFF8
 11437                           tblptrh	equ	0xFF7
 11438                           tblptrl	equ	0xFF6
 11439                           tablat	equ	0xFF5
 11440                           prodh	equ	0xFF4
 11441                           prodl	equ	0xFF3
 11442                           intcon	equ	0xFF2
 11443                           intcon2	equ	0xFF1
 11444                           intcon3	equ	0xFF0
 11445                           indf0	equ	0xFEF
 11446                           postinc0	equ	0xFEE
 11447                           fsr0h	equ	0xFEA
 11448                           fsr0l	equ	0xFE9
 11449                           wreg	equ	0xFE8
 11450                           indf1	equ	0xFE7
 11451                           fsr1h	equ	0xFE2
 11452                           fsr1l	equ	0xFE1
 11453                           bsr	equ	0xFE0
 11454                           indf2	equ	0xFDF
 11455                           postinc2	equ	0xFDE
 11456                           postdec2	equ	0xFDD
 11457                           fsr2h	equ	0xFDA
 11458                           fsr2l	equ	0xFD9
 11459                           status	equ	0xFD8
 11460                           
 11461 ;; *************** function _INT2_CallBack *****************
 11462 ;; Defined at:
 11463 ;;		line 127 in file "mcc_generated_files/ext_int.c"
 11464 ;; Parameters:    Size  Location     Type
 11465 ;;		None
 11466 ;; Auto vars:     Size  Location     Type
 11467 ;;		None
 11468 ;; Return value:  Size  Location     Type
 11469 ;;                  1    wreg      void 
 11470 ;; Registers used:
 11471 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11472 ;; Tracked objects:
 11473 ;;		On entry : 0/0
 11474 ;;		On exit  : 0/0
 11475 ;;		Unchanged: 0/0
 11476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11477 ;;      Params:         0       0       0       0       0       0       0
 11478 ;;      Locals:         0       0       0       0       0       0       0
 11479 ;;      Temps:          0       0       0       0       0       0       0
 11480 ;;      Totals:         0       0       0       0       0       0       0
 11481 ;;Total ram usage:        0 bytes
 11482 ;; Hardware stack levels used:    1
 11483 ;; Hardware stack levels required when called:    1
 11484 ;; This function calls:
 11485 ;;		Absolute function
 11486 ;;		_INT2_DefaultInterruptHandler
 11487 ;; This function is called by:
 11488 ;;		_INT2_ISR
 11489 ;; This function uses a non-reentrant model
 11490 ;;
 11491                           
 11492                           	psect	text68
 11493  002156                     __ptext68:
 11494                           	opt stack 0
 11495  002156                     _INT2_CallBack:
 11496                           	opt stack 16
 11497                           
 11498                           ;ext_int.c: 129: if (INT2_InterruptHandler) {
 11499                           
 11500                           ;incstack = 0
 11501  002156  0100               	movlb	0	; () banked
 11502  002158  51E9               	movf	_INT2_InterruptHandler& (0+255),w,b
 11503  00215A  11EA               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 11504  00215C  B4D8               	btfsc	status,2,c
 11505  00215E  0012               	return	
 11506                           
 11507                           ; BSR set to: 0
 11508                           ;ext_int.c: 130: INT2_InterruptHandler();
 11509  002160  D801               	call	i2u384_48
 11510  002162  0012               	return	
 11511  002164                     i2u384_48:
 11512  002164  0005               	push	
 11513  002166  6EFA               	movwf	pclath,c
 11514  002168  51E9               	movf	_INT2_InterruptHandler& (0+255),w,b
 11515  00216A  6EFD               	movwf	tosl,c
 11516  00216C  51EA               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 11517  00216E  6EFE               	movwf	tosh,c
 11518  002170  50F8               	movf	tblptru,w,c
 11519  002172  6EFF               	movwf	tosu,c
 11520  002174  50FA               	movf	pclath,w,c
 11521  002176  0012               	return		;indir
 11522  002178                     __end_of_INT2_CallBack:
 11523                           	opt stack 0
 11524                           tosu	equ	0xFFF
 11525                           tosh	equ	0xFFE
 11526                           tosl	equ	0xFFD
 11527                           pclatu	equ	0xFFB
 11528                           pclath	equ	0xFFA
 11529                           tblptru	equ	0xFF8
 11530                           tblptrh	equ	0xFF7
 11531                           tblptrl	equ	0xFF6
 11532                           tablat	equ	0xFF5
 11533                           prodh	equ	0xFF4
 11534                           prodl	equ	0xFF3
 11535                           intcon	equ	0xFF2
 11536                           intcon2	equ	0xFF1
 11537                           intcon3	equ	0xFF0
 11538                           indf0	equ	0xFEF
 11539                           postinc0	equ	0xFEE
 11540                           fsr0h	equ	0xFEA
 11541                           fsr0l	equ	0xFE9
 11542                           wreg	equ	0xFE8
 11543                           indf1	equ	0xFE7
 11544                           fsr1h	equ	0xFE2
 11545                           fsr1l	equ	0xFE1
 11546                           bsr	equ	0xFE0
 11547                           indf2	equ	0xFDF
 11548                           postinc2	equ	0xFDE
 11549                           postdec2	equ	0xFDD
 11550                           fsr2h	equ	0xFDA
 11551                           fsr2l	equ	0xFD9
 11552                           status	equ	0xFD8
 11553                           
 11554 ;; *************** function _INT2_DefaultInterruptHandler *****************
 11555 ;; Defined at:
 11556 ;;		line 144 in file "mcc_generated_files/ext_int.c"
 11557 ;; Parameters:    Size  Location     Type
 11558 ;;		None
 11559 ;; Auto vars:     Size  Location     Type
 11560 ;;		None
 11561 ;; Return value:  Size  Location     Type
 11562 ;;                  1    wreg      void 
 11563 ;; Registers used:
 11564 ;;		None
 11565 ;; Tracked objects:
 11566 ;;		On entry : 0/0
 11567 ;;		On exit  : 0/0
 11568 ;;		Unchanged: 0/0
 11569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11570 ;;      Params:         0       0       0       0       0       0       0
 11571 ;;      Locals:         0       0       0       0       0       0       0
 11572 ;;      Temps:          0       0       0       0       0       0       0
 11573 ;;      Totals:         0       0       0       0       0       0       0
 11574 ;;Total ram usage:        0 bytes
 11575 ;; Hardware stack levels used:    1
 11576 ;; This function calls:
 11577 ;;		Nothing
 11578 ;; This function is called by:
 11579 ;;		_EXT_INT_Initialize
 11580 ;;		_INT2_CallBack
 11581 ;; This function uses a non-reentrant model
 11582 ;;
 11583                           
 11584                           	psect	text69
 11585  00230E                     __ptext69:
 11586                           	opt stack 0
 11587  00230E                     _INT2_DefaultInterruptHandler:
 11588                           	opt stack 16
 11589                           
 11590                           ;incstack = 0
 11591  00230E  0012               	return		;funcret
 11592  002310                     __end_of_INT2_DefaultInterruptHandler:
 11593                           	opt stack 0
 11594                           tosu	equ	0xFFF
 11595                           tosh	equ	0xFFE
 11596                           tosl	equ	0xFFD
 11597                           pclatu	equ	0xFFB
 11598                           pclath	equ	0xFFA
 11599                           tblptru	equ	0xFF8
 11600                           tblptrh	equ	0xFF7
 11601                           tblptrl	equ	0xFF6
 11602                           tablat	equ	0xFF5
 11603                           prodh	equ	0xFF4
 11604                           prodl	equ	0xFF3
 11605                           intcon	equ	0xFF2
 11606                           intcon2	equ	0xFF1
 11607                           intcon3	equ	0xFF0
 11608                           indf0	equ	0xFEF
 11609                           postinc0	equ	0xFEE
 11610                           fsr0h	equ	0xFEA
 11611                           fsr0l	equ	0xFE9
 11612                           wreg	equ	0xFE8
 11613                           indf1	equ	0xFE7
 11614                           fsr1h	equ	0xFE2
 11615                           fsr1l	equ	0xFE1
 11616                           bsr	equ	0xFE0
 11617                           indf2	equ	0xFDF
 11618                           postinc2	equ	0xFDE
 11619                           postdec2	equ	0xFDD
 11620                           fsr2h	equ	0xFDA
 11621                           fsr2l	equ	0xFD9
 11622                           status	equ	0xFD8
 11623                           
 11624 ;; *************** function _INT1_ISR *****************
 11625 ;; Defined at:
 11626 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;		None
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;		None
 11631 ;; Return value:  Size  Location     Type
 11632 ;;                  1    wreg      void 
 11633 ;; Registers used:
 11634 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11640 ;;      Params:         0       0       0       0       0       0       0
 11641 ;;      Locals:         0       0       0       0       0       0       0
 11642 ;;      Temps:          0       0       0       0       0       0       0
 11643 ;;      Totals:         0       0       0       0       0       0       0
 11644 ;;Total ram usage:        0 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    2
 11647 ;; This function calls:
 11648 ;;		_INT1_CallBack
 11649 ;; This function is called by:
 11650 ;;		_INTERRUPT_InterruptManagerHigh
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654                           	psect	text70
 11655  00201E                     __ptext70:
 11656                           	opt stack 0
 11657  00201E                     _INT1_ISR:
 11658                           	opt stack 16
 11659                           
 11660                           ;ext_int.c: 49: if (PORTBbits.RB3 == 1) {
 11661                           
 11662                           ;incstack = 0
 11663  00201E  A681               	btfss	3969,3,c	;volatile
 11664  002020  D002               	goto	i2l214
 11665                           
 11666                           ;ext_int.c: 50: TeclaTMP = '2';
 11667  002022  0E32               	movlw	50
 11668  002024  6E41               	movwf	_TeclaTMP,c	;volatile
 11669  002026                     i2l214:
 11670                           
 11671                           ;ext_int.c: 51: }
 11672                           ;ext_int.c: 52: if (PORTBbits.RB4 == 1) {
 11673  002026  A881               	btfss	3969,4,c	;volatile
 11674  002028  D002               	goto	i2l215
 11675                           
 11676                           ;ext_int.c: 53: TeclaTMP = '5';
 11677  00202A  0E35               	movlw	53
 11678  00202C  6E41               	movwf	_TeclaTMP,c	;volatile
 11679  00202E                     i2l215:
 11680                           
 11681                           ;ext_int.c: 54: }
 11682                           ;ext_int.c: 55: if (PORTBbits.RB5 == 1) {
 11683  00202E  AA81               	btfss	3969,5,c	;volatile
 11684  002030  D002               	goto	i2l216
 11685                           
 11686                           ;ext_int.c: 56: TeclaTMP = '8';
 11687  002032  0E38               	movlw	56
 11688  002034  6E41               	movwf	_TeclaTMP,c	;volatile
 11689  002036                     i2l216:
 11690                           
 11691                           ;ext_int.c: 57: }
 11692                           ;ext_int.c: 58: if (PORTBbits.RB6 == 1) {
 11693  002036  AC81               	btfss	3969,6,c	;volatile
 11694  002038  D002               	goto	i2l217
 11695                           
 11696                           ;ext_int.c: 59: TeclaTMP = '0';
 11697  00203A  0E30               	movlw	48
 11698  00203C  6E41               	movwf	_TeclaTMP,c	;volatile
 11699  00203E                     i2l217:
 11700                           
 11701                           ;ext_int.c: 60: }
 11702                           ;ext_int.c: 61: WrEnFl = 1;
 11703  00203E  0E01               	movlw	1
 11704  002040  6E39               	movwf	_WrEnFl,c	;volatile
 11705                           
 11706                           ;ext_int.c: 65: (INTCON3bits.INT1IF = 0);
 11707  002042  90F0               	bcf	intcon3,0,c	;volatile
 11708                           
 11709                           ;ext_int.c: 68: INT1_CallBack();
 11710  002044  ECBC  F010         	call	_INT1_CallBack	;wreg free
 11711  002048  0012               	return		;funcret
 11712  00204A                     __end_of_INT1_ISR:
 11713                           	opt stack 0
 11714                           tosu	equ	0xFFF
 11715                           tosh	equ	0xFFE
 11716                           tosl	equ	0xFFD
 11717                           pclatu	equ	0xFFB
 11718                           pclath	equ	0xFFA
 11719                           tblptru	equ	0xFF8
 11720                           tblptrh	equ	0xFF7
 11721                           tblptrl	equ	0xFF6
 11722                           tablat	equ	0xFF5
 11723                           prodh	equ	0xFF4
 11724                           prodl	equ	0xFF3
 11725                           intcon	equ	0xFF2
 11726                           intcon2	equ	0xFF1
 11727                           intcon3	equ	0xFF0
 11728                           indf0	equ	0xFEF
 11729                           postinc0	equ	0xFEE
 11730                           fsr0h	equ	0xFEA
 11731                           fsr0l	equ	0xFE9
 11732                           wreg	equ	0xFE8
 11733                           indf1	equ	0xFE7
 11734                           fsr1h	equ	0xFE2
 11735                           fsr1l	equ	0xFE1
 11736                           bsr	equ	0xFE0
 11737                           indf2	equ	0xFDF
 11738                           postinc2	equ	0xFDE
 11739                           postdec2	equ	0xFDD
 11740                           fsr2h	equ	0xFDA
 11741                           fsr2l	equ	0xFD9
 11742                           status	equ	0xFD8
 11743                           
 11744 ;; *************** function _INT1_CallBack *****************
 11745 ;; Defined at:
 11746 ;;		line 74 in file "mcc_generated_files/ext_int.c"
 11747 ;; Parameters:    Size  Location     Type
 11748 ;;		None
 11749 ;; Auto vars:     Size  Location     Type
 11750 ;;		None
 11751 ;; Return value:  Size  Location     Type
 11752 ;;                  1    wreg      void 
 11753 ;; Registers used:
 11754 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11760 ;;      Params:         0       0       0       0       0       0       0
 11761 ;;      Locals:         0       0       0       0       0       0       0
 11762 ;;      Temps:          0       0       0       0       0       0       0
 11763 ;;      Totals:         0       0       0       0       0       0       0
 11764 ;;Total ram usage:        0 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; Hardware stack levels required when called:    1
 11767 ;; This function calls:
 11768 ;;		Absolute function
 11769 ;;		_INT1_DefaultInterruptHandler
 11770 ;; This function is called by:
 11771 ;;		_INT1_ISR
 11772 ;; This function uses a non-reentrant model
 11773 ;;
 11774                           
 11775                           	psect	text71
 11776  002178                     __ptext71:
 11777                           	opt stack 0
 11778  002178                     _INT1_CallBack:
 11779                           	opt stack 16
 11780                           
 11781                           ;ext_int.c: 76: if (INT1_InterruptHandler) {
 11782                           
 11783                           ;incstack = 0
 11784  002178  0100               	movlb	0	; () banked
 11785  00217A  51EB               	movf	_INT1_InterruptHandler& (0+255),w,b
 11786  00217C  11EC               	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
 11787  00217E  B4D8               	btfsc	status,2,c
 11788  002180  0012               	return	
 11789                           
 11790                           ; BSR set to: 0
 11791                           ;ext_int.c: 77: INT1_InterruptHandler();
 11792  002182  D801               	call	i2u382_48
 11793  002184  0012               	return	
 11794  002186                     i2u382_48:
 11795  002186  0005               	push	
 11796  002188  6EFA               	movwf	pclath,c
 11797  00218A  51EB               	movf	_INT1_InterruptHandler& (0+255),w,b
 11798  00218C  6EFD               	movwf	tosl,c
 11799  00218E  51EC               	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
 11800  002190  6EFE               	movwf	tosh,c
 11801  002192  50F8               	movf	tblptru,w,c
 11802  002194  6EFF               	movwf	tosu,c
 11803  002196  50FA               	movf	pclath,w,c
 11804  002198  0012               	return		;indir
 11805  00219A                     __end_of_INT1_CallBack:
 11806                           	opt stack 0
 11807                           tosu	equ	0xFFF
 11808                           tosh	equ	0xFFE
 11809                           tosl	equ	0xFFD
 11810                           pclatu	equ	0xFFB
 11811                           pclath	equ	0xFFA
 11812                           tblptru	equ	0xFF8
 11813                           tblptrh	equ	0xFF7
 11814                           tblptrl	equ	0xFF6
 11815                           tablat	equ	0xFF5
 11816                           prodh	equ	0xFF4
 11817                           prodl	equ	0xFF3
 11818                           intcon	equ	0xFF2
 11819                           intcon2	equ	0xFF1
 11820                           intcon3	equ	0xFF0
 11821                           indf0	equ	0xFEF
 11822                           postinc0	equ	0xFEE
 11823                           fsr0h	equ	0xFEA
 11824                           fsr0l	equ	0xFE9
 11825                           wreg	equ	0xFE8
 11826                           indf1	equ	0xFE7
 11827                           fsr1h	equ	0xFE2
 11828                           fsr1l	equ	0xFE1
 11829                           bsr	equ	0xFE0
 11830                           indf2	equ	0xFDF
 11831                           postinc2	equ	0xFDE
 11832                           postdec2	equ	0xFDD
 11833                           fsr2h	equ	0xFDA
 11834                           fsr2l	equ	0xFD9
 11835                           status	equ	0xFD8
 11836                           
 11837 ;; *************** function _INT1_DefaultInterruptHandler *****************
 11838 ;; Defined at:
 11839 ;;		line 91 in file "mcc_generated_files/ext_int.c"
 11840 ;; Parameters:    Size  Location     Type
 11841 ;;		None
 11842 ;; Auto vars:     Size  Location     Type
 11843 ;;		None
 11844 ;; Return value:  Size  Location     Type
 11845 ;;                  1    wreg      void 
 11846 ;; Registers used:
 11847 ;;		None
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11853 ;;      Params:         0       0       0       0       0       0       0
 11854 ;;      Locals:         0       0       0       0       0       0       0
 11855 ;;      Temps:          0       0       0       0       0       0       0
 11856 ;;      Totals:         0       0       0       0       0       0       0
 11857 ;;Total ram usage:        0 bytes
 11858 ;; Hardware stack levels used:    1
 11859 ;; This function calls:
 11860 ;;		Nothing
 11861 ;; This function is called by:
 11862 ;;		_EXT_INT_Initialize
 11863 ;;		_INT1_CallBack
 11864 ;; This function uses a non-reentrant model
 11865 ;;
 11866                           
 11867                           	psect	text72
 11868  002310                     __ptext72:
 11869                           	opt stack 0
 11870  002310                     _INT1_DefaultInterruptHandler:
 11871                           	opt stack 16
 11872                           
 11873                           ;incstack = 0
 11874  002310  0012               	return		;funcret
 11875  002312                     __end_of_INT1_DefaultInterruptHandler:
 11876                           	opt stack 0
 11877                           tosu	equ	0xFFF
 11878                           tosh	equ	0xFFE
 11879                           tosl	equ	0xFFD
 11880                           pclatu	equ	0xFFB
 11881                           pclath	equ	0xFFA
 11882                           tblptru	equ	0xFF8
 11883                           tblptrh	equ	0xFF7
 11884                           tblptrl	equ	0xFF6
 11885                           tablat	equ	0xFF5
 11886                           prodh	equ	0xFF4
 11887                           prodl	equ	0xFF3
 11888                           intcon	equ	0xFF2
 11889                           intcon2	equ	0xFF1
 11890                           intcon3	equ	0xFF0
 11891                           indf0	equ	0xFEF
 11892                           postinc0	equ	0xFEE
 11893                           fsr0h	equ	0xFEA
 11894                           fsr0l	equ	0xFE9
 11895                           wreg	equ	0xFE8
 11896                           indf1	equ	0xFE7
 11897                           fsr1h	equ	0xFE2
 11898                           fsr1l	equ	0xFE1
 11899                           bsr	equ	0xFE0
 11900                           indf2	equ	0xFDF
 11901                           postinc2	equ	0xFDE
 11902                           postdec2	equ	0xFDD
 11903                           fsr2h	equ	0xFDA
 11904                           fsr2l	equ	0xFD9
 11905                           status	equ	0xFD8
 11906                           
 11907 ;; *************** function _INT0_ISR *****************
 11908 ;; Defined at:
 11909 ;;		line 152 in file "mcc_generated_files/ext_int.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;		None
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;		None
 11914 ;; Return value:  Size  Location     Type
 11915 ;;                  1    wreg      void 
 11916 ;; Registers used:
 11917 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11923 ;;      Params:         0       0       0       0       0       0       0
 11924 ;;      Locals:         0       0       0       0       0       0       0
 11925 ;;      Temps:          0       0       0       0       0       0       0
 11926 ;;      Totals:         0       0       0       0       0       0       0
 11927 ;;Total ram usage:        0 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; Hardware stack levels required when called:    2
 11930 ;; This function calls:
 11931 ;;		_INT0_CallBack
 11932 ;; This function is called by:
 11933 ;;		_INTERRUPT_InterruptManagerHigh
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           	psect	text73
 11938  00204A                     __ptext73:
 11939                           	opt stack 0
 11940  00204A                     _INT0_ISR:
 11941                           	opt stack 16
 11942                           
 11943                           ;ext_int.c: 155: if (PORTBbits.RB3 == 1) {
 11944                           
 11945                           ;incstack = 0
 11946  00204A  A681               	btfss	3969,3,c	;volatile
 11947  00204C  D002               	goto	i2l248
 11948                           
 11949                           ;ext_int.c: 156: TeclaTMP = '1';
 11950  00204E  0E31               	movlw	49
 11951  002050  6E41               	movwf	_TeclaTMP,c	;volatile
 11952  002052                     i2l248:
 11953                           
 11954                           ;ext_int.c: 157: }
 11955                           ;ext_int.c: 158: if (PORTBbits.RB4 == 1) {
 11956  002052  A881               	btfss	3969,4,c	;volatile
 11957  002054  D002               	goto	i2l249
 11958                           
 11959                           ;ext_int.c: 159: TeclaTMP = '4';
 11960  002056  0E34               	movlw	52
 11961  002058  6E41               	movwf	_TeclaTMP,c	;volatile
 11962  00205A                     i2l249:
 11963                           
 11964                           ;ext_int.c: 160: }
 11965                           ;ext_int.c: 161: if (PORTBbits.RB5 == 1) {
 11966  00205A  AA81               	btfss	3969,5,c	;volatile
 11967  00205C  D002               	goto	i2l250
 11968                           
 11969                           ;ext_int.c: 162: TeclaTMP = '7';
 11970  00205E  0E37               	movlw	55
 11971  002060  6E41               	movwf	_TeclaTMP,c	;volatile
 11972  002062                     i2l250:
 11973                           
 11974                           ;ext_int.c: 163: }
 11975                           ;ext_int.c: 164: if (PORTBbits.RB6 == 1) {
 11976  002062  AC81               	btfss	3969,6,c	;volatile
 11977  002064  D002               	goto	i2l251
 11978                           
 11979                           ;ext_int.c: 165: TeclaTMP = '*';
 11980  002066  0E2A               	movlw	42
 11981  002068  6E41               	movwf	_TeclaTMP,c	;volatile
 11982  00206A                     i2l251:
 11983                           
 11984                           ;ext_int.c: 166: }
 11985                           ;ext_int.c: 167: WrEnFl = 1;
 11986  00206A  0E01               	movlw	1
 11987  00206C  6E39               	movwf	_WrEnFl,c	;volatile
 11988                           
 11989                           ;ext_int.c: 171: (INTCONbits.INT0IF = 0);
 11990  00206E  92F2               	bcf	intcon,1,c	;volatile
 11991                           
 11992                           ;ext_int.c: 174: INT0_CallBack();
 11993  002070  ECCD  F010         	call	_INT0_CallBack	;wreg free
 11994  002074  0012               	return		;funcret
 11995  002076                     __end_of_INT0_ISR:
 11996                           	opt stack 0
 11997                           tosu	equ	0xFFF
 11998                           tosh	equ	0xFFE
 11999                           tosl	equ	0xFFD
 12000                           pclatu	equ	0xFFB
 12001                           pclath	equ	0xFFA
 12002                           tblptru	equ	0xFF8
 12003                           tblptrh	equ	0xFF7
 12004                           tblptrl	equ	0xFF6
 12005                           tablat	equ	0xFF5
 12006                           prodh	equ	0xFF4
 12007                           prodl	equ	0xFF3
 12008                           intcon	equ	0xFF2
 12009                           intcon2	equ	0xFF1
 12010                           intcon3	equ	0xFF0
 12011                           indf0	equ	0xFEF
 12012                           postinc0	equ	0xFEE
 12013                           fsr0h	equ	0xFEA
 12014                           fsr0l	equ	0xFE9
 12015                           wreg	equ	0xFE8
 12016                           indf1	equ	0xFE7
 12017                           fsr1h	equ	0xFE2
 12018                           fsr1l	equ	0xFE1
 12019                           bsr	equ	0xFE0
 12020                           indf2	equ	0xFDF
 12021                           postinc2	equ	0xFDE
 12022                           postdec2	equ	0xFDD
 12023                           fsr2h	equ	0xFDA
 12024                           fsr2l	equ	0xFD9
 12025                           status	equ	0xFD8
 12026                           
 12027 ;; *************** function _INT0_CallBack *****************
 12028 ;; Defined at:
 12029 ;;		line 180 in file "mcc_generated_files/ext_int.c"
 12030 ;; Parameters:    Size  Location     Type
 12031 ;;		None
 12032 ;; Auto vars:     Size  Location     Type
 12033 ;;		None
 12034 ;; Return value:  Size  Location     Type
 12035 ;;                  1    wreg      void 
 12036 ;; Registers used:
 12037 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12043 ;;      Params:         0       0       0       0       0       0       0
 12044 ;;      Locals:         0       0       0       0       0       0       0
 12045 ;;      Temps:          0       0       0       0       0       0       0
 12046 ;;      Totals:         0       0       0       0       0       0       0
 12047 ;;Total ram usage:        0 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:    1
 12050 ;; This function calls:
 12051 ;;		Absolute function
 12052 ;;		_INT0_DefaultInterruptHandler
 12053 ;; This function is called by:
 12054 ;;		_INT0_ISR
 12055 ;; This function uses a non-reentrant model
 12056 ;;
 12057                           
 12058                           	psect	text74
 12059  00219A                     __ptext74:
 12060                           	opt stack 0
 12061  00219A                     _INT0_CallBack:
 12062                           	opt stack 16
 12063                           
 12064                           ;ext_int.c: 182: if (INT0_InterruptHandler) {
 12065                           
 12066                           ;incstack = 0
 12067  00219A  0100               	movlb	0	; () banked
 12068  00219C  51E7               	movf	_INT0_InterruptHandler& (0+255),w,b
 12069  00219E  11E8               	iorwf	(_INT0_InterruptHandler+1)& (0+255),w,b
 12070  0021A0  B4D8               	btfsc	status,2,c
 12071  0021A2  0012               	return	
 12072                           
 12073                           ; BSR set to: 0
 12074                           ;ext_int.c: 183: INT0_InterruptHandler();
 12075  0021A4  D801               	call	i2u386_48
 12076  0021A6  0012               	return	
 12077  0021A8                     i2u386_48:
 12078  0021A8  0005               	push	
 12079  0021AA  6EFA               	movwf	pclath,c
 12080  0021AC  51E7               	movf	_INT0_InterruptHandler& (0+255),w,b
 12081  0021AE  6EFD               	movwf	tosl,c
 12082  0021B0  51E8               	movf	(_INT0_InterruptHandler+1)& (0+255),w,b
 12083  0021B2  6EFE               	movwf	tosh,c
 12084  0021B4  50F8               	movf	tblptru,w,c
 12085  0021B6  6EFF               	movwf	tosu,c
 12086  0021B8  50FA               	movf	pclath,w,c
 12087  0021BA  0012               	return		;indir
 12088  0021BC                     __end_of_INT0_CallBack:
 12089                           	opt stack 0
 12090                           tosu	equ	0xFFF
 12091                           tosh	equ	0xFFE
 12092                           tosl	equ	0xFFD
 12093                           pclatu	equ	0xFFB
 12094                           pclath	equ	0xFFA
 12095                           tblptru	equ	0xFF8
 12096                           tblptrh	equ	0xFF7
 12097                           tblptrl	equ	0xFF6
 12098                           tablat	equ	0xFF5
 12099                           prodh	equ	0xFF4
 12100                           prodl	equ	0xFF3
 12101                           intcon	equ	0xFF2
 12102                           intcon2	equ	0xFF1
 12103                           intcon3	equ	0xFF0
 12104                           indf0	equ	0xFEF
 12105                           postinc0	equ	0xFEE
 12106                           fsr0h	equ	0xFEA
 12107                           fsr0l	equ	0xFE9
 12108                           wreg	equ	0xFE8
 12109                           indf1	equ	0xFE7
 12110                           fsr1h	equ	0xFE2
 12111                           fsr1l	equ	0xFE1
 12112                           bsr	equ	0xFE0
 12113                           indf2	equ	0xFDF
 12114                           postinc2	equ	0xFDE
 12115                           postdec2	equ	0xFDD
 12116                           fsr2h	equ	0xFDA
 12117                           fsr2l	equ	0xFD9
 12118                           status	equ	0xFD8
 12119                           
 12120 ;; *************** function _INT0_DefaultInterruptHandler *****************
 12121 ;; Defined at:
 12122 ;;		line 197 in file "mcc_generated_files/ext_int.c"
 12123 ;; Parameters:    Size  Location     Type
 12124 ;;		None
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;		None
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  1    wreg      void 
 12129 ;; Registers used:
 12130 ;;		None
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12136 ;;      Params:         0       0       0       0       0       0       0
 12137 ;;      Locals:         0       0       0       0       0       0       0
 12138 ;;      Temps:          0       0       0       0       0       0       0
 12139 ;;      Totals:         0       0       0       0       0       0       0
 12140 ;;Total ram usage:        0 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; This function calls:
 12143 ;;		Nothing
 12144 ;; This function is called by:
 12145 ;;		_EXT_INT_Initialize
 12146 ;;		_INT0_CallBack
 12147 ;; This function uses a non-reentrant model
 12148 ;;
 12149                           
 12150                           	psect	text75
 12151  002312                     __ptext75:
 12152                           	opt stack 0
 12153  002312                     _INT0_DefaultInterruptHandler:
 12154                           	opt stack 16
 12155                           
 12156                           ;incstack = 0
 12157  002312  0012               	return		;funcret
 12158  002314                     __end_of_INT0_DefaultInterruptHandler:
 12159                           	opt stack 0
 12160                           tosu	equ	0xFFF
 12161                           tosh	equ	0xFFE
 12162                           tosl	equ	0xFFD
 12163                           pclatu	equ	0xFFB
 12164                           pclath	equ	0xFFA
 12165                           tblptru	equ	0xFF8
 12166                           tblptrh	equ	0xFF7
 12167                           tblptrl	equ	0xFF6
 12168                           tablat	equ	0xFF5
 12169                           prodh	equ	0xFF4
 12170                           prodl	equ	0xFF3
 12171                           intcon	equ	0xFF2
 12172                           intcon2	equ	0xFF1
 12173                           intcon3	equ	0xFF0
 12174                           indf0	equ	0xFEF
 12175                           postinc0	equ	0xFEE
 12176                           fsr0h	equ	0xFEA
 12177                           fsr0l	equ	0xFE9
 12178                           wreg	equ	0xFE8
 12179                           indf1	equ	0xFE7
 12180                           fsr1h	equ	0xFE2
 12181                           fsr1l	equ	0xFE1
 12182                           bsr	equ	0xFE0
 12183                           indf2	equ	0xFDF
 12184                           postinc2	equ	0xFDE
 12185                           postdec2	equ	0xFDD
 12186                           fsr2h	equ	0xFDA
 12187                           fsr2l	equ	0xFD9
 12188                           status	equ	0xFD8
 12189                           
 12190 ;; *************** function _I2C1_ISR *****************
 12191 ;; Defined at:
 12192 ;;		line 234 in file "mcc_generated_files/i2c1.c"
 12193 ;; Parameters:    Size  Location     Type
 12194 ;;		None
 12195 ;; Auto vars:     Size  Location     Type
 12196 ;;		None
 12197 ;; Return value:  Size  Location     Type
 12198 ;;                  1    wreg      void 
 12199 ;; Registers used:
 12200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12201 ;; Tracked objects:
 12202 ;;		On entry : 0/0
 12203 ;;		On exit  : 0/0
 12204 ;;		Unchanged: 0/0
 12205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12206 ;;      Params:         0       0       0       0       0       0       0
 12207 ;;      Locals:         0       0       0       0       0       0       0
 12208 ;;      Temps:          2       0       0       0       0       0       0
 12209 ;;      Totals:         2       0       0       0       0       0       0
 12210 ;;Total ram usage:        2 bytes
 12211 ;; Hardware stack levels used:    1
 12212 ;; Hardware stack levels required when called:    1
 12213 ;; This function calls:
 12214 ;;		_I2C1_FunctionComplete
 12215 ;;		_I2C1_Stop
 12216 ;; This function is called by:
 12217 ;;		_INTERRUPT_InterruptManagerHigh
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           	psect	text76
 12222  0006A4                     __ptext76:
 12223                           	opt stack 0
 12224  0006A4                     _I2C1_ISR:
 12225                           	opt stack 17
 12226                           
 12227                           ;i2c1.c: 237: static uint8_t *pi2c_buf_ptr;
 12228                           ;i2c1.c: 238: static uint16_t i2c_address = 0;
 12229                           ;i2c1.c: 239: static uint8_t i2c_bytes_left = 0;
 12230                           ;i2c1.c: 240: static uint8_t i2c_10bit_address_restart = 0;
 12231                           ;i2c1.c: 242: PIR1bits.SSP1IF = 0;
 12232                           
 12233                           ;incstack = 0
 12234  0006A4  969E               	bcf	3998,3,c	;volatile
 12235                           
 12236                           ;i2c1.c: 246: if(SSP1CON1bits.WCOL)
 12237  0006A6  AEC6               	btfss	4038,7,c	;volatile
 12238  0006A8  D0FF               	goto	i2l778
 12239                           
 12240                           ;i2c1.c: 247: {
 12241                           ;i2c1.c: 249: SSP1CON1bits.WCOL = 0;
 12242  0006AA  9EC6               	bcf	4038,7,c	;volatile
 12243                           
 12244                           ;i2c1.c: 250: i2c1_state = S_MASTER_IDLE;
 12245  0006AC  0E00               	movlw	0
 12246  0006AE  6E38               	movwf	_i2c1_state,c
 12247                           
 12248                           ;i2c1.c: 251: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 12249  0006B0  EE20 F003          	lfsr	2,3
 12250  0006B4  5031               	movf	_p_i2c1_current,w,c
 12251  0006B6  26D9               	addwf	fsr2l,f,c
 12252  0006B8  5032               	movf	_p_i2c1_current+1,w,c
 12253  0006BA  22DA               	addwfc	fsr2h,f,c
 12254  0006BC  CFDE F004          	movff	postinc2,??_I2C1_ISR
 12255  0006C0  CFDD F005          	movff	postdec2,??_I2C1_ISR+1
 12256  0006C4  C004  FFD9         	movff	??_I2C1_ISR,fsr2l
 12257  0006C8  C005  FFDA         	movff	??_I2C1_ISR+1,fsr2h
 12258  0006CC  0E01               	movlw	1
 12259  0006CE  6EDF               	movwf	indf2,c
 12260                           
 12261                           ;i2c1.c: 254: p_i2c1_current = (0);
 12262  0006D0  0E00               	movlw	0
 12263  0006D2  6E31               	movwf	_p_i2c1_current,c
 12264  0006D4  0E00               	movlw	0
 12265  0006D6  6E32               	movwf	_p_i2c1_current+1,c
 12266                           
 12267                           ;i2c1.c: 256: return;
 12268  0006D8  0012               	return	
 12269  0006DA                     i2l779:
 12270                           
 12271                           ;i2c1.c: 264: if(i2c1_object.trStatus.s.empty != 1)
 12272  0006DA  0100               	movlb	0	; () banked
 12273  0006DC  B364               	btfsc	(_i2c1_object+4)& (0+255),1,b
 12274  0006DE  0012               	return	
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;i2c1.c: 265: {
 12278                           ;i2c1.c: 267: p_i2c1_current = i2c1_object.pTrHead;
 12279  0006E0  C062  F031         	movff	_i2c1_object+2,_p_i2c1_current
 12280  0006E4  C063  F032         	movff	_i2c1_object+3,_p_i2c1_current+1
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;i2c1.c: 268: i2c1_trb_count = i2c1_object.pTrHead->count;
 12284  0006E8  C062  FFD9         	movff	_i2c1_object+2,fsr2l
 12285  0006EC  C063  FFDA         	movff	_i2c1_object+3,fsr2h
 12286  0006F0  50DF               	movf	indf2,w,c
 12287  0006F2  6E37               	movwf	_i2c1_trb_count,c
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;i2c1.c: 269: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 12291  0006F4  EE20 F001          	lfsr	2,1
 12292  0006F8  5162               	movf	(_i2c1_object+2)& (0+255),w,b
 12293  0006FA  26D9               	addwf	fsr2l,f,c
 12294  0006FC  5163               	movf	(_i2c1_object+3)& (0+255),w,b
 12295  0006FE  22DA               	addwfc	fsr2h,f,c
 12296  000700  CFDE F033          	movff	postinc2,_p_i2c1_trb_current
 12297  000704  CFDD F034          	movff	postdec2,_p_i2c1_trb_current+1
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;i2c1.c: 271: i2c1_object.pTrHead++;
 12301  000708  0E05               	movlw	5
 12302  00070A  2762               	addwf	(_i2c1_object+2)& (0+255),f,b
 12303  00070C  0E00               	movlw	0
 12304  00070E  2363               	addwfc	(_i2c1_object+3)& (0+255),f,b
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;i2c1.c: 274: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 12308  000710  0EB1               	movlw	low (_i2c1_tr_queue+5)
 12309  000712  1962               	xorwf	(_i2c1_object+2)& (0+255),w,b
 12310  000714  E108               	bnz	i2l4938
 12311  000716  0E00               	movlw	high (_i2c1_tr_queue+5)
 12312  000718  1963               	xorwf	(_i2c1_object+3)& (0+255),w,b
 12313  00071A  A4D8               	btfss	status,2,c
 12314  00071C  D004               	goto	i2l781
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;i2c1.c: 275: {
 12318                           ;i2c1.c: 277: i2c1_object.pTrHead = i2c1_tr_queue;
 12319  00071E  0EAC               	movlw	low _i2c1_tr_queue
 12320  000720  6F62               	movwf	(_i2c1_object+2)& (0+255),b
 12321  000722  0E00               	movlw	high _i2c1_tr_queue
 12322  000724  6F63               	movwf	(_i2c1_object+3)& (0+255),b
 12323  000726                     i2l781:
 12324  000726                     i2l4938:
 12325                           
 12326                           ; BSR set to: 0
 12327                           ;i2c1.c: 278: }
 12328                           ;i2c1.c: 282: i2c1_object.trStatus.s.full = 0;
 12329  000726  9164               	bcf	(_i2c1_object+4)& (0+255),0,b
 12330                           
 12331                           ;i2c1.c: 285: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 12332  000728  5160               	movf	_i2c1_object& (0+255),w,b
 12333  00072A  1962               	xorwf	(_i2c1_object+2)& (0+255),w,b
 12334  00072C  E104               	bnz	i2l782
 12335  00072E  5161               	movf	(_i2c1_object+1)& (0+255),w,b
 12336  000730  1963               	xorwf	(_i2c1_object+3)& (0+255),w,b
 12337  000732  B4D8               	btfsc	status,2,c
 12338                           
 12339                           ; BSR set to: 0
 12340                           ;i2c1.c: 286: {
 12341                           ;i2c1.c: 288: i2c1_object.trStatus.s.empty = 1;
 12342  000734  8364               	bsf	(_i2c1_object+4)& (0+255),1,b
 12343  000736                     i2l782:
 12344                           
 12345                           ; BSR set to: 0
 12346                           ;i2c1.c: 289: }
 12347                           ;i2c1.c: 292: SSP1CON2bits.SEN = 1;
 12348  000736  80C5               	bsf	4037,0,c	;volatile
 12349                           
 12350                           ; BSR set to: 0
 12351                           ;i2c1.c: 295: i2c1_state = S_MASTER_SEND_ADDR;
 12352  000738  0E02               	movlw	2
 12353  00073A  6E38               	movwf	_i2c1_state,c
 12354                           
 12355                           ; BSR set to: 0
 12356                           ;i2c1.c: 296: }
 12357                           ;i2c1.c: 298: break;
 12358  00073C  0012               	return	
 12359  00073E                     i2l784:
 12360                           
 12361                           ;i2c1.c: 305: SSP1CON2bits.RSEN = 1;
 12362  00073E  82C5               	bsf	4037,1,c	;volatile
 12363                           
 12364                           ;i2c1.c: 308: i2c1_state = S_MASTER_SEND_ADDR;
 12365  000740  0E02               	movlw	2
 12366  000742  6E38               	movwf	_i2c1_state,c
 12367                           
 12368                           ;i2c1.c: 310: break;
 12369  000744  0012               	return	
 12370  000746                     i2l785:
 12371                           
 12372                           ;i2c1.c: 314: if(SSP1CON2bits.ACKSTAT)
 12373  000746  ACC5               	btfss	4037,6,c	;volatile
 12374  000748  D006               	goto	i2l786
 12375                           
 12376                           ;i2c1.c: 315: {
 12377                           ;i2c1.c: 316: i2c1_object.i2cErrors++;
 12378  00074A  0100               	movlb	0	; () banked
 12379  00074C  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 12380                           
 12381                           ; BSR set to: 0
 12382                           ;i2c1.c: 317: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12383  00074E  0E04               	movlw	4
 12384  000750  ECFD  F00E         	call	_I2C1_Stop
 12385                           
 12386                           ;i2c1.c: 318: }
 12387  000754  0012               	return	
 12388  000756                     i2l786:
 12389                           
 12390                           ;i2c1.c: 319: else
 12391                           ;i2c1.c: 320: {
 12392                           ;i2c1.c: 322: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 12393  000756  90D8               	bcf	status,0,c
 12394  000758  3043               	rrcf	I2C1_ISR@i2c_address+1,w,c
 12395  00075A  6E05               	movwf	(??_I2C1_ISR+1)& (0+255),c
 12396  00075C  3042               	rrcf	I2C1_ISR@i2c_address,w,c
 12397  00075E  6E04               	movwf	??_I2C1_ISR& (0+255),c
 12398  000760  5004               	movf	??_I2C1_ISR,w,c
 12399  000762  6EC9               	movwf	4041,c	;volatile
 12400                           
 12401                           ;i2c1.c: 325: if(i2c_address & 0x01)
 12402  000764  A042               	btfss	I2C1_ISR@i2c_address,0,c
 12403  000766  D003               	goto	i2l788
 12404                           
 12405                           ;i2c1.c: 326: {
 12406                           ;i2c1.c: 329: i2c1_state = S_MASTER_10BIT_RESTART;
 12407  000768  0E0B               	movlw	11
 12408  00076A  6E38               	movwf	_i2c1_state,c
 12409                           
 12410                           ;i2c1.c: 330: }
 12411  00076C  0012               	return	
 12412  00076E                     i2l788:
 12413                           
 12414                           ;i2c1.c: 331: else
 12415                           ;i2c1.c: 332: {
 12416                           ;i2c1.c: 334: i2c1_state = S_MASTER_SEND_DATA;
 12417  00076E  0E03               	movlw	3
 12418  000770  6E38               	movwf	_i2c1_state,c
 12419                           
 12420                           ;i2c1.c: 335: }
 12421                           ;i2c1.c: 336: }
 12422                           ;i2c1.c: 338: break;
 12423  000772  0012               	return	
 12424  000774                     i2l790:
 12425                           
 12426                           ;i2c1.c: 342: if(SSP1CON2bits.ACKSTAT)
 12427  000774  ACC5               	btfss	4037,6,c	;volatile
 12428  000776  D006               	goto	i2l791
 12429                           
 12430                           ;i2c1.c: 343: {
 12431                           ;i2c1.c: 344: i2c1_object.i2cErrors++;
 12432  000778  0100               	movlb	0	; () banked
 12433  00077A  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 12434                           
 12435                           ; BSR set to: 0
 12436                           ;i2c1.c: 345: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12437  00077C  0E04               	movlw	4
 12438  00077E  ECFD  F00E         	call	_I2C1_Stop
 12439                           
 12440                           ;i2c1.c: 346: }
 12441  000782  0012               	return	
 12442  000784                     i2l791:
 12443                           
 12444                           ;i2c1.c: 347: else
 12445                           ;i2c1.c: 348: {
 12446                           ;i2c1.c: 351: SSP1CON2bits.RSEN = 1;
 12447  000784  82C5               	bsf	4037,1,c	;volatile
 12448                           
 12449                           ;i2c1.c: 355: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 12450  000786  C042  F004         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
 12451  00078A  C043  F005         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
 12452  00078E  C005  F004         	movff	??_I2C1_ISR+1,??_I2C1_ISR
 12453  000792  6A05               	clrf	??_I2C1_ISR+1,c
 12454  000794  0E06               	movlw	6
 12455  000796  1604               	andwf	??_I2C1_ISR,f,c
 12456  000798  0E00               	movlw	0
 12457  00079A  1605               	andwf	??_I2C1_ISR+1,f,c
 12458  00079C  0EF0               	movlw	240
 12459  00079E  1004               	iorwf	??_I2C1_ISR,w,c
 12460  0007A0  6E42               	movwf	I2C1_ISR@i2c_address,c
 12461  0007A2  5005               	movf	??_I2C1_ISR+1,w,c
 12462  0007A4  6E43               	movwf	I2C1_ISR@i2c_address+1,c
 12463                           
 12464                           ;i2c1.c: 358: i2c_address |= 0x0001;
 12465  0007A6  8042               	bsf	I2C1_ISR@i2c_address,0,c
 12466                           
 12467                           ;i2c1.c: 361: i2c_10bit_address_restart = 1;
 12468  0007A8  0E01               	movlw	1
 12469  0007AA  6E35               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
 12470                           
 12471                           ;i2c1.c: 364: i2c1_state = S_MASTER_SEND_ADDR;
 12472  0007AC  0E02               	movlw	2
 12473  0007AE  6E38               	movwf	_i2c1_state,c
 12474                           
 12475                           ;i2c1.c: 365: }
 12476                           ;i2c1.c: 367: break;
 12477  0007B0  0012               	return	
 12478  0007B2                     
 12479                           ;i2c1.c: 382: if(i2c_10bit_address_restart != 1)
 12480  0007B2  0435               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
 12481  0007B4  B4D8               	btfsc	status,2,c
 12482  0007B6  D01A               	goto	i2l795
 12483                           
 12484                           ;i2c1.c: 383: {
 12485                           ;i2c1.c: 385: i2c_address = p_i2c1_trb_current->address;
 12486  0007B8  C033  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 12487  0007BC  C034  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 12488  0007C0  CFDE F042          	movff	postinc2,I2C1_ISR@i2c_address
 12489  0007C4  CFDD F043          	movff	postdec2,I2C1_ISR@i2c_address+1
 12490                           
 12491                           ;i2c1.c: 386: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 12492  0007C8  EE20 F003          	lfsr	2,3
 12493  0007CC  5033               	movf	_p_i2c1_trb_current,w,c
 12494  0007CE  26D9               	addwf	fsr2l,f,c
 12495  0007D0  5034               	movf	_p_i2c1_trb_current+1,w,c
 12496  0007D2  22DA               	addwfc	fsr2h,f,c
 12497  0007D4  CFDE F02F          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 12498  0007D8  CFDD F030          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 12499                           
 12500                           ;i2c1.c: 387: i2c_bytes_left = p_i2c1_trb_current->length;
 12501  0007DC  EE20 F002          	lfsr	2,2
 12502  0007E0  5033               	movf	_p_i2c1_trb_current,w,c
 12503  0007E2  26D9               	addwf	fsr2l,f,c
 12504  0007E4  5034               	movf	_p_i2c1_trb_current+1,w,c
 12505  0007E6  22DA               	addwfc	fsr2h,f,c
 12506  0007E8  50DF               	movf	indf2,w,c
 12507  0007EA  6E36               	movwf	I2C1_ISR@i2c_bytes_left,c
 12508  0007EC                     i2l795:
 12509                           
 12510                           ;i2c1.c: 410: else
 12511                           ;i2c1.c: 411: {
 12512                           ;i2c1.c: 413: SSP1BUF = i2c_address;
 12513  0007EC  C042  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
 12514                           
 12515                           ;i2c1.c: 414: if(i2c_address & 0x01)
 12516  0007F0  A042               	btfss	I2C1_ISR@i2c_address,0,c
 12517  0007F2  D003               	goto	i2l799
 12518                           
 12519                           ;i2c1.c: 415: {
 12520                           ;i2c1.c: 417: i2c1_state = S_MASTER_ACK_ADDR;
 12521  0007F4  0E05               	movlw	5
 12522  0007F6  6E38               	movwf	_i2c1_state,c
 12523                           
 12524                           ;i2c1.c: 418: }
 12525  0007F8  0012               	return	
 12526  0007FA                     i2l799:
 12527                           
 12528                           ;i2c1.c: 419: else
 12529                           ;i2c1.c: 420: {
 12530                           ;i2c1.c: 422: i2c1_state = S_MASTER_SEND_DATA;
 12531  0007FA  0E03               	movlw	3
 12532  0007FC  6E38               	movwf	_i2c1_state,c
 12533                           
 12534                           ;i2c1.c: 423: }
 12535                           ;i2c1.c: 424: }
 12536                           ;i2c1.c: 425: break;
 12537  0007FE  0012               	return	
 12538  000800                     i2l801:
 12539                           
 12540                           ;i2c1.c: 430: if(SSP1CON2bits.ACKSTAT)
 12541  000800  ACC5               	btfss	4037,6,c	;volatile
 12542  000802  D007               	goto	i2l802
 12543                           
 12544                           ;i2c1.c: 431: {
 12545                           ;i2c1.c: 433: i2c1_object.i2cErrors++;
 12546  000804  0100               	movlb	0	; () banked
 12547  000806  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 12548                           
 12549                           ; BSR set to: 0
 12550                           ;i2c1.c: 436: SSP1CON2bits.ACKSTAT = 0;
 12551  000808  9CC5               	bcf	4037,6,c	;volatile
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;i2c1.c: 439: I2C1_Stop(I2C1_DATA_NO_ACK);
 12555  00080A  0E05               	movlw	5
 12556  00080C  ECFD  F00E         	call	_I2C1_Stop
 12557                           
 12558                           ;i2c1.c: 441: }
 12559  000810  0012               	return	
 12560  000812                     i2l802:
 12561                           
 12562                           ;i2c1.c: 442: else
 12563                           ;i2c1.c: 443: {
 12564                           ;i2c1.c: 445: if(i2c_bytes_left-- == 0U)
 12565  000812  0636               	decf	I2C1_ISR@i2c_bytes_left,f,c
 12566  000814  2836               	incf	I2C1_ISR@i2c_bytes_left,w,c
 12567  000816  A4D8               	btfss	status,2,c
 12568  000818  D00E               	goto	i2l804
 12569                           
 12570                           ;i2c1.c: 446: {
 12571                           ;i2c1.c: 450: p_i2c1_trb_current++;
 12572  00081A  0E05               	movlw	5
 12573  00081C  2633               	addwf	_p_i2c1_trb_current,f,c
 12574  00081E  0E00               	movlw	0
 12575  000820  2234               	addwfc	_p_i2c1_trb_current+1,f,c
 12576                           
 12577                           ;i2c1.c: 453: if(--i2c1_trb_count == 0)
 12578  000822  2E37               	decfsz	_i2c1_trb_count,f,c
 12579  000824  D004               	goto	i2l805
 12580                           
 12581                           ;i2c1.c: 454: {
 12582                           ;i2c1.c: 455: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 12583  000826  0E00               	movlw	0
 12584  000828  ECFD  F00E         	call	_I2C1_Stop
 12585                           
 12586                           ;i2c1.c: 456: }
 12587  00082C  0012               	return	
 12588  00082E                     i2l805:
 12589                           
 12590                           ;i2c1.c: 457: else
 12591                           ;i2c1.c: 458: {
 12592                           ;i2c1.c: 465: SSP1CON2bits.RSEN = 1;
 12593  00082E  82C5               	bsf	4037,1,c	;volatile
 12594                           
 12595                           ;i2c1.c: 468: i2c1_state = S_MASTER_SEND_ADDR;
 12596  000830  0E02               	movlw	2
 12597  000832  6E38               	movwf	_i2c1_state,c
 12598                           
 12599                           ;i2c1.c: 470: }
 12600                           ;i2c1.c: 471: }
 12601  000834  0012               	return	
 12602  000836                     i2l804:
 12603                           
 12604                           ;i2c1.c: 472: else
 12605                           ;i2c1.c: 473: {
 12606                           ;i2c1.c: 475: SSP1BUF = *pi2c_buf_ptr++;
 12607  000836  C02F  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 12608  00083A  C030  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 12609  00083E  50DF               	movf	indf2,w,c
 12610  000840  6EC9               	movwf	4041,c	;volatile
 12611  000842  4A2F               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
 12612  000844  2A30               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
 12613                           
 12614                           ;i2c1.c: 476: }
 12615                           ;i2c1.c: 477: }
 12616                           ;i2c1.c: 478: break;
 12617  000846  0012               	return	
 12618  000848                     i2l808:
 12619                           
 12620                           ;i2c1.c: 483: if(SSP1CON2bits.ACKSTAT)
 12621  000848  ACC5               	btfss	4037,6,c	;volatile
 12622  00084A  D007               	goto	i2l809
 12623                           
 12624                           ;i2c1.c: 484: {
 12625                           ;i2c1.c: 487: i2c1_object.i2cErrors++;
 12626  00084C  0100               	movlb	0	; () banked
 12627  00084E  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;i2c1.c: 490: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12631  000850  0E04               	movlw	4
 12632  000852  ECFD  F00E         	call	_I2C1_Stop
 12633                           
 12634                           ;i2c1.c: 493: SSP1CON2bits.ACKSTAT = 0;
 12635  000856  9CC5               	bcf	4037,6,c	;volatile
 12636                           
 12637                           ;i2c1.c: 494: }
 12638  000858  0012               	return	
 12639  00085A                     i2l809:
 12640                           
 12641                           ;i2c1.c: 495: else
 12642                           ;i2c1.c: 496: {
 12643                           ;i2c1.c: 497: SSP1CON2bits.RCEN = 1;
 12644  00085A  86C5               	bsf	4037,3,c	;volatile
 12645                           
 12646                           ;i2c1.c: 498: i2c1_state = S_MASTER_ACK_RCV_DATA;
 12647  00085C  0E08               	movlw	8
 12648  00085E  6E38               	movwf	_i2c1_state,c
 12649                           
 12650                           ;i2c1.c: 499: }
 12651                           ;i2c1.c: 500: break;
 12652  000860  0012               	return	
 12653  000862                     
 12654                           ;i2c1.c: 507: i2c1_state = S_MASTER_ACK_RCV_DATA;
 12655  000862  0E08               	movlw	8
 12656  000864  6E38               	movwf	_i2c1_state,c
 12657                           
 12658                           ;i2c1.c: 510: SSP1CON2bits.RCEN = 1;
 12659  000866  86C5               	bsf	4037,3,c	;volatile
 12660                           
 12661                           ;i2c1.c: 512: break;
 12662  000868  0012               	return	
 12663  00086A                     
 12664                           ;i2c1.c: 517: *pi2c_buf_ptr++ = SSP1BUF;
 12665  00086A  C02F  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 12666  00086E  C030  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 12667  000872  CFC9 FFDF          	movff	4041,indf2	;volatile
 12668  000876  4A2F               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
 12669  000878  2A30               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
 12670                           
 12671                           ;i2c1.c: 520: if(--i2c_bytes_left)
 12672  00087A  0E01               	movlw	1
 12673  00087C  5E36               	subwf	I2C1_ISR@i2c_bytes_left,f,c
 12674  00087E  B4D8               	btfsc	status,2,c
 12675  000880  D004               	goto	i2l813
 12676                           
 12677                           ;i2c1.c: 521: {
 12678                           ;i2c1.c: 527: SSP1CON2bits.ACKDT = 0;
 12679  000882  9AC5               	bcf	4037,5,c	;volatile
 12680                           
 12681                           ;i2c1.c: 530: i2c1_state = S_MASTER_RCV_DATA;
 12682  000884  0E06               	movlw	6
 12683  000886  6E38               	movwf	_i2c1_state,c
 12684                           
 12685                           ;i2c1.c: 531: }
 12686  000888  D003               	goto	i2l814
 12687  00088A                     i2l813:
 12688                           
 12689                           ;i2c1.c: 532: else
 12690                           ;i2c1.c: 533: {
 12691                           ;i2c1.c: 537: SSP1CON2bits.ACKDT = 1;
 12692  00088A  8AC5               	bsf	4037,5,c	;volatile
 12693                           
 12694                           ;i2c1.c: 539: I2C1_FunctionComplete();
 12695  00088C  EC16  F011         	call	_I2C1_FunctionComplete	;wreg free
 12696  000890                     i2l814:
 12697                           
 12698                           ;i2c1.c: 540: }
 12699                           ;i2c1.c: 543: SSP1CON2bits.ACKEN = 1;
 12700  000890  88C5               	bsf	4037,4,c	;volatile
 12701                           
 12702                           ;i2c1.c: 544: break;
 12703  000892  0012               	return	
 12704  000894                     
 12705                           ;i2c1.c: 547: case S_MASTER_SEND_STOP:
 12706                           ;i2c1.c: 550: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 12707  000894  0E00               	movlw	0
 12708  000896  ECFD  F00E         	call	_I2C1_Stop
 12709                           
 12710                           ;i2c1.c: 551: break;
 12711  00089A  0012               	return	
 12712  00089C                     
 12713                           ;i2c1.c: 557: i2c1_object.i2cErrors++;
 12714  00089C  0100               	movlb	0	; () banked
 12715  00089E  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 12716                           
 12717                           ; BSR set to: 0
 12718                           ;i2c1.c: 558: I2C1_Stop(I2C1_LOST_STATE);
 12719  0008A0  0E06               	movlw	6
 12720  0008A2  ECFD  F00E         	call	_I2C1_Stop
 12721                           
 12722                           ;i2c1.c: 561: }
 12723                           
 12724                           ;i2c1.c: 559: break;
 12725  0008A6  0012               	return	
 12726  0008A8                     i2l778:
 12727  0008A8  5038               	movf	_i2c1_state,w,c
 12728                           
 12729                           ; Switch size 1, requested type "space"
 12730                           ; Number of cases is 11, Range of values is 0 to 11
 12731                           ; switch strategies available:
 12732                           ; Name         Instructions Cycles
 12733                           ; simple_byte           34    18 (average)
 12734                           ;	Chosen strategy is simple_byte
 12735  0008AA  0A00               	xorlw	0	; case 0
 12736  0008AC  B4D8               	btfsc	status,2,c
 12737  0008AE  D715               	goto	i2l779
 12738  0008B0  0A01               	xorlw	1	; case 1
 12739  0008B2  B4D8               	btfsc	status,2,c
 12740  0008B4  D744               	goto	i2l784
 12741  0008B6  0A03               	xorlw	3	; case 2
 12742  0008B8  B4D8               	btfsc	status,2,c
 12743  0008BA  D77B               	goto	i2l793
 12744  0008BC  0A01               	xorlw	1	; case 3
 12745  0008BE  B4D8               	btfsc	status,2,c
 12746  0008C0  D79F               	goto	i2l801
 12747  0008C2  0A07               	xorlw	7	; case 4
 12748  0008C4  B4D8               	btfsc	status,2,c
 12749  0008C6  D7E6               	goto	i2l815
 12750  0008C8  0A01               	xorlw	1	; case 5
 12751  0008CA  B4D8               	btfsc	status,2,c
 12752  0008CC  D7BD               	goto	i2l808
 12753  0008CE  0A03               	xorlw	3	; case 6
 12754  0008D0  B4D8               	btfsc	status,2,c
 12755  0008D2  D7C7               	goto	i2l811
 12756  0008D4  0A01               	xorlw	1	; case 7
 12757  0008D6  B4D8               	btfsc	status,2,c
 12758  0008D8  D7DD               	goto	i2l815
 12759  0008DA  0A0F               	xorlw	15	; case 8
 12760  0008DC  B4D8               	btfsc	status,2,c
 12761  0008DE  D7C5               	goto	i2l812
 12762  0008E0  0A02               	xorlw	2	; case 10
 12763  0008E2  B4D8               	btfsc	status,2,c
 12764  0008E4  D730               	goto	i2l785
 12765  0008E6  0A01               	xorlw	1	; case 11
 12766  0008E8  B4D8               	btfsc	status,2,c
 12767  0008EA  D744               	goto	i2l790
 12768  0008EC  D7D7               	goto	i2l817
 12769  0008EE                     __end_of_I2C1_ISR:
 12770                           	opt stack 0
 12771                           tosu	equ	0xFFF
 12772                           tosh	equ	0xFFE
 12773                           tosl	equ	0xFFD
 12774                           pclatu	equ	0xFFB
 12775                           pclath	equ	0xFFA
 12776                           tblptru	equ	0xFF8
 12777                           tblptrh	equ	0xFF7
 12778                           tblptrl	equ	0xFF6
 12779                           tablat	equ	0xFF5
 12780                           prodh	equ	0xFF4
 12781                           prodl	equ	0xFF3
 12782                           intcon	equ	0xFF2
 12783                           intcon2	equ	0xFF1
 12784                           intcon3	equ	0xFF0
 12785                           indf0	equ	0xFEF
 12786                           postinc0	equ	0xFEE
 12787                           fsr0h	equ	0xFEA
 12788                           fsr0l	equ	0xFE9
 12789                           wreg	equ	0xFE8
 12790                           indf1	equ	0xFE7
 12791                           fsr1h	equ	0xFE2
 12792                           fsr1l	equ	0xFE1
 12793                           bsr	equ	0xFE0
 12794                           indf2	equ	0xFDF
 12795                           postinc2	equ	0xFDE
 12796                           postdec2	equ	0xFDD
 12797                           fsr2h	equ	0xFDA
 12798                           fsr2l	equ	0xFD9
 12799                           status	equ	0xFD8
 12800                           
 12801 ;; *************** function _I2C1_Stop *****************
 12802 ;; Defined at:
 12803 ;;		line 582 in file "mcc_generated_files/i2c1.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;  completion_c    1    wreg     enum E6972
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;  completion_c    1    2[COMRAM] enum E6972
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  1    wreg      void 
 12810 ;; Registers used:
 12811 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12817 ;;      Params:         0       0       0       0       0       0       0
 12818 ;;      Locals:         1       0       0       0       0       0       0
 12819 ;;      Temps:          2       0       0       0       0       0       0
 12820 ;;      Totals:         3       0       0       0       0       0       0
 12821 ;;Total ram usage:        3 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; This function calls:
 12824 ;;		Nothing
 12825 ;; This function is called by:
 12826 ;;		_I2C1_ISR
 12827 ;; This function uses a non-reentrant model
 12828 ;;
 12829                           
 12830                           	psect	text77
 12831  001DFA                     __ptext77:
 12832                           	opt stack 0
 12833  001DFA                     _I2C1_Stop:
 12834                           	opt stack 17
 12835                           
 12836                           ;incstack = 0
 12837                           ;I2C1_Stop@completion_code stored from wreg
 12838  001DFA  6E03               	movwf	I2C1_Stop@completion_code,c
 12839                           
 12840                           ;i2c1.c: 585: SSP1CON2bits.PEN = 1;
 12841  001DFC  84C5               	bsf	4037,2,c	;volatile
 12842                           
 12843                           ;i2c1.c: 588: if (p_i2c1_current->pTrFlag != (0))
 12844  001DFE  EE20 F003          	lfsr	2,3
 12845  001E02  5031               	movf	_p_i2c1_current,w,c
 12846  001E04  26D9               	addwf	fsr2l,f,c
 12847  001E06  5032               	movf	_p_i2c1_current+1,w,c
 12848  001E08  22DA               	addwfc	fsr2h,f,c
 12849  001E0A  50DE               	movf	postinc2,w,c
 12850  001E0C  10DE               	iorwf	postinc2,w,c
 12851  001E0E  B4D8               	btfsc	status,2,c
 12852  001E10  D012               	goto	i2l825
 12853                           
 12854                           ;i2c1.c: 589: {
 12855                           ;i2c1.c: 591: *(p_i2c1_current->pTrFlag) = completion_code;
 12856  001E12  EE20 F003          	lfsr	2,3
 12857  001E16  5031               	movf	_p_i2c1_current,w,c
 12858  001E18  26D9               	addwf	fsr2l,f,c
 12859  001E1A  5032               	movf	_p_i2c1_current+1,w,c
 12860  001E1C  22DA               	addwfc	fsr2h,f,c
 12861  001E1E  CFDE F001          	movff	postinc2,??_I2C1_Stop
 12862  001E22  CFDD F002          	movff	postdec2,??_I2C1_Stop+1
 12863  001E26  C001  FFD9         	movff	??_I2C1_Stop,fsr2l
 12864  001E2A  C002  FFDA         	movff	??_I2C1_Stop+1,fsr2h
 12865  001E2E  C003  FFDF         	movff	I2C1_Stop@completion_code,indf2
 12866                           
 12867                           ;i2c1.c: 592: stateMsgI2c = completion_code;
 12868  001E32  C003  F072         	movff	I2C1_Stop@completion_code,_stateMsgI2c	;volatile
 12869  001E36                     i2l825:
 12870                           
 12871                           ;i2c1.c: 593: }
 12872                           ;i2c1.c: 596: i2c1_state = S_MASTER_IDLE;
 12873  001E36  0E00               	movlw	0
 12874  001E38  6E38               	movwf	_i2c1_state,c
 12875  001E3A  0012               	return		;funcret
 12876  001E3C                     __end_of_I2C1_Stop:
 12877                           	opt stack 0
 12878                           tosu	equ	0xFFF
 12879                           tosh	equ	0xFFE
 12880                           tosl	equ	0xFFD
 12881                           pclatu	equ	0xFFB
 12882                           pclath	equ	0xFFA
 12883                           tblptru	equ	0xFF8
 12884                           tblptrh	equ	0xFF7
 12885                           tblptrl	equ	0xFF6
 12886                           tablat	equ	0xFF5
 12887                           prodh	equ	0xFF4
 12888                           prodl	equ	0xFF3
 12889                           intcon	equ	0xFF2
 12890                           intcon2	equ	0xFF1
 12891                           intcon3	equ	0xFF0
 12892                           indf0	equ	0xFEF
 12893                           postinc0	equ	0xFEE
 12894                           fsr0h	equ	0xFEA
 12895                           fsr0l	equ	0xFE9
 12896                           wreg	equ	0xFE8
 12897                           indf1	equ	0xFE7
 12898                           fsr1h	equ	0xFE2
 12899                           fsr1l	equ	0xFE1
 12900                           bsr	equ	0xFE0
 12901                           indf2	equ	0xFDF
 12902                           postinc2	equ	0xFDE
 12903                           postdec2	equ	0xFDD
 12904                           fsr2h	equ	0xFDA
 12905                           fsr2l	equ	0xFD9
 12906                           status	equ	0xFD8
 12907                           
 12908 ;; *************** function _I2C1_FunctionComplete *****************
 12909 ;; Defined at:
 12910 ;;		line 564 in file "mcc_generated_files/i2c1.c"
 12911 ;; Parameters:    Size  Location     Type
 12912 ;;		None
 12913 ;; Auto vars:     Size  Location     Type
 12914 ;;		None
 12915 ;; Return value:  Size  Location     Type
 12916 ;;                  1    wreg      void 
 12917 ;; Registers used:
 12918 ;;		wreg, status,2, status,0
 12919 ;; Tracked objects:
 12920 ;;		On entry : 0/0
 12921 ;;		On exit  : 0/0
 12922 ;;		Unchanged: 0/0
 12923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12924 ;;      Params:         0       0       0       0       0       0       0
 12925 ;;      Locals:         0       0       0       0       0       0       0
 12926 ;;      Temps:          0       0       0       0       0       0       0
 12927 ;;      Totals:         0       0       0       0       0       0       0
 12928 ;;Total ram usage:        0 bytes
 12929 ;; Hardware stack levels used:    1
 12930 ;; This function calls:
 12931 ;;		Nothing
 12932 ;; This function is called by:
 12933 ;;		_I2C1_ISR
 12934 ;; This function uses a non-reentrant model
 12935 ;;
 12936                           
 12937                           	psect	text78
 12938  00222C                     __ptext78:
 12939                           	opt stack 0
 12940  00222C                     _I2C1_FunctionComplete:
 12941                           	opt stack 17
 12942                           
 12943                           ;i2c1.c: 568: p_i2c1_trb_current++;
 12944                           
 12945                           ;incstack = 0
 12946  00222C  0E05               	movlw	5
 12947  00222E  2633               	addwf	_p_i2c1_trb_current,f,c
 12948  002230  0E00               	movlw	0
 12949  002232  2234               	addwfc	_p_i2c1_trb_current+1,f,c
 12950                           
 12951                           ;i2c1.c: 571: if(--i2c1_trb_count == 0)
 12952  002234  2E37               	decfsz	_i2c1_trb_count,f,c
 12953  002236  D003               	goto	i2l820
 12954                           
 12955                           ;i2c1.c: 572: {
 12956                           ;i2c1.c: 573: i2c1_state = S_MASTER_SEND_STOP;
 12957  002238  0E04               	movlw	4
 12958  00223A  6E38               	movwf	_i2c1_state,c
 12959                           
 12960                           ;i2c1.c: 574: }
 12961  00223C  0012               	return	
 12962  00223E                     i2l820:
 12963                           
 12964                           ;i2c1.c: 575: else
 12965                           ;i2c1.c: 576: {
 12966                           ;i2c1.c: 577: i2c1_state = S_MASTER_RESTART;
 12967  00223E  0E01               	movlw	1
 12968  002240  6E38               	movwf	_i2c1_state,c
 12969  002242  0012               	return	
 12970  002244                     __end_of_I2C1_FunctionComplete:
 12971                           	opt stack 0
 12972                           tosu	equ	0xFFF
 12973                           tosh	equ	0xFFE
 12974                           tosl	equ	0xFFD
 12975                           pclatu	equ	0xFFB
 12976                           pclath	equ	0xFFA
 12977                           tblptru	equ	0xFF8
 12978                           tblptrh	equ	0xFF7
 12979                           tblptrl	equ	0xFF6
 12980                           tablat	equ	0xFF5
 12981                           prodh	equ	0xFF4
 12982                           prodl	equ	0xFF3
 12983                           intcon	equ	0xFF2
 12984                           intcon2	equ	0xFF1
 12985                           intcon3	equ	0xFF0
 12986                           indf0	equ	0xFEF
 12987                           postinc0	equ	0xFEE
 12988                           fsr0h	equ	0xFEA
 12989                           fsr0l	equ	0xFE9
 12990                           wreg	equ	0xFE8
 12991                           indf1	equ	0xFE7
 12992                           fsr1h	equ	0xFE2
 12993                           fsr1l	equ	0xFE1
 12994                           bsr	equ	0xFE0
 12995                           indf2	equ	0xFDF
 12996                           postinc2	equ	0xFDE
 12997                           postdec2	equ	0xFDD
 12998                           fsr2h	equ	0xFDA
 12999                           fsr2l	equ	0xFD9
 13000                           status	equ	0xFD8
 13001                           
 13002 ;; *************** function _I2C1_BusCollisionISR *****************
 13003 ;; Defined at:
 13004 ;;		line 730 in file "mcc_generated_files/i2c1.c"
 13005 ;; Parameters:    Size  Location     Type
 13006 ;;		None
 13007 ;; Auto vars:     Size  Location     Type
 13008 ;;		None
 13009 ;; Return value:  Size  Location     Type
 13010 ;;                  1    wreg      void 
 13011 ;; Registers used:
 13012 ;;		None
 13013 ;; Tracked objects:
 13014 ;;		On entry : 0/0
 13015 ;;		On exit  : 0/0
 13016 ;;		Unchanged: 0/0
 13017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13018 ;;      Params:         0       0       0       0       0       0       0
 13019 ;;      Locals:         0       0       0       0       0       0       0
 13020 ;;      Temps:          0       0       0       0       0       0       0
 13021 ;;      Totals:         0       0       0       0       0       0       0
 13022 ;;Total ram usage:        0 bytes
 13023 ;; Hardware stack levels used:    1
 13024 ;; This function calls:
 13025 ;;		Nothing
 13026 ;; This function is called by:
 13027 ;;		_INTERRUPT_InterruptManagerHigh
 13028 ;; This function uses a non-reentrant model
 13029 ;;
 13030                           
 13031                           	psect	text79
 13032  002314                     __ptext79:
 13033                           	opt stack 0
 13034  002314                     _I2C1_BusCollisionISR:
 13035                           	opt stack 18
 13036                           
 13037                           ;incstack = 0
 13038  002314  0012               	return		;funcret
 13039  002316                     __end_of_I2C1_BusCollisionISR:
 13040                           	opt stack 0
 13041                           tosu	equ	0xFFF
 13042                           tosh	equ	0xFFE
 13043                           tosl	equ	0xFFD
 13044                           pclatu	equ	0xFFB
 13045                           pclath	equ	0xFFA
 13046                           tblptru	equ	0xFF8
 13047                           tblptrh	equ	0xFF7
 13048                           tblptrl	equ	0xFF6
 13049                           tablat	equ	0xFF5
 13050                           prodh	equ	0xFF4
 13051                           prodl	equ	0xFF3
 13052                           intcon	equ	0xFF2
 13053                           intcon2	equ	0xFF1
 13054                           intcon3	equ	0xFF0
 13055                           indf0	equ	0xFEF
 13056                           postinc0	equ	0xFEE
 13057                           fsr0h	equ	0xFEA
 13058                           fsr0l	equ	0xFE9
 13059                           wreg	equ	0xFE8
 13060                           indf1	equ	0xFE7
 13061                           fsr1h	equ	0xFE2
 13062                           fsr1l	equ	0xFE1
 13063                           bsr	equ	0xFE0
 13064                           indf2	equ	0xFDF
 13065                           postinc2	equ	0xFDE
 13066                           postdec2	equ	0xFDD
 13067                           fsr2h	equ	0xFDA
 13068                           fsr2l	equ	0xFD9
 13069                           status	equ	0xFD8
 13070                           tosu	equ	0xFFF
 13071                           tosh	equ	0xFFE
 13072                           tosl	equ	0xFFD
 13073                           pclatu	equ	0xFFB
 13074                           pclath	equ	0xFFA
 13075                           tblptru	equ	0xFF8
 13076                           tblptrh	equ	0xFF7
 13077                           tblptrl	equ	0xFF6
 13078                           tablat	equ	0xFF5
 13079                           prodh	equ	0xFF4
 13080                           prodl	equ	0xFF3
 13081                           intcon	equ	0xFF2
 13082                           intcon2	equ	0xFF1
 13083                           intcon3	equ	0xFF0
 13084                           indf0	equ	0xFEF
 13085                           postinc0	equ	0xFEE
 13086                           fsr0h	equ	0xFEA
 13087                           fsr0l	equ	0xFE9
 13088                           wreg	equ	0xFE8
 13089                           indf1	equ	0xFE7
 13090                           fsr1h	equ	0xFE2
 13091                           fsr1l	equ	0xFE1
 13092                           bsr	equ	0xFE0
 13093                           indf2	equ	0xFDF
 13094                           postinc2	equ	0xFDE
 13095                           postdec2	equ	0xFDD
 13096                           fsr2h	equ	0xFDA
 13097                           fsr2l	equ	0xFD9
 13098                           status	equ	0xFD8
 13099                           
 13100                           	psect	text80
 13101  000000                     __ptext80:
 13102                           	opt stack 0
 13103                           tosu	equ	0xFFF
 13104                           tosh	equ	0xFFE
 13105                           tosl	equ	0xFFD
 13106                           pclatu	equ	0xFFB
 13107                           pclath	equ	0xFFA
 13108                           tblptru	equ	0xFF8
 13109                           tblptrh	equ	0xFF7
 13110                           tblptrl	equ	0xFF6
 13111                           tablat	equ	0xFF5
 13112                           prodh	equ	0xFF4
 13113                           prodl	equ	0xFF3
 13114                           intcon	equ	0xFF2
 13115                           intcon2	equ	0xFF1
 13116                           intcon3	equ	0xFF0
 13117                           indf0	equ	0xFEF
 13118                           postinc0	equ	0xFEE
 13119                           fsr0h	equ	0xFEA
 13120                           fsr0l	equ	0xFE9
 13121                           wreg	equ	0xFE8
 13122                           indf1	equ	0xFE7
 13123                           fsr1h	equ	0xFE2
 13124                           fsr1l	equ	0xFE1
 13125                           bsr	equ	0xFE0
 13126                           indf2	equ	0xFDF
 13127                           postinc2	equ	0xFDE
 13128                           postdec2	equ	0xFDD
 13129                           fsr2h	equ	0xFDA
 13130                           fsr2l	equ	0xFD9
 13131                           status	equ	0xFD8
 13132                           
 13133                           	psect	rparam
 13134  0000                     tosu	equ	0xFFF
 13135                           tosh	equ	0xFFE
 13136                           tosl	equ	0xFFD
 13137                           pclatu	equ	0xFFB
 13138                           pclath	equ	0xFFA
 13139                           tblptru	equ	0xFF8
 13140                           tblptrh	equ	0xFF7
 13141                           tblptrl	equ	0xFF6
 13142                           tablat	equ	0xFF5
 13143                           prodh	equ	0xFF4
 13144                           prodl	equ	0xFF3
 13145                           intcon	equ	0xFF2
 13146                           intcon2	equ	0xFF1
 13147                           intcon3	equ	0xFF0
 13148                           indf0	equ	0xFEF
 13149                           postinc0	equ	0xFEE
 13150                           fsr0h	equ	0xFEA
 13151                           fsr0l	equ	0xFE9
 13152                           wreg	equ	0xFE8
 13153                           indf1	equ	0xFE7
 13154                           fsr1h	equ	0xFE2
 13155                           fsr1l	equ	0xFE1
 13156                           bsr	equ	0xFE0
 13157                           indf2	equ	0xFDF
 13158                           postinc2	equ	0xFDE
 13159                           postdec2	equ	0xFDD
 13160                           fsr2h	equ	0xFDA
 13161                           fsr2l	equ	0xFD9
 13162                           status	equ	0xFD8
 13163                           
 13164                           	psect	temp
 13165  000048                     btemp:
 13166                           	opt stack 0
 13167  000048                     	ds	1
 13168  0000                     int$flags	set	btemp
 13169  0000                     wtemp6	set	btemp+1
 13170                           tosu	equ	0xFFF
 13171                           tosh	equ	0xFFE
 13172                           tosl	equ	0xFFD
 13173                           pclatu	equ	0xFFB
 13174                           pclath	equ	0xFFA
 13175                           tblptru	equ	0xFF8
 13176                           tblptrh	equ	0xFF7
 13177                           tblptrl	equ	0xFF6
 13178                           tablat	equ	0xFF5
 13179                           prodh	equ	0xFF4
 13180                           prodl	equ	0xFF3
 13181                           intcon	equ	0xFF2
 13182                           intcon2	equ	0xFF1
 13183                           intcon3	equ	0xFF0
 13184                           indf0	equ	0xFEF
 13185                           postinc0	equ	0xFEE
 13186                           fsr0h	equ	0xFEA
 13187                           fsr0l	equ	0xFE9
 13188                           wreg	equ	0xFE8
 13189                           indf1	equ	0xFE7
 13190                           fsr1h	equ	0xFE2
 13191                           fsr1l	equ	0xFE1
 13192                           bsr	equ	0xFE0
 13193                           indf2	equ	0xFDF
 13194                           postinc2	equ	0xFDE
 13195                           postdec2	equ	0xFDD
 13196                           fsr2h	equ	0xFDA
 13197                           fsr2l	equ	0xFD9
 13198                           status	equ	0xFD8


Data Sizes:
    Strings     316
    Constant    10
    Data        4
    BSS         154
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      71
    BANK0           160     52     143
    BANK1           256     40      92
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    i2c1_tr_queue.pTrFlag	PTR enum E6972 size(2) Largest target is 0
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK1[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_23(CODE[3]), STR_22(CODE[3]), STR_19(CODE[3]), STR_16(CODE[4]), 
		 -> STR_15(CODE[4]), STR_14(CODE[15]), STR_13(CODE[15]), STR_12(CODE[15]), 
		 -> STR_11(CODE[22]), STR_10(CODE[22]), STR_4(CODE[3]), STR_2(CODE[17]), 
		 -> STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 42
		 -> strLCD(BANK1[42]), i2cWriteBlock(BANK1[10]), strUSART(BANK0[42]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_sprintf(BANK0[2]), ?_sprintf(BANK1[2]), 

    escreveLinhaLCD@texto	PTR unsigned char  size(2) Largest target is 42
		 -> STR_21(CODE[21]), STR_20(CODE[21]), STR_18(CODE[21]), STR_17(CODE[21]), 
		 -> STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[22]), STR_6(CODE[22]), 
		 -> STR_5(CODE[22]), strLCD(BANK1[42]), STR_3(CODE[20]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 42
		 -> STR_21(CODE[21]), STR_20(CODE[21]), STR_18(CODE[21]), STR_17(CODE[21]), 
		 -> STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[22]), STR_6(CODE[22]), 
		 -> STR_5(CODE[22]), strLCD(BANK1[42]), STR_3(CODE[20]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 10
		 -> i2cWriteBlock(BANK1[10]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterWrite@trBlock(BANK0[5]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E6972 size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E6972 size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 

    F7416.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    I2C1_MasterWrite@pflag	PTR enum E6972 size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(2) Largest target is 10
		 -> i2cWriteBlock(BANK1[10]), 

    F7411.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 1535
		 -> NULL(NULL[0]), RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E6972 size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    S1562$pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    S1566$pTrFlag	PTR enum E6972 size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    p_i2c1_current.pTrFlag	PTR enum E6972 size(2) Largest target is 1535
		 -> RAM(DATA[1535]), i2cWriteBlock(BANK1[10]), 

    S1566$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), NULL(NULL[0]), 

    S1577$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    S1577$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in COMRAM

    _INTERRUPT_InterruptManagerLow->_ADC_ISR
    _ADC_ISR->___ftmul
    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv
    ___lbtoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _INTERRUPT_InterruptManagerHigh->_I2C1_ISR
    _TMR0_ISR->_EPWM1_LoadDutyValue
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK0

    _INTERRUPT_InterruptManagerLow->_ADC_ISR
    _ADC_ISR->i1_sprintf

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    _menu->_defTempAlarme
    _testeTeclado->_sprintf
    _monitorizacao->_sprintf
    _feedbackUSART->_escreveLinhaLCD
    _defTempAlarme->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _escreveLinhaLCD->_putsXLCD
    _putsXLCD->_WriteDataXLCD
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _OpenXLCD->_DelayPORXLCD
    _OpenXLCD->_DelayXLCD
    _OpenXLCD->_WriteCmdXLCD

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   32328
                           _BusyXLCD
                           _OpenXLCD
                  _SYSTEM_Initialize
                       _WriteCmdXLCD
                               _menu
 ---------------------------------------------------------------------------------
 (1) _menu                                                 0     0      0   31720
                      _defTempAlarme
                    _escreveLinhaLCD
                      _feedbackUSART
                      _monitorizacao
                            _sprintf
                       _testeTeclado
 ---------------------------------------------------------------------------------
 (2) _testeTeclado                                         1     1      0    7253
                                             35 BANK1      1     1      0
                    _escreveLinhaLCD
                         _getKBInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _monitorizacao                                        0     0      0    7219
                    _escreveLinhaLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _feedbackUSART                                        0     0      0    2324
                           _BusyXLCD
                      _EUSART1_Write
                       _WriteCmdXLCD
                    _escreveLinhaLCD
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _defTempAlarme                                        5     5      0    7705
                                             35 BANK1      5     5      0
                    _escreveLinhaLCD
                         _getKBInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             27    21      6    4988
                                             12 BANK1     23    17      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     418
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              7 BANK1      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (3) _getKBInput                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _escreveLinhaLCD                                      3     1      2    2231
                                              3 BANK1      3     1      2
                           _BusyXLCD
                       _WriteCmdXLCD
                           _putsXLCD
 ---------------------------------------------------------------------------------
 (4) _putsXLCD                                             2     0      2     217
                                              1 BANK1      2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (5) _WriteDataXLCD                                        1     1      0      62
                                              0 BANK1      1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     484
                     _ADC_Initialize
                   _EPWM1_Initialize
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     121
                                              2 BANK1      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     363
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenXLCD                                             1     1      0      62
                           _BusyXLCD
                      _DelayFor18TCY
                       _DelayPORXLCD
                          _DelayXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (4) _WriteCmdXLCD                                         1     1      0      62
                                              0 BANK1      1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _DelayXLCD                                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DelayPORXLCD                                         1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (6) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManagerLow                       21    21      0   19782
                                             31 BANK0     21    21      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                 10    10      0     201
                                             23 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              6     6      0   19581
                                             44 COMRAM     2     2      0
                                             27 BANK0      4     4      0
            _ADC_GetConversionResult
                   _I2C1_MasterWrite
                           ___awtoft
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                    i1_EUSART1_Write
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (9) i1_sprintf                                           35    21     14    2580
                                             35 COMRAM     4     4      0
                                              0 BANK0     27    13     14
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
 ---------------------------------------------------------------------------------
 (10) i1_isdigit                                           3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     296
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1___lwmod                                           5     1      4     302
                                             30 COMRAM     5     1      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     311
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) i1_EUSART1_Write                                      1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) ___lbtoft                                             4     1      3    2924
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     404
                                             23 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4854
                                              0 BANK0      6     0      6
                            ___ftadd
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    4438
                                             31 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    3701
                                             35 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     288
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    3116
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2893
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _I2C1_MasterWrite                                     7     0      7    1590
                                             32 COMRAM     7     0      7
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (10) _I2C1_MasterWriteTRBBuild                            9     2      7     436
                                             23 COMRAM     9     2      7
 ---------------------------------------------------------------------------------
 (10) _I2C1_MasterTRBInsert                                6     2      4     436
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManagerHigh                     18    18      0     262
                                              5 COMRAM    18    18      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0     218
                   Absolute function *
                _ADC_StartConversion
                _EPWM1_LoadDutyValue
       _TMR0_DefaultInterruptHandler *
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (14) _TMR2_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR2_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR2_LoadPeriodRegister                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EPWM1_LoadDutyValue                                 4     2      2     196
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (14) _ADC_StartConversion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (14) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (14) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
                      _INT0_CallBack
 ---------------------------------------------------------------------------------
 (14) _INT0_CallBack                                       0     0      0       0
                   Absolute function *
       _INT0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _INT0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C1_ISR                                            2     2      0      44
                                              3 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (14) _I2C1_Stop                                           3     3      0      44
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (14) _I2C1_FunctionComplete                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C1_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyXLCD
     _DelayFor18TCY
   _OpenXLCD
     _BusyXLCD
       _DelayFor18TCY
     _DelayFor18TCY
     _DelayPORXLCD
     _DelayXLCD
     _WriteCmdXLCD
       _DelayFor18TCY
   _SYSTEM_Initialize
     _ADC_Initialize
     _EPWM1_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
   _WriteCmdXLCD
     _DelayFor18TCY
   _menu
     _defTempAlarme
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
       _getKBInput
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _escreveLinhaLCD
       _BusyXLCD
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
       _putsXLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteDataXLCD
           _DelayFor18TCY
     _feedbackUSART
       _BusyXLCD
         _DelayFor18TCY
       _EUSART1_Write
       _WriteCmdXLCD
         _DelayFor18TCY
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
     _monitorizacao
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _testeTeclado
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
       _getKBInput
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _INTERRUPT_InterruptManagerLow (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _I2C1_MasterWrite
       _I2C1_MasterTRBInsert
       _I2C1_MasterWriteTRBBuild
     ___awtoft
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftsub
       ___ftadd
         ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
     i1_EUSART1_Write
     i1_sprintf
       i1___lwdiv
       i1___lwmod
         i1___lwdiv (ARG)
       i1___wmul
       i1_isdigit
   _EUSART1_Receive_ISR

 _INTERRUPT_InterruptManagerHigh (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _INT0_ISR
     _INT0_CallBack
       Absolute function(Fake) *
       _INT0_DefaultInterruptHandler *
   _INT1_ISR
     _INT1_CallBack
       Absolute function(Fake) *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR
     _INT2_CallBack
       Absolute function(Fake) *
       _INT2_DefaultInterruptHandler *
   _TMR0_ISR
     Absolute function(Fake) *
     _ADC_StartConversion *
     _EPWM1_LoadDutyValue *
     _TMR0_DefaultInterruptHandler *
     _TMR2_LoadPeriodRegister *
     _TMR2_StartTimer *
     _TMR2_StopTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     28      5C       6       35.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     34      8F       4       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132       9        0.0%
DATA                 0      0     132      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 26 03:04:25 2017

                             _stateMsgI2c 0072                             _i2cWriteBlock 012A  
                                       _i 0076                                         _j 0040  
                                      bsr 000FE0                       ___wmul@multiplicand 0136  
                        i1___wmul@product 001C                           _timer0ReloadVal 0044  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 002B                              ___ftadd@exp2 002A  
                            ___ftadd@sign 0029                                       l901 1798  
                                     l910 17C2                                       l920 1B06  
                                     l921 1AD2                                       l915 1F18  
                                     l907 17B2                                       l895 1778  
                                     l898 1788                              __CFG_CPB$OFF 000000  
                                     _PR2 000FBB                              __CFG_CPD$OFF 000000  
              ??_INT0_SetInterruptHandler 0136                           __end_of_ADC_ISR 0B22  
                   __size_of_WriteCmdXLCD 0044                           _TMR2_Initialize 2290  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                             _INT0_CallBack 219A  
                            __CFG_LVP$OFF 000000                             _INT1_CallBack 2178  
                        __end_of_I2C1_ISR 08EE                                      l1100 0F4C  
                                    l1101 0F2C                                      l1102 0EF6  
                                    l1103 0F3A                                      l1200 00EC  
                                    l1104 0F14                                      l1040 1E44  
                                    l1201 0106                                      l1210 0258  
                                    l1106 0F80                                      l1211 0192  
                                    l1203 0130                                      l1043 1E54  
                                    l1220 0204                                      l1212 01AA  
                                    l1108 0FD8                                      l1205 022A  
                                    l1221 0218                                      l1142 1A82  
                                    l1222 0282                                      l1214 01C4  
                                    l1118 1A68                                      l1070 1012  
                                    l1046 1E64                                      l1215 01B4  
                                    l1127 1272                                      l1119 1A36  
                                    l1063 0FFE                                      l1152 1A9E  
                                    l1136 1A74                                      l1232 033A  
                                    l1128 1326                                      l1080 1094  
                                    l1072 1022                                      l1048 1E74  
                                    l1233 0396                                      l1217 01F2  
                                    l1081 10A6                                      l1073 102C  
                                    l1058 1FDA                                      l1162 1ABA  
                                    l1234 0340                                      l1226 02CC  
                                    l1218 01D6                                      l1090 10F0  
                                    l1074 103C                                      l1066 1006  
                                    l1147 1A90                                      l1227 02F0  
                                    l1171 1618                                      l1091 10F6  
                                    l1075 10DA                                      l1164 1ACC  
                                    l1228 02F8                                      l1172 1564  
                                    l1076 10B8                                      l1157 1AAC  
                                    l1077 1070                                      l1182 15F8  
                                    l1174 156E                                      l1086 10FC  
                                    l1078 10D4                                      l1087 10E4  
                                    l1079 1082                                      l1176 1580  
                                    l1088 1118                                      l1089 10EA  
                                    l1178 15DC                                      l1179 15AE  
                                    l1099 0EEC                                      l1650 1B6E  
                                    l1651 1B78                                      l1660 1C96  
                                    l1661 1CA0                                      l1646 1B4E  
                                    l1647 1B46                                      l1567 212C  
                                    l1656 1C7E                                      l1657 1C76  
                                    l5710 01B4                                      l6158 1578  
                                    l5802 22A4                                      l5716 01D6  
                                    l5806 1FC8                                      l5748 0286  
                                    STR_1 7EC3                                      STR_2 7FC6  
                                    STR_3 7FB2                                      STR_4 7FFC  
                                    STR_5 7EDA                                      STR_6 7F06  
                                    STR_7 7F1C                                      STR_8 7EF0  
                                    STR_9 7FB2                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u6130 0300                                      u6300 1AB6  
                                    u6140 031E                                      u6160 039E  
                                    u6170 03B6                                      u6090 02B2  
                                    u7300 100A                                      u7320 1016  
                                    u7250 17A2                                      u5810 1AFC  
                                    u5820 1B26                                      u5817 1AF2  
                                    u7370 10DE                                      u7507 213C  
                                    u5827 1B1C                                      u6660 0FDE  
                                    u7517 214C                                      u5950 1B52  
                                    u6750 1322                                      u6830 15A8  
                                    u7527 2246                                      u6680 0FE8  
                                    u7537 224C                                      u5980 1C82  
                                    u6860 161C                                      u6780 1A6C  
                                    u7487 1358                                      u7497 2286  
                                    _TMR2 000FBC                                      _WPUB 000F61  
                           _INT2_CallBack 2156                             _EUSART1_Write 22A0  
                                    _main 1E3C                              ___ftpack@arg 0018  
                                    _menu 0FEE                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 22F8                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      indf0 000FEF  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                  ??_I2C1_MasterTRBInsert 001C                                      btemp 0048  
                           __CFG_BORV$190 000000         __size_of_INT2_SetInterruptHandler 000A  
               ?_INT2_SetInterruptHandler 0134                    __size_of_WriteDataXLCD 0044  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                   ??_EPWM1_LoadDutyValue 0003                              ___ftmul@cntr 00B5  
                            ___param_bank 000000                              ___ftmul@sign 00B6  
          I2C1_MasterWriteTRBBuild@length 001C                  __size_of_escreveLinhaLCD 002E  
                            ___fttol@exp1 0026                              ___fttol@lval 0022  
                            _WriteCmdXLCD 1CEE                   __end_of_TMR0_Initialize 1EF2  
                              _i2c1_state 0038                          __end_of_INT0_ISR 2076  
                        __end_of_INT1_ISR 204A                          __end_of_INT2_ISR 201E  
          ??_TMR0_DefaultInterruptHandler 0001            __size_of_OSCILLATOR_Initialize 000E  
               I2C1_MasterTRBInsert@count 001D             __end_of_OSCILLATOR_Initialize 22BC  
               I2C1_MasterTRBInsert@pflag 001A                                     ?_main 0001  
                                   ?_menu 0001                         __end_of_I2C1_Stop 1E3C  
                         __end_of___ftadd 0E92                                     STR_10 7F32  
                                   STR_11 7F48                                     STR_12 7FE6  
                                   STR_20 7F9D                                     STR_13 7FD7  
                                   STR_21 7F73                                     STR_14 7FD7  
                                   STR_22 7FF9                                     STR_23 7FF9  
                                   STR_15 7FF5                                     STR_16 7FF5  
                                   STR_17 7F88                                     STR_18 7F5E  
                                   STR_19 7FF9                           __end_of___ftmul 145E  
                                   _T0CON 000FD5                           __end_of___ftsub 1DFA  
                         __end_of___fttol 1552                                     _T2CON 000FBA  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwdiv 1B82  
                                   i1l133 007A                                     i1l135 0084  
                                   i2l120 1698                           __end_of___lwmod 1CAA  
                                   i2l122 16A4                                     i2l124 16B0  
                                   i2l116 1680                                     i2l214 2026  
                                   i2l126 16BA                                     i2l118 168C  
                                   i1l550 0A22                                     i2l215 202E  
                                   i2l231 1FFA                                     i1l551 09F4  
                                   i2l216 2036                                     i2l232 2002  
                                   i2l217 203E                                     i2l233 200A  
                                   i1l553 0A4C                                     i2l250 2062  
                                   i2l234 2012                                     i1l554 0A54  
                                   i2l251 206A                                     i1l555 0AD8  
                                   i1l661 0C7C                                     i1l831 1C12  
                                   i1l559 0B16                                     i1l647 0B2A  
                                   i2l248 2052                                     i1l648 0BF4  
                                   i2l249 205A                                     i1l649 0B7A  
                                   i1l658 0BF2                                     i1l843 18FC  
                                   i2l380 1222                                     i1l844 18E8  
                                   i2l373 1182                                     i2l374 119C  
                                   i1l846 1908                                     i2l375 11BC  
                                   i2l384 1238                                     i2l376 11E2  
                                   i2l801 0800                                     i2l377 120E  
                                   i2l802 0812                                     i2l378 125E  
                                   i2l811 0862                                     i2l379 124E  
                                   i2l820 223E                                     i2l812 086A  
                                   i2l804 0836                                     i2l813 088A  
                                   i2l805 082E                                     i2l814 0890  
                                   i2l815 0894                                     i2l808 0848  
                                   i2l825 1E36                                     i2l817 089C  
                                   i2l809 085A                                     i2l781 0726  
                                   i2l790 0774                                     i2l782 0736  
                                   i2l791 0784                                     i2l784 073E  
                                   i2l793 07B2                                     i2l785 0746  
                                   i2l778 08A8                                     i2l786 0756  
                                   i2l795 07EC                                     i2l779 06DA  
                                   i2l788 076E                                     i2l799 07FA  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _PORTD 000F83                                     _TRISA 000F92  
                                   _TRISB 000F93                            ?_INT0_CallBack 0001  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                                i1isdigit@c 001A  
        __size_of_ADC_GetConversionResult 0014         __size_of_TMR0_SetInterruptHandler 000A  
            __end_of_I2C1_BusCollisionISR 2316                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 0134                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ??_I2C1_Initialize 0134  
                        __end_of_TMR0_ISR 126C                     __end_of_feedbackUSART 162C  
                           __CFG_WRTB$OFF 000000                        i1___lwmod@dividend 001F  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          ?_INT1_CallBack 0001                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                           __end_of_dpowers 7EC3  
          ??_INT1_DefaultInterruptHandler 0001                           __end_of_isdigit 2134  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                          ?_INT2_CallBack 0001                  _INT1_SetInterruptHandler 22DC  
                          ?_EUSART1_Write 0001                                     pclath 000FFA  
                                   tablat 000FF5                          __end_ofi1___wmul 20EE  
                                   status 000FD8                       i1___wmul@multiplier 0018  
                                   wtemp6 0049                           __end_of_sprintf 03C4  
                          __CFG_HFOFST$ON 000000                           _TMR2_StartTimer 2300  
        __size_of_TMR2_LoadPeriodRegister 0008                            __CFG_FOSC$ECMP 000000  
                      __size_ofi1___lwdiv 0052            ?_INTERRUPT_InterruptManagerLow 0001  
                      __size_ofi1___lwmod 0042                            __CFG_PBADEN$ON 000000  
         I2C1_MasterWriteTRBBuild@address 001D                           __initialization 19B2  
                   I2C1_MasterWrite@pdata 0021                     I2C1_MasterWrite@pflag 0026  
              __end_of_EUSART1_Initialize 2214                              __end_of_main 1E7A  
                            __end_of_menu 1130                          __end_of_BusyXLCD 1F2C  
                      __size_ofi1_isdigit 001E                        __size_of_DelayXLCD 0012  
                   __size_of_DelayPORXLCD 0022                   __end_of_TMR2_Initialize 22A0  
                               ??_ADC_ISR 002D                                i1sprintf@c 00CB  
                              i1sprintf@f 00B3                          __end_of_OpenXLCD 17D4  
                             _i2c1_object 0060                                    ??_main 015C  
                           ___fttol@sign1 0021                                    ??_menu 015C  
                      __size_ofi1_sprintf 02E0                             __activetblptr 000002  
                           _WriteDataXLCD 1CAA                   __end_of_TMR0_StartTimer 22FC  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _CCPR1H 000FBF  
                                  _CCPR1L 000FBE                          __end_of___awtoft 1F64  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 1882  
                        __end_of___lbtoft 2112                                    i1l1200 03D0  
                                  i1l1201 03EA                                    i1l1210 053A  
                                  i1l1211 0474                                    i1l1203 0414  
                                  i1l1220 04E6                                    i1l1212 048C  
                                  i1l1205 050C                                    i1l1221 04FA  
                                  i1l1222 0564                                    i1l1214 04A6  
                                  i1l1215 0496                                    i1l1232 061C  
                                  i1l1233 0676                                    i1l1217 04D4  
                                  i1l1234 0622                                    i1l1226 05AE  
                                  i1l1218 04B8                                    i1l1227 05D2  
                                  i1l1228 05DA                                    i1l1510 0E3C  
                                  i1l1511 0E6C                                    i1l1433 1F40  
                                  i1l1506 0DFC                                    i1l1531 1392  
                                  i1l1507 0DF2                                    i1l1452 17FC  
                                  i1l1524 1952                                    i1l1453 17F2  
                                  i1l1525 1982                                    i1l1533 13BA  
                                  i1l1509 0E20                                    i1l1534 13EC  
                                  i1l1455 1830                                    i1l1535 13FC  
                                  i1l1456 181A                                    i1l1560 1524  
                                  i1l1552 148A                                    i1l1537 1414  
                                  i1l1561 1518                                    i1l1458 1858  
                                  i1l1538 1424                                    i1l1554 1500  
                                  i1l1650 1BC0                                    i1l1459 184E  
                                  i1l1483 0D38                                    i1l1563 1540  
                                  i1l1555 14F0                                    i1l1651 1BCA  
                                  i1l4052 18E8                                    i1l1492 0DC8  
                                  i1l1548 1DD0                                    i1l1660 1DA4  
                                  i1l1661 1DAE                                    i1l1646 1BA0  
                                  i1l1487 0D62                                    i1l1647 1B98  
                                  i1l1567 21F2                                    i1l1656 1D8C  
                                  i1l1497 0DBE                                    i1l1657 1D84  
                                  i1l4058 1908                                    i1l1498 0DB4  
                                  i1l3702 19AE                                    i1l5160 0C7C  
                                  i1l4634 22BE                                    i1l6328 0568  
                                  i1l6290 0496                            __CFG_WDTEN$OFF 000000  
                                  i1l6296 04B8                                    i2l4938 0726  
                                  u424_21 146E                                    _RCREG1 000FAE  
                                  _RCSTA1 000FAB                                    _OSCCON 000FD3  
                                  u635_21 0CF6                                    u636_21 0D0A  
                                  u690_21 13A2                                    _SPBRG1 000FAF  
                                  u688_21 1378                                    _TXREG1 000FAD  
                           i1sprintf@flag 00C2                                    _TXSTA1 000FAC  
                           i1sprintf@prec 00C1                         ?_I2C1_MasterWrite 0021  
                            _DelayPORXLCD 2134                           i1_EUSART1_Write 22BC  
                          __CFG_XINST$OFF 000000                                    _WrEnFl 0039  
                      ??_I2C1_MasterWrite 0028                              _CCPTMRS0bits 000F49  
                          _p_i2c1_current 0031                                    ___ftge 1922  
                                  _binADC 0070                                    _clk1Hz 003D  
                                  _clk2Hz 003E                                    _clk4Hz 003F  
                                  ___wmul 20A0                                 ??___ftadd 0026  
                          __CFG_STVREN$ON 000000                                    _alarme 0075  
                               ??___ftmul 002A                                 ??___ftsub 002C  
                               ??___fttol 001C                                 ??___lwdiv 0138  
                               ??___lwmod 013F                     EUSART1_Receive_ISR@i1 001D  
                   EUSART1_Receive_ISR@i2 001F                ??_I2C1_MasterWriteTRBBuild 001F  
                        ?_TMR0_Initialize 0001                                    _regNum 006A  
                               ?_I2C1_ISR 0001                                    clear_0 19E8  
                                  clear_1 19F4                                    clear_2 1A00  
                                  _strLCD 0100                                    _update 00EE  
                         ??_INT0_CallBack 0001                            ?_WriteDataXLCD 0001  
                   ___ftmul@f3_as_product 00B2                         ??_escreveLinhaLCD 0139  
    __end_of_INT2_DefaultInterruptHandler 2310     __size_of_INT2_DefaultInterruptHandler 0002  
                       __end_ofi1___lwdiv 1BD4              _INT2_DefaultInterruptHandler 230E  
                            __pdataCOMRAM 0046                         __end_ofi1___lwmod 1DB8  
                               ??_isdigit 0134                           ??_INT1_CallBack 0001  
                            __mediumconst 7EB8                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                        __end_of_putsXLCD 1B2E                           ??_INT2_CallBack 0001  
                         ??_EUSART1_Write 0134                   __end_of_TMR2_StartTimer 2304  
TMR0_SetInterruptHandler@InterruptHandler 0134  INT0_SetInterruptHandler@InterruptHandler 0134  
INT2_SetInterruptHandler@InterruptHandler 0134  INT1_SetInterruptHandler@InterruptHandler 0134  
                               ??_sprintf 0146             I2C1_MasterWriteTRBBuild@pdata 001A  
                   __end_of_monitorizacao 0FEE                         __end_ofi1_isdigit 21FA  
           __size_of_INTERRUPT_Initialize 0012                         __end_of_DelayXLCD 2290  
        ??_INTERRUPT_InterruptManagerHigh 0006           ?_INTERRUPT_InterruptManagerHigh 0001  
                       _SYSTEM_Initialize 2076                                __accesstop 0060  
                 __end_of__initialization 1A06                                 ?_INT0_ISR 0001  
                               ?_INT1_ISR 0001                                 ?_INT2_ISR 0001  
                              ___ftadd@f1 0020                                ___ftadd@f2 0023  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                         __end_ofi1_sprintf 06A4  
                           ___rparam_used 000001                    __size_of_defTempAlarme 00FC  
                          _i2c1_trb_count 0037                                ___awtoft@c 0020  
                              ___lbtoft@c 0023                                ___ftmul@f1 0024  
                              ___ftmul@f2 0027                     _I2C1_FunctionComplete 222C  
                    _I2C1_BusCollisionISR 2314                         ?_EPWM1_Initialize 0001  
                              ___ftsub@f1 00B1                                ___ftsub@f2 00B4  
                              ___fttol@f1 0018              __size_of_ADC_StartConversion 0004  
                          __pcstackCOMRAM 0001                    I2C1_MasterWrite@length 0023  
                            __pidataBANK0 230A                       ??_SYSTEM_Initialize 0138  
                               ?_TMR0_ISR 0001                        ??_EPWM1_Initialize 0134  
                              ??_I2C1_ISR 0004                          ?_TMR2_Initialize 0001  
                               ?i1___wmul 0018                   _ADC_GetConversionResult 2258  
             __size_of_EXT_INT_Initialize 003E                               i1sprintf@ap 00C3  
                             i1sprintf@cp 00BF                               i1sprintf@sp 00B1  
        __end_of_INT2_SetInterruptHandler 22DC               __end_of_EUSART1_Receive_ISR 0CE6  
           ?_INT2_DefaultInterruptHandler 0001                          ?_TMR0_StartTimer 0001  
               __end_of_SYSTEM_Initialize 20A0                    __size_of_DelayFor18TCY 0014  
                            sprintf@width 0154                                __pbssBANK0 0060  
                              __pbssBANK1 0100                                 ?_BusyXLCD 0001  
                 __end_ofi1_EUSART1_Write 22C8                                _getKBInput 1A72  
                         __CFG_PLLCFG$OFF 000000                   _TMR2_LoadPeriodRegister 22F0  
                         WriteCmdXLCD@cmd 0134                     _INT0_InterruptHandler 00E7  
                              ??_INT0_ISR 0001                                ??_INT1_ISR 0001  
                              ??_INT2_ISR 0001                                __pnvCOMRAM 0044  
                               ?_OpenXLCD 0001                     ?_I2C1_BusCollisionISR 0001  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
                       WriteDataXLCD@data 0134          __end_of_TMR0_SetInterruptHandler 22D2  
                                 ?___wmul 0134                                ??_TMR0_ISR 0005  
                      __CFG_CCP3MX$PORTB5 000000                           _I2C1_Initialize 1F64  
                                 _CCP1CON 000FBD                           ??_WriteDataXLCD 0134  
                                 _ECCP1AS 000FB6                                   _ADC_ISR 08EE  
                               ?___awtoft 0020                                 ?___ftpack 0018  
                               ?___lbtoft 0020                   __size_of_ADC_Initialize 0018  
                              ??i1___wmul 001C                ??_INT1_SetInterruptHandler 0136  
                           _defTempAlarme 126C                                   _OSCCON2 000FD2  
                               _I2C1_Stop 1DFA                                   _OSCTUNE 000F9B  
                                 _PWM1CON 000FB7                                   _SPBRGH1 000FB0  
                                 _SSP1ADD 000FC8                                   _SSP1BUF 000FC9  
                 __size_of_TMR2_StopTimer 0004                          ?_TMR2_StartTimer 0001  
                              ??_BusyXLCD 0134               __end_of_EPWM1_LoadDutyValue 1FC4  
                          i1sprintf@width 00C9             I2C1_MasterTRBInsert@ptrb_list 0018  
       __size_of_INT0_SetInterruptHandler 000A                 ?_INT0_SetInterruptHandler 0134  
                              ??_OpenXLCD 0135                           __CFG_PWRTEN$OFF 000000  
                  ?_I2C1_FunctionComplete 0001                                   __Hparam 0000  
           __size_of_I2C1_MasterTRBInsert 00A0                                   __Lparam 0000  
                      _p_i2c1_trb_current 0033                           __size_of___ftge 0090  
                           _DelayFor18TCY 2244                                   ___ftadd 0CE6  
                         __size_of___wmul 0028                                   ___ftmul 1368  
                                 ___ftsub 1DB8                                   ___fttol 145E  
                               ?_putsXLCD 0135                                   ___lwdiv 1B2E  
                                 ___lwmod 1C66                 ??_ADC_GetConversionResult 001A  
                                 __pcinit 19B2                                ??___awtoft 0023  
                              ??___ftpack 001D                                ??___lbtoft 0023  
                                 __ramtop 0600                                   __ptext0 1E3C  
                                 __ptext1 0FEE                                   __ptext2 1A14  
                                 __ptext3 0E92                                   __ptext4 1552  
                                 __ptext5 22A0                                   __ptext6 126C  
                                 __ptext7 00E0                                   __ptext8 2112  
                                 __ptext9 20A0                                   _memAddr 006E  
                               _T0CONbits 000FD5                            ?_defTempAlarme 0001  
                                 _dpowers 7EB9                         i1___lwdiv@divisor 001A  
                   _OSCILLATOR_Initialize 22AE                                 _T2CONbits 000FBA  
                                 _isdigit 2112                         i1___lwdiv@counter 001C  
                      _EUSART1_Initialize 21FA                  ??_PIN_MANAGER_Initialize 0134  
                              ?_I2C1_Stop 0001                                   _tmpTemp 0067  
               ??_TMR2_LoadPeriodRegister 0001                __size_of_SYSTEM_Initialize 002A  
                                 _sprintf 00E0                      I2C1_ISR@pi2c_buf_ptr 002F  
                          __pintcode_body 162C                      end_of_initialization 1A06  
                _INT2_SetInterruptHandler 22D2                       ?_EUSART1_Initialize 0001  
          ??_INT2_DefaultInterruptHandler 0001                               ?_getKBInput 0001  
                        ?i1_EUSART1_Write 0001                             __Lmediumconst 7EB8  
                                 int_func 162C                              _memAddrBytes 006C  
                              _tempAlarme 0047                    ??_I2C1_BusCollisionISR 0001  
                    escreveLinhaLCD@linha 0139                   __end_of_I2C1_Initialize 1F94  
                    escreveLinhaLCD@texto 0137                           _escreveLinhaLCD 1FC4  
                          ?_DelayFor18TCY 0001                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                  __size_of_feedbackUSART 00DA                             ?_testeTeclado 0001  
                              ??_putsXLCD 0137                      ??_EUSART1_Initialize 0134  
                   i1___wmul@multiplicand 001A                  _TMR0_SetInterruptHandler 22C8  
                               _PORTAbits 000F80                     _INT1_InterruptHandler 00EB  
                               _PORTBbits 000F81                 __size_of_I2C1_MasterWrite 004C  
            EUSART1_Receive_ISR@tmpAlarme 0021                         __size_of_I2C1_ISR 024A  
                               _TRISDbits 000F95                       _ADC_StartConversion 2304  
                               i1___lwdiv 1B82                                 i1___lwmod 1D76  
                     EUSART1_Write@txData 0134         I2C1_ISR@i2c_10bit_address_restart 0035  
                               i1_isdigit 21DC                                 _DelayXLCD 227E  
                 I2C1_MasterWrite@address 0024                         __size_of_INT0_ISR 002C  
                       __size_of_INT1_ISR 002C                         __size_of_INT2_ISR 002C  
                             ___ftmul@exp 00B1                      ?_ADC_StartConversion 0001  
                               i1_sprintf 03C4                            ??_testeTeclado 0157  
            __end_of_INTERRUPT_Initialize 227E      __end_of_INT0_DefaultInterruptHandler 2314  
   __size_of_INT0_DefaultInterruptHandler 0002              _INT0_DefaultInterruptHandler 2312  
                          __end_of___ftge 19B2                            __end_of___wmul 20C8  
                 I2C1_MasterWrite@trBlock 00A7                             __pidataCOMRAM 2308  
                         ??_defTempAlarme 0157                         __size_of_TMR0_ISR 013C  
                I2C1_Stop@completion_code 0003                            _ADC_Initialize 2214  
                       i1___lwmod@divisor 0021                    ?_OSCILLATOR_Initialize 0001  
                     __size_of_getKBInput 005E                         i1___lwmod@counter 0023  
        TMR2_LoadPeriodRegister@periodVal 0001                     __end_of_INT0_CallBack 21BC  
                     start_initialization 19B2                         __size_ofi1___wmul 0026  
               __size_of_EPWM1_Initialize 0020                               ??_I2C1_Stop 0001  
                __size_of_TMR0_Initialize 003A           __size_of_PIN_MANAGER_Initialize 0046  
                   __end_of_INT1_CallBack 219A                            _TMR2_StopTimer 22FC  
                           _feedbackUSART 1552                                ?i1___lwdiv 0018  
                              ?i1___lwmod 001F         __size_of_I2C1_MasterWriteTRBBuild 0044  
                   __end_of_INT2_CallBack 2178              EPWM1_LoadDutyValue@dutyValue 0001  
               ?_I2C1_MasterWriteTRBBuild 0018                     __end_of_EUSART1_Write 22AE  
                 __end_of_escreveLinhaLCD 1FF2                         __size_of_BusyXLCD 003A  
                              ?i1_isdigit 0001                                ?_DelayXLCD 0001  
                            i1sprintf@len 00C5                              i1sprintf@val 00C7  
                        ?_I2C1_Initialize 0001                           ??_DelayFor18TCY 0134  
                   ??_ADC_StartConversion 0001                         __size_of_OpenXLCD 00CE  
                              ?i1_sprintf 00B1                                  ??___ftge 001E  
                                ??___wmul 0138                             ?_WriteCmdXLCD 0001  
                  __end_of_ADC_Initialize 222C                               __pdataBANK0 00ED  
                                ?_ADC_ISR 0001                __end_of_EXT_INT_Initialize 1EB8  
                  __size_of_monitorizacao 015C             ?_INT0_DefaultInterruptHandler 0001  
            I2C1_MasterWriteTRBBuild@ptrb 0018                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lbtoft 0024  
                  __end_of_TMR2_StopTimer 2300                               __pbssCOMRAM 002F  
        __end_of_INT0_SetInterruptHandler 22F0                             __pcstackBANK0 00B1  
                           __pcstackBANK1 0134                  __size_of_TMR2_Initialize 0010  
                          ?_feedbackUSART 0001                             _i2c1_tr_queue 00AC  
                            _isdigit$2679 0135                   ??_I2C1_FunctionComplete 0001  
            __size_of_EUSART1_Receive_ISR 01C4                               ADC_ISR@var1 00CD  
                             ADC_ISR@var2 00CC                               sprintf@flag 014D  
                   _INT2_InterruptHandler 00E9                               sprintf@prec 014C  
                   _TMR0_InterruptHandler 00E5                                 __pnvBANK0 00E5  
                __size_of_TMR0_StartTimer 0004                            putsXLCD@buffer 0135  
                        ___lwdiv@dividend 0134                    _PIN_MANAGER_Initialize 1C20  
                               __pintcode 0008                             __pmediumconst 7EB8  
                          ??_WriteCmdXLCD 0134                                  ?___ftadd 0020  
                                ?___ftmul 0024                                  ?___ftsub 00B1  
                                ?___fttol 0018                                  ?___lwdiv 0134  
                       testeTeclado@input 0157                                  ?___lwmod 013B  
                         ?_ADC_Initialize 0001                              _eusart_Tx_En 0074  
                             __pintcodelo 0018                              _eusart_Tx_On 0073  
                                _I2C1_ISR 06A4                          __CFG_PRICLKEN$ON 000000  
                       __size_of_putsXLCD 005E                     __end_of_WriteDataXLCD 1CEE  
                        _I2C1_MasterWrite 1BD4                ??_INT2_SetInterruptHandler 0136  
            __end_of_I2C1_MasterTRBInsert 1922                                  _BAUDCON1 000FB8  
                                ?_isdigit 0001                           ?_TMR2_StopTimer 0001  
                        ___lwdiv@quotient 0139                               ??i1___lwdiv 001C  
                             ??i1___lwmod 0023                                  ?_sprintf 0140  
                    __end_of_testeTeclado 1A72                      _INTERRUPT_Initialize 226C  
                          i1_isdigit$2679 0019                             _monitorizacao 0E92  
                            ??_getKBInput 0134                    I2C1_MasterRead@trBlock 00A2  
                       ??_TMR0_Initialize 0136                          ?_escreveLinhaLCD 0137  
                                _INT0_ISR 204A                                  _INT1_ISR 201E  
                                _INT2_ISR 1FF2                            ___wmul@product 0138  
                                _LATBbits 000F8A                                  _LATDbits 000F8C  
       __size_of_INT1_SetInterruptHandler 000A                               ??i1_isdigit 0018  
               ?_INT1_SetInterruptHandler 0134                               ??_DelayXLCD 0134  
                                _IPR1bits 000F9F                                  _IPR2bits 000FA2  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                           ?_DelayPORXLCD 0001                  __size_of_TMR2_StartTimer 0004  
                                i1u334_20 1918                                  i1u430_20 152A  
                                i1u521_20 0B72                                  i1u426_20 14A8  
                                i1u426_25 14A0                                 _tempAtual 0046  
                                i1u540_20 0CB2                                  i1u710_20 0600  
                                i1u534_20 0C4E                                  i1u712_20 067E  
                                i1u536_20 0C62                                  i1u713_20 0696  
                                i1u705_20 0594                                  i1u642_20 0D54  
                                i1u652_20 0E04                                  i1u645_20 0D92  
                                i1u709_20 05E2                                  i1u717_20 0A38  
              ??_TMR0_SetInterruptHandler 0136                                  i1u662_20 1D90  
                                i1u718_20 0A46                                  i1u591_20 1862  
                                i1u639_20 0D2A                                  i1u649_20 0DD0  
                                _PIR1bits 000F9E                           OpenXLCD@lcdtype 0001  
                                i1u587_20 17E4                                  i1u659_20 1BA4  
                                _PIR2bits 000FA1                                  i2u382_48 2186  
                                i2u472_40 1198                                  i2u384_48 2164  
                                i2u473_40 119A                                  i2u465_40 1166  
                                i2u464_48 1148                                  i2u464_49 115C  
                                i2u490_40 120A                                  i2u466_40 1168  
                                i2u386_48 21A8                                  i2u491_40 120C  
                                i2u483_40 11DE                                  i2u484_40 11E0  
                                i2u468_40 117E                                  i2u477_40 11B8  
                                i2u469_40 1180              __size_of_EPWM1_LoadDutyValue 0030  
                                i2u478_40 11BA                               ??i1_sprintf 0024  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                                _SSP1CON1 000FC6                                  _SSP1CON3 000FCB  
                                _TMR0_ISR 1130                                  _PSTR1CON 000FB9  
                                _SSP1STAT 000FC7                          __size_of_ADC_ISR 0234  
                              _ADCON0bits 000FC2                         ___wmul@multiplier 0134  
                                i1___wmul 20C8                        __end_of_getKBInput 1AD0  
                         ??_feedbackUSART 013A                          _EPWM1_Initialize 21BC  
          ??_INT0_DefaultInterruptHandler 0001                               _INTCON2bits 000FF1  
                             _INTCON3bits 000FF0                     ?_INTERRUPT_Initialize 0001  
                          ?_monitorizacao 0001                  _INT0_SetInterruptHandler 22E6  
                                _BusyXLCD 1EF2                         ??_TMR2_Initialize 0134  
                          ??_DelayPORXLCD 0134                                  _TeclaTMP 0041  
                                _OpenXLCD 1706                                  __Hrparam 0000  
           __size_of_I2C1_BusCollisionISR 0002                                  __Lrparam 0000  
                ?_ADC_GetConversionResult 0018                  __size_ofi1_EUSART1_Write 000C  
                      __CFG_BOREN$SBORDIS 000000                    I2C1_ISR@i2c_bytes_left 0036  
                       __CFG_P2BMX$PORTD2 000000                   ??_OSCILLATOR_Initialize 0134  
                       ??_TMR0_StartTimer 0134                          __size_of___ftadd 01AC  
                        __size_of___ftmul 00F6                          __size_of___ftsub 0042  
                        __size_of___fttol 00F4               __size_of_EUSART1_Initialize 001A  
                        __size_of___lwdiv 0054                          __size_of___lwmod 0044  
                                ___awtoft 1F2C                                  ___ftpack 17D4  
                                ___lbtoft 20EE                                  _clk1_2Hz 003C  
                                _clk1_4Hz 003B                                  _clk1_8Hz 003A  
        __end_of_I2C1_MasterWriteTRBBuild 1D76                                sprintf@len 0150  
                              sprintf@val 0152                  ?_TMR2_LoadPeriodRegister 0001  
         ??_INTERRUPT_InterruptManagerLow 00D0                          __size_of_isdigit 0022  
                         ___lwdiv@divisor 0136                       I2C1_ISR@i2c_address 0042  
                         ___lwdiv@counter 0138                                  __ptext10 1C66  
                                __ptext11 1B2E                                  __ptext20 22C8  
                                __ptext12 1A72                                  __ptext21 1C20  
                                __ptext13 1FC4                                  __ptext30 21BC  
                                __ptext22 22AE                                  __ptext14 1AD0  
                                __ptext31 2214                                  __ptext23 226C  
                                __ptext15 1CAA                                  __ptext40 08EE  
                                __ptext32 1706                                  __ptext24 1F64  
                                __ptext16 2076                                  __ptext41 03C4  
                                __ptext33 1CEE                                  __ptext25 1E7A  
                                __ptext17 2290                                  __ptext50 0CE6  
                                __ptext42 21DC                                  __ptext34 227E  
                                __ptext26 22D2                                  __ptext18 1EB8  
                                __ptext51 1368                                  __ptext43 20C8  
                                __ptext35 2134                                  __ptext27 22DC  
                                __ptext19 22F8                                  __ptext60 1130  
                                __ptext52 1922                                  __ptext44 1D76  
                                __ptext36 1EF2                                  __ptext28 22E6  
                                __ptext61 22FC                                  __ptext53 1F2C  
                                __ptext45 1B82                                  __ptext37 2244  
                                __ptext29 21FA                                  __ptext70 201E  
                                __ptext62 2300                                  __ptext54 17D4  
                                __ptext46 22BC                                  __ptext71 2178  
                                __ptext63 22F0                                  __ptext55 1BD4  
                                __ptext47 20EE                                  __ptext39 0B22  
                                __ptext80 0000                                  __ptext72 2310  
                                __ptext64 230C                                  __ptext56 1D32  
                                __ptext48 145E                                  __ptext73 204A  
                                __ptext65 1F94                                  __ptext57 1882  
                                __ptext49 1DB8                                  __ptext74 219A  
                                __ptext66 2304                                  __ptext58 2258  
                                __ptext75 2312                                  __ptext67 1FF2  
                                __ptext76 06A4                                  __ptext68 2156  
                                __ptext77 1DFA                                  __ptext69 230E  
                                __ptext78 222C                                  __ptext79 2314  
                            _SSP1CON1bits 000FC6                              _SSP1CON2bits 000FC5  
                    __end_of_WriteCmdXLCD 1D32                          __size_of_sprintf 02E4  
                      i1___lwdiv@dividend 0018                                  _lastMenu 0077  
                           __size_of_main 003E                   defTempAlarme@tmp_Alarme 0159  
                           __size_of_menu 0142                                  _menu_tmp 00ED  
    __end_of_TMR0_DefaultInterruptHandler 230E     __size_of_TMR0_DefaultInterruptHandler 0002  
            _TMR0_DefaultInterruptHandler 230C                      _I2C1_MasterTRBInsert 1882  
                                _strUSART 0078                                  int$flags 0048  
                                _putsXLCD 1AD0                         ??_TMR2_StartTimer 0001  
                     _EUSART1_Receive_ISR 0B22      __end_of_INT1_DefaultInterruptHandler 2312  
   __size_of_INT1_DefaultInterruptHandler 0002              _INT1_DefaultInterruptHandler 2310  
                      i1___lwdiv@quotient 001D                     __end_of_defTempAlarme 1368  
                   __size_of_testeTeclado 005E                                _INTCONbits 000FF2  
                                isdigit@c 0136                           ??_monitorizacao 0157  
                  ??_INTERRUPT_Initialize 0134                        _EXT_INT_Initialize 1E7A  
                                intlevel1 0000                                  intlevel2 0000  
                               sprintf@ap 014E                                 sprintf@cp 014A  
                               sprintf@sp 0140                      ?_EUSART1_Receive_ISR 0001  
             __end_of_ADC_StartConversion 2308                          ___lwmod@dividend 013B  
                 ?_PIN_MANAGER_Initialize 0001           __end_of_ADC_GetConversionResult 226C  
                __end_of_I2C1_MasterWrite 1C20            __size_of_I2C1_FunctionComplete 0018  
                     ?_EXT_INT_Initialize 0001                                _RCSTA1bits 000FAB  
           __end_of_I2C1_FunctionComplete 2244                     ?_I2C1_MasterTRBInsert 0018  
                        ??_ADC_Initialize 0134                    __size_of_INT0_CallBack 0022  
           ?_TMR0_DefaultInterruptHandler 0001                     __end_of_DelayFor18TCY 2258  
                  __size_of_INT1_CallBack 0022                              _testeTeclado 1A14  
                        ??_TMR2_StopTimer 0001           __end_of_TMR2_LoadPeriodRegister 22F8  
                  __size_of_INT2_CallBack 0022                  __size_of_I2C1_Initialize 0030  
                  __size_of_EUSART1_Write 000E                         ??i1_EUSART1_Write 0018  
  __end_of_INTERRUPT_InterruptManagerHigh 1706   __size_of_INTERRUPT_InterruptManagerHigh 16FE  
          _INTERRUPT_InterruptManagerHigh 0008                           defTempAlarme@c1 015A  
                         defTempAlarme@c2 015B                      ??_EXT_INT_Initialize 0136  
                                sprintf@c 0156                                  sprintf@f 0142  
           ?_INT1_DefaultInterruptHandler 0001                      __end_of_DelayPORXLCD 2156  
                         ___lwmod@divisor 013D                           _TMR0_Initialize 1EB8  
                         ___lwmod@counter 013F          __end_of_INT1_SetInterruptHandler 22E6  
                _I2C1_MasterWriteTRBBuild 1D32                         __CFG_T3CMX$PORTC0 000000  
                     _EPWM1_LoadDutyValue 1F94                     i1EUSART1_Write@txData 0018  
   __end_of_INTERRUPT_InterruptManagerLow 00DC    __size_of_INTERRUPT_InterruptManagerLow 00C4  
           _INTERRUPT_InterruptManagerLow 0018                     ??_EUSART1_Receive_ISR 0018  
          __end_of_PIN_MANAGER_Initialize 1C66                        __size_of_I2C1_Stop 0042  
                __end_of_EPWM1_Initialize 21DC                      ?_EPWM1_LoadDutyValue 0001  
