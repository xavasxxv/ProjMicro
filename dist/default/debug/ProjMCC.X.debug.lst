

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Dec 19 16:51:20 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101  0000                     
   102                           ; Version 1.44
   103                           ; Generated 14/09/2017 GMT
   104                           ; 
   105                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   106                           ; All rights reserved.
   107                           ; 
   108                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   109                           ; 
   110                           ; Redistribution and use in source and binary forms, with or without modification, are
   111                           ; permitted provided that the following conditions are met:
   112                           ; 
   113                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   114                           ;        conditions and the following disclaimer.
   115                           ; 
   116                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   117                           ;        of conditions and the following disclaimer in the documentation and/or other
   118                           ;        materials provided with the distribution.
   119                           ; 
   120                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   121                           ;        software without specific prior written permission.
   122                           ; 
   123                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   124                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   125                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   126                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   127                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   128                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   129                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   130                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   131                           ; 
   132                           ; 
   133                           ; Code-generator required, PIC18F45K22 Definitions
   134                           ; 
   135                           ; SFR Addresses
   136  0000                     
   137                           	psect	idataCOMRAM
   138  00208A                     __pidataCOMRAM:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _tempAtual
   142  00208A  19                 	db	25
   143                           
   144                           ;initializer for _tempAlarme
   145  00208B  19                 	db	25
   146                           
   147                           	psect	idataBANK0
   148  00208C                     __pidataBANK0:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _menu_tmp
   152  00208C  01                 	db	1
   153                           
   154                           ;initializer for _update
   155  00208D  01                 	db	1
   156                           
   157                           	psect	mediumconst
   158  007EC8                     __pmediumconst:
   159                           	opt stack 0
   160  007EC8  00                 	db	0
   161  007EC9                     _dpowers:
   162                           	opt stack 0
   163  007EC9  0001               	dw	1
   164  007ECB  000A               	dw	10
   165  007ECD  0064               	dw	100
   166  007ECF  03E8               	dw	1000
   167  007ED1  2710               	dw	10000
   168  007ED3                     __end_of_dpowers:
   169                           	opt stack 0
   170  007ED3                     STR_1:
   171  007ED3  0C                 	db	12
   172  007ED4  54                 	db	84	;'T'
   173  007ED5  4D                 	db	77	;'M'
   174  007ED6  3D                 	db	61	;'='
   175  007ED7  25                 	db	37
   176  007ED8  32                 	db	50	;'2'
   177  007ED9  64                 	db	100	;'d'
   178  007EDA  5F                 	db	95	;'_'
   179  007EDB  54                 	db	84	;'T'
   180  007EDC  41                 	db	65	;'A'
   181  007EDD  3D                 	db	61	;'='
   182  007EDE  25                 	db	37
   183  007EDF  32                 	db	50	;'2'
   184  007EE0  64                 	db	100	;'d'
   185  007EE1  5F                 	db	95	;'_'
   186  007EE2  41                 	db	65	;'A'
   187  007EE3  41                 	db	65	;'A'
   188  007EE4  3D                 	db	61	;'='
   189  007EE5  25                 	db	37
   190  007EE6  31                 	db	49	;'1'
   191  007EE7  64                 	db	100	;'d'
   192  007EE8  0D                 	db	13
   193  007EE9  00                 	db	0
   194  007EEA                     STR_4:
   195  007EEA  4D                 	db	77	;'M'
   196  007EEB  6F                 	db	111	;'o'
   197  007EEC  6E                 	db	110	;'n'
   198  007EED  69                 	db	105	;'i'
   199  007EEE  74                 	db	116	;'t'
   200  007EEF  6F                 	db	111	;'o'
   201  007EF0  72                 	db	114	;'r'
   202  007EF1  69                 	db	105	;'i'
   203  007EF2  7A                 	db	122	;'z'
   204  007EF3  61                 	db	97	;'a'
   205  007EF4  63                 	db	99	;'c'
   206  007EF5  61                 	db	97	;'a'
   207  007EF6  6F                 	db	111	;'o'
   208  007EF7  20                 	db	32
   209  007EF8  20                 	db	32
   210  007EF9  20                 	db	32
   211  007EFA  20                 	db	32
   212  007EFB  20                 	db	32
   213  007EFC  20                 	db	32
   214  007EFD  20                 	db	32
   215  007EFE  20                 	db	32
   216  007EFF  00                 	db	0
   217  007F00                     STR_7:
   218  007F00  46                 	db	70	;'F'
   219  007F01  65                 	db	101	;'e'
   220  007F02  65                 	db	101	;'e'
   221  007F03  64                 	db	100	;'d'
   222  007F04  62                 	db	98	;'b'
   223  007F05  61                 	db	97	;'a'
   224  007F06  63                 	db	99	;'c'
   225  007F07  6B                 	db	107	;'k'
   226  007F08  20                 	db	32
   227  007F09  45                 	db	69	;'E'
   228  007F0A  55                 	db	85	;'U'
   229  007F0B  53                 	db	83	;'S'
   230  007F0C  41                 	db	65	;'A'
   231  007F0D  52                 	db	82	;'R'
   232  007F0E  54                 	db	84	;'T'
   233  007F0F  20                 	db	32
   234  007F10  20                 	db	32
   235  007F11  20                 	db	32
   236  007F12  20                 	db	32
   237  007F13  20                 	db	32
   238  007F14  20                 	db	32
   239  007F15  00                 	db	0
   240  007F16                     STR_5:
   241  007F16  54                 	db	84	;'T'
   242  007F17  65                 	db	101	;'e'
   243  007F18  6D                 	db	109	;'m'
   244  007F19  70                 	db	112	;'p'
   245  007F1A  2E                 	db	46
   246  007F1B  20                 	db	32
   247  007F1C  64                 	db	100	;'d'
   248  007F1D  65                 	db	101	;'e'
   249  007F1E  20                 	db	32
   250  007F1F  61                 	db	97	;'a'
   251  007F20  6C                 	db	108	;'l'
   252  007F21  61                 	db	97	;'a'
   253  007F22  72                 	db	114	;'r'
   254  007F23  6D                 	db	109	;'m'
   255  007F24  65                 	db	101	;'e'
   256  007F25  20                 	db	32
   257  007F26  20                 	db	32
   258  007F27  20                 	db	32
   259  007F28  20                 	db	32
   260  007F29  20                 	db	32
   261  007F2A  20                 	db	32
   262  007F2B  00                 	db	0
   263  007F2C                     STR_6:
   264  007F2C  54                 	db	84	;'T'
   265  007F2D  65                 	db	101	;'e'
   266  007F2E  73                 	db	115	;'s'
   267  007F2F  74                 	db	116	;'t'
   268  007F30  65                 	db	101	;'e'
   269  007F31  20                 	db	32
   270  007F32  64                 	db	100	;'d'
   271  007F33  6F                 	db	111	;'o'
   272  007F34  20                 	db	32
   273  007F35  74                 	db	116	;'t'
   274  007F36  65                 	db	101	;'e'
   275  007F37  63                 	db	99	;'c'
   276  007F38  6C                 	db	108	;'l'
   277  007F39  61                 	db	97	;'a'
   278  007F3A  64                 	db	100	;'d'
   279  007F3B  6F                 	db	111	;'o'
   280  007F3C  20                 	db	32
   281  007F3D  20                 	db	32
   282  007F3E  20                 	db	32
   283  007F3F  20                 	db	32
   284  007F40  20                 	db	32
   285  007F41  00                 	db	0
   286  007F42                     STR_9:
   287  007F42  54                 	db	84	;'T'
   288  007F43  65                 	db	101	;'e'
   289  007F44  6D                 	db	109	;'m'
   290  007F45  70                 	db	112	;'p'
   291  007F46  2E                 	db	46
   292  007F47  20                 	db	32
   293  007F48  41                 	db	65	;'A'
   294  007F49  74                 	db	116	;'t'
   295  007F4A  75                 	db	117	;'u'
   296  007F4B  61                 	db	97	;'a'
   297  007F4C  6C                 	db	108	;'l'
   298  007F4D  3A                 	db	58	;':'
   299  007F4E  20                 	db	32
   300  007F4F  20                 	db	32
   301  007F50  25                 	db	37
   302  007F51  32                 	db	50	;'2'
   303  007F52  64                 	db	100	;'d'
   304  007F53  20                 	db	32
   305  007F54  6F                 	db	111	;'o'
   306  007F55  43                 	db	67	;'C'
   307  007F56  20                 	db	32
   308  007F57  00                 	db	0
   309  007F58                     STR_10:
   310  007F58  54                 	db	84	;'T'
   311  007F59  65                 	db	101	;'e'
   312  007F5A  6D                 	db	109	;'m'
   313  007F5B  70                 	db	112	;'p'
   314  007F5C  2E                 	db	46
   315  007F5D  20                 	db	32
   316  007F5E  41                 	db	65	;'A'
   317  007F5F  6C                 	db	108	;'l'
   318  007F60  61                 	db	97	;'a'
   319  007F61  72                 	db	114	;'r'
   320  007F62  6D                 	db	109	;'m'
   321  007F63  65                 	db	101	;'e'
   322  007F64  3A                 	db	58	;':'
   323  007F65  20                 	db	32
   324  007F66  25                 	db	37
   325  007F67  32                 	db	50	;'2'
   326  007F68  64                 	db	100	;'d'
   327  007F69  20                 	db	32
   328  007F6A  6F                 	db	111	;'o'
   329  007F6B  43                 	db	67	;'C'
   330  007F6C  20                 	db	32
   331  007F6D  00                 	db	0
   332  007F6E                     STR_17:
   333  007F6E  4E                 	db	78	;'N'
   334  007F6F  75                 	db	117	;'u'
   335  007F70  6D                 	db	109	;'m'
   336  007F71  65                 	db	101	;'e'
   337  007F72  72                 	db	114	;'r'
   338  007F73  6F                 	db	111	;'o'
   339  007F74  3A                 	db	58	;':'
   340  007F75  20                 	db	32
   341  007F76  20                 	db	32
   342  007F77  20                 	db	32
   343  007F78  20                 	db	32
   344  007F79  20                 	db	32
   345  007F7A  20                 	db	32
   346  007F7B  20                 	db	32
   347  007F7C  20                 	db	32
   348  007F7D  20                 	db	32
   349  007F7E  20                 	db	32
   350  007F7F  20                 	db	32
   351  007F80  20                 	db	32
   352  007F81  20                 	db	32
   353  007F82  00                 	db	0
   354  007F83                     STR_20:
   355  007F83  54                 	db	84	;'T'
   356  007F84  65                 	db	101	;'e'
   357  007F85  6D                 	db	109	;'m'
   358  007F86  70                 	db	112	;'p'
   359  007F87  3A                 	db	58	;':'
   360  007F88  20                 	db	32
   361  007F89  20                 	db	32
   362  007F8A  20                 	db	32
   363  007F8B  20                 	db	32
   364  007F8C  6F                 	db	111	;'o'
   365  007F8D  43                 	db	67	;'C'
   366  007F8E  20                 	db	32
   367  007F8F  20                 	db	32
   368  007F90  20                 	db	32
   369  007F91  20                 	db	32
   370  007F92  20                 	db	32
   371  007F93  20                 	db	32
   372  007F94  20                 	db	32
   373  007F95  20                 	db	32
   374  007F96  20                 	db	32
   375  007F97  00                 	db	0
   376  007F98                     STR_16:
   377  007F98  54                 	db	84	;'T'
   378  007F99  65                 	db	101	;'e'
   379  007F9A  73                 	db	115	;'s'
   380  007F9B  74                 	db	116	;'t'
   381  007F9C  65                 	db	101	;'e'
   382  007F9D  20                 	db	32
   383  007F9E  54                 	db	84	;'T'
   384  007F9F  65                 	db	101	;'e'
   385  007FA0  63                 	db	99	;'c'
   386  007FA1  6C                 	db	108	;'l'
   387  007FA2  61                 	db	97	;'a'
   388  007FA3  64                 	db	100	;'d'
   389  007FA4  6F                 	db	111	;'o'
   390  007FA5  20                 	db	32
   391  007FA6  20                 	db	32
   392  007FA7  20                 	db	32
   393  007FA8  20                 	db	32
   394  007FA9  20                 	db	32
   395  007FAA  20                 	db	32
   396  007FAB  20                 	db	32
   397  007FAC  00                 	db	0
   398  007FAD                     STR_19:
   399  007FAD  49                 	db	73	;'I'
   400  007FAE  6E                 	db	110	;'n'
   401  007FAF  74                 	db	116	;'t'
   402  007FB0  72                 	db	114	;'r'
   403  007FB1  6F                 	db	111	;'o'
   404  007FB2  64                 	db	100	;'d'
   405  007FB3  75                 	db	117	;'u'
   406  007FB4  7A                 	db	122	;'z'
   407  007FB5  61                 	db	97	;'a'
   408  007FB6  20                 	db	32
   409  007FB7  6F                 	db	111	;'o'
   410  007FB8  20                 	db	32
   411  007FB9  61                 	db	97	;'a'
   412  007FBA  6C                 	db	108	;'l'
   413  007FBB  61                 	db	97	;'a'
   414  007FBC  72                 	db	114	;'r'
   415  007FBD  6D                 	db	109	;'m'
   416  007FBE  65                 	db	101	;'e'
   417  007FBF  20                 	db	32
   418  007FC0  20                 	db	32
   419  007FC1  00                 	db	0
   420  007FC2                     STR_2:
   421  007FC2  4D                 	db	77	;'M'
   422  007FC3  65                 	db	101	;'e'
   423  007FC4  6E                 	db	110	;'n'
   424  007FC5  75                 	db	117	;'u'
   425  007FC6  20                 	db	32
   426  007FC7  20                 	db	32
   427  007FC8  20                 	db	32
   428  007FC9  20                 	db	32
   429  007FCA  20                 	db	32
   430  007FCB  20                 	db	32
   431  007FCC  20                 	db	32
   432  007FCD  20                 	db	32
   433  007FCE  20                 	db	32
   434  007FCF  4F                 	db	79	;'O'
   435  007FD0  70                 	db	112	;'p'
   436  007FD1  63                 	db	99	;'c'
   437  007FD2  61                 	db	97	;'a'
   438  007FD3  6F                 	db	111	;'o'
   439  007FD4  3A                 	db	58	;':'
   440  007FD5  00                 	db	0
   441  007FD6                     STR_12:
   442  007FD6  54                 	db	84	;'T'
   443  007FD7  65                 	db	101	;'e'
   444  007FD8  6D                 	db	109	;'m'
   445  007FD9  70                 	db	112	;'p'
   446  007FDA  2E                 	db	46
   447  007FDB  20                 	db	32
   448  007FDC  41                 	db	65	;'A'
   449  007FDD  6C                 	db	108	;'l'
   450  007FDE  61                 	db	97	;'a'
   451  007FDF  72                 	db	114	;'r'
   452  007FE0  6D                 	db	109	;'m'
   453  007FE1  65                 	db	101	;'e'
   454  007FE2  3A                 	db	58	;':'
   455  007FE3  20                 	db	32
   456  007FE4  00                 	db	0
   457  007FE5                     STR_11:
   458  007FE5  21                 	db	33
   459  007FE6  41                 	db	65	;'A'
   460  007FE7  4C                 	db	76	;'L'
   461  007FE8  41                 	db	65	;'A'
   462  007FE9  52                 	db	82	;'R'
   463  007FEA  4D                 	db	77	;'M'
   464  007FEB  45                 	db	69	;'E'
   465  007FEC  21                 	db	33
   466  007FED  20                 	db	32
   467  007FEE  54                 	db	84	;'T'
   468  007FEF  45                 	db	69	;'E'
   469  007FF0  4D                 	db	77	;'M'
   470  007FF1  50                 	db	80	;'P'
   471  007FF2  3E                 	db	62	;'>'
   472  007FF3  00                 	db	0
   473  007FF4                     STR_14:
   474  007FF4  25                 	db	37
   475  007FF5  32                 	db	50	;'2'
   476  007FF6  64                 	db	100	;'d'
   477  007FF7  00                 	db	0
   478  007FF8                     STR_18:
   479  007FF8  25                 	db	37
   480  007FF9  63                 	db	99	;'c'
   481  007FFA  00                 	db	0
   482  007FFB                     STR_3:
   483  007FFB  25                 	db	37
   484  007FFC  64                 	db	100	;'d'
   485  007FFD  00                 	db	0
   486  0000                     
   487                           ; #config settings
   488  007FFE  00                 	db	0	; dummy byte at the end
   489  0000                     
   490                           	psect	nvCOMRAM
   491  000045                     __pnvCOMRAM:
   492                           	opt stack 0
   493  000045                     _timer0ReloadVal:
   494                           	opt stack 0
   495  000045                     	ds	2
   496                           
   497                           	psect	nvBANK0
   498  0000D4                     __pnvBANK0:
   499                           	opt stack 0
   500  0000D4                     _TMR0_InterruptHandler:
   501                           	opt stack 0
   502  0000D4                     	ds	2
   503  0000D6                     _INT0_InterruptHandler:
   504                           	opt stack 0
   505  0000D6                     	ds	2
   506  0000D8                     _INT2_InterruptHandler:
   507                           	opt stack 0
   508  0000D8                     	ds	2
   509  0000DA                     _INT1_InterruptHandler:
   510                           	opt stack 0
   511  0000DA                     	ds	2
   512  0000                     _CCPTMRS0bits	set	3913
   513  0000                     _ANSELA	set	3896
   514  0000                     _ANSELE	set	3900
   515  0000                     _ANSELD	set	3899
   516  0000                     _ANSELB	set	3897
   517  0000                     _ANSELC	set	3898
   518  0000                     _SSP1BUF	set	4041
   519  0000                     _SSP1CON2bits	set	4037
   520  0000                     _SSP1CON1bits	set	4038
   521  0000                     _SSP1ADD	set	4040
   522  0000                     _SSP1CON3	set	4043
   523  0000                     _SSP1CON1	set	4038
   524  0000                     _SSP1STAT	set	4039
   525  0000                     _PORTAbits	set	3968
   526  0000                     _LATDbits	set	3980
   527  0000                     _TRISDbits	set	3989
   528  0000                     _PORTD	set	3971
   529  0000                     _RCREG1	set	4014
   530  0000                     _RCSTA1bits	set	4011
   531  0000                     _TXREG1	set	4013
   532  0000                     _SPBRGH1	set	4016
   533  0000                     _SPBRG1	set	4015
   534  0000                     _TXSTA1	set	4012
   535  0000                     _RCSTA1	set	4011
   536  0000                     _BAUDCON1	set	4024
   537  0000                     _ADCON0bits	set	4034
   538  0000                     _ADRESH	set	4036
   539  0000                     _ADRESL	set	4035
   540  0000                     _ADCON2	set	4032
   541  0000                     _ADCON1	set	4033
   542  0000                     _ADCON0	set	4034
   543  0000                     _CCPR1H	set	4031
   544  0000                     _CCPR1L	set	4030
   545  0000                     _PSTR1CON	set	4025
   546  0000                     _PWM1CON	set	4023
   547  0000                     _ECCP1AS	set	4022
   548  0000                     _CCP1CON	set	4029
   549  0000                     _T2CONbits	set	4026
   550  0000                     _TMR2	set	4028
   551  0000                     _PR2	set	4027
   552  0000                     _T2CON	set	4026
   553  0000                     _LATBbits	set	3978
   554  0000                     _T0CONbits	set	4053
   555  0000                     _TMR0L	set	4054
   556  0000                     _TMR0H	set	4055
   557  0000                     _T0CON	set	4053
   558  0000                     _PORTBbits	set	3969
   559  0000                     _PIR2bits	set	4001
   560  0000                     _PIE2bits	set	4000
   561  0000                     _PIR1bits	set	3998
   562  0000                     _PIE1bits	set	3997
   563  0000                     _INTCONbits	set	4082
   564  0000                     _IPR2bits	set	4002
   565  0000                     _IPR1bits	set	3999
   566  0000                     _INTCON3bits	set	4080
   567  0000                     _RCONbits	set	4048
   568  0000                     _OSCTUNE	set	3995
   569  0000                     _OSCCON2	set	4050
   570  0000                     _OSCCON	set	4051
   571  0000                     _INTCON2bits	set	4081
   572  0000                     _WPUB	set	3937
   573  0000                     _TRISD	set	3989
   574  0000                     _TRISC	set	3988
   575  0000                     _TRISB	set	3987
   576  0000                     _TRISA	set	3986
   577  0000                     _TRISE	set	3990
   578  0000                     _LATC	set	3979
   579  0000                     _LATB	set	3978
   580  0000                     _LATA	set	3977
   581  0000                     _LATD	set	3980
   582  0000                     _LATE	set	3981
   583                           
   584                           	psect	cinit
   585  0017FE                     __pcinit:
   586                           	opt stack 0
   587  0017FE                     start_initialization:
   588                           	opt stack 0
   589  0017FE                     __initialization:
   590                           	opt stack 0
   591                           
   592                           ; Initialize objects allocated to BANK0 (2 bytes)
   593                           ; load TBLPTR registers with __pidataBANK0
   594  0017FE  0E8C               	movlw	low __pidataBANK0
   595  001800  6EF6               	movwf	tblptrl,c
   596  001802  0E20               	movlw	high __pidataBANK0
   597  001804  6EF7               	movwf	tblptrh,c
   598  001806  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   599  001808  6EF8               	movwf	tblptru,c
   600  00180A  0009               	tblrd		*+	;fetch initializer
   601  00180C  CFF5 F0DC          	movff	tablat,__pdataBANK0
   602  001810  0009               	tblrd		*+	;fetch initializer
   603  001812  CFF5 F0DD          	movff	tablat,__pdataBANK0+1
   604                           
   605                           ; Initialize objects allocated to COMRAM (2 bytes)
   606                           ; load TBLPTR registers with __pidataCOMRAM
   607  001816  0E8A               	movlw	low __pidataCOMRAM
   608  001818  6EF6               	movwf	tblptrl,c
   609  00181A  0E20               	movlw	high __pidataCOMRAM
   610  00181C  6EF7               	movwf	tblptrh,c
   611  00181E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   612  001820  6EF8               	movwf	tblptru,c
   613  001822  0009               	tblrd		*+	;fetch initializer
   614  001824  CFF5 F047          	movff	tablat,__pdataCOMRAM
   615  001828  0009               	tblrd		*+	;fetch initializer
   616  00182A  CFF5 F048          	movff	tablat,__pdataCOMRAM+1
   617                           
   618                           ; Clear objects allocated to BANK1 (42 bytes)
   619  00182E  EE01  F000         	lfsr	0,__pbssBANK1
   620  001832  0E2A               	movlw	42
   621  001834                     clear_0:
   622  001834  6AEE               	clrf	postinc0,c
   623  001836  06E8               	decf	wreg,f,c
   624  001838  E1FD               	bnz	clear_0
   625                           
   626                           ; Clear objects allocated to BANK0 (74 bytes)
   627  00183A  EE00  F060         	lfsr	0,__pbssBANK0
   628  00183E  0E4A               	movlw	74
   629  001840                     clear_1:
   630  001840  6AEE               	clrf	postinc0,c
   631  001842  06E8               	decf	wreg,f,c
   632  001844  E1FD               	bnz	clear_1
   633                           
   634                           ; Clear objects allocated to COMRAM (24 bytes)
   635  001846  EE00  F02D         	lfsr	0,__pbssCOMRAM
   636  00184A  0E18               	movlw	24
   637  00184C                     clear_2:
   638  00184C  6AEE               	clrf	postinc0,c
   639  00184E  06E8               	decf	wreg,f,c
   640  001850  E1FD               	bnz	clear_2
   641  001852                     end_of_initialization:
   642                           	opt stack 0
   643  001852                     __end_of__initialization:
   644                           	opt stack 0
   645  001852  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   646  001854  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   647  001856  0E00               	movlw	low (__Lmediumconst shr (0+16))
   648  001858  6EF8               	movwf	tblptru,c
   649  00185A  0100               	movlb	0
   650  00185C  EFDB  F00D         	goto	_main	;jump to C main() function
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           
   658                           	psect	bssCOMRAM
   659  00002D                     __pbssCOMRAM:
   660                           	opt stack 0
   661  00002D                     _tmpTemp:
   662                           	opt stack 0
   663  00002D                     	ds	3
   664  000030                     _p_i2c1_trb_current:
   665                           	opt stack 0
   666  000030                     	ds	2
   667  000032                     I2C1_ISR@i2c_10bit_address_restart:
   668                           	opt stack 0
   669  000032                     	ds	1
   670  000033                     I2C1_ISR@i2c_bytes_left:
   671                           	opt stack 0
   672  000033                     	ds	1
   673  000034                     _i2c1_trb_count:
   674                           	opt stack 0
   675  000034                     	ds	1
   676  000035                     _i2c1_state:
   677                           	opt stack 0
   678  000035                     	ds	1
   679  000036                     _eusart_Tx_On:
   680                           	opt stack 0
   681  000036                     	ds	1
   682  000037                     _eusart_Tx_En:
   683                           	opt stack 0
   684  000037                     	ds	1
   685  000038                     _WrEnFl:
   686                           	opt stack 0
   687  000038                     	ds	1
   688  000039                     _alarme:
   689                           	opt stack 0
   690  000039                     	ds	1
   691  00003A                     _clk1_8Hz:
   692                           	opt stack 0
   693  00003A                     	ds	1
   694  00003B                     _clk1_4Hz:
   695                           	opt stack 0
   696  00003B                     	ds	1
   697  00003C                     _clk1_2Hz:
   698                           	opt stack 0
   699  00003C                     	ds	1
   700  00003D                     _clk1Hz:
   701                           	opt stack 0
   702  00003D                     	ds	1
   703  00003E                     _clk2Hz:
   704                           	opt stack 0
   705  00003E                     	ds	1
   706  00003F                     _clk4Hz:
   707                           	opt stack 0
   708  00003F                     	ds	1
   709  000040                     _j:
   710                           	opt stack 0
   711  000040                     	ds	1
   712  000041                     _i:
   713                           	opt stack 0
   714  000041                     	ds	1
   715  000042                     _TeclaTMP:
   716                           	opt stack 0
   717  000042                     	ds	1
   718  000043                     I2C1_ISR@i2c_address:
   719                           	opt stack 0
   720  000043                     	ds	2
   721                           tblptru	equ	0xFF8
   722                           tblptrh	equ	0xFF7
   723                           tblptrl	equ	0xFF6
   724                           tablat	equ	0xFF5
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           
   728                           	psect	dataCOMRAM
   729  000047                     __pdataCOMRAM:
   730                           	opt stack 0
   731  000047                     _tempAtual:
   732                           	opt stack 0
   733  000047                     	ds	1
   734  000048                     _tempAlarme:
   735                           	opt stack 0
   736  000048                     	ds	1
   737                           tblptru	equ	0xFF8
   738                           tblptrh	equ	0xFF7
   739                           tblptrl	equ	0xFF6
   740                           tablat	equ	0xFF5
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           
   744                           	psect	bssBANK0
   745  000060                     __pbssBANK0:
   746                           	opt stack 0
   747  000060                     _i2c1_object:
   748                           	opt stack 0
   749  000060                     	ds	7
   750  000067                     I2C1_ISR@pi2c_buf_ptr:
   751                           	opt stack 0
   752  000067                     	ds	2
   753  000069                     _p_i2c1_current:
   754                           	opt stack 0
   755  000069                     	ds	2
   756  00006B                     _binADC:
   757                           	opt stack 0
   758  00006B                     	ds	2
   759  00006D                     _lastMenu:
   760                           	opt stack 0
   761  00006D                     	ds	1
   762  00006E                     _strUSART:
   763                           	opt stack 0
   764  00006E                     	ds	42
   765  000098                     I2C1_MasterRead@trBlock:
   766                           	opt stack 0
   767  000098                     	ds	6
   768  00009E                     I2C1_MasterWrite@trBlock:
   769                           	opt stack 0
   770  00009E                     	ds	6
   771  0000A4                     _i2c1_tr_queue:
   772                           	opt stack 0
   773  0000A4                     	ds	6
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           
   781                           	psect	dataBANK0
   782  0000DC                     __pdataBANK0:
   783                           	opt stack 0
   784  0000DC                     _menu_tmp:
   785                           	opt stack 0
   786  0000DC                     	ds	1
   787  0000DD                     _update:
   788                           	opt stack 0
   789  0000DD                     	ds	1
   790                           tblptru	equ	0xFF8
   791                           tblptrh	equ	0xFF7
   792                           tblptrl	equ	0xFF6
   793                           tablat	equ	0xFF5
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           
   797                           	psect	bssBANK1
   798  000100                     __pbssBANK1:
   799                           	opt stack 0
   800  000100                     _strLCD:
   801                           	opt stack 0
   802  000100                     	ds	42
   803                           tblptru	equ	0xFF8
   804                           tblptrh	equ	0xFF7
   805                           tblptrl	equ	0xFF6
   806                           tablat	equ	0xFF5
   807                           postinc0	equ	0xFEE
   808                           wreg	equ	0xFE8
   809                           
   810                           	psect	cstackBANK1
   811  00012A                     __pcstackBANK1:
   812                           	opt stack 0
   813  00012A                     ??_isdigit:
   814  00012A                     ??_DelayPORXLCD:
   815  00012A                     ??_DelayXLCD:
   816  00012A                     ?___wmul:
   817                           	opt stack 0
   818  00012A                     ?___lwdiv:
   819                           	opt stack 0
   820  00012A                     EUSART1_Write@txData:
   821                           	opt stack 0
   822  00012A                     WriteCmdXLCD@cmd:
   823                           	opt stack 0
   824  00012A                     WriteDataXLCD@data:
   825                           	opt stack 0
   826  00012A                     INT1_SetInterruptHandler@InterruptHandler:
   827                           	opt stack 0
   828  00012A                     INT2_SetInterruptHandler@InterruptHandler:
   829                           	opt stack 0
   830  00012A                     INT0_SetInterruptHandler@InterruptHandler:
   831                           	opt stack 0
   832  00012A                     TMR0_SetInterruptHandler@InterruptHandler:
   833                           	opt stack 0
   834  00012A                     ___wmul@multiplier:
   835                           	opt stack 0
   836  00012A                     ___lwdiv@dividend:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x0
   840  00012A                     	ds	1
   841  00012B                     _isdigit$2577:
   842                           	opt stack 0
   843  00012B                     putsXLCD@buffer:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x1
   847  00012B                     	ds	1
   848  00012C                     ??_TMR0_Initialize:
   849  00012C                     isdigit@c:
   850                           	opt stack 0
   851  00012C                     ___wmul@multiplicand:
   852                           	opt stack 0
   853  00012C                     ___lwdiv@divisor:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x2
   857  00012C                     	ds	1
   858  00012D                     escreveLinhaLCD@texto:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x3
   862  00012D                     	ds	1
   863  00012E                     ___lwdiv@counter:
   864                           	opt stack 0
   865  00012E                     ___wmul@product:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x4
   869  00012E                     	ds	1
   870  00012F                     escreveLinhaLCD@linha:
   871                           	opt stack 0
   872  00012F                     ___lwdiv@quotient:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x5
   876  00012F                     	ds	1
   877  000130                     
   878                           ; 1 bytes @ 0x6
   879  000130                     	ds	1
   880  000131                     ?___lwmod:
   881                           	opt stack 0
   882  000131                     ___lwmod@dividend:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x7
   886  000131                     	ds	2
   887  000133                     ___lwmod@divisor:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x9
   891  000133                     	ds	2
   892  000135                     ___lwmod@counter:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0xB
   896  000135                     	ds	1
   897  000136                     ?_sprintf:
   898                           	opt stack 0
   899  000136                     sprintf@sp:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0xC
   903  000136                     	ds	2
   904  000138                     sprintf@f:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0xE
   908  000138                     	ds	4
   909  00013C                     ??_sprintf:
   910                           
   911                           ; 1 bytes @ 0x12
   912  00013C                     	ds	4
   913  000140                     sprintf@cp:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x16
   917  000140                     	ds	2
   918  000142                     sprintf@prec:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x18
   922  000142                     	ds	1
   923  000143                     sprintf@flag:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x19
   927  000143                     	ds	1
   928  000144                     sprintf@ap:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x1A
   932  000144                     	ds	2
   933  000146                     sprintf@len:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x1C
   937  000146                     	ds	2
   938  000148                     sprintf@val:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x1E
   942  000148                     	ds	2
   943  00014A                     sprintf@width:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x20
   947  00014A                     	ds	2
   948  00014C                     sprintf@c:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x22
   952  00014C                     	ds	1
   953  00014D                     ??_defTempAlarme:
   954  00014D                     testeTeclado@input:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x23
   958  00014D                     	ds	2
   959  00014F                     defTempAlarme@tmp_Alarme:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x25
   963  00014F                     	ds	1
   964  000150                     defTempAlarme@c1:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x26
   968  000150                     	ds	1
   969  000151                     defTempAlarme@c2:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x27
   973  000151                     	ds	1
   974  000152                     tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           
   981                           ; 1 bytes @ 0x28
   982                           
   983                           	psect	cstackBANK0
   984  0000AA                     __pcstackBANK0:
   985                           	opt stack 0
   986  0000AA                     ??i1_sprintf:
   987  0000AA                     ?___ftsub:
   988                           	opt stack 0
   989  0000AA                     ___ftmul@exp:
   990                           	opt stack 0
   991  0000AA                     ___ftsub@f1:
   992                           	opt stack 0
   993                           
   994                           ; 3 bytes @ 0x0
   995  0000AA                     	ds	1
   996  0000AB                     ___ftmul@f3_as_product:
   997                           	opt stack 0
   998                           
   999                           ; 3 bytes @ 0x1
  1000  0000AB                     	ds	2
  1001  0000AD                     ___ftsub@f2:
  1002                           	opt stack 0
  1003                           
  1004                           ; 3 bytes @ 0x3
  1005  0000AD                     	ds	1
  1006  0000AE                     ___ftmul@cntr:
  1007                           	opt stack 0
  1008  0000AE                     i1sprintf@cp:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x4
  1012  0000AE                     	ds	1
  1013  0000AF                     ___ftmul@sign:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x5
  1017  0000AF                     	ds	1
  1018  0000B0                     i1sprintf@prec:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x6
  1022  0000B0                     	ds	1
  1023  0000B1                     i1sprintf@flag:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x7
  1027  0000B1                     	ds	1
  1028  0000B2                     i1sprintf@ap:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x8
  1032  0000B2                     	ds	2
  1033  0000B4                     i1sprintf@len:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0xA
  1037  0000B4                     	ds	2
  1038  0000B6                     i1sprintf@val:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0xC
  1042  0000B6                     	ds	2
  1043  0000B8                     i1sprintf@width:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0xE
  1047  0000B8                     	ds	2
  1048  0000BA                     i1sprintf@c:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x10
  1052  0000BA                     	ds	1
  1053  0000BB                     ADC_ISR@var2:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x11
  1057  0000BB                     	ds	1
  1058  0000BC                     ADC_ISR@var1:
  1059                           	opt stack 0
  1060                           
  1061                           ; 3 bytes @ 0x12
  1062  0000BC                     	ds	3
  1063  0000BF                     ??_INTERRUPT_InterruptManagerLow:
  1064                           
  1065                           ; 1 bytes @ 0x15
  1066  0000BF                     	ds	21
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           
  1074                           	psect	cstackCOMRAM
  1075  000001                     __pcstackCOMRAM:
  1076                           	opt stack 0
  1077  000001                     ??_I2C1_ISR:
  1078  000001                     TMR2_LoadPeriodRegister@periodVal:
  1079                           	opt stack 0
  1080  000001                     EPWM1_LoadDutyValue@dutyValue:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x0
  1084  000001                     	ds	2
  1085  000003                     ??_EPWM1_LoadDutyValue:
  1086                           
  1087                           ; 1 bytes @ 0x2
  1088  000003                     	ds	2
  1089  000005                     ??_INTERRUPT_InterruptManagerHigh:
  1090                           
  1091                           ; 1 bytes @ 0x4
  1092  000005                     	ds	18
  1093  000017                     ??_EUSART1_Receive_ISR:
  1094  000017                     ??i1_isdigit:
  1095  000017                     ?_ADC_GetConversionResult:
  1096                           	opt stack 0
  1097  000017                     ?i1___wmul:
  1098                           	opt stack 0
  1099  000017                     ?i1___lwdiv:
  1100                           	opt stack 0
  1101  000017                     ?___ftpack:
  1102                           	opt stack 0
  1103  000017                     ?___fttol:
  1104                           	opt stack 0
  1105  000017                     i1EUSART1_Write@txData:
  1106                           	opt stack 0
  1107  000017                     i1___wmul@multiplier:
  1108                           	opt stack 0
  1109  000017                     i1___lwdiv@dividend:
  1110                           	opt stack 0
  1111  000017                     ___ftpack@arg:
  1112                           	opt stack 0
  1113  000017                     ___ftge@ff1:
  1114                           	opt stack 0
  1115  000017                     ___fttol@f1:
  1116                           	opt stack 0
  1117                           
  1118                           ; 3 bytes @ 0x16
  1119  000017                     	ds	1
  1120  000018                     i1_isdigit$2577:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x17
  1124  000018                     	ds	1
  1125  000019                     ??_ADC_GetConversionResult:
  1126  000019                     i1isdigit@c:
  1127                           	opt stack 0
  1128  000019                     i1___wmul@multiplicand:
  1129                           	opt stack 0
  1130  000019                     i1___lwdiv@divisor:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x18
  1134  000019                     	ds	1
  1135  00001A                     ___ftpack@exp:
  1136                           	opt stack 0
  1137  00001A                     ___ftge@ff2:
  1138                           	opt stack 0
  1139                           
  1140                           ; 3 bytes @ 0x19
  1141  00001A                     	ds	1
  1142  00001B                     ??___fttol:
  1143  00001B                     ___ftpack@sign:
  1144                           	opt stack 0
  1145  00001B                     i1___lwdiv@counter:
  1146                           	opt stack 0
  1147  00001B                     i1___wmul@product:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x1A
  1151  00001B                     	ds	1
  1152  00001C                     ??___ftpack:
  1153  00001C                     EUSART1_Receive_ISR@i1:
  1154                           	opt stack 0
  1155  00001C                     i1___lwdiv@quotient:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x1B
  1159  00001C                     	ds	1
  1160  00001D                     ??___ftge:
  1161                           
  1162                           ; 1 bytes @ 0x1C
  1163  00001D                     	ds	1
  1164  00001E                     ?i1___lwmod:
  1165                           	opt stack 0
  1166  00001E                     EUSART1_Receive_ISR@i2:
  1167                           	opt stack 0
  1168  00001E                     i1___lwmod@dividend:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x1D
  1172  00001E                     	ds	1
  1173  00001F                     ?___ftadd:
  1174                           	opt stack 0
  1175  00001F                     ?___awtoft:
  1176                           	opt stack 0
  1177  00001F                     ?___lbtoft:
  1178                           	opt stack 0
  1179  00001F                     ___awtoft@c:
  1180                           	opt stack 0
  1181  00001F                     ___ftadd@f1:
  1182                           	opt stack 0
  1183                           
  1184                           ; 3 bytes @ 0x1E
  1185  00001F                     	ds	1
  1186  000020                     EUSART1_Receive_ISR@tmpAlarme:
  1187                           	opt stack 0
  1188  000020                     ___fttol@sign1:
  1189                           	opt stack 0
  1190  000020                     i1___lwmod@divisor:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x1F
  1194  000020                     	ds	1
  1195  000021                     ___fttol@lval:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x20
  1199  000021                     	ds	1
  1200  000022                     ___awtoft@sign:
  1201                           	opt stack 0
  1202  000022                     ___lbtoft@c:
  1203                           	opt stack 0
  1204  000022                     i1___lwmod@counter:
  1205                           	opt stack 0
  1206  000022                     ___ftadd@f2:
  1207                           	opt stack 0
  1208                           
  1209                           ; 3 bytes @ 0x21
  1210  000022                     	ds	1
  1211  000023                     ?i1_sprintf:
  1212                           	opt stack 0
  1213  000023                     ?___ftmul:
  1214                           	opt stack 0
  1215  000023                     i1sprintf@sp:
  1216                           	opt stack 0
  1217  000023                     ___ftmul@f1:
  1218                           	opt stack 0
  1219                           
  1220                           ; 3 bytes @ 0x22
  1221  000023                     	ds	2
  1222  000025                     ??___ftadd:
  1223  000025                     ___fttol@exp1:
  1224                           	opt stack 0
  1225  000025                     i1sprintf@f:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x24
  1229  000025                     	ds	1
  1230  000026                     ___ftmul@f2:
  1231                           	opt stack 0
  1232                           
  1233                           ; 3 bytes @ 0x25
  1234  000026                     	ds	2
  1235  000028                     ___ftadd@sign:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x27
  1239  000028                     	ds	1
  1240  000029                     ??___ftmul:
  1241  000029                     ___ftadd@exp2:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x28
  1245  000029                     	ds	1
  1246  00002A                     ___ftadd@exp1:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x29
  1250  00002A                     	ds	1
  1251  00002B                     
  1252                           ; 1 bytes @ 0x2A
  1253  00002B                     	ds	2
  1254  00002D                     tblptru	equ	0xFF8
  1255                           tblptrh	equ	0xFF7
  1256                           tblptrl	equ	0xFF6
  1257                           tablat	equ	0xFF5
  1258                           postinc0	equ	0xFEE
  1259                           wreg	equ	0xFE8
  1260                           
  1261                           ; 1 bytes @ 0x2C
  1262 ;;
  1263 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1264 ;;
  1265 ;; *************** function _main *****************
  1266 ;; Defined at:
  1267 ;;		line 52 in file "main.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;		None
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1281 ;;      Params:         0       0       0       0       0       0       0
  1282 ;;      Locals:         0       0       0       0       0       0       0
  1283 ;;      Temps:          0       0       0       0       0       0       0
  1284 ;;      Totals:         0       0       0       0       0       0       0
  1285 ;;Total ram usage:        0 bytes
  1286 ;; Hardware stack levels required when called:   15
  1287 ;; This function calls:
  1288 ;;		_BusyXLCD
  1289 ;;		_OpenXLCD
  1290 ;;		_SYSTEM_Initialize
  1291 ;;		_WriteCmdXLCD
  1292 ;;		_menu
  1293 ;; This function is called by:
  1294 ;;		Startup code after reset
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text0
  1299  001BB6                     __ptext0:
  1300                           	opt stack 0
  1301  001BB6                     _main:
  1302                           	opt stack 16
  1303                           
  1304                           ;main.c: 54: SYSTEM_Initialize();
  1305                           
  1306                           ;incstack = 0
  1307  001BB6  ECF8  F00E         	call	_SYSTEM_Initialize	;wreg free
  1308                           
  1309                           ;main.c: 63: (INTCONbits.GIEH = 1);
  1310  001BBA  8EF2               	bsf	intcon,7,c	;volatile
  1311                           
  1312                           ;main.c: 66: (INTCONbits.GIEL = 1);
  1313  001BBC  8CF2               	bsf	intcon,6,c	;volatile
  1314  001BBE  EC36  F00E         	call	_BusyXLCD	;wreg free
  1315  001BC2  0900               	iorlw	0
  1316  001BC4  A4D8               	btfss	status,2,c
  1317  001BC6  D7FB               	goto	l779
  1318                           
  1319                           ;main.c: 89: OpenXLCD(0b00101111 & 0b00111011);
  1320  001BC8  0E2B               	movlw	43
  1321  001BCA  ECF9  F00A         	call	_OpenXLCD
  1322  001BCE  EC36  F00E         	call	_BusyXLCD	;wreg free
  1323  001BD2  0900               	iorlw	0
  1324  001BD4  A4D8               	btfss	status,2,c
  1325  001BD6  D7FB               	goto	l782
  1326                           
  1327                           ;main.c: 92: WriteCmdXLCD(0b00001111 & 0b00001101 & 0b00001110);
  1328  001BD8  0E0C               	movlw	12
  1329  001BDA  EC77  F00D         	call	_WriteCmdXLCD
  1330  001BDE  EC36  F00E         	call	_BusyXLCD	;wreg free
  1331  001BE2  0900               	iorlw	0
  1332  001BE4  A4D8               	btfss	status,2,c
  1333  001BE6  D7FB               	goto	l785
  1334                           
  1335                           ;main.c: 95: WriteCmdXLCD(0b00010111);
  1336  001BE8  0E17               	movlw	23
  1337  001BEA  EC77  F00D         	call	_WriteCmdXLCD
  1338  001BEE                     
  1339                           ;main.c: 99: menu();
  1340  001BEE  EC72  F007         	call	_menu	;wreg free
  1341  001BF2  D7FD               	goto	l787
  1342  001BF4                     __end_of_main:
  1343                           	opt stack 0
  1344                           tblptru	equ	0xFF8
  1345                           tblptrh	equ	0xFF7
  1346                           tblptrl	equ	0xFF6
  1347                           tablat	equ	0xFF5
  1348                           intcon	equ	0xFF2
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           status	equ	0xFD8
  1352                           
  1353 ;; *************** function _menu *****************
  1354 ;; Defined at:
  1355 ;;		line 113 in file "main.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;		None
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1369 ;;      Params:         0       0       0       0       0       0       0
  1370 ;;      Locals:         0       0       0       0       0       0       0
  1371 ;;      Temps:          0       0       0       0       0       0       0
  1372 ;;      Totals:         0       0       0       0       0       0       0
  1373 ;;Total ram usage:        0 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; Hardware stack levels required when called:   14
  1376 ;; This function calls:
  1377 ;;		_defTempAlarme
  1378 ;;		_escreveLinhaLCD
  1379 ;;		_feedbackUSART
  1380 ;;		_monitorizacao
  1381 ;;		_sprintf
  1382 ;;		_testeTeclado
  1383 ;; This function is called by:
  1384 ;;		_main
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text1
  1389  000EE4                     __ptext1:
  1390                           	opt stack 0
  1391  000EE4                     _menu:
  1392                           	opt stack 16
  1393                           
  1394                           ;main.c: 115: escreveLinhaLCD(128, "Menu         Opcao:");
  1395                           
  1396                           ;incstack = 0
  1397  000EE4  0EC2               	movlw	low STR_2
  1398  000EE6  0101               	movlb	1	; () banked
  1399  000EE8  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1400  000EEA  0E7F               	movlw	high STR_2
  1401  000EEC  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1402  000EEE  0E80               	movlw	128
  1403  000EF0  EC9F  F00E         	call	_escreveLinhaLCD
  1404  000EF4                     
  1405                           ;main.c: 119: if (PORTAbits.RA0 == 0) {
  1406  000EF4  B080               	btfsc	3968,0,c	;volatile
  1407  000EF6  D004               	goto	u7250
  1408                           
  1409                           ;main.c: 120: menu_tmp++;
  1410  000EF8  0100               	movlb	0	; () banked
  1411  000EFA  2BDC               	incf	_menu_tmp& (0+255),f,b	;volatile
  1412  000EFC                     
  1413                           ; BSR set to: 0
  1414  000EFC  A080               	btfss	3968,0,c	;volatile
  1415  000EFE  D7FE               	goto	l805
  1416  000F00                     u7250:
  1417                           
  1418                           ;main.c: 122: }
  1419                           ;main.c: 124: if (PORTAbits.RA2 == 0) {
  1420  000F00  B480               	btfsc	3968,2,c	;volatile
  1421  000F02  D004               	goto	u7270
  1422                           
  1423                           ;main.c: 125: menu_tmp--;
  1424  000F04  0100               	movlb	0	; () banked
  1425  000F06  07DC               	decf	_menu_tmp& (0+255),f,b	;volatile
  1426  000F08                     
  1427                           ; BSR set to: 0
  1428  000F08  A480               	btfss	3968,2,c	;volatile
  1429  000F0A  D7FE               	goto	l809
  1430  000F0C                     u7270:
  1431                           
  1432                           ;main.c: 127: }
  1433                           ;main.c: 129: if (menu_tmp > 4)
  1434  000F0C  0E04               	movlw	4
  1435  000F0E  0100               	movlb	0	; () banked
  1436  000F10  65DC               	cpfsgt	_menu_tmp& (0+255),b	;volatile
  1437  000F12  D002               	goto	l811
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;main.c: 130: menu_tmp = 1;
  1441  000F14  0E01               	movlw	1
  1442  000F16  6FDC               	movwf	_menu_tmp& (0+255),b	;volatile
  1443  000F18                     l811:
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;main.c: 131: if (menu_tmp < 1)
  1447  000F18  51DC               	movf	_menu_tmp& (0+255),w,b	;volatile
  1448  000F1A  A4D8               	btfss	status,2,c
  1449  000F1C  D002               	goto	l812
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;main.c: 132: menu_tmp = 4;
  1453  000F1E  0E04               	movlw	4
  1454  000F20  6FDC               	movwf	_menu_tmp& (0+255),b	;volatile
  1455  000F22                     l812:
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;main.c: 134: if (lastMenu != menu_tmp) {
  1459                           
  1460                           ; BSR set to: 0
  1461  000F22  51DC               	movf	_menu_tmp& (0+255),w,b	;volatile
  1462  000F24  196D               	xorwf	_lastMenu& (0+255),w,b	;volatile
  1463  000F26  B4D8               	btfsc	status,2,c
  1464  000F28  D004               	goto	l813
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 135: update = 1;
  1468  000F2A  0E01               	movlw	1
  1469  000F2C  6FDD               	movwf	_update& (0+255),b	;volatile
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;main.c: 136: lastMenu = menu_tmp;
  1473  000F2E  C0DC  F06D         	movff	_menu_tmp,_lastMenu	;volatile
  1474  000F32                     l813:
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;main.c: 137: }
  1478                           ;main.c: 139: if (update) {
  1479  000F32  51DD               	movf	_update& (0+255),w,b	;volatile
  1480  000F34  B4D8               	btfsc	status,2,c
  1481  000F36  D04C               	goto	l814
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;main.c: 140: sprintf(strLCD, "%d", menu_tmp);
  1485  000F38  0E00               	movlw	low _strLCD
  1486  000F3A  0101               	movlb	1	; () banked
  1487  000F3C  6F36               	movwf	sprintf@sp& (0+255),b
  1488  000F3E  0E01               	movlw	high _strLCD
  1489  000F40  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1490  000F42  0EFB               	movlw	low STR_3
  1491  000F44  6F38               	movwf	sprintf@f& (0+255),b
  1492  000F46  0E7F               	movlw	high STR_3
  1493  000F48  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1494  000F4A  C0DC  F13A         	movff	_menu_tmp,?_sprintf+4	;volatile
  1495  000F4E  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1496  000F50  EC70  F000         	call	_sprintf	;wreg free
  1497                           
  1498                           ;main.c: 141: escreveLinhaLCD(128 + 19, strLCD);
  1499  000F54  0E00               	movlw	low _strLCD
  1500  000F56  0101               	movlb	1	; () banked
  1501  000F58  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1502  000F5A  0E01               	movlw	high _strLCD
  1503  000F5C  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1504  000F5E  0E93               	movlw	147
  1505  000F60  EC9F  F00E         	call	_escreveLinhaLCD
  1506                           
  1507                           ;main.c: 142: switch (menu_tmp) {
  1508  000F64  D024               	goto	l815
  1509  000F66                     
  1510                           ;main.c: 144: escreveLinhaLCD(192, "Monitorizacao        ");
  1511  000F66  0EEA               	movlw	low STR_4
  1512  000F68  0101               	movlb	1	; () banked
  1513  000F6A  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1514  000F6C  0E7E               	movlw	high STR_4
  1515  000F6E  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1516  000F70  0EC0               	movlw	192
  1517  000F72  EC9F  F00E         	call	_escreveLinhaLCD
  1518                           
  1519                           ;main.c: 145: break;
  1520  000F76  D029               	goto	l817
  1521  000F78                     
  1522                           ;main.c: 147: escreveLinhaLCD(192, "Temp. de alarme      ");
  1523  000F78  0E16               	movlw	low STR_5
  1524  000F7A  0101               	movlb	1	; () banked
  1525  000F7C  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1526  000F7E  0E7F               	movlw	high STR_5
  1527  000F80  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1528  000F82  0EC0               	movlw	192
  1529  000F84  EC9F  F00E         	call	_escreveLinhaLCD
  1530                           
  1531                           ;main.c: 148: break;
  1532  000F88  D020               	goto	l817
  1533  000F8A                     
  1534                           ;main.c: 150: escreveLinhaLCD(192, "Teste do teclado     ");
  1535  000F8A  0E2C               	movlw	low STR_6
  1536  000F8C  0101               	movlb	1	; () banked
  1537  000F8E  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1538  000F90  0E7F               	movlw	high STR_6
  1539  000F92  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1540  000F94  0EC0               	movlw	192
  1541  000F96  EC9F  F00E         	call	_escreveLinhaLCD
  1542                           
  1543                           ;main.c: 151: break;
  1544  000F9A  D017               	goto	l817
  1545  000F9C                     
  1546                           ;main.c: 153: escreveLinhaLCD(192, "Feedback EUSART      ");
  1547  000F9C  0E00               	movlw	low STR_7
  1548  000F9E  0101               	movlb	1	; () banked
  1549  000FA0  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1550  000FA2  0E7F               	movlw	high STR_7
  1551  000FA4  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1552  000FA6  0EC0               	movlw	192
  1553  000FA8  EC9F  F00E         	call	_escreveLinhaLCD
  1554                           
  1555                           ;main.c: 155: }
  1556                           
  1557                           ;main.c: 154: break;
  1558  000FAC  D00E               	goto	l817
  1559  000FAE                     l815:
  1560  000FAE  0100               	movlb	0	; () banked
  1561  000FB0  51DC               	movf	_menu_tmp& (0+255),w,b	;volatile
  1562                           
  1563                           ; Switch size 1, requested type "space"
  1564                           ; Number of cases is 4, Range of values is 1 to 4
  1565                           ; switch strategies available:
  1566                           ; Name         Instructions Cycles
  1567                           ; simple_byte           13     7 (average)
  1568                           ;	Chosen strategy is simple_byte
  1569  000FB2  0A01               	xorlw	1	; case 1
  1570  000FB4  B4D8               	btfsc	status,2,c
  1571  000FB6  D7D7               	goto	l816
  1572  000FB8  0A03               	xorlw	3	; case 2
  1573  000FBA  B4D8               	btfsc	status,2,c
  1574  000FBC  D7DD               	goto	l818
  1575  000FBE  0A01               	xorlw	1	; case 3
  1576  000FC0  B4D8               	btfsc	status,2,c
  1577  000FC2  D7E3               	goto	l819
  1578  000FC4  0A07               	xorlw	7	; case 4
  1579  000FC6  B4D8               	btfsc	status,2,c
  1580  000FC8  D7E9               	goto	l820
  1581  000FCA                     l817:
  1582                           
  1583                           ;main.c: 156: update = 0;
  1584                           
  1585                           ; BSR set to: 0
  1586  000FCA  0E00               	movlw	0
  1587  000FCC  0100               	movlb	0	; () banked
  1588  000FCE  6FDD               	movwf	_update& (0+255),b	;volatile
  1589  000FD0                     l814:
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;main.c: 157: }
  1593                           ;main.c: 159: if (PORTAbits.RA1 == 0) {
  1594                           
  1595                           ; BSR set to: 0
  1596  000FD0  B280               	btfsc	3968,1,c	;volatile
  1597  000FD2  D790               	goto	l802
  1598  000FD4                     u7320:
  1599                           
  1600                           ; BSR set to: 0
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;main.c: 160: while (PORTAbits.RA1 == 0);
  1604  000FD4  B280               	btfsc	3968,1,c	;volatile
  1605  000FD6  D00D               	goto	l825
  1606  000FD8  D7FD               	goto	u7320
  1607  000FDA                     
  1608                           ;main.c: 163: monitorizacao();
  1609  000FDA  EC21  F006         	call	_monitorizacao	;wreg free
  1610                           
  1611                           ;main.c: 164: break;
  1612  000FDE  D017               	goto	l827
  1613  000FE0                     
  1614                           ;main.c: 166: defTempAlarme();
  1615  000FE0  ECAF  F008         	call	_defTempAlarme	;wreg free
  1616                           
  1617                           ;main.c: 167: break;
  1618  000FE4  D014               	goto	l827
  1619  000FE6                     
  1620                           ;main.c: 169: testeTeclado();
  1621  000FE6  EC30  F00C         	call	_testeTeclado	;wreg free
  1622                           
  1623                           ;main.c: 170: break;
  1624  000FEA  D011               	goto	l827
  1625  000FEC                     
  1626                           ;main.c: 172: feedbackUSART();
  1627  000FEC  EC8F  F00A         	call	_feedbackUSART	;wreg free
  1628                           
  1629                           ;main.c: 174: }
  1630                           
  1631                           ;main.c: 173: break;
  1632  000FF0  D00E               	goto	l827
  1633  000FF2                     l825:
  1634  000FF2  0100               	movlb	0	; () banked
  1635  000FF4  51DC               	movf	_menu_tmp& (0+255),w,b	;volatile
  1636                           
  1637                           ; Switch size 1, requested type "space"
  1638                           ; Number of cases is 4, Range of values is 1 to 4
  1639                           ; switch strategies available:
  1640                           ; Name         Instructions Cycles
  1641                           ; simple_byte           13     7 (average)
  1642                           ;	Chosen strategy is simple_byte
  1643  000FF6  0A01               	xorlw	1	; case 1
  1644  000FF8  B4D8               	btfsc	status,2,c
  1645  000FFA  D7EF               	goto	l826
  1646  000FFC  0A03               	xorlw	3	; case 2
  1647  000FFE  B4D8               	btfsc	status,2,c
  1648  001000  D7EF               	goto	l828
  1649  001002  0A01               	xorlw	1	; case 3
  1650  001004  B4D8               	btfsc	status,2,c
  1651  001006  D7EF               	goto	l829
  1652  001008  0A07               	xorlw	7	; case 4
  1653  00100A  B4D8               	btfsc	status,2,c
  1654  00100C  D7EF               	goto	l830
  1655  00100E                     l827:
  1656                           
  1657                           ;main.c: 175: update = 1;
  1658                           
  1659                           ; BSR set to: 0
  1660  00100E  0E01               	movlw	1
  1661  001010  0100               	movlb	0	; () banked
  1662  001012  6FDD               	movwf	_update& (0+255),b	;volatile
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;main.c: 176: escreveLinhaLCD(128, "Menu         Opcao:");
  1666  001014  0EC2               	movlw	low STR_2
  1667  001016  0101               	movlb	1	; () banked
  1668  001018  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1669  00101A  0E7F               	movlw	high STR_2
  1670  00101C  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1671  00101E  0E80               	movlw	128
  1672  001020  EC9F  F00E         	call	_escreveLinhaLCD
  1673  001024  D767               	goto	l802
  1674  001026                     __end_of_menu:
  1675                           	opt stack 0
  1676                           tblptru	equ	0xFF8
  1677                           tblptrh	equ	0xFF7
  1678                           tblptrl	equ	0xFF6
  1679                           tablat	equ	0xFF5
  1680                           intcon	equ	0xFF2
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           status	equ	0xFD8
  1684                           
  1685 ;; *************** function _testeTeclado *****************
  1686 ;; Defined at:
  1687 ;;		line 222 in file "main.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;		None
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;  input           1   35[BANK1 ] unsigned char 
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  1    wreg      void 
  1694 ;; Registers used:
  1695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1701 ;;      Params:         0       0       0       0       0       0       0
  1702 ;;      Locals:         0       0       1       0       0       0       0
  1703 ;;      Temps:          0       0       0       0       0       0       0
  1704 ;;      Totals:         0       0       1       0       0       0       0
  1705 ;;Total ram usage:        1 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:   13
  1708 ;; This function calls:
  1709 ;;		_escreveLinhaLCD
  1710 ;;		_getKBInput
  1711 ;;		_sprintf
  1712 ;; This function is called by:
  1713 ;;		_menu
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text2
  1718  001860                     __ptext2:
  1719                           	opt stack 0
  1720  001860                     _testeTeclado:
  1721                           	opt stack 16
  1722                           
  1723                           ;main.c: 224: char input;
  1724                           ;main.c: 226: escreveLinhaLCD(128, "Teste Teclado       ");
  1725                           
  1726                           ;incstack = 0
  1727  001860  0E98               	movlw	low STR_16
  1728  001862  0101               	movlb	1	; () banked
  1729  001864  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1730  001866  0E7F               	movlw	high STR_16
  1731  001868  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1732  00186A  0E80               	movlw	128
  1733  00186C  EC9F  F00E         	call	_escreveLinhaLCD
  1734                           
  1735                           ;main.c: 227: escreveLinhaLCD(192, "Numero:             ");
  1736  001870  0E6E               	movlw	low STR_17
  1737  001872  0101               	movlb	1	; () banked
  1738  001874  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1739  001876  0E7F               	movlw	high STR_17
  1740  001878  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1741  00187A  0EC0               	movlw	192
  1742  00187C  EC9F  F00E         	call	_escreveLinhaLCD
  1743                           
  1744                           ;main.c: 230: while (PORTAbits.RA1 != 0) {
  1745  001880  D019               	goto	l857
  1746  001882                     
  1747                           ;main.c: 231: input = getKBInput();
  1748  001882  EC5F  F00C         	call	_getKBInput	;wreg free
  1749  001886  0101               	movlb	1	; () banked
  1750  001888  6F4D               	movwf	testeTeclado@input& (0+255),b
  1751                           
  1752                           ; BSR set to: 1
  1753                           ;main.c: 232: sprintf(strLCD, "%c", input);
  1754  00188A  0E00               	movlw	low _strLCD
  1755  00188C  6F36               	movwf	sprintf@sp& (0+255),b
  1756  00188E  0E01               	movlw	high _strLCD
  1757  001890  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1758  001892  0EF8               	movlw	low STR_18
  1759  001894  6F38               	movwf	sprintf@f& (0+255),b
  1760  001896  0E7F               	movlw	high STR_18
  1761  001898  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1762  00189A  C14D  F13A         	movff	testeTeclado@input,?_sprintf+4
  1763  00189E  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1764  0018A0  EC70  F000         	call	_sprintf	;wreg free
  1765                           
  1766                           ;main.c: 233: escreveLinhaLCD(192 + 8, strLCD);
  1767  0018A4  0E00               	movlw	low _strLCD
  1768  0018A6  0101               	movlb	1	; () banked
  1769  0018A8  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1770  0018AA  0E01               	movlw	high _strLCD
  1771  0018AC  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1772  0018AE  0EC8               	movlw	200
  1773  0018B0  EC9F  F00E         	call	_escreveLinhaLCD
  1774  0018B4                     l857:
  1775  0018B4  B280               	btfsc	3968,1,c	;volatile
  1776  0018B6  D7E5               	goto	l858
  1777  0018B8                     u6660:
  1778                           
  1779                           ;main.c: 234: }
  1780                           ;main.c: 236: while (PORTAbits.RA1 == 0);
  1781  0018B8  B280               	btfsc	3968,1,c	;volatile
  1782  0018BA  0012               	return	
  1783  0018BC  D7FD               	goto	u6660
  1784  0018BE                     __end_of_testeTeclado:
  1785                           	opt stack 0
  1786                           tblptru	equ	0xFF8
  1787                           tblptrh	equ	0xFF7
  1788                           tblptrl	equ	0xFF6
  1789                           tablat	equ	0xFF5
  1790                           intcon	equ	0xFF2
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           status	equ	0xFD8
  1794                           
  1795 ;; *************** function _monitorizacao *****************
  1796 ;; Defined at:
  1797 ;;		line 182 in file "main.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1811 ;;      Params:         0       0       0       0       0       0       0
  1812 ;;      Locals:         0       0       0       0       0       0       0
  1813 ;;      Temps:          0       0       0       0       0       0       0
  1814 ;;      Totals:         0       0       0       0       0       0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:   13
  1818 ;; This function calls:
  1819 ;;		_escreveLinhaLCD
  1820 ;;		_sprintf
  1821 ;; This function is called by:
  1822 ;;		_menu
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text3
  1827  000C42                     __ptext3:
  1828                           	opt stack 0
  1829  000C42                     _monitorizacao:
  1830                           	opt stack 16
  1831                           
  1832                           ;main.c: 184: sprintf(strLCD, "Temp. Atual:  %2d oC ", tempAtual);
  1833                           
  1834                           ;incstack = 0
  1835  000C42  0E00               	movlw	low _strLCD
  1836  000C44  0101               	movlb	1	; () banked
  1837  000C46  6F36               	movwf	sprintf@sp& (0+255),b
  1838  000C48  0E01               	movlw	high _strLCD
  1839  000C4A  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1840  000C4C  0E42               	movlw	low STR_9
  1841  000C4E  6F38               	movwf	sprintf@f& (0+255),b
  1842  000C50  0E7F               	movlw	high STR_9
  1843  000C52  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1844  000C54  C047  F13A         	movff	_tempAtual,?_sprintf+4	;volatile
  1845  000C58  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1846  000C5A  EC70  F000         	call	_sprintf	;wreg free
  1847                           
  1848                           ;main.c: 185: escreveLinhaLCD(128, strLCD);
  1849  000C5E  0E00               	movlw	low _strLCD
  1850  000C60  0101               	movlb	1	; () banked
  1851  000C62  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1852  000C64  0E01               	movlw	high _strLCD
  1853  000C66  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1854  000C68  0E80               	movlw	128
  1855  000C6A  EC9F  F00E         	call	_escreveLinhaLCD
  1856                           
  1857                           ;main.c: 186: sprintf(strLCD, "Temp. Alarme: %2d oC ", tempAlarme);
  1858  000C6E  0E00               	movlw	low _strLCD
  1859  000C70  0101               	movlb	1	; () banked
  1860  000C72  6F36               	movwf	sprintf@sp& (0+255),b
  1861  000C74  0E01               	movlw	high _strLCD
  1862  000C76  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1863  000C78  0E58               	movlw	low STR_10
  1864  000C7A  6F38               	movwf	sprintf@f& (0+255),b
  1865  000C7C  0E7F               	movlw	high STR_10
  1866  000C7E  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1867  000C80  C048  F13A         	movff	_tempAlarme,?_sprintf+4	;volatile
  1868  000C84  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1869  000C86  EC70  F000         	call	_sprintf	;wreg free
  1870                           
  1871                           ;main.c: 187: escreveLinhaLCD(192, strLCD);
  1872  000C8A  0E00               	movlw	low _strLCD
  1873  000C8C  0101               	movlb	1	; () banked
  1874  000C8E  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1875  000C90  0E01               	movlw	high _strLCD
  1876  000C92  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1877  000C94  0EC0               	movlw	192
  1878  000C96  EC9F  F00E         	call	_escreveLinhaLCD
  1879                           
  1880                           ;main.c: 190: while (clk4Hz) {
  1881                           
  1882                           ;main.c: 189: do {
  1883  000C9A  D078               	goto	u6540
  1884  000C9C                     
  1885                           ;main.c: 192: if (alarme) {
  1886  000C9C  5039               	movf	_alarme,w,c	;volatile
  1887  000C9E  A4D8               	btfss	status,2,c
  1888  000CA0  D01C               	goto	l840
  1889  000CA2  D02B               	goto	l839
  1890  000CA4                     
  1891                           ;main.c: 195: sprintf(strLCD, "!ALARME! TEMP>");
  1892  000CA4  0E00               	movlw	low _strLCD
  1893  000CA6  0101               	movlb	1	; () banked
  1894  000CA8  6F36               	movwf	sprintf@sp& (0+255),b
  1895  000CAA  0E01               	movlw	high _strLCD
  1896  000CAC  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1897  000CAE  0EE5               	movlw	low STR_11
  1898  000CB0  6F38               	movwf	sprintf@f& (0+255),b
  1899  000CB2  0E7F               	movlw	high STR_11
  1900  000CB4  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1901  000CB6  EC70  F000         	call	_sprintf	;wreg free
  1902                           
  1903                           ;main.c: 196: update = 1;
  1904  000CBA  0E01               	movlw	1
  1905  000CBC  0100               	movlb	0	; () banked
  1906  000CBE  6FDD               	movwf	_update& (0+255),b	;volatile
  1907                           
  1908                           ;main.c: 197: break;
  1909  000CC0  D013               	goto	l842
  1910  000CC2                     
  1911                           ;main.c: 199: sprintf(strLCD, "Temp. Alarme: ");
  1912                           
  1913                           ; BSR set to: 0
  1914  000CC2  0E00               	movlw	low _strLCD
  1915  000CC4  0101               	movlb	1	; () banked
  1916  000CC6  6F36               	movwf	sprintf@sp& (0+255),b
  1917  000CC8  0E01               	movlw	high _strLCD
  1918  000CCA  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1919  000CCC  0ED6               	movlw	low STR_12
  1920  000CCE  6F38               	movwf	sprintf@f& (0+255),b
  1921  000CD0  0E7F               	movlw	high STR_12
  1922  000CD2  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1923  000CD4  EC70  F000         	call	_sprintf	;wreg free
  1924                           
  1925                           ;main.c: 201: }
  1926                           
  1927                           ;main.c: 200: break;
  1928  000CD8  D007               	goto	l842
  1929  000CDA                     l840:
  1930  000CDA  503C               	movf	_clk1_2Hz,w,c	;volatile
  1931                           
  1932                           ; Switch size 1, requested type "space"
  1933                           ; Number of cases is 2, Range of values is 0 to 1
  1934                           ; switch strategies available:
  1935                           ; Name         Instructions Cycles
  1936                           ; simple_byte            7     4 (average)
  1937                           ;	Chosen strategy is simple_byte
  1938  000CDC  0A00               	xorlw	0	; case 0
  1939  000CDE  B4D8               	btfsc	status,2,c
  1940  000CE0  D7F0               	goto	l843
  1941  000CE2  0A01               	xorlw	1	; case 1
  1942  000CE4  B4D8               	btfsc	status,2,c
  1943  000CE6  D7DE               	goto	l841
  1944  000CE8                     l842:
  1945                           
  1946                           ;main.c: 202: escreveLinhaLCD(192, strLCD);
  1947  000CE8  0E00               	movlw	low _strLCD
  1948  000CEA  0101               	movlb	1	; () banked
  1949  000CEC  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1950  000CEE  0E01               	movlw	high _strLCD
  1951  000CF0  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1952  000CF2  0EC0               	movlw	192
  1953  000CF4  EC9F  F00E         	call	_escreveLinhaLCD
  1954                           
  1955                           ;main.c: 203: } else if (update) {
  1956  000CF8  D01A               	goto	l845
  1957  000CFA                     l839:
  1958  000CFA  0100               	movlb	0	; () banked
  1959  000CFC  51DD               	movf	_update& (0+255),w,b	;volatile
  1960  000CFE  B4D8               	btfsc	status,2,c
  1961  000D00  D016               	goto	l845
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;main.c: 204: sprintf(strLCD, "Temp. Alarme: ");
  1965  000D02  0E00               	movlw	low _strLCD
  1966  000D04  0101               	movlb	1	; () banked
  1967  000D06  6F36               	movwf	sprintf@sp& (0+255),b
  1968  000D08  0E01               	movlw	high _strLCD
  1969  000D0A  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1970  000D0C  0ED6               	movlw	low STR_12
  1971  000D0E  6F38               	movwf	sprintf@f& (0+255),b
  1972  000D10  0E7F               	movlw	high STR_12
  1973  000D12  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1974  000D14  EC70  F000         	call	_sprintf	;wreg free
  1975                           
  1976                           ;main.c: 205: escreveLinhaLCD(192, strLCD);
  1977  000D18  0E00               	movlw	low _strLCD
  1978  000D1A  0101               	movlb	1	; () banked
  1979  000D1C  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1980  000D1E  0E01               	movlw	high _strLCD
  1981  000D20  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1982  000D22  0EC0               	movlw	192
  1983  000D24  EC9F  F00E         	call	_escreveLinhaLCD
  1984                           
  1985                           ;main.c: 206: update = 0;
  1986  000D28  0E00               	movlw	0
  1987  000D2A  0100               	movlb	0	; () banked
  1988  000D2C  6FDD               	movwf	_update& (0+255),b	;volatile
  1989  000D2E                     l845:
  1990                           
  1991                           ;main.c: 207: }
  1992                           ;main.c: 209: sprintf(strLCD, "%2d", tempAtual);
  1993                           
  1994                           ; BSR set to: 0
  1995                           
  1996                           ; BSR set to: 0
  1997  000D2E  0E00               	movlw	low _strLCD
  1998  000D30  0101               	movlb	1	; () banked
  1999  000D32  6F36               	movwf	sprintf@sp& (0+255),b
  2000  000D34  0E01               	movlw	high _strLCD
  2001  000D36  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  2002  000D38  0EF4               	movlw	low STR_14
  2003  000D3A  6F38               	movwf	sprintf@f& (0+255),b
  2004  000D3C  0E7F               	movlw	high STR_14
  2005  000D3E  6F39               	movwf	(sprintf@f+1)& (0+255),b
  2006  000D40  C047  F13A         	movff	_tempAtual,?_sprintf+4	;volatile
  2007  000D44  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  2008  000D46  EC70  F000         	call	_sprintf	;wreg free
  2009                           
  2010                           ;main.c: 210: escreveLinhaLCD(128 + 14, strLCD);
  2011  000D4A  0E00               	movlw	low _strLCD
  2012  000D4C  0101               	movlb	1	; () banked
  2013  000D4E  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2014  000D50  0E01               	movlw	high _strLCD
  2015  000D52  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2016  000D54  0E8E               	movlw	142
  2017  000D56  EC9F  F00E         	call	_escreveLinhaLCD
  2018                           
  2019                           ;main.c: 211: sprintf(strLCD, "%2d", tempAlarme);
  2020  000D5A  0E00               	movlw	low _strLCD
  2021  000D5C  0101               	movlb	1	; () banked
  2022  000D5E  6F36               	movwf	sprintf@sp& (0+255),b
  2023  000D60  0E01               	movlw	high _strLCD
  2024  000D62  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  2025  000D64  0EF4               	movlw	low STR_14
  2026  000D66  6F38               	movwf	sprintf@f& (0+255),b
  2027  000D68  0E7F               	movlw	high STR_14
  2028  000D6A  6F39               	movwf	(sprintf@f+1)& (0+255),b
  2029  000D6C  C048  F13A         	movff	_tempAlarme,?_sprintf+4	;volatile
  2030  000D70  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  2031  000D72  EC70  F000         	call	_sprintf	;wreg free
  2032                           
  2033                           ;main.c: 212: escreveLinhaLCD(192 + 14, strLCD);
  2034  000D76  0E00               	movlw	low _strLCD
  2035  000D78  0101               	movlb	1	; () banked
  2036  000D7A  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2037  000D7C  0E01               	movlw	high _strLCD
  2038  000D7E  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2039  000D80  0ECE               	movlw	206
  2040  000D82  EC9F  F00E         	call	_escreveLinhaLCD
  2041  000D86  503F               	movf	_clk4Hz,w,c	;volatile
  2042  000D88  A4D8               	btfss	status,2,c
  2043  000D8A  D7FD               	goto	l847
  2044  000D8C                     u6540:
  2045  000D8C  503F               	movf	_clk4Hz,w,c	;volatile
  2046  000D8E  A4D8               	btfss	status,2,c
  2047  000D90  D785               	goto	l838
  2048                           
  2049                           ;main.c: 215: }
  2050                           ;main.c: 216: } while (PORTAbits.RA1 != 0);
  2051  000D92  B280               	btfsc	3968,1,c	;volatile
  2052  000D94  D7FB               	goto	u6540
  2053  000D96                     u6560:
  2054                           
  2055                           ;main.c: 218: while (PORTAbits.RA1 == 0);
  2056  000D96  B280               	btfsc	3968,1,c	;volatile
  2057  000D98  0012               	return	
  2058  000D9A  D7FD               	goto	u6560
  2059  000D9C                     __end_of_monitorizacao:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           intcon	equ	0xFF2
  2066                           postinc0	equ	0xFEE
  2067                           wreg	equ	0xFE8
  2068                           status	equ	0xFD8
  2069                           
  2070 ;; *************** function _feedbackUSART *****************
  2071 ;; Defined at:
  2072 ;;		line 324 in file "main.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2086 ;;      Params:         0       0       0       0       0       0       0
  2087 ;;      Locals:         0       0       0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0
  2089 ;;      Totals:         0       0       0       0       0       0       0
  2090 ;;Total ram usage:        0 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:   13
  2093 ;; This function calls:
  2094 ;;		_BusyXLCD
  2095 ;;		_EUSART1_Write
  2096 ;;		_WriteCmdXLCD
  2097 ;;		_escreveLinhaLCD
  2098 ;; This function is called by:
  2099 ;;		_menu
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text4
  2104  00151E                     __ptext4:
  2105                           	opt stack 0
  2106  00151E                     _feedbackUSART:
  2107                           	opt stack 16
  2108                           
  2109                           ;main.c: 326: while (BusyXLCD());
  2110                           
  2111                           ;incstack = 0
  2112  00151E  EC36  F00E         	call	_BusyXLCD	;wreg free
  2113  001522  0900               	iorlw	0
  2114  001524  A4D8               	btfss	status,2,c
  2115  001526  D7FB               	goto	_feedbackUSART
  2116                           
  2117                           ;main.c: 327: WriteCmdXLCD(1);
  2118  001528  0E01               	movlw	1
  2119  00152A  EC77  F00D         	call	_WriteCmdXLCD
  2120                           
  2121                           ;main.c: 329: while (PORTAbits.RA1 != 0) {
  2122  00152E  D058               	goto	l910
  2123  001530                     
  2124                           ;main.c: 331: eusart_Tx_On = 1;
  2125  001530  0E01               	movlw	1
  2126  001532  6E36               	movwf	_eusart_Tx_On,c	;volatile
  2127                           
  2128                           ;main.c: 332: eusart_Tx_En = 1;
  2129  001534  0E01               	movlw	1
  2130  001536  6E37               	movwf	_eusart_Tx_En,c	;volatile
  2131  001538  0436               	decf	_eusart_Tx_On,w,c	;volatile
  2132  00153A  B4D8               	btfsc	status,2,c
  2133  00153C  D7FD               	goto	l913
  2134                           
  2135                           ;main.c: 336: for (i = 0; i < 42 - 1; i++) {
  2136  00153E  0E00               	movlw	0
  2137  001540  6E41               	movwf	_i,c	;volatile
  2138  001542                     l5976:
  2139  001542  0E28               	movlw	40
  2140  001544  6441               	cpfsgt	_i,c	;volatile
  2141  001546  D001               	goto	l915
  2142  001548  D014               	goto	u6710
  2143  00154A                     l915:
  2144                           
  2145                           ;main.c: 337: strLCD[i] = strUSART[i];
  2146  00154A  5041               	movf	_i,w,c	;volatile
  2147  00154C  0D01               	mullw	1
  2148  00154E  0E6E               	movlw	low _strUSART
  2149  001550  24F3               	addwf	prodl,w,c
  2150  001552  6ED9               	movwf	fsr2l,c
  2151  001554  0E00               	movlw	high _strUSART
  2152  001556  20F4               	addwfc	prodh,w,c
  2153  001558  6EDA               	movwf	fsr2h,c
  2154  00155A  5041               	movf	_i,w,c	;volatile
  2155  00155C  0D01               	mullw	1
  2156  00155E  0E00               	movlw	low _strLCD
  2157  001560  24F3               	addwf	prodl,w,c
  2158  001562  6EE1               	movwf	fsr1l,c
  2159  001564  0E01               	movlw	high _strLCD
  2160  001566  20F4               	addwfc	prodh,w,c
  2161  001568  6EE2               	movwf	fsr1h,c
  2162  00156A  CFDF FFE7          	movff	indf2,indf1
  2163  00156E  2A41               	incf	_i,f,c	;volatile
  2164  001570  D7E8               	goto	l5976
  2165  001572                     u6710:
  2166                           
  2167                           ;main.c: 338: }
  2168                           ;main.c: 341: for (i = 0; strUSART[i] != '\0'; i++) {
  2169  001572  0E00               	movlw	0
  2170  001574  6E41               	movwf	_i,c	;volatile
  2171  001576  D016               	goto	l917
  2172  001578                     
  2173                           ;main.c: 342: EUSART1_Write(strUSART[i]);
  2174  001578  5041               	movf	_i,w,c	;volatile
  2175  00157A  0D01               	mullw	1
  2176  00157C  0E6E               	movlw	low _strUSART
  2177  00157E  24F3               	addwf	prodl,w,c
  2178  001580  6ED9               	movwf	fsr2l,c
  2179  001582  0E00               	movlw	high _strUSART
  2180  001584  20F4               	addwfc	prodh,w,c
  2181  001586  6EDA               	movwf	fsr2h,c
  2182  001588  50DF               	movf	indf2,w,c
  2183  00158A  EC0D  F010         	call	_EUSART1_Write
  2184                           
  2185                           ;main.c: 343: strUSART[i] = '\0';
  2186  00158E  5041               	movf	_i,w,c	;volatile
  2187  001590  0D01               	mullw	1
  2188  001592  0E6E               	movlw	low _strUSART
  2189  001594  24F3               	addwf	prodl,w,c
  2190  001596  6ED9               	movwf	fsr2l,c
  2191  001598  0E00               	movlw	high _strUSART
  2192  00159A  20F4               	addwfc	prodh,w,c
  2193  00159C  6EDA               	movwf	fsr2h,c
  2194  00159E  0E00               	movlw	0
  2195  0015A0  6EDF               	movwf	indf2,c
  2196  0015A2  2A41               	incf	_i,f,c	;volatile
  2197  0015A4                     l917:
  2198  0015A4  5041               	movf	_i,w,c	;volatile
  2199  0015A6  0D01               	mullw	1
  2200  0015A8  0E6E               	movlw	low _strUSART
  2201  0015AA  24F3               	addwf	prodl,w,c
  2202  0015AC  6ED9               	movwf	fsr2l,c
  2203  0015AE  0E00               	movlw	high _strUSART
  2204  0015B0  20F4               	addwfc	prodh,w,c
  2205  0015B2  6EDA               	movwf	fsr2h,c
  2206  0015B4  50DF               	movf	indf2,w,c
  2207  0015B6  A4D8               	btfss	status,2,c
  2208  0015B8  D7DF               	goto	l918
  2209                           
  2210                           ;main.c: 344: }
  2211                           ;main.c: 347: EUSART1_Write('\r');
  2212  0015BA  0E0D               	movlw	13
  2213  0015BC  EC0D  F010         	call	_EUSART1_Write
  2214  0015C0  EC36  F00E         	call	_BusyXLCD	;wreg free
  2215  0015C4  0900               	iorlw	0
  2216  0015C6  A4D8               	btfss	status,2,c
  2217  0015C8  D7FB               	goto	l921
  2218                           
  2219                           ;main.c: 350: WriteCmdXLCD(1);
  2220  0015CA  0E01               	movlw	1
  2221  0015CC  EC77  F00D         	call	_WriteCmdXLCD
  2222                           
  2223                           ;main.c: 351: escreveLinhaLCD(128, strLCD);
  2224  0015D0  0E00               	movlw	low _strLCD
  2225  0015D2  0101               	movlb	1	; () banked
  2226  0015D4  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2227  0015D6  0E01               	movlw	high _strLCD
  2228  0015D8  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2229  0015DA  0E80               	movlw	128
  2230  0015DC  EC9F  F00E         	call	_escreveLinhaLCD
  2231  0015E0                     l910:
  2232  0015E0  B280               	btfsc	3968,1,c	;volatile
  2233  0015E2  D7A6               	goto	l911
  2234  0015E4                     u6740:
  2235                           
  2236                           ;main.c: 353: }
  2237                           ;main.c: 355: while (PORTAbits.RA1 == 0);
  2238  0015E4  A280               	btfss	3968,1,c	;volatile
  2239  0015E6  D7FE               	goto	u6740
  2240                           
  2241                           ;main.c: 357: eusart_Tx_On = 0;
  2242  0015E8  0E00               	movlw	0
  2243  0015EA  6E36               	movwf	_eusart_Tx_On,c	;volatile
  2244                           
  2245                           ;main.c: 358: eusart_Tx_En = 0;
  2246  0015EC  0E00               	movlw	0
  2247  0015EE  6E37               	movwf	_eusart_Tx_En,c	;volatile
  2248  0015F0  0012               	return		;funcret
  2249  0015F2                     __end_of_feedbackUSART:
  2250                           	opt stack 0
  2251                           tblptru	equ	0xFF8
  2252                           tblptrh	equ	0xFF7
  2253                           tblptrl	equ	0xFF6
  2254                           tablat	equ	0xFF5
  2255                           prodh	equ	0xFF4
  2256                           prodl	equ	0xFF3
  2257                           intcon	equ	0xFF2
  2258                           postinc0	equ	0xFEE
  2259                           wreg	equ	0xFE8
  2260                           indf1	equ	0xFE7
  2261                           fsr1h	equ	0xFE2
  2262                           fsr1l	equ	0xFE1
  2263                           indf2	equ	0xFDF
  2264                           fsr2h	equ	0xFDA
  2265                           fsr2l	equ	0xFD9
  2266                           status	equ	0xFD8
  2267                           
  2268 ;; *************** function _EUSART1_Write *****************
  2269 ;; Defined at:
  2270 ;;		line 103 in file "mcc_generated_files/eusart1.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  txData          1    wreg     unsigned char 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  txData          1    0[BANK1 ] unsigned char 
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  1    wreg      void 
  2277 ;; Registers used:
  2278 ;;		wreg
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2284 ;;      Params:         0       0       0       0       0       0       0
  2285 ;;      Locals:         0       0       1       0       0       0       0
  2286 ;;      Temps:          0       0       0       0       0       0       0
  2287 ;;      Totals:         0       0       1       0       0       0       0
  2288 ;;Total ram usage:        1 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    9
  2291 ;; This function calls:
  2292 ;;		Nothing
  2293 ;; This function is called by:
  2294 ;;		_feedbackUSART
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text5
  2299  00201A                     __ptext5:
  2300                           	opt stack 0
  2301  00201A                     _EUSART1_Write:
  2302                           	opt stack 19
  2303                           
  2304                           ;incstack = 0
  2305                           ;EUSART1_Write@txData stored from wreg
  2306  00201A  0101               	movlb	1	; () banked
  2307  00201C  6F2A               	movwf	EUSART1_Write@txData& (0+255),b
  2308  00201E                     
  2309                           ;eusart1.c: 104: while (!PIR1bits.TX1IF);
  2310  00201E  A89E               	btfss	3998,4,c	;volatile
  2311  002020  D7FE               	goto	l5616
  2312                           
  2313                           ;eusart1.c: 105: TXREG1 = txData;
  2314  002022  C12A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2315  002026  0012               	return		;funcret
  2316  002028                     __end_of_EUSART1_Write:
  2317                           	opt stack 0
  2318                           tblptru	equ	0xFF8
  2319                           tblptrh	equ	0xFF7
  2320                           tblptrl	equ	0xFF6
  2321                           tablat	equ	0xFF5
  2322                           prodh	equ	0xFF4
  2323                           prodl	equ	0xFF3
  2324                           intcon	equ	0xFF2
  2325                           postinc0	equ	0xFEE
  2326                           wreg	equ	0xFE8
  2327                           indf1	equ	0xFE7
  2328                           fsr1h	equ	0xFE2
  2329                           fsr1l	equ	0xFE1
  2330                           indf2	equ	0xFDF
  2331                           fsr2h	equ	0xFDA
  2332                           fsr2l	equ	0xFD9
  2333                           status	equ	0xFD8
  2334                           
  2335 ;; *************** function _defTempAlarme *****************
  2336 ;; Defined at:
  2337 ;;		line 240 in file "main.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;		None
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;  c2              1   39[BANK1 ] unsigned char 
  2342 ;;  c1              1   38[BANK1 ] unsigned char 
  2343 ;;  tmp_Alarme      1   37[BANK1 ] unsigned char 
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2353 ;;      Params:         0       0       0       0       0       0       0
  2354 ;;      Locals:         0       0       3       0       0       0       0
  2355 ;;      Temps:          0       0       2       0       0       0       0
  2356 ;;      Totals:         0       0       5       0       0       0       0
  2357 ;;Total ram usage:        5 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:   13
  2360 ;; This function calls:
  2361 ;;		_escreveLinhaLCD
  2362 ;;		_getKBInput
  2363 ;;		_sprintf
  2364 ;; This function is called by:
  2365 ;;		_menu
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text6
  2370  00115E                     __ptext6:
  2371                           	opt stack 0
  2372  00115E                     _defTempAlarme:
  2373                           	opt stack 16
  2374                           
  2375                           ;main.c: 242: char c1, c2;
  2376                           ;main.c: 243: char tmp_Alarme = 0;
  2377                           
  2378                           ;incstack = 0
  2379  00115E  0E00               	movlw	0
  2380  001160  0101               	movlb	1	; () banked
  2381  001162  6F4F               	movwf	defTempAlarme@tmp_Alarme& (0+255),b
  2382  001164                     
  2383                           ; BSR set to: 1
  2384                           ;main.c: 263: escreveLinhaLCD(128, "Introduza o alarme  ");
  2385                           
  2386                           ; BSR set to: 1
  2387  001164  0EAD               	movlw	low STR_19
  2388  001166  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2389  001168  0E7F               	movlw	high STR_19
  2390  00116A  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2391  00116C  0E80               	movlw	128
  2392  00116E  EC9F  F00E         	call	_escreveLinhaLCD
  2393                           
  2394                           ;main.c: 264: escreveLinhaLCD(192, "Temp:    oC         ");
  2395  001172  0E83               	movlw	low STR_20
  2396  001174  0101               	movlb	1	; () banked
  2397  001176  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2398  001178  0E7F               	movlw	high STR_20
  2399  00117A  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2400  00117C  0EC0               	movlw	192
  2401  00117E  EC9F  F00E         	call	_escreveLinhaLCD
  2402                           
  2403                           ;main.c: 266: c1 = getKBInput();
  2404  001182  EC5F  F00C         	call	_getKBInput	;wreg free
  2405  001186  0101               	movlb	1	; () banked
  2406  001188  6F50               	movwf	defTempAlarme@c1& (0+255),b
  2407                           
  2408                           ; BSR set to: 1
  2409                           ;main.c: 267: sprintf(strLCD, "%c", c1);
  2410  00118A  0E00               	movlw	low _strLCD
  2411  00118C  6F36               	movwf	sprintf@sp& (0+255),b
  2412  00118E  0E01               	movlw	high _strLCD
  2413  001190  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  2414  001192  0EF8               	movlw	low STR_18
  2415  001194  6F38               	movwf	sprintf@f& (0+255),b
  2416  001196  0E7F               	movlw	high STR_18
  2417  001198  6F39               	movwf	(sprintf@f+1)& (0+255),b
  2418  00119A  C150  F13A         	movff	defTempAlarme@c1,?_sprintf+4
  2419  00119E  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  2420  0011A0  EC70  F000         	call	_sprintf	;wreg free
  2421                           
  2422                           ;main.c: 268: escreveLinhaLCD(192 + 6, strLCD);
  2423  0011A4  0E00               	movlw	low _strLCD
  2424  0011A6  0101               	movlb	1	; () banked
  2425  0011A8  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2426  0011AA  0E01               	movlw	high _strLCD
  2427  0011AC  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2428  0011AE  0EC6               	movlw	198
  2429  0011B0  EC9F  F00E         	call	_escreveLinhaLCD
  2430                           
  2431                           ;main.c: 269: c2 = getKBInput();
  2432  0011B4  EC5F  F00C         	call	_getKBInput	;wreg free
  2433  0011B8  0101               	movlb	1	; () banked
  2434  0011BA  6F51               	movwf	defTempAlarme@c2& (0+255),b
  2435                           
  2436                           ; BSR set to: 1
  2437                           ;main.c: 270: sprintf(strLCD, "%c", c2);
  2438  0011BC  0E00               	movlw	low _strLCD
  2439  0011BE  6F36               	movwf	sprintf@sp& (0+255),b
  2440  0011C0  0E01               	movlw	high _strLCD
  2441  0011C2  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  2442  0011C4  0EF8               	movlw	low STR_18
  2443  0011C6  6F38               	movwf	sprintf@f& (0+255),b
  2444  0011C8  0E7F               	movlw	high STR_18
  2445  0011CA  6F39               	movwf	(sprintf@f+1)& (0+255),b
  2446  0011CC  C151  F13A         	movff	defTempAlarme@c2,?_sprintf+4
  2447  0011D0  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  2448  0011D2  EC70  F000         	call	_sprintf	;wreg free
  2449                           
  2450                           ;main.c: 271: escreveLinhaLCD(192 + 7, strLCD);
  2451  0011D6  0E00               	movlw	low _strLCD
  2452  0011D8  0101               	movlb	1	; () banked
  2453  0011DA  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2454  0011DC  0E01               	movlw	high _strLCD
  2455  0011DE  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2456  0011E0  0EC7               	movlw	199
  2457  0011E2  EC9F  F00E         	call	_escreveLinhaLCD
  2458                           
  2459                           ;main.c: 273: if (c1 == '*' || c1 == '#' || c2 == '*' || c2 == '#' || c1 == (0) || c2 ==
      +                           (0))
  2460  0011E6  0E2A               	movlw	42
  2461  0011E8  0101               	movlb	1	; () banked
  2462  0011EA  1950               	xorwf	defTempAlarme@c1& (0+255),w,b
  2463  0011EC  B4D8               	btfsc	status,2,c
  2464  0011EE  D012               	goto	u6630
  2465                           
  2466                           ; BSR set to: 1
  2467  0011F0  0E23               	movlw	35
  2468  0011F2  1950               	xorwf	defTempAlarme@c1& (0+255),w,b
  2469  0011F4  B4D8               	btfsc	status,2,c
  2470  0011F6  D00E               	goto	u6630
  2471                           
  2472                           ; BSR set to: 1
  2473  0011F8  0E2A               	movlw	42
  2474  0011FA  1951               	xorwf	defTempAlarme@c2& (0+255),w,b
  2475  0011FC  B4D8               	btfsc	status,2,c
  2476  0011FE  D00A               	goto	u6630
  2477                           
  2478                           ; BSR set to: 1
  2479  001200  0E23               	movlw	35
  2480  001202  1951               	xorwf	defTempAlarme@c2& (0+255),w,b
  2481  001204  B4D8               	btfsc	status,2,c
  2482  001206  D006               	goto	u6630
  2483                           
  2484                           ; BSR set to: 1
  2485  001208  5150               	movf	defTempAlarme@c1& (0+255),w,b
  2486  00120A  B4D8               	btfsc	status,2,c
  2487  00120C  D003               	goto	u6630
  2488                           
  2489                           ; BSR set to: 1
  2490  00120E  5151               	movf	defTempAlarme@c2& (0+255),w,b
  2491  001210  A4D8               	btfss	status,2,c
  2492  001212  D002               	goto	l867
  2493  001214                     u6630:
  2494                           
  2495                           ; BSR set to: 1
  2496                           ;main.c: 274: tmp_Alarme = 0;
  2497                           
  2498                           ; BSR set to: 1
  2499  001214  0E00               	movlw	0
  2500  001216  6F4F               	movwf	defTempAlarme@tmp_Alarme& (0+255),b
  2501  001218                     l867:
  2502                           
  2503                           ; BSR set to: 1
  2504                           ;main.c: 276: c1 = c1 - '0';
  2505                           
  2506                           ; BSR set to: 1
  2507  001218  5150               	movf	defTempAlarme@c1& (0+255),w,b
  2508  00121A  0FD0               	addlw	208
  2509  00121C  6F50               	movwf	defTempAlarme@c1& (0+255),b
  2510                           
  2511                           ; BSR set to: 1
  2512                           ;main.c: 277: c2 = c2 - '0';
  2513  00121E  5151               	movf	defTempAlarme@c2& (0+255),w,b
  2514  001220  0FD0               	addlw	208
  2515  001222  6F51               	movwf	defTempAlarme@c2& (0+255),b
  2516                           
  2517                           ; BSR set to: 1
  2518                           ;main.c: 278: tmp_Alarme = 10 * c1 + c2;
  2519  001224  5150               	movf	defTempAlarme@c1& (0+255),w,b
  2520  001226  0D0A               	mullw	10
  2521  001228  50F3               	movf	prodl,w,c
  2522  00122A  2551               	addwf	defTempAlarme@c2& (0+255),w,b
  2523  00122C  6F4F               	movwf	defTempAlarme@tmp_Alarme& (0+255),b
  2524                           
  2525                           ; BSR set to: 1
  2526                           ;main.c: 280: } while (tmp_Alarme < 10 || tmp_Alarme > 40);
  2527  00122E  0E09               	movlw	9
  2528  001230  654F               	cpfsgt	defTempAlarme@tmp_Alarme& (0+255),b
  2529  001232  D798               	goto	l866
  2530                           
  2531                           ; BSR set to: 1
  2532  001234  0E29               	movlw	41
  2533  001236  614F               	cpfslt	defTempAlarme@tmp_Alarme& (0+255),b
  2534  001238  D795               	goto	l866
  2535                           
  2536                           ; BSR set to: 1
  2537                           ;main.c: 282: tempAlarme = tmp_Alarme;
  2538  00123A  C14F  F048         	movff	defTempAlarme@tmp_Alarme,_tempAlarme	;volatile
  2539                           
  2540                           ; BSR set to: 1
  2541                           ;main.c: 284: _delay((unsigned long)((500)*(6000000/4000.0)));
  2542  00123E  0E04               	movlw	4
  2543  001240  0101               	movlb	1	; () banked
  2544  001242  6F4E               	movwf	(??_defTempAlarme+1)& (0+255),b
  2545  001244  0ECF               	movlw	207
  2546  001246  6F4D               	movwf	??_defTempAlarme& (0+255),b
  2547  001248  0E01               	movlw	1
  2548  00124A                     u7437:
  2549  00124A  2EE8               	decfsz	wreg,f,c
  2550  00124C  D7FE               	bra	u7437
  2551  00124E  2F4D               	decfsz	??_defTempAlarme& (0+255),f,b
  2552  001250  D7FC               	bra	u7437
  2553  001252  2F4E               	decfsz	(??_defTempAlarme+1)& (0+255),f,b
  2554  001254  D7FA               	bra	u7437
  2555  001256  D000               	nop2	
  2556  001258  0012               	return		;funcret
  2557  00125A                     __end_of_defTempAlarme:
  2558                           	opt stack 0
  2559                           tblptru	equ	0xFF8
  2560                           tblptrh	equ	0xFF7
  2561                           tblptrl	equ	0xFF6
  2562                           tablat	equ	0xFF5
  2563                           prodh	equ	0xFF4
  2564                           prodl	equ	0xFF3
  2565                           intcon	equ	0xFF2
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           indf1	equ	0xFE7
  2569                           fsr1h	equ	0xFE2
  2570                           fsr1l	equ	0xFE1
  2571                           indf2	equ	0xFDF
  2572                           fsr2h	equ	0xFDA
  2573                           fsr2l	equ	0xFD9
  2574                           status	equ	0xFD8
  2575                           
  2576 ;; *************** function _sprintf *****************
  2577 ;; Defined at:
  2578 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  sp              2   12[BANK1 ] PTR unsigned char 
  2581 ;;		 -> strLCD(42), strUSART(42), 
  2582 ;;  f               2   14[BANK1 ] PTR const unsigned char 
  2583 ;;		 -> STR_22(3), STR_21(3), STR_18(3), STR_15(4), 
  2584 ;;		 -> STR_14(4), STR_13(15), STR_12(15), STR_11(15), 
  2585 ;;		 -> STR_10(22), STR_9(22), STR_3(3), STR_1(23), 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  tmpval          4    0        struct .
  2588 ;;  width           2   32[BANK1 ] int 
  2589 ;;  val             2   30[BANK1 ] unsigned int 
  2590 ;;  len             2   28[BANK1 ] unsigned int 
  2591 ;;  ap              2   26[BANK1 ] PTR void [1]
  2592 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  2593 ;;  cp              2   22[BANK1 ] PTR const unsigned char 
  2594 ;;		 -> sprintf@c(1), 
  2595 ;;  c               1   34[BANK1 ] char 
  2596 ;;  flag            1   25[BANK1 ] unsigned char 
  2597 ;;  prec            1   24[BANK1 ] char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  2   12[BANK1 ] int 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2607 ;;      Params:         0       0       6       0       0       0       0
  2608 ;;      Locals:         0       0      13       0       0       0       0
  2609 ;;      Temps:          0       0       4       0       0       0       0
  2610 ;;      Totals:         0       0      23       0       0       0       0
  2611 ;;Total ram usage:       23 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:   10
  2614 ;; This function calls:
  2615 ;;		___lwdiv
  2616 ;;		___lwmod
  2617 ;;		___wmul
  2618 ;;		_isdigit
  2619 ;; This function is called by:
  2620 ;;		_menu
  2621 ;;		_monitorizacao
  2622 ;;		_testeTeclado
  2623 ;;		_defTempAlarme
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text7
  2628  0000E0                     __ptext7:
  2629                           	opt stack 0
  2630  0000E0                     _sprintf:
  2631                           	opt stack 18
  2632                           
  2633                           ;doprnt.c: 494: va_list ap;
  2634                           ;doprnt.c: 499: signed char c;
  2635                           ;doprnt.c: 501: int width;
  2636                           ;doprnt.c: 506: signed char prec;
  2637                           ;doprnt.c: 508: unsigned char flag;
  2638                           ;doprnt.c: 523: union {
  2639                           ;doprnt.c: 524: unsigned long vd;
  2640                           ;doprnt.c: 525: double integ;
  2641                           ;doprnt.c: 526: } tmpval;
  2642                           ;doprnt.c: 528: unsigned int val;
  2643                           ;doprnt.c: 529: unsigned len;
  2644                           ;doprnt.c: 530: const char * cp;
  2645                           ;doprnt.c: 533: *ap = __va_start();
  2646                           
  2647                           ;incstack = 0
  2648  0000E0  0E3A               	movlw	low (?_sprintf+4)
  2649  0000E2  0101               	movlb	1	; () banked
  2650  0000E4  6F44               	movwf	sprintf@ap& (0+255),b
  2651  0000E6  0E01               	movlw	high (?_sprintf+4)
  2652  0000E8  6F45               	movwf	(sprintf@ap+1)& (0+255),b
  2653                           
  2654                           ;doprnt.c: 536: while(c = *f++) {
  2655  0000EA  D159               	goto	u6040
  2656  0000EC                     
  2657                           ; BSR set to: 1
  2658                           ;doprnt.c: 538: if(c != '%')
  2659                           
  2660                           ; BSR set to: 1
  2661  0000EC  0E25               	movlw	37
  2662  0000EE  194C               	xorwf	sprintf@c& (0+255),w,b
  2663  0000F0  B4D8               	btfsc	status,2,c
  2664  0000F2  D009               	goto	l1087
  2665                           
  2666                           ; BSR set to: 1
  2667                           ;doprnt.c: 540: {
  2668                           ;doprnt.c: 541: ((*sp++ = (c)));
  2669  0000F4  C136  FFD9         	movff	sprintf@sp,fsr2l
  2670  0000F8  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  2671  0000FC  C14C  FFDF         	movff	sprintf@c,indf2
  2672                           
  2673                           ; BSR set to: 1
  2674  000100  4B36               	infsnz	sprintf@sp& (0+255),f,b
  2675  000102  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  2676                           
  2677                           ;doprnt.c: 542: continue;
  2678  000104  D14C               	goto	u6040
  2679  000106                     l1087:
  2680                           
  2681                           ; BSR set to: 1
  2682                           ;doprnt.c: 543: }
  2683                           ;doprnt.c: 546: width = 0;
  2684                           
  2685                           ; BSR set to: 1
  2686  000106  0E00               	movlw	0
  2687  000108  6F4B               	movwf	(sprintf@width+1)& (0+255),b
  2688  00010A  0E00               	movlw	0
  2689  00010C  6F4A               	movwf	sprintf@width& (0+255),b
  2690                           
  2691                           ;doprnt.c: 548: flag = 0;
  2692  00010E  0E00               	movlw	0
  2693  000110  6F43               	movwf	sprintf@flag& (0+255),b
  2694                           
  2695                           ; BSR set to: 1
  2696                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2697  000112  C138  FFF6         	movff	sprintf@f,tblptrl
  2698  000116  C139  FFF7         	movff	sprintf@f+1,tblptrh
  2699  00011A                     	if	0	;tblptru may be non-zero
  2700  00011A                     	endif
  2701  00011A                     	if	0	;tblptru may be non-zero
  2702  00011A                     	endif
  2703  00011A  0008               	tblrd		*
  2704  00011C  50F5               	movf	tablat,w,c
  2705  00011E  EC46  F00F         	call	_isdigit
  2706  000122  A0D8               	btfss	status,0,c
  2707  000124  D082               	goto	l1091
  2708                           
  2709                           ;doprnt.c: 598: width = 0;
  2710  000126  0E00               	movlw	0
  2711  000128  0101               	movlb	1	; () banked
  2712  00012A  6F4B               	movwf	(sprintf@width+1)& (0+255),b
  2713  00012C  0E00               	movlw	0
  2714  00012E  6F4A               	movwf	sprintf@width& (0+255),b
  2715  000130                     
  2716                           ;doprnt.c: 600: width *= 10;
  2717                           
  2718                           ; BSR set to: 1
  2719  000130  C14A  F12A         	movff	sprintf@width,___wmul@multiplier
  2720  000134  C14B  F12B         	movff	sprintf@width+1,___wmul@multiplier+1
  2721  000138  0E00               	movlw	0
  2722  00013A  0101               	movlb	1	; () banked
  2723  00013C  6F2D               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2724  00013E  0E0A               	movlw	10
  2725  000140  6F2C               	movwf	___wmul@multiplicand& (0+255),b
  2726  000142  EC0D  F00F         	call	___wmul	;wreg free
  2727  000146  C12A  F14A         	movff	?___wmul,sprintf@width
  2728  00014A  C12B  F14B         	movff	?___wmul+1,sprintf@width+1
  2729                           
  2730                           ;doprnt.c: 601: width += *f++ - '0';
  2731  00014E  0ED0               	movlw	208
  2732  000150  0101               	movlb	1	; () banked
  2733  000152  6F3C               	movwf	??_sprintf& (0+255),b
  2734  000154  0EFF               	movlw	255
  2735  000156  6F3D               	movwf	(??_sprintf+1)& (0+255),b
  2736  000158  C138  FFF6         	movff	sprintf@f,tblptrl
  2737  00015C  C139  FFF7         	movff	sprintf@f+1,tblptrh
  2738  000160                     	if	0	;tblptru may be non-zero
  2739  000160                     	endif
  2740  000160                     	if	0	;tblptru may be non-zero
  2741  000160                     	endif
  2742  000160  0008               	tblrd		*
  2743  000162  50F5               	movf	tablat,w,c
  2744  000164  6F3E               	movwf	(??_sprintf+2)& (0+255),b
  2745  000166  6B3F               	clrf	(??_sprintf+3)& (0+255),b
  2746  000168  513C               	movf	??_sprintf& (0+255),w,b
  2747  00016A  273E               	addwf	(??_sprintf+2)& (0+255),f,b
  2748  00016C  513D               	movf	(??_sprintf+1)& (0+255),w,b
  2749  00016E  233F               	addwfc	(??_sprintf+3)& (0+255),f,b
  2750  000170  513E               	movf	(??_sprintf+2)& (0+255),w,b
  2751  000172  274A               	addwf	sprintf@width& (0+255),f,b
  2752  000174  513F               	movf	(??_sprintf+3)& (0+255),w,b
  2753  000176  234B               	addwfc	(sprintf@width+1)& (0+255),f,b
  2754                           
  2755                           ; BSR set to: 1
  2756  000178  4B38               	infsnz	sprintf@f& (0+255),f,b
  2757  00017A  2B39               	incf	(sprintf@f+1)& (0+255),f,b
  2758                           
  2759                           ; BSR set to: 1
  2760                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2761  00017C  C138  FFF6         	movff	sprintf@f,tblptrl
  2762  000180  C139  FFF7         	movff	sprintf@f+1,tblptrh
  2763  000184                     	if	0	;tblptru may be non-zero
  2764  000184                     	endif
  2765  000184                     	if	0	;tblptru may be non-zero
  2766  000184                     	endif
  2767  000184  0008               	tblrd		*
  2768  000186  50F5               	movf	tablat,w,c
  2769  000188  EC46  F00F         	call	_isdigit
  2770  00018C  A0D8               	btfss	status,0,c
  2771  00018E  D04D               	goto	l1091
  2772  000190  D7CF               	goto	l1089
  2773  000192                     
  2774                           ;doprnt.c: 757: if(width > len)
  2775  000192  0101               	movlb	1	; () banked
  2776  000194  514A               	movf	sprintf@width& (0+255),w,b
  2777  000196  5D46               	subwf	sprintf@len& (0+255),w,b
  2778  000198  514B               	movf	(sprintf@width+1)& (0+255),w,b
  2779  00019A  5947               	subwfb	(sprintf@len+1)& (0+255),w,b
  2780  00019C  B0D8               	btfsc	status,0,c
  2781  00019E  D005               	goto	l1098
  2782                           
  2783                           ; BSR set to: 1
  2784                           ;doprnt.c: 758: width -= len;
  2785  0001A0  5146               	movf	sprintf@len& (0+255),w,b
  2786  0001A2  5F4A               	subwf	sprintf@width& (0+255),f,b
  2787  0001A4  5147               	movf	(sprintf@len+1)& (0+255),w,b
  2788  0001A6  5B4B               	subwfb	(sprintf@width+1)& (0+255),f,b
  2789  0001A8  D00D               	goto	l1100
  2790  0001AA                     l1098:
  2791                           
  2792                           ; BSR set to: 1
  2793                           ;doprnt.c: 759: else
  2794                           ;doprnt.c: 760: width = 0;
  2795                           
  2796                           ; BSR set to: 1
  2797  0001AA  0E00               	movlw	0
  2798  0001AC  6F4B               	movwf	(sprintf@width+1)& (0+255),b
  2799  0001AE  0E00               	movlw	0
  2800  0001B0  6F4A               	movwf	sprintf@width& (0+255),b
  2801                           
  2802                           ; BSR set to: 1
  2803                           ;doprnt.c: 764: while(width--)
  2804  0001B2  D008               	goto	l1100
  2805  0001B4                     l5524:
  2806                           
  2807                           ; BSR set to: 1
  2808                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2809  0001B4  C136  FFD9         	movff	sprintf@sp,fsr2l
  2810  0001B8  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  2811  0001BC  0E20               	movlw	32
  2812  0001BE  6EDF               	movwf	indf2,c
  2813                           
  2814                           ; BSR set to: 1
  2815  0001C0  4B36               	infsnz	sprintf@sp& (0+255),f,b
  2816  0001C2  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  2817  0001C4                     l1100:
  2818                           
  2819                           ; BSR set to: 1
  2820                           
  2821                           ; BSR set to: 1
  2822  0001C4  074A               	decf	sprintf@width& (0+255),f,b
  2823  0001C6  A0D8               	btfss	status,0,c
  2824  0001C8  074B               	decf	(sprintf@width+1)& (0+255),f,b
  2825  0001CA  294A               	incf	sprintf@width& (0+255),w,b
  2826  0001CC  E1F3               	bnz	l5524
  2827  0001CE  294B               	incf	(sprintf@width+1)& (0+255),w,b
  2828  0001D0  B4D8               	btfsc	status,2,c
  2829  0001D2  D00F               	goto	l1103
  2830  0001D4  D7EF               	goto	l1101
  2831  0001D6                     l5530:
  2832                           
  2833                           ; BSR set to: 1
  2834                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2835  0001D6  C140  FFD9         	movff	sprintf@cp,fsr2l
  2836  0001DA  C141  FFDA         	movff	sprintf@cp+1,fsr2h
  2837  0001DE  C136  FFE1         	movff	sprintf@sp,fsr1l
  2838  0001E2  C137  FFE2         	movff	sprintf@sp+1,fsr1h
  2839  0001E6  CFDF FFE7          	movff	indf2,indf1
  2840                           
  2841                           ; BSR set to: 1
  2842  0001EA  4B40               	infsnz	sprintf@cp& (0+255),f,b
  2843  0001EC  2B41               	incf	(sprintf@cp+1)& (0+255),f,b
  2844                           
  2845                           ; BSR set to: 1
  2846  0001EE  4B36               	infsnz	sprintf@sp& (0+255),f,b
  2847  0001F0  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  2848  0001F2                     l1103:
  2849                           
  2850                           ; BSR set to: 1
  2851                           
  2852                           ; BSR set to: 1
  2853  0001F2  0746               	decf	sprintf@len& (0+255),f,b
  2854  0001F4  A0D8               	btfss	status,0,c
  2855  0001F6  0747               	decf	(sprintf@len+1)& (0+255),f,b
  2856  0001F8  2946               	incf	sprintf@len& (0+255),w,b
  2857  0001FA  E1ED               	bnz	l5530
  2858  0001FC  2947               	incf	(sprintf@len+1)& (0+255),w,b
  2859  0001FE  B4D8               	btfsc	status,2,c
  2860  000200  D0CE               	goto	u6040
  2861  000202  D7E9               	goto	l1104
  2862  000204                     
  2863                           ; BSR set to: 1
  2864                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2865                           
  2866                           ; BSR set to: 1
  2867  000204  C144  FFD9         	movff	sprintf@ap,fsr2l
  2868  000208  C145  FFDA         	movff	sprintf@ap+1,fsr2h
  2869  00020C  50DF               	movf	indf2,w,c
  2870  00020E  6F4C               	movwf	sprintf@c& (0+255),b
  2871                           
  2872                           ; BSR set to: 1
  2873  000210  0E02               	movlw	2
  2874  000212  2744               	addwf	sprintf@ap& (0+255),f,b
  2875  000214  0E00               	movlw	0
  2876  000216  2345               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2877  000218                     
  2878                           ; BSR set to: 1
  2879                           ;doprnt.c: 805: cp = (char *)&c;
  2880                           
  2881                           ; BSR set to: 1
  2882  000218  0E4C               	movlw	low sprintf@c
  2883  00021A  6F40               	movwf	sprintf@cp& (0+255),b
  2884  00021C  0E01               	movlw	high sprintf@c
  2885  00021E  6F41               	movwf	(sprintf@cp+1)& (0+255),b
  2886                           
  2887                           ; BSR set to: 1
  2888                           ;doprnt.c: 806: len = 1;
  2889  000220  0E00               	movlw	0
  2890  000222  6F47               	movwf	(sprintf@len+1)& (0+255),b
  2891  000224  0E01               	movlw	1
  2892  000226  6F46               	movwf	sprintf@len& (0+255),b
  2893                           
  2894                           ;doprnt.c: 807: goto dostring;
  2895  000228  D7B4               	goto	l1097
  2896  00022A                     l1091:
  2897                           
  2898                           ; BSR set to: 1
  2899  00022A  C138  FFF6         	movff	sprintf@f,tblptrl
  2900  00022E  C139  FFF7         	movff	sprintf@f+1,tblptrh
  2901  000232  0101               	movlb	1	; () banked
  2902  000234  4B38               	infsnz	sprintf@f& (0+255),f,b
  2903  000236  2B39               	incf	(sprintf@f+1)& (0+255),f,b
  2904  000238                     	if	0	;tblptru may be non-zero
  2905  000238                     	endif
  2906  000238                     	if	0	;tblptru may be non-zero
  2907  000238                     	endif
  2908  000238  0008               	tblrd		*
  2909  00023A  CFF5 F14C          	movff	tablat,sprintf@c
  2910  00023E  514C               	movf	sprintf@c& (0+255),w,b
  2911                           
  2912                           ; Switch size 1, requested type "space"
  2913                           ; Number of cases is 4, Range of values is 0 to 105
  2914                           ; switch strategies available:
  2915                           ; Name         Instructions Cycles
  2916                           ; simple_byte           13     7 (average)
  2917                           ;	Chosen strategy is simple_byte
  2918  000240  0A00               	xorlw	0	; case 0
  2919  000242  B4D8               	btfsc	status,2,c
  2920  000244  D0B8               	goto	u6050
  2921  000246  0A63               	xorlw	99	; case 99
  2922  000248  B4D8               	btfsc	status,2,c
  2923  00024A  D7DC               	goto	l1106
  2924  00024C  0A07               	xorlw	7	; case 100
  2925  00024E  B4D8               	btfsc	status,2,c
  2926  000250  D003               	goto	l1096
  2927  000252  0A0D               	xorlw	13	; case 105
  2928  000254  A4D8               	btfss	status,2,c
  2929  000256  D7E0               	goto	l1107
  2930  000258                     l1096:
  2931                           
  2932                           ;doprnt.c: 1253: {
  2933                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2934                           
  2935                           ; BSR set to: 1
  2936  000258  C144  FFD9         	movff	sprintf@ap,fsr2l
  2937  00025C  C145  FFDA         	movff	sprintf@ap+1,fsr2h
  2938  000260  CFDE F148          	movff	postinc2,sprintf@val
  2939  000264  CFDD F149          	movff	postdec2,sprintf@val+1
  2940  000268  0E02               	movlw	2
  2941  00026A  0101               	movlb	1	; () banked
  2942  00026C  2744               	addwf	sprintf@ap& (0+255),f,b
  2943  00026E  0E00               	movlw	0
  2944  000270  2345               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2945                           
  2946                           ; BSR set to: 1
  2947                           ;doprnt.c: 1261: if((int)val < 0) {
  2948  000272  AF49               	btfss	(sprintf@val+1)& (0+255),7,b
  2949  000274  D006               	goto	l1108
  2950                           
  2951                           ; BSR set to: 1
  2952                           ;doprnt.c: 1262: flag |= 0x03;
  2953  000276  0E03               	movlw	3
  2954  000278  1343               	iorwf	sprintf@flag& (0+255),f,b
  2955                           
  2956                           ; BSR set to: 1
  2957                           ;doprnt.c: 1263: val = -val;
  2958  00027A  6D48               	negf	sprintf@val& (0+255),b
  2959  00027C  1F49               	comf	(sprintf@val+1)& (0+255),f,b
  2960  00027E  B0D8               	btfsc	status,0,c
  2961  000280  2B49               	incf	(sprintf@val+1)& (0+255),f,b
  2962  000282                     l1108:
  2963                           
  2964                           ; BSR set to: 1
  2965                           ;doprnt.c: 1264: }
  2966                           ;doprnt.c: 1266: }
  2967                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2968                           
  2969                           ; BSR set to: 1
  2970  000282  0E01               	movlw	1
  2971  000284  6F4C               	movwf	sprintf@c& (0+255),b
  2972  000286                     l5562:
  2973                           
  2974                           ; BSR set to: 1
  2975  000286  0E05               	movlw	5
  2976  000288  194C               	xorwf	sprintf@c& (0+255),w,b
  2977  00028A  B4D8               	btfsc	status,2,c
  2978  00028C  D012               	goto	u5970
  2979                           
  2980                           ; BSR set to: 1
  2981                           ;doprnt.c: 1306: if(val < dpowers[c])
  2982                           
  2983                           ; BSR set to: 1
  2984                           
  2985                           ; BSR set to: 1
  2986  00028E  514C               	movf	sprintf@c& (0+255),w,b
  2987  000290  0D02               	mullw	2
  2988  000292  0EC9               	movlw	low _dpowers
  2989  000294  24F3               	addwf	prodl,w,c
  2990  000296  6EF6               	movwf	tblptrl,c
  2991  000298  0E7E               	movlw	high _dpowers
  2992  00029A  20F4               	addwfc	prodh,w,c
  2993  00029C  6EF7               	movwf	tblptrh,c
  2994  00029E                     	if	0	;There are less than 3 active tblptr bytes
  2995  00029E                     	endif
  2996  00029E  0009               	tblrd		*+
  2997  0002A0  50F5               	movf	tablat,w,c
  2998  0002A2  5D48               	subwf	sprintf@val& (0+255),w,b
  2999  0002A4  0009               	tblrd		*+
  3000  0002A6  50F5               	movf	tablat,w,c
  3001  0002A8  5949               	subwfb	(sprintf@val+1)& (0+255),w,b
  3002  0002AA  A0D8               	btfss	status,0,c
  3003  0002AC  D002               	goto	u5970
  3004                           
  3005                           ; BSR set to: 1
  3006                           
  3007                           ; BSR set to: 1
  3008                           
  3009                           ; BSR set to: 1
  3010                           ;doprnt.c: 1307: break;
  3011  0002AE  2B4C               	incf	sprintf@c& (0+255),f,b
  3012  0002B0  D7EA               	goto	l5562
  3013  0002B2                     u5970:
  3014                           
  3015                           ; BSR set to: 1
  3016                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3017                           
  3018                           ; BSR set to: 1
  3019  0002B2  514A               	movf	sprintf@width& (0+255),w,b
  3020  0002B4  114B               	iorwf	(sprintf@width+1)& (0+255),w,b
  3021  0002B6  B4D8               	btfsc	status,2,c
  3022  0002B8  D009               	goto	l1112
  3023                           
  3024                           ; BSR set to: 1
  3025  0002BA  C143  F13C         	movff	sprintf@flag,??_sprintf
  3026  0002BE  0E03               	movlw	3
  3027  0002C0  173C               	andwf	??_sprintf& (0+255),f,b
  3028  0002C2  B4D8               	btfsc	status,2,c
  3029  0002C4  D003               	goto	l1112
  3030                           
  3031                           ; BSR set to: 1
  3032                           ;doprnt.c: 1346: width--;
  3033  0002C6  074A               	decf	sprintf@width& (0+255),f,b
  3034  0002C8  A0D8               	btfss	status,0,c
  3035  0002CA  074B               	decf	(sprintf@width+1)& (0+255),f,b
  3036  0002CC                     l1112:
  3037                           
  3038                           ; BSR set to: 1
  3039                           ;doprnt.c: 1381: if(width > c)
  3040                           
  3041                           ; BSR set to: 1
  3042  0002CC  0E80               	movlw	128
  3043  0002CE  BF4C               	btfsc	sprintf@c& (0+255),7,b
  3044  0002D0  0E7F               	movlw	127
  3045  0002D2  6F3C               	movwf	??_sprintf& (0+255),b
  3046  0002D4  514A               	movf	sprintf@width& (0+255),w,b
  3047  0002D6  5D4C               	subwf	sprintf@c& (0+255),w,b
  3048  0002D8  514B               	movf	(sprintf@width+1)& (0+255),w,b
  3049  0002DA  0A80               	xorlw	128
  3050  0002DC  593C               	subwfb	??_sprintf& (0+255),w,b
  3051  0002DE  B0D8               	btfsc	status,0,c
  3052  0002E0  D007               	goto	l1113
  3053                           
  3054                           ; BSR set to: 1
  3055                           ;doprnt.c: 1382: width -= c;
  3056  0002E2  514C               	movf	sprintf@c& (0+255),w,b
  3057  0002E4  5F4A               	subwf	sprintf@width& (0+255),f,b
  3058  0002E6  0E00               	movlw	0
  3059  0002E8  BF4C               	btfsc	sprintf@c& (0+255),7,b
  3060  0002EA  0EFF               	movlw	255
  3061  0002EC  5B4B               	subwfb	(sprintf@width+1)& (0+255),f,b
  3062  0002EE  D004               	goto	l1114
  3063  0002F0                     l1113:
  3064                           
  3065                           ; BSR set to: 1
  3066                           ;doprnt.c: 1383: else
  3067                           ;doprnt.c: 1384: width = 0;
  3068                           
  3069                           ; BSR set to: 1
  3070  0002F0  0E00               	movlw	0
  3071  0002F2  6F4B               	movwf	(sprintf@width+1)& (0+255),b
  3072  0002F4  0E00               	movlw	0
  3073  0002F6  6F4A               	movwf	sprintf@width& (0+255),b
  3074  0002F8                     l1114:
  3075                           
  3076                           ; BSR set to: 1
  3077                           ;doprnt.c: 1422: {
  3078                           ;doprnt.c: 1424: if(width
  3079                           ;doprnt.c: 1428: )
  3080                           
  3081                           ; BSR set to: 1
  3082  0002F8  514A               	movf	sprintf@width& (0+255),w,b
  3083  0002FA  114B               	iorwf	(sprintf@width+1)& (0+255),w,b
  3084  0002FC  B4D8               	btfsc	status,2,c
  3085  0002FE  D00F               	goto	u6020
  3086  000300                     u6010:
  3087                           
  3088                           ; BSR set to: 1
  3089                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3090                           
  3091                           ; BSR set to: 1
  3092                           
  3093                           ;doprnt.c: 1429: do
  3094  000300  C136  FFD9         	movff	sprintf@sp,fsr2l
  3095  000304  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  3096  000308  0E20               	movlw	32
  3097  00030A  6EDF               	movwf	indf2,c
  3098                           
  3099                           ; BSR set to: 1
  3100  00030C  4B36               	infsnz	sprintf@sp& (0+255),f,b
  3101  00030E  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;doprnt.c: 1431: while(--width);
  3105  000310  074A               	decf	sprintf@width& (0+255),f,b
  3106  000312  A0D8               	btfss	status,0,c
  3107  000314  074B               	decf	(sprintf@width+1)& (0+255),f,b
  3108  000316  514A               	movf	sprintf@width& (0+255),w,b
  3109  000318  114B               	iorwf	(sprintf@width+1)& (0+255),w,b
  3110  00031A  A4D8               	btfss	status,2,c
  3111  00031C  D7F1               	goto	u6010
  3112  00031E                     u6020:
  3113                           
  3114                           ; BSR set to: 1
  3115                           ;doprnt.c: 1438: if(flag & 0x03)
  3116                           
  3117                           ; BSR set to: 1
  3118                           
  3119                           ; BSR set to: 1
  3120  00031E  C143  F13C         	movff	sprintf@flag,??_sprintf
  3121  000322  0E03               	movlw	3
  3122  000324  173C               	andwf	??_sprintf& (0+255),f,b
  3123  000326  B4D8               	btfsc	status,2,c
  3124  000328  D008               	goto	l1118
  3125                           
  3126                           ; BSR set to: 1
  3127                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3128  00032A  C136  FFD9         	movff	sprintf@sp,fsr2l
  3129  00032E  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  3130  000332  0E2D               	movlw	45
  3131  000334  6EDF               	movwf	indf2,c
  3132                           
  3133                           ; BSR set to: 1
  3134  000336  4B36               	infsnz	sprintf@sp& (0+255),f,b
  3135  000338  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  3136  00033A                     l1118:
  3137                           
  3138                           ; BSR set to: 1
  3139                           ;doprnt.c: 1469: }
  3140                           ;doprnt.c: 1472: prec = c;
  3141                           
  3142                           ; BSR set to: 1
  3143  00033A  C14C  F142         	movff	sprintf@c,sprintf@prec
  3144                           
  3145                           ;doprnt.c: 1474: while(prec--) {
  3146  00033E  D02B               	goto	l1119
  3147  000340                     
  3148                           ; BSR set to: 1
  3149                           ;doprnt.c: 1478: {
  3150                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3151                           
  3152                           ; BSR set to: 1
  3153  000340  5142               	movf	sprintf@prec& (0+255),w,b
  3154  000342  0D02               	mullw	2
  3155  000344  0EC9               	movlw	low _dpowers
  3156  000346  24F3               	addwf	prodl,w,c
  3157  000348  6EF6               	movwf	tblptrl,c
  3158  00034A  0E7E               	movlw	high _dpowers
  3159  00034C  20F4               	addwfc	prodh,w,c
  3160  00034E  6EF7               	movwf	tblptrh,c
  3161  000350                     	if	0	;There are less than 3 active tblptr bytes
  3162  000350                     	endif
  3163  000350  0009               	tblrd		*+
  3164  000352  CFF5 F12C          	movff	tablat,___lwdiv@divisor
  3165  000356  000A               	tblrd		*-
  3166  000358  CFF5 F12D          	movff	tablat,___lwdiv@divisor+1
  3167  00035C  C148  F12A         	movff	sprintf@val,___lwdiv@dividend
  3168  000360  C149  F12B         	movff	sprintf@val+1,___lwdiv@dividend+1
  3169  000364  ECBD  F00C         	call	___lwdiv	;wreg free
  3170  000368  C12A  F131         	movff	?___lwdiv,___lwmod@dividend
  3171  00036C  C12B  F132         	movff	?___lwdiv+1,___lwmod@dividend+1
  3172  000370  0E00               	movlw	0
  3173  000372  0101               	movlb	1	; () banked
  3174  000374  6F34               	movwf	(___lwmod@divisor+1)& (0+255),b
  3175  000376  0E0A               	movlw	10
  3176  000378  6F33               	movwf	___lwmod@divisor& (0+255),b
  3177  00037A  EC33  F00D         	call	___lwmod	;wreg free
  3178  00037E  0101               	movlb	1	; () banked
  3179  000380  5131               	movf	?___lwmod& (0+255),w,b
  3180  000382  0F30               	addlw	48
  3181  000384  6F4C               	movwf	sprintf@c& (0+255),b
  3182                           
  3183                           ; BSR set to: 1
  3184                           ;doprnt.c: 1523: }
  3185                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3186  000386  C136  FFD9         	movff	sprintf@sp,fsr2l
  3187  00038A  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  3188  00038E  C14C  FFDF         	movff	sprintf@c,indf2
  3189                           
  3190                           ; BSR set to: 1
  3191  000392  4B36               	infsnz	sprintf@sp& (0+255),f,b
  3192  000394  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  3193  000396                     l1119:
  3194                           
  3195                           ; BSR set to: 1
  3196                           
  3197                           ; BSR set to: 1
  3198  000396  0742               	decf	sprintf@prec& (0+255),f,b
  3199  000398  2942               	incf	sprintf@prec& (0+255),w,b
  3200  00039A  A4D8               	btfss	status,2,c
  3201  00039C  D7D1               	goto	l1120
  3202  00039E                     u6040:
  3203                           
  3204                           ; BSR set to: 1
  3205                           
  3206                           ; BSR set to: 1
  3207                           
  3208                           ; BSR set to: 1
  3209  00039E  C138  FFF6         	movff	sprintf@f,tblptrl
  3210  0003A2  C139  FFF7         	movff	sprintf@f+1,tblptrh
  3211  0003A6  4B38               	infsnz	sprintf@f& (0+255),f,b
  3212  0003A8  2B39               	incf	(sprintf@f+1)& (0+255),f,b
  3213  0003AA                     	if	0	;tblptru may be non-zero
  3214  0003AA                     	endif
  3215  0003AA                     	if	0	;tblptru may be non-zero
  3216  0003AA                     	endif
  3217  0003AA  0008               	tblrd		*
  3218  0003AC  CFF5 F14C          	movff	tablat,sprintf@c
  3219  0003B0  514C               	movf	sprintf@c& (0+255),w,b
  3220  0003B2  A4D8               	btfss	status,2,c
  3221  0003B4  D69B               	goto	l1086
  3222  0003B6                     u6050:
  3223                           
  3224                           ;doprnt.c: 1538: *sp = 0;
  3225                           
  3226                           ; BSR set to: 1
  3227                           
  3228                           ;doprnt.c: 1525: }
  3229                           ;doprnt.c: 1533: }
  3230                           ;doprnt.c: 1535: alldone:
  3231                           
  3232                           ; BSR set to: 1
  3233  0003B6  C136  FFD9         	movff	sprintf@sp,fsr2l
  3234  0003BA  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  3235  0003BE  0E00               	movlw	0
  3236  0003C0  6EDF               	movwf	indf2,c
  3237  0003C2  0012               	return	
  3238  0003C4                     __end_of_sprintf:
  3239                           	opt stack 0
  3240                           tblptru	equ	0xFF8
  3241                           tblptrh	equ	0xFF7
  3242                           tblptrl	equ	0xFF6
  3243                           tablat	equ	0xFF5
  3244                           prodh	equ	0xFF4
  3245                           prodl	equ	0xFF3
  3246                           intcon	equ	0xFF2
  3247                           postinc0	equ	0xFEE
  3248                           wreg	equ	0xFE8
  3249                           indf1	equ	0xFE7
  3250                           fsr1h	equ	0xFE2
  3251                           fsr1l	equ	0xFE1
  3252                           indf2	equ	0xFDF
  3253                           postinc2	equ	0xFDE
  3254                           postdec2	equ	0xFDD
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function _isdigit *****************
  3260 ;; Defined at:
  3261 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  c               1    wreg     unsigned char 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  c               1    2[BANK1 ] unsigned char 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;		None               void
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3275 ;;      Params:         0       0       0       0       0       0       0
  3276 ;;      Locals:         0       0       2       0       0       0       0
  3277 ;;      Temps:          0       0       1       0       0       0       0
  3278 ;;      Totals:         0       0       3       0       0       0       0
  3279 ;;Total ram usage:        3 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    9
  3282 ;; This function calls:
  3283 ;;		Nothing
  3284 ;; This function is called by:
  3285 ;;		_sprintf
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text8
  3290  001E8C                     __ptext8:
  3291                           	opt stack 0
  3292  001E8C                     _isdigit:
  3293                           	opt stack 18
  3294                           
  3295                           ;incstack = 0
  3296                           ;isdigit@c stored from wreg
  3297  001E8C  0101               	movlb	1	; () banked
  3298  001E8E  6F2C               	movwf	isdigit@c& (0+255),b
  3299  001E90  0E00               	movlw	0
  3300  001E92  0101               	movlb	1	; () banked
  3301  001E94  6F2B               	movwf	_isdigit$2577& (0+255),b
  3302                           
  3303                           ; BSR set to: 1
  3304  001E96  0E3A               	movlw	58
  3305  001E98  612C               	cpfslt	isdigit@c& (0+255),b
  3306  001E9A  D005               	goto	l1453
  3307                           
  3308                           ; BSR set to: 1
  3309  001E9C  0E2F               	movlw	47
  3310  001E9E  652C               	cpfsgt	isdigit@c& (0+255),b
  3311  001EA0  D002               	goto	l1453
  3312                           
  3313                           ; BSR set to: 1
  3314  001EA2  0E01               	movlw	1
  3315  001EA4  6F2B               	movwf	_isdigit$2577& (0+255),b
  3316  001EA6                     l1453:
  3317                           
  3318                           ; BSR set to: 1
  3319                           
  3320                           ; BSR set to: 1
  3321  001EA6  C12B  F12A         	movff	_isdigit$2577,??_isdigit
  3322  001EAA  312A               	rrcf	??_isdigit& (0+255),w,b
  3323  001EAC  0012               	return	
  3324  001EAE                     __end_of_isdigit:
  3325                           	opt stack 0
  3326                           tblptru	equ	0xFF8
  3327                           tblptrh	equ	0xFF7
  3328                           tblptrl	equ	0xFF6
  3329                           tablat	equ	0xFF5
  3330                           prodh	equ	0xFF4
  3331                           prodl	equ	0xFF3
  3332                           intcon	equ	0xFF2
  3333                           postinc0	equ	0xFEE
  3334                           wreg	equ	0xFE8
  3335                           indf1	equ	0xFE7
  3336                           fsr1h	equ	0xFE2
  3337                           fsr1l	equ	0xFE1
  3338                           indf2	equ	0xFDF
  3339                           postinc2	equ	0xFDE
  3340                           postdec2	equ	0xFDD
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function ___wmul *****************
  3346 ;; Defined at:
  3347 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  multiplier      2    0[BANK1 ] unsigned int 
  3350 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  product         2    4[BANK1 ] unsigned int 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;                  2    0[BANK1 ] unsigned int 
  3355 ;; Registers used:
  3356 ;;		wreg, status,2, status,0, prodl, prodh
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3362 ;;      Params:         0       0       4       0       0       0       0
  3363 ;;      Locals:         0       0       2       0       0       0       0
  3364 ;;      Temps:          0       0       0       0       0       0       0
  3365 ;;      Totals:         0       0       6       0       0       0       0
  3366 ;;Total ram usage:        6 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    9
  3369 ;; This function calls:
  3370 ;;		Nothing
  3371 ;; This function is called by:
  3372 ;;		_sprintf
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           	psect	text9
  3377  001E1A                     __ptext9:
  3378                           	opt stack 0
  3379  001E1A                     ___wmul:
  3380                           	opt stack 18
  3381                           
  3382                           ; BSR set to: 1
  3383                           ;incstack = 0
  3384  001E1A  0101               	movlb	1	; () banked
  3385  001E1C  512A               	movf	___wmul@multiplier& (0+255),w,b
  3386  001E1E  032C               	mulwf	___wmul@multiplicand& (0+255),b
  3387  001E20  CFF3 F12E          	movff	prodl,___wmul@product
  3388  001E24  CFF4 F12F          	movff	prodh,___wmul@product+1
  3389  001E28  512A               	movf	___wmul@multiplier& (0+255),w,b
  3390  001E2A  032D               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3391  001E2C  50F3               	movf	prodl,w,c
  3392  001E2E  272F               	addwf	(___wmul@product+1)& (0+255),f,b
  3393  001E30  512B               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3394  001E32  032C               	mulwf	___wmul@multiplicand& (0+255),b
  3395  001E34  50F3               	movf	prodl,w,c
  3396  001E36  272F               	addwf	(___wmul@product+1)& (0+255),f,b
  3397                           
  3398                           ; BSR set to: 1
  3399  001E38  C12E  F12A         	movff	___wmul@product,?___wmul
  3400  001E3C  C12F  F12B         	movff	___wmul@product+1,?___wmul+1
  3401  001E40  0012               	return	
  3402  001E42                     __end_of___wmul:
  3403                           	opt stack 0
  3404                           tblptru	equ	0xFF8
  3405                           tblptrh	equ	0xFF7
  3406                           tblptrl	equ	0xFF6
  3407                           tablat	equ	0xFF5
  3408                           prodh	equ	0xFF4
  3409                           prodl	equ	0xFF3
  3410                           intcon	equ	0xFF2
  3411                           postinc0	equ	0xFEE
  3412                           wreg	equ	0xFE8
  3413                           indf1	equ	0xFE7
  3414                           fsr1h	equ	0xFE2
  3415                           fsr1l	equ	0xFE1
  3416                           indf2	equ	0xFDF
  3417                           postinc2	equ	0xFDE
  3418                           postdec2	equ	0xFDD
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function ___lwmod *****************
  3424 ;; Defined at:
  3425 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  dividend        2    7[BANK1 ] unsigned int 
  3428 ;;  divisor         2    9[BANK1 ] unsigned int 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  counter         1   11[BANK1 ] unsigned char 
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  2    7[BANK1 ] unsigned int 
  3433 ;; Registers used:
  3434 ;;		wreg, status,2, status,0
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3440 ;;      Params:         0       0       4       0       0       0       0
  3441 ;;      Locals:         0       0       1       0       0       0       0
  3442 ;;      Temps:          0       0       0       0       0       0       0
  3443 ;;      Totals:         0       0       5       0       0       0       0
  3444 ;;Total ram usage:        5 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    9
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_sprintf
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text10
  3455  001A66                     __ptext10:
  3456                           	opt stack 0
  3457  001A66                     ___lwmod:
  3458                           	opt stack 18
  3459                           
  3460                           ; BSR set to: 1
  3461                           ;incstack = 0
  3462  001A66  0101               	movlb	1	; () banked
  3463  001A68  5133               	movf	___lwmod@divisor& (0+255),w,b
  3464  001A6A  1134               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3465  001A6C  B4D8               	btfsc	status,2,c
  3466  001A6E  D018               	goto	l1547
  3467                           
  3468                           ; BSR set to: 1
  3469  001A70  0E01               	movlw	1
  3470  001A72  6F35               	movwf	___lwmod@counter& (0+255),b
  3471  001A74  D004               	goto	l1542
  3472  001A76                     
  3473                           ; BSR set to: 1
  3474                           
  3475                           ; BSR set to: 1
  3476  001A76  90D8               	bcf	status,0,c
  3477  001A78  3733               	rlcf	___lwmod@divisor& (0+255),f,b
  3478  001A7A  3734               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3479  001A7C  2B35               	incf	___lwmod@counter& (0+255),f,b
  3480  001A7E                     l1542:
  3481                           
  3482                           ; BSR set to: 1
  3483                           
  3484                           ; BSR set to: 1
  3485  001A7E  AF34               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3486  001A80  D7FA               	goto	l1543
  3487  001A82                     u5860:
  3488                           
  3489                           ; BSR set to: 1
  3490                           
  3491                           ; BSR set to: 1
  3492                           
  3493                           ; BSR set to: 1
  3494  001A82  5133               	movf	___lwmod@divisor& (0+255),w,b
  3495  001A84  5D31               	subwf	___lwmod@dividend& (0+255),w,b
  3496  001A86  5134               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3497  001A88  5932               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3498  001A8A  A0D8               	btfss	status,0,c
  3499  001A8C  D004               	goto	l1546
  3500                           
  3501                           ; BSR set to: 1
  3502  001A8E  5133               	movf	___lwmod@divisor& (0+255),w,b
  3503  001A90  5F31               	subwf	___lwmod@dividend& (0+255),f,b
  3504  001A92  5134               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3505  001A94  5B32               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3506  001A96                     l1546:
  3507                           
  3508                           ; BSR set to: 1
  3509                           
  3510                           ; BSR set to: 1
  3511  001A96  90D8               	bcf	status,0,c
  3512  001A98  3334               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3513  001A9A  3333               	rrcf	___lwmod@divisor& (0+255),f,b
  3514                           
  3515                           ; BSR set to: 1
  3516  001A9C  2F35               	decfsz	___lwmod@counter& (0+255),f,b
  3517  001A9E  D7F1               	goto	u5860
  3518  001AA0                     l1547:
  3519                           
  3520                           ; BSR set to: 1
  3521                           
  3522                           ; BSR set to: 1
  3523  001AA0  C131  F131         	movff	___lwmod@dividend,?___lwmod
  3524  001AA4  C132  F132         	movff	___lwmod@dividend+1,?___lwmod+1
  3525                           
  3526                           ; BSR set to: 1
  3527  001AA8  0012               	return		;funcret
  3528  001AAA                     __end_of___lwmod:
  3529                           	opt stack 0
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           prodh	equ	0xFF4
  3535                           prodl	equ	0xFF3
  3536                           intcon	equ	0xFF2
  3537                           postinc0	equ	0xFEE
  3538                           wreg	equ	0xFE8
  3539                           indf1	equ	0xFE7
  3540                           fsr1h	equ	0xFE2
  3541                           fsr1l	equ	0xFE1
  3542                           indf2	equ	0xFDF
  3543                           postinc2	equ	0xFDE
  3544                           postdec2	equ	0xFDD
  3545                           fsr2h	equ	0xFDA
  3546                           fsr2l	equ	0xFD9
  3547                           status	equ	0xFD8
  3548                           
  3549 ;; *************** function ___lwdiv *****************
  3550 ;; Defined at:
  3551 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;  dividend        2    0[BANK1 ] unsigned int 
  3554 ;;  divisor         2    2[BANK1 ] unsigned int 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  quotient        2    5[BANK1 ] unsigned int 
  3557 ;;  counter         1    4[BANK1 ] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  2    0[BANK1 ] unsigned int 
  3560 ;; Registers used:
  3561 ;;		wreg, status,2, status,0
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3567 ;;      Params:         0       0       4       0       0       0       0
  3568 ;;      Locals:         0       0       3       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0
  3570 ;;      Totals:         0       0       7       0       0       0       0
  3571 ;;Total ram usage:        7 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    9
  3574 ;; This function calls:
  3575 ;;		Nothing
  3576 ;; This function is called by:
  3577 ;;		_sprintf
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text11
  3582  00197A                     __ptext11:
  3583                           	opt stack 0
  3584  00197A                     ___lwdiv:
  3585                           	opt stack 18
  3586                           
  3587                           ; BSR set to: 1
  3588                           ;incstack = 0
  3589  00197A  0E00               	movlw	0
  3590  00197C  0101               	movlb	1	; () banked
  3591  00197E  6F30               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3592  001980  0E00               	movlw	0
  3593  001982  6F2F               	movwf	___lwdiv@quotient& (0+255),b
  3594                           
  3595                           ; BSR set to: 1
  3596  001984  512C               	movf	___lwdiv@divisor& (0+255),w,b
  3597  001986  112D               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3598  001988  B4D8               	btfsc	status,2,c
  3599  00198A  D01C               	goto	l1537
  3600                           
  3601                           ; BSR set to: 1
  3602  00198C  0E01               	movlw	1
  3603  00198E  6F2E               	movwf	___lwdiv@counter& (0+255),b
  3604  001990  D004               	goto	l1532
  3605  001992                     
  3606                           ; BSR set to: 1
  3607                           
  3608                           ; BSR set to: 1
  3609  001992  90D8               	bcf	status,0,c
  3610  001994  372C               	rlcf	___lwdiv@divisor& (0+255),f,b
  3611  001996  372D               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3612  001998  2B2E               	incf	___lwdiv@counter& (0+255),f,b
  3613  00199A                     l1532:
  3614                           
  3615                           ; BSR set to: 1
  3616                           
  3617                           ; BSR set to: 1
  3618  00199A  AF2D               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3619  00199C  D7FA               	goto	l1533
  3620  00199E                     u5830:
  3621                           
  3622                           ; BSR set to: 1
  3623                           
  3624                           ; BSR set to: 1
  3625                           
  3626                           ; BSR set to: 1
  3627  00199E  90D8               	bcf	status,0,c
  3628  0019A0  372F               	rlcf	___lwdiv@quotient& (0+255),f,b
  3629  0019A2  3730               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3630                           
  3631                           ; BSR set to: 1
  3632  0019A4  512C               	movf	___lwdiv@divisor& (0+255),w,b
  3633  0019A6  5D2A               	subwf	___lwdiv@dividend& (0+255),w,b
  3634  0019A8  512D               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3635  0019AA  592B               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3636  0019AC  A0D8               	btfss	status,0,c
  3637  0019AE  D005               	goto	l1536
  3638                           
  3639                           ; BSR set to: 1
  3640  0019B0  512C               	movf	___lwdiv@divisor& (0+255),w,b
  3641  0019B2  5F2A               	subwf	___lwdiv@dividend& (0+255),f,b
  3642  0019B4  512D               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3643  0019B6  5B2B               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3644                           
  3645                           ; BSR set to: 1
  3646  0019B8  812F               	bsf	___lwdiv@quotient& (0+255),0,b
  3647  0019BA                     l1536:
  3648                           
  3649                           ; BSR set to: 1
  3650                           
  3651                           ; BSR set to: 1
  3652  0019BA  90D8               	bcf	status,0,c
  3653  0019BC  332D               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3654  0019BE  332C               	rrcf	___lwdiv@divisor& (0+255),f,b
  3655                           
  3656                           ; BSR set to: 1
  3657  0019C0  2F2E               	decfsz	___lwdiv@counter& (0+255),f,b
  3658  0019C2  D7ED               	goto	u5830
  3659  0019C4                     l1537:
  3660                           
  3661                           ; BSR set to: 1
  3662                           
  3663                           ; BSR set to: 1
  3664  0019C4  C12F  F12A         	movff	___lwdiv@quotient,?___lwdiv
  3665  0019C8  C130  F12B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3666                           
  3667                           ; BSR set to: 1
  3668  0019CC  0012               	return		;funcret
  3669  0019CE                     __end_of___lwdiv:
  3670                           	opt stack 0
  3671                           tblptru	equ	0xFF8
  3672                           tblptrh	equ	0xFF7
  3673                           tblptrl	equ	0xFF6
  3674                           tablat	equ	0xFF5
  3675                           prodh	equ	0xFF4
  3676                           prodl	equ	0xFF3
  3677                           intcon	equ	0xFF2
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           indf1	equ	0xFE7
  3681                           fsr1h	equ	0xFE2
  3682                           fsr1l	equ	0xFE1
  3683                           indf2	equ	0xFDF
  3684                           postinc2	equ	0xFDE
  3685                           postdec2	equ	0xFDD
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _getKBInput *****************
  3691 ;; Defined at:
  3692 ;;		line 288 in file "main.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;		None
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      unsigned char 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3706 ;;      Params:         0       0       0       0       0       0       0
  3707 ;;      Locals:         0       0       0       0       0       0       0
  3708 ;;      Temps:          0       0       0       0       0       0       0
  3709 ;;      Totals:         0       0       0       0       0       0       0
  3710 ;;Total ram usage:        0 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    9
  3713 ;; This function calls:
  3714 ;;		Nothing
  3715 ;; This function is called by:
  3716 ;;		_testeTeclado
  3717 ;;		_defTempAlarme
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           	psect	text12
  3722  0018BE                     __ptext12:
  3723                           	opt stack 0
  3724  0018BE                     _getKBInput:
  3725                           	opt stack 19
  3726                           
  3727                           ; BSR set to: 1
  3728                           ;incstack = 0
  3729                           ;main.c: 290: do { LATBbits.LATB3 = 1; } while(0);
  3730  0018BE  868A               	bsf	3978,3,c	;volatile
  3731  0018C0                     
  3732                           ;main.c: 294: if (LATBbits.LATB3 == 1 && WrEnFl == 0) {
  3733                           
  3734                           ;main.c: 292: do {
  3735  0018C0  A68A               	btfss	3978,3,c	;volatile
  3736  0018C2  D005               	goto	l881
  3737  0018C4  5038               	movf	_WrEnFl,w,c	;volatile
  3738  0018C6  A4D8               	btfss	status,2,c
  3739  0018C8  D002               	goto	l881
  3740                           
  3741                           ;main.c: 295: do { LATBbits.LATB3 = 0; } while(0);
  3742  0018CA  968A               	bcf	3978,3,c	;volatile
  3743                           
  3744                           ;main.c: 296: do { LATBbits.LATB4 = 1; } while(0);
  3745  0018CC  888A               	bsf	3978,4,c	;volatile
  3746  0018CE                     l881:
  3747                           
  3748                           ;main.c: 297: }
  3749                           ;main.c: 298: if (LATBbits.LATB4 == 1 && WrEnFl == 0) {
  3750  0018CE  A88A               	btfss	3978,4,c	;volatile
  3751  0018D0  D005               	goto	l886
  3752  0018D2  5038               	movf	_WrEnFl,w,c	;volatile
  3753  0018D4  A4D8               	btfss	status,2,c
  3754  0018D6  D002               	goto	l886
  3755                           
  3756                           ;main.c: 299: do { LATBbits.LATB4 = 0; } while(0);
  3757  0018D8  988A               	bcf	3978,4,c	;volatile
  3758                           
  3759                           ;main.c: 300: do { LATBbits.LATB5 = 1; } while(0);
  3760  0018DA  8A8A               	bsf	3978,5,c	;volatile
  3761  0018DC                     l886:
  3762                           
  3763                           ;main.c: 301: }
  3764                           ;main.c: 302: if (LATBbits.LATB5 == 1 && WrEnFl == 0) {
  3765  0018DC  AA8A               	btfss	3978,5,c	;volatile
  3766  0018DE  D005               	goto	l891
  3767  0018E0  5038               	movf	_WrEnFl,w,c	;volatile
  3768  0018E2  A4D8               	btfss	status,2,c
  3769  0018E4  D002               	goto	l891
  3770                           
  3771                           ;main.c: 303: do { LATBbits.LATB5 = 0; } while(0);
  3772  0018E6  9A8A               	bcf	3978,5,c	;volatile
  3773                           
  3774                           ;main.c: 304: do { LATBbits.LATB6 = 1; } while(0);
  3775  0018E8  8C8A               	bsf	3978,6,c	;volatile
  3776  0018EA                     l891:
  3777                           
  3778                           ;main.c: 305: }
  3779                           ;main.c: 306: if (LATBbits.LATB6 == 1 && WrEnFl == 0) {
  3780  0018EA  AC8A               	btfss	3978,6,c	;volatile
  3781  0018EC  D005               	goto	l896
  3782  0018EE  5038               	movf	_WrEnFl,w,c	;volatile
  3783  0018F0  A4D8               	btfss	status,2,c
  3784  0018F2  D002               	goto	l896
  3785                           
  3786                           ;main.c: 307: do { LATBbits.LATB6 = 0; } while(0);
  3787  0018F4  9C8A               	bcf	3978,6,c	;volatile
  3788                           
  3789                           ;main.c: 308: do { LATBbits.LATB3 = 1; } while(0);
  3790  0018F6  868A               	bsf	3978,3,c	;volatile
  3791  0018F8                     l896:
  3792                           
  3793                           ;main.c: 309: }
  3794                           ;main.c: 311: } while (WrEnFl == 0 && PORTAbits.RA1 != 0);
  3795  0018F8  5038               	movf	_WrEnFl,w,c	;volatile
  3796  0018FA  A4D8               	btfss	status,2,c
  3797  0018FC  D002               	goto	u6180
  3798  0018FE  B280               	btfsc	3968,1,c	;volatile
  3799  001900  D7DF               	goto	l875
  3800  001902                     u6180:
  3801                           
  3802                           ;main.c: 312: WrEnFl = 0;
  3803  001902  0E00               	movlw	0
  3804  001904  6E38               	movwf	_WrEnFl,c	;volatile
  3805  001906  A081               	btfss	3969,0,c	;volatile
  3806  001908  B281               	btfsc	3969,1,c	;volatile
  3807  00190A  D7FD               	goto	l901
  3808  00190C  B481               	btfsc	3969,2,c	;volatile
  3809  00190E  D7FB               	goto	l901
  3810                           
  3811                           ;main.c: 316: if (PORTAbits.RA1 == 0) {
  3812  001910  B280               	btfsc	3968,1,c	;volatile
  3813  001912  D002               	goto	l903
  3814                           
  3815                           ;main.c: 317: return (0);
  3816  001914  0E00               	movlw	0
  3817  001916  0012               	return	
  3818  001918                     l903:
  3819                           
  3820                           ;main.c: 318: }
  3821                           ;main.c: 320: return TeclaTMP;
  3822  001918  5042               	movf	_TeclaTMP,w,c	;volatile
  3823  00191A  0012               	return	
  3824  00191C                     __end_of_getKBInput:
  3825                           	opt stack 0
  3826                           tblptru	equ	0xFF8
  3827                           tblptrh	equ	0xFF7
  3828                           tblptrl	equ	0xFF6
  3829                           tablat	equ	0xFF5
  3830                           prodh	equ	0xFF4
  3831                           prodl	equ	0xFF3
  3832                           intcon	equ	0xFF2
  3833                           postinc0	equ	0xFEE
  3834                           wreg	equ	0xFE8
  3835                           indf1	equ	0xFE7
  3836                           fsr1h	equ	0xFE2
  3837                           fsr1l	equ	0xFE1
  3838                           indf2	equ	0xFDF
  3839                           postinc2	equ	0xFDE
  3840                           postdec2	equ	0xFDD
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function _escreveLinhaLCD *****************
  3846 ;; Defined at:
  3847 ;;		line 104 in file "main.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  linha           1    wreg     unsigned char 
  3850 ;;  texto           2    3[BANK1 ] PTR unsigned char 
  3851 ;;		 -> STR_20(21), STR_19(21), STR_17(21), STR_16(21), 
  3852 ;;		 -> STR_8(20), STR_7(22), STR_6(22), STR_5(22), 
  3853 ;;		 -> STR_4(22), strLCD(42), STR_2(20), 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  linha           1    5[BANK1 ] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3865 ;;      Params:         0       0       2       0       0       0       0
  3866 ;;      Locals:         0       0       1       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0
  3868 ;;      Totals:         0       0       3       0       0       0       0
  3869 ;;Total ram usage:        3 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:   12
  3872 ;; This function calls:
  3873 ;;		_BusyXLCD
  3874 ;;		_WriteCmdXLCD
  3875 ;;		_putsXLCD
  3876 ;; This function is called by:
  3877 ;;		_menu
  3878 ;;		_monitorizacao
  3879 ;;		_testeTeclado
  3880 ;;		_defTempAlarme
  3881 ;;		_feedbackUSART
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text13
  3886  001D3E                     __ptext13:
  3887                           	opt stack 0
  3888  001D3E                     _escreveLinhaLCD:
  3889                           	opt stack 16
  3890                           
  3891                           ;incstack = 0
  3892                           ;escreveLinhaLCD@linha stored from wreg
  3893  001D3E  0101               	movlb	1	; () banked
  3894  001D40  6F2F               	movwf	escreveLinhaLCD@linha& (0+255),b
  3895  001D42                     
  3896                           ;main.c: 106: while (BusyXLCD());
  3897  001D42  EC36  F00E         	call	_BusyXLCD	;wreg free
  3898  001D46  0900               	iorlw	0
  3899  001D48  A4D8               	btfss	status,2,c
  3900  001D4A  D7FB               	goto	l5620
  3901                           
  3902                           ;main.c: 107: WriteCmdXLCD(linha);
  3903  001D4C  0101               	movlb	1	; () banked
  3904  001D4E  512F               	movf	escreveLinhaLCD@linha& (0+255),w,b
  3905  001D50  EC77  F00D         	call	_WriteCmdXLCD
  3906  001D54  EC36  F00E         	call	_BusyXLCD	;wreg free
  3907  001D58  0900               	iorlw	0
  3908  001D5A  A4D8               	btfss	status,2,c
  3909  001D5C  D7FB               	goto	l797
  3910                           
  3911                           ;main.c: 109: putsXLCD(texto);
  3912  001D5E  C12D  F12B         	movff	escreveLinhaLCD@texto,putsXLCD@buffer
  3913  001D62  C12E  F12C         	movff	escreveLinhaLCD@texto+1,putsXLCD@buffer+1
  3914  001D66  EC8E  F00C         	call	_putsXLCD	;wreg free
  3915  001D6A  0012               	return		;funcret
  3916  001D6C                     __end_of_escreveLinhaLCD:
  3917                           	opt stack 0
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           prodh	equ	0xFF4
  3923                           prodl	equ	0xFF3
  3924                           intcon	equ	0xFF2
  3925                           postinc0	equ	0xFEE
  3926                           wreg	equ	0xFE8
  3927                           indf1	equ	0xFE7
  3928                           fsr1h	equ	0xFE2
  3929                           fsr1l	equ	0xFE1
  3930                           indf2	equ	0xFDF
  3931                           postinc2	equ	0xFDE
  3932                           postdec2	equ	0xFDD
  3933                           fsr2h	equ	0xFDA
  3934                           fsr2l	equ	0xFD9
  3935                           status	equ	0xFD8
  3936                           
  3937 ;; *************** function _putsXLCD *****************
  3938 ;; Defined at:
  3939 ;;		line 302 in file "xlcd.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  buffer          2    1[BANK1 ] PTR unsigned char 
  3942 ;;		 -> STR_20(21), STR_19(21), STR_17(21), STR_16(21), 
  3943 ;;		 -> STR_8(20), STR_7(22), STR_6(22), STR_5(22), 
  3944 ;;		 -> STR_4(22), strLCD(42), STR_2(20), 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      void 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3956 ;;      Params:         0       0       2       0       0       0       0
  3957 ;;      Locals:         0       0       0       0       0       0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0
  3959 ;;      Totals:         0       0       2       0       0       0       0
  3960 ;;Total ram usage:        2 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:   11
  3963 ;; This function calls:
  3964 ;;		_BusyXLCD
  3965 ;;		_WriteDataXLCD
  3966 ;; This function is called by:
  3967 ;;		_escreveLinhaLCD
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text14
  3972  00191C                     __ptext14:
  3973                           	opt stack 0
  3974  00191C                     _putsXLCD:
  3975                           	opt stack 16
  3976                           
  3977                           ;xlcd.c: 303: while (*buffer)
  3978                           
  3979                           ;incstack = 0
  3980  00191C  D01A               	goto	l669
  3981  00191E                     
  3982                           ;xlcd.c: 304: {
  3983                           ;xlcd.c: 305: while (BusyXLCD());
  3984  00191E  EC36  F00E         	call	_BusyXLCD	;wreg free
  3985  001922  0900               	iorlw	0
  3986  001924  A4D8               	btfss	status,2,c
  3987  001926  D7FB               	goto	l670
  3988                           
  3989                           ;xlcd.c: 306: WriteDataXLCD(*buffer);
  3990  001928  C12B  FFF6         	movff	putsXLCD@buffer,tblptrl
  3991  00192C  C12C  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  3992  001930  6AF8               	clrf	tblptru,c
  3993  001932  0E05               	movlw	(high __ramtop+-1)
  3994  001934  64F7               	cpfsgt	tblptrh,c
  3995  001936  D003               	bra	u5697
  3996  001938  0008               	tblrd		*
  3997  00193A  50F5               	movf	tablat,w,c
  3998  00193C  D005               	bra	u5690
  3999  00193E                     u5697:
  4000  00193E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4001  001942  CFF7 FFEA          	movff	tblptrh,fsr0h
  4002  001946  50EF               	movf	indf0,w,c
  4003  001948                     u5690:
  4004  001948  EC55  F00D         	call	_WriteDataXLCD
  4005                           
  4006                           ;xlcd.c: 307: buffer++;
  4007  00194C  0101               	movlb	1	; () banked
  4008  00194E  4B2B               	infsnz	putsXLCD@buffer& (0+255),f,b
  4009  001950  2B2C               	incf	(putsXLCD@buffer+1)& (0+255),f,b
  4010  001952                     l669:
  4011                           
  4012                           ; BSR set to: 1
  4013  001952  C12B  FFF6         	movff	putsXLCD@buffer,tblptrl
  4014  001956  C12C  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  4015  00195A  6AF8               	clrf	tblptru,c
  4016  00195C  0E05               	movlw	(high __ramtop+-1)
  4017  00195E  64F7               	cpfsgt	tblptrh,c
  4018  001960  D003               	bra	u5707
  4019  001962  0008               	tblrd		*
  4020  001964  50F5               	movf	tablat,w,c
  4021  001966  D005               	bra	u5700
  4022  001968                     u5707:
  4023  001968  CFF6 FFE9          	movff	tblptrl,fsr0l
  4024  00196C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4025  001970  50EF               	movf	indf0,w,c
  4026  001972                     u5700:
  4027  001972  0900               	iorlw	0
  4028  001974  B4D8               	btfsc	status,2,c
  4029  001976  0012               	return	
  4030  001978  D7D2               	goto	l670
  4031  00197A                     __end_of_putsXLCD:
  4032                           	opt stack 0
  4033                           tblptru	equ	0xFF8
  4034                           tblptrh	equ	0xFF7
  4035                           tblptrl	equ	0xFF6
  4036                           tablat	equ	0xFF5
  4037                           prodh	equ	0xFF4
  4038                           prodl	equ	0xFF3
  4039                           intcon	equ	0xFF2
  4040                           indf0	equ	0xFEF
  4041                           postinc0	equ	0xFEE
  4042                           fsr0h	equ	0xFEA
  4043                           fsr0l	equ	0xFE9
  4044                           wreg	equ	0xFE8
  4045                           indf1	equ	0xFE7
  4046                           fsr1h	equ	0xFE2
  4047                           fsr1l	equ	0xFE1
  4048                           indf2	equ	0xFDF
  4049                           postinc2	equ	0xFDE
  4050                           postdec2	equ	0xFDD
  4051                           fsr2h	equ	0xFDA
  4052                           fsr2l	equ	0xFD9
  4053                           status	equ	0xFD8
  4054                           
  4055 ;; *************** function _WriteDataXLCD *****************
  4056 ;; Defined at:
  4057 ;;		line 598 in file "xlcd.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;  data            1    wreg     unsigned char 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  data            1    0[BANK1 ] unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      void 
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4071 ;;      Params:         0       0       0       0       0       0       0
  4072 ;;      Locals:         0       0       1       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0
  4074 ;;      Totals:         0       0       1       0       0       0       0
  4075 ;;Total ram usage:        1 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:   10
  4078 ;; This function calls:
  4079 ;;		_DelayFor18TCY
  4080 ;; This function is called by:
  4081 ;;		_putsXLCD
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text15
  4086  001AAA                     __ptext15:
  4087                           	opt stack 0
  4088  001AAA                     _WriteDataXLCD:
  4089                           	opt stack 16
  4090                           
  4091                           ;incstack = 0
  4092                           ;WriteDataXLCD@data stored from wreg
  4093  001AAA  0101               	movlb	1	; () banked
  4094  001AAC  6F2A               	movwf	WriteDataXLCD@data& (0+255),b
  4095                           
  4096                           ;xlcd.c: 616: TRISD &= 0xf0;
  4097  001AAE  0EF0               	movlw	240
  4098  001AB0  1695               	andwf	3989,f,c	;volatile
  4099                           
  4100                           ;xlcd.c: 617: PORTD &= 0xf0;
  4101  001AB2  0EF0               	movlw	240
  4102  001AB4  1683               	andwf	3971,f,c	;volatile
  4103                           
  4104                           ;xlcd.c: 618: PORTD |= ((data >> 4)&0x0f);
  4105  001AB6  0101               	movlb	1	; () banked
  4106  001AB8  392A               	swapf	WriteDataXLCD@data& (0+255),w,b
  4107  001ABA  0B0F               	andlw	15
  4108  001ABC  0B0F               	andlw	15
  4109  001ABE  1283               	iorwf	3971,f,c	;volatile
  4110                           
  4111                           ; BSR set to: 1
  4112                           ;xlcd.c: 620: LATDbits.LATD4 = 1;
  4113  001AC0  888C               	bsf	3980,4,c	;volatile
  4114                           
  4115                           ; BSR set to: 1
  4116                           ;xlcd.c: 621: LATDbits.LATD5 = 0;
  4117  001AC2  9A8C               	bcf	3980,5,c	;volatile
  4118                           
  4119                           ; BSR set to: 1
  4120                           ;xlcd.c: 622: DelayFor18TCY();
  4121  001AC4  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  4122                           
  4123                           ;xlcd.c: 623: LATDbits.LATD6 = 1;
  4124  001AC8  8C8C               	bsf	3980,6,c	;volatile
  4125                           
  4126                           ;xlcd.c: 624: DelayFor18TCY();
  4127  001ACA  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  4128                           
  4129                           ;xlcd.c: 625: LATDbits.LATD6 = 0;
  4130  001ACE  9C8C               	bcf	3980,6,c	;volatile
  4131                           
  4132                           ;xlcd.c: 630: PORTD &= 0xf0;
  4133  001AD0  0EF0               	movlw	240
  4134  001AD2  1683               	andwf	3971,f,c	;volatile
  4135                           
  4136                           ;xlcd.c: 631: PORTD |= (data & 0x0f);
  4137  001AD4  0101               	movlb	1	; () banked
  4138  001AD6  512A               	movf	WriteDataXLCD@data& (0+255),w,b
  4139  001AD8  0B0F               	andlw	15
  4140  001ADA  1283               	iorwf	3971,f,c	;volatile
  4141                           
  4142                           ; BSR set to: 1
  4143                           ;xlcd.c: 633: DelayFor18TCY();
  4144  001ADC  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  4145                           
  4146                           ;xlcd.c: 634: LATDbits.LATD6 = 1;
  4147  001AE0  8C8C               	bsf	3980,6,c	;volatile
  4148                           
  4149                           ;xlcd.c: 635: DelayFor18TCY();
  4150  001AE2  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  4151                           
  4152                           ;xlcd.c: 636: LATDbits.LATD6 = 0;
  4153  001AE6  9C8C               	bcf	3980,6,c	;volatile
  4154                           
  4155                           ;xlcd.c: 640: TRISD |= 0x0f;
  4156  001AE8  0E0F               	movlw	15
  4157  001AEA  1295               	iorwf	3989,f,c	;volatile
  4158  001AEC  0012               	return	
  4159  001AEE                     __end_of_WriteDataXLCD:
  4160                           	opt stack 0
  4161                           tblptru	equ	0xFF8
  4162                           tblptrh	equ	0xFF7
  4163                           tblptrl	equ	0xFF6
  4164                           tablat	equ	0xFF5
  4165                           prodh	equ	0xFF4
  4166                           prodl	equ	0xFF3
  4167                           intcon	equ	0xFF2
  4168                           indf0	equ	0xFEF
  4169                           postinc0	equ	0xFEE
  4170                           fsr0h	equ	0xFEA
  4171                           fsr0l	equ	0xFE9
  4172                           wreg	equ	0xFE8
  4173                           indf1	equ	0xFE7
  4174                           fsr1h	equ	0xFE2
  4175                           fsr1l	equ	0xFE1
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           fsr2h	equ	0xFDA
  4180                           fsr2l	equ	0xFD9
  4181                           status	equ	0xFD8
  4182                           
  4183 ;; *************** function _SYSTEM_Initialize *****************
  4184 ;; Defined at:
  4185 ;;		line 111 in file "mcc_generated_files/mcc.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      void 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2, status,0, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4199 ;;      Params:         0       0       0       0       0       0       0
  4200 ;;      Locals:         0       0       0       0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0
  4202 ;;      Totals:         0       0       0       0       0       0       0
  4203 ;;Total ram usage:        0 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:   11
  4206 ;; This function calls:
  4207 ;;		_ADC_Initialize
  4208 ;;		_EPWM1_Initialize
  4209 ;;		_EUSART1_Initialize
  4210 ;;		_EXT_INT_Initialize
  4211 ;;		_I2C1_Initialize
  4212 ;;		_INTERRUPT_Initialize
  4213 ;;		_OSCILLATOR_Initialize
  4214 ;;		_PIN_MANAGER_Initialize
  4215 ;;		_TMR0_Initialize
  4216 ;;		_TMR2_Initialize
  4217 ;; This function is called by:
  4218 ;;		_main
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text16
  4223  001DF0                     __ptext16:
  4224                           	opt stack 0
  4225  001DF0                     _SYSTEM_Initialize:
  4226                           	opt stack 19
  4227                           
  4228                           ;mcc.c: 114: INTERRUPT_Initialize();
  4229                           
  4230                           ;incstack = 0
  4231  001DF0  ECF3  F00F         	call	_INTERRUPT_Initialize	;wreg free
  4232                           
  4233                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4234  001DF4  EC10  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  4235                           
  4236                           ;mcc.c: 116: OSCILLATOR_Initialize();
  4237  001DF8  EC14  F010         	call	_OSCILLATOR_Initialize	;wreg free
  4238                           
  4239                           ;mcc.c: 117: I2C1_Initialize();
  4240  001DFC  EC6F  F00E         	call	_I2C1_Initialize	;wreg free
  4241                           
  4242                           ;mcc.c: 118: ADC_Initialize();
  4243  001E00  ECC7  F00F         	call	_ADC_Initialize	;wreg free
  4244                           
  4245                           ;mcc.c: 119: EPWM1_Initialize();
  4246  001E04  EC9B  F00F         	call	_EPWM1_Initialize	;wreg free
  4247                           
  4248                           ;mcc.c: 120: TMR2_Initialize();
  4249  001E08  EC05  F010         	call	_TMR2_Initialize	;wreg free
  4250                           
  4251                           ;mcc.c: 121: EXT_INT_Initialize();
  4252  001E0C  ECFA  F00D         	call	_EXT_INT_Initialize	;wreg free
  4253                           
  4254                           ;mcc.c: 122: TMR0_Initialize();
  4255  001E10  EC19  F00E         	call	_TMR0_Initialize	;wreg free
  4256                           
  4257                           ;mcc.c: 123: EUSART1_Initialize();
  4258  001E14  ECBA  F00F         	call	_EUSART1_Initialize	;wreg free
  4259  001E18  0012               	return		;funcret
  4260  001E1A                     __end_of_SYSTEM_Initialize:
  4261                           	opt stack 0
  4262                           tblptru	equ	0xFF8
  4263                           tblptrh	equ	0xFF7
  4264                           tblptrl	equ	0xFF6
  4265                           tablat	equ	0xFF5
  4266                           prodh	equ	0xFF4
  4267                           prodl	equ	0xFF3
  4268                           intcon	equ	0xFF2
  4269                           indf0	equ	0xFEF
  4270                           postinc0	equ	0xFEE
  4271                           fsr0h	equ	0xFEA
  4272                           fsr0l	equ	0xFE9
  4273                           wreg	equ	0xFE8
  4274                           indf1	equ	0xFE7
  4275                           fsr1h	equ	0xFE2
  4276                           fsr1l	equ	0xFE1
  4277                           indf2	equ	0xFDF
  4278                           postinc2	equ	0xFDE
  4279                           postdec2	equ	0xFDD
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _TMR2_Initialize *****************
  4285 ;; Defined at:
  4286 ;;		line 61 in file "mcc_generated_files/tmr2.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      void 
  4293 ;; Registers used:
  4294 ;;		wreg, status,2
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4300 ;;      Params:         0       0       0       0       0       0       0
  4301 ;;      Locals:         0       0       0       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0
  4303 ;;      Totals:         0       0       0       0       0       0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    9
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_SYSTEM_Initialize
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text17
  4315  00200A                     __ptext17:
  4316                           	opt stack 0
  4317  00200A                     _TMR2_Initialize:
  4318                           	opt stack 20
  4319                           
  4320                           ;tmr2.c: 66: T2CON = 0x02;
  4321                           
  4322                           ;incstack = 0
  4323  00200A  0E02               	movlw	2
  4324  00200C  6EBA               	movwf	4026,c	;volatile
  4325                           
  4326                           ;tmr2.c: 69: PR2 = 0x95;
  4327  00200E  0E95               	movlw	149
  4328  002010  6EBB               	movwf	4027,c	;volatile
  4329                           
  4330                           ;tmr2.c: 72: TMR2 = 0x00;
  4331  002012  0E00               	movlw	0
  4332  002014  6EBC               	movwf	4028,c	;volatile
  4333                           
  4334                           ;tmr2.c: 75: PIR1bits.TMR2IF = 0;
  4335  002016  929E               	bcf	3998,1,c	;volatile
  4336  002018  0012               	return		;funcret
  4337  00201A                     __end_of_TMR2_Initialize:
  4338                           	opt stack 0
  4339                           tblptru	equ	0xFF8
  4340                           tblptrh	equ	0xFF7
  4341                           tblptrl	equ	0xFF6
  4342                           tablat	equ	0xFF5
  4343                           prodh	equ	0xFF4
  4344                           prodl	equ	0xFF3
  4345                           intcon	equ	0xFF2
  4346                           indf0	equ	0xFEF
  4347                           postinc0	equ	0xFEE
  4348                           fsr0h	equ	0xFEA
  4349                           fsr0l	equ	0xFE9
  4350                           wreg	equ	0xFE8
  4351                           indf1	equ	0xFE7
  4352                           fsr1h	equ	0xFE2
  4353                           fsr1l	equ	0xFE1
  4354                           indf2	equ	0xFDF
  4355                           postinc2	equ	0xFDE
  4356                           postdec2	equ	0xFDD
  4357                           fsr2h	equ	0xFDA
  4358                           fsr2l	equ	0xFD9
  4359                           status	equ	0xFD8
  4360                           
  4361 ;; *************** function _TMR0_Initialize *****************
  4362 ;; Defined at:
  4363 ;;		line 71 in file "mcc_generated_files/tmr0.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;		None
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;		None
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  1    wreg      void 
  4370 ;; Registers used:
  4371 ;;		wreg, status,2, status,0, cstack
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4377 ;;      Params:         0       0       0       0       0       0       0
  4378 ;;      Locals:         0       0       0       0       0       0       0
  4379 ;;      Temps:          0       0       2       0       0       0       0
  4380 ;;      Totals:         0       0       2       0       0       0       0
  4381 ;;Total ram usage:        2 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:   10
  4384 ;; This function calls:
  4385 ;;		_TMR0_SetInterruptHandler
  4386 ;;		_TMR0_StartTimer
  4387 ;; This function is called by:
  4388 ;;		_SYSTEM_Initialize
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text18
  4393  001C32                     __ptext18:
  4394                           	opt stack 0
  4395  001C32                     _TMR0_Initialize:
  4396                           	opt stack 19
  4397                           
  4398                           ;tmr0.c: 75: T0CON = 0x11;
  4399                           
  4400                           ;incstack = 0
  4401  001C32  0E11               	movlw	17
  4402  001C34  6ED5               	movwf	4053,c	;volatile
  4403                           
  4404                           ;tmr0.c: 78: TMR0H = 0x48;
  4405  001C36  0E48               	movlw	72
  4406  001C38  6ED7               	movwf	4055,c	;volatile
  4407                           
  4408                           ;tmr0.c: 81: TMR0L = 0xE4;
  4409  001C3A  0EE4               	movlw	228
  4410  001C3C  6ED6               	movwf	4054,c	;volatile
  4411                           
  4412                           ;tmr0.c: 84: timer0ReloadVal = ( TMR0H << 8 ) | TMR0L;
  4413  001C3E  50D6               	movf	4054,w,c	;volatile
  4414  001C40  CFD7 F12C          	movff	4055,??_TMR0_Initialize	;volatile
  4415  001C44  0101               	movlb	1	; () banked
  4416  001C46  6B2D               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  4417  001C48  C12C  F12D         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  4418  001C4C  6B2C               	clrf	??_TMR0_Initialize& (0+255),b
  4419  001C4E  112C               	iorwf	??_TMR0_Initialize& (0+255),w,b
  4420  001C50  6E45               	movwf	_timer0ReloadVal,c	;volatile
  4421  001C52  512D               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  4422  001C54  6E46               	movwf	_timer0ReloadVal+1,c	;volatile
  4423                           
  4424                           ; BSR set to: 1
  4425                           ;tmr0.c: 87: INTCONbits.TMR0IF = 0;
  4426  001C56  94F2               	bcf	intcon,2,c	;volatile
  4427                           
  4428                           ; BSR set to: 1
  4429                           ;tmr0.c: 90: INTCONbits.TMR0IE = 1;
  4430  001C58  8AF2               	bsf	intcon,5,c	;volatile
  4431                           
  4432                           ; BSR set to: 1
  4433                           ;tmr0.c: 93: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  4434  001C5A  0E8E               	movlw	low _TMR0_DefaultInterruptHandler
  4435  001C5C  6F2A               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  4436  001C5E  0E20               	movlw	high _TMR0_DefaultInterruptHandler
  4437  001C60  6F2B               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4438  001C62  EC21  F010         	call	_TMR0_SetInterruptHandler	;wreg free
  4439                           
  4440                           ;tmr0.c: 96: TMR0_StartTimer();
  4441  001C66  EC3D  F010         	call	_TMR0_StartTimer	;wreg free
  4442  001C6A  0012               	return		;funcret
  4443  001C6C                     __end_of_TMR0_Initialize:
  4444                           	opt stack 0
  4445                           tblptru	equ	0xFF8
  4446                           tblptrh	equ	0xFF7
  4447                           tblptrl	equ	0xFF6
  4448                           tablat	equ	0xFF5
  4449                           prodh	equ	0xFF4
  4450                           prodl	equ	0xFF3
  4451                           intcon	equ	0xFF2
  4452                           indf0	equ	0xFEF
  4453                           postinc0	equ	0xFEE
  4454                           fsr0h	equ	0xFEA
  4455                           fsr0l	equ	0xFE9
  4456                           wreg	equ	0xFE8
  4457                           indf1	equ	0xFE7
  4458                           fsr1h	equ	0xFE2
  4459                           fsr1l	equ	0xFE1
  4460                           indf2	equ	0xFDF
  4461                           postinc2	equ	0xFDE
  4462                           postdec2	equ	0xFDD
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _TMR0_StartTimer *****************
  4468 ;; Defined at:
  4469 ;;		line 99 in file "mcc_generated_files/tmr0.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		None
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4483 ;;      Params:         0       0       0       0       0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0
  4486 ;;      Totals:         0       0       0       0       0       0       0
  4487 ;;Total ram usage:        0 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    9
  4490 ;; This function calls:
  4491 ;;		Nothing
  4492 ;; This function is called by:
  4493 ;;		_TMR0_Initialize
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text19
  4498  00207A                     __ptext19:
  4499                           	opt stack 0
  4500  00207A                     _TMR0_StartTimer:
  4501                           	opt stack 19
  4502                           
  4503                           ;tmr0.c: 101: T0CONbits.TMR0ON = 1;
  4504                           
  4505                           ;incstack = 0
  4506  00207A  8ED5               	bsf	4053,7,c	;volatile
  4507  00207C  0012               	return		;funcret
  4508  00207E                     __end_of_TMR0_StartTimer:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           prodh	equ	0xFF4
  4515                           prodl	equ	0xFF3
  4516                           intcon	equ	0xFF2
  4517                           indf0	equ	0xFEF
  4518                           postinc0	equ	0xFEE
  4519                           fsr0h	equ	0xFEA
  4520                           fsr0l	equ	0xFE9
  4521                           wreg	equ	0xFE8
  4522                           indf1	equ	0xFE7
  4523                           fsr1h	equ	0xFE2
  4524                           fsr1l	equ	0xFE1
  4525                           indf2	equ	0xFDF
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           fsr2h	equ	0xFDA
  4529                           fsr2l	equ	0xFD9
  4530                           status	equ	0xFD8
  4531                           
  4532 ;; *************** function _TMR0_SetInterruptHandler *****************
  4533 ;; Defined at:
  4534 ;;		line 188 in file "mcc_generated_files/tmr0.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4537 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;		None
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, status,2, status,0
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4549 ;;      Params:         0       0       2       0       0       0       0
  4550 ;;      Locals:         0       0       0       0       0       0       0
  4551 ;;      Temps:          0       0       0       0       0       0       0
  4552 ;;      Totals:         0       0       2       0       0       0       0
  4553 ;;Total ram usage:        2 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    9
  4556 ;; This function calls:
  4557 ;;		Nothing
  4558 ;; This function is called by:
  4559 ;;		_TMR0_Initialize
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text20
  4564  002042                     __ptext20:
  4565                           	opt stack 0
  4566  002042                     _TMR0_SetInterruptHandler:
  4567                           	opt stack 19
  4568                           
  4569                           ;tmr0.c: 189: TMR0_InterruptHandler = InterruptHandler;
  4570                           
  4571                           ;incstack = 0
  4572  002042  C12A  F0D4         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  4573  002046  C12B  F0D5         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  4574  00204A  0012               	return		;funcret
  4575  00204C                     __end_of_TMR0_SetInterruptHandler:
  4576                           	opt stack 0
  4577                           tblptru	equ	0xFF8
  4578                           tblptrh	equ	0xFF7
  4579                           tblptrl	equ	0xFF6
  4580                           tablat	equ	0xFF5
  4581                           prodh	equ	0xFF4
  4582                           prodl	equ	0xFF3
  4583                           intcon	equ	0xFF2
  4584                           indf0	equ	0xFEF
  4585                           postinc0	equ	0xFEE
  4586                           fsr0h	equ	0xFEA
  4587                           fsr0l	equ	0xFE9
  4588                           wreg	equ	0xFE8
  4589                           indf1	equ	0xFE7
  4590                           fsr1h	equ	0xFE2
  4591                           fsr1l	equ	0xFE1
  4592                           indf2	equ	0xFDF
  4593                           postinc2	equ	0xFDE
  4594                           postdec2	equ	0xFDD
  4595                           fsr2h	equ	0xFDA
  4596                           fsr2l	equ	0xFD9
  4597                           status	equ	0xFD8
  4598                           
  4599 ;; *************** function _PIN_MANAGER_Initialize *****************
  4600 ;; Defined at:
  4601 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4615 ;;      Params:         0       0       0       0       0       0       0
  4616 ;;      Locals:         0       0       0       0       0       0       0
  4617 ;;      Temps:          0       0       0       0       0       0       0
  4618 ;;      Totals:         0       0       0       0       0       0       0
  4619 ;;Total ram usage:        0 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    9
  4622 ;; This function calls:
  4623 ;;		Nothing
  4624 ;; This function is called by:
  4625 ;;		_SYSTEM_Initialize
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text21
  4630  001A20                     __ptext21:
  4631                           	opt stack 0
  4632  001A20                     _PIN_MANAGER_Initialize:
  4633                           	opt stack 20
  4634                           
  4635                           ;pin_manager.c: 57: LATE = 0x00;
  4636                           
  4637                           ;incstack = 0
  4638  001A20  0E00               	movlw	0
  4639  001A22  6E8D               	movwf	3981,c	;volatile
  4640                           
  4641                           ;pin_manager.c: 58: LATD = 0x00;
  4642  001A24  0E00               	movlw	0
  4643  001A26  6E8C               	movwf	3980,c	;volatile
  4644                           
  4645                           ;pin_manager.c: 59: LATA = 0x00;
  4646  001A28  0E00               	movlw	0
  4647  001A2A  6E89               	movwf	3977,c	;volatile
  4648                           
  4649                           ;pin_manager.c: 60: LATB = 0x00;
  4650  001A2C  0E00               	movlw	0
  4651  001A2E  6E8A               	movwf	3978,c	;volatile
  4652                           
  4653                           ;pin_manager.c: 61: LATC = 0x00;
  4654  001A30  0E00               	movlw	0
  4655  001A32  6E8B               	movwf	3979,c	;volatile
  4656                           
  4657                           ;pin_manager.c: 66: TRISE = 0x07;
  4658  001A34  0E07               	movlw	7
  4659  001A36  6E96               	movwf	3990,c	;volatile
  4660                           
  4661                           ;pin_manager.c: 67: TRISA = 0xBF;
  4662  001A38  0EBF               	movlw	191
  4663  001A3A  6E92               	movwf	3986,c	;volatile
  4664                           
  4665                           ;pin_manager.c: 68: TRISB = 0x07;
  4666  001A3C  0E07               	movlw	7
  4667  001A3E  6E93               	movwf	3987,c	;volatile
  4668                           
  4669                           ;pin_manager.c: 69: TRISC = 0xBB;
  4670  001A40  0EBB               	movlw	187
  4671  001A42  6E94               	movwf	3988,c	;volatile
  4672                           
  4673                           ;pin_manager.c: 70: TRISD = 0x00;
  4674  001A44  0E00               	movlw	0
  4675  001A46  6E95               	movwf	3989,c	;volatile
  4676                           
  4677                           ;pin_manager.c: 75: ANSELC = 0x20;
  4678  001A48  0E20               	movlw	32
  4679  001A4A  010F               	movlb	15	; () banked
  4680  001A4C  6F3A               	movwf	58,b	;volatile
  4681                           
  4682                           ;pin_manager.c: 76: ANSELB = 0x00;
  4683  001A4E  0E00               	movlw	0
  4684  001A50  6F39               	movwf	57,b	;volatile
  4685                           
  4686                           ;pin_manager.c: 77: ANSELD = 0x00;
  4687  001A52  0E00               	movlw	0
  4688  001A54  6F3B               	movwf	59,b	;volatile
  4689                           
  4690                           ;pin_manager.c: 78: ANSELE = 0x07;
  4691  001A56  0E07               	movlw	7
  4692  001A58  6F3C               	movwf	60,b	;volatile
  4693                           
  4694                           ;pin_manager.c: 79: ANSELA = 0x28;
  4695  001A5A  0E28               	movlw	40
  4696  001A5C  6F38               	movwf	56,b	;volatile
  4697                           
  4698                           ;pin_manager.c: 84: WPUB = 0x00;
  4699  001A5E  0E00               	movlw	0
  4700  001A60  6E61               	movwf	3937,c	;volatile
  4701                           
  4702                           ; BSR set to: 15
  4703                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  4704  001A62  9EF1               	bcf	intcon2,7,c	;volatile
  4705                           
  4706                           ; BSR set to: 15
  4707  001A64  0012               	return		;funcret
  4708  001A66                     __end_of_PIN_MANAGER_Initialize:
  4709                           	opt stack 0
  4710                           tblptru	equ	0xFF8
  4711                           tblptrh	equ	0xFF7
  4712                           tblptrl	equ	0xFF6
  4713                           tablat	equ	0xFF5
  4714                           prodh	equ	0xFF4
  4715                           prodl	equ	0xFF3
  4716                           intcon	equ	0xFF2
  4717                           intcon2	equ	0xFF1
  4718                           indf0	equ	0xFEF
  4719                           postinc0	equ	0xFEE
  4720                           fsr0h	equ	0xFEA
  4721                           fsr0l	equ	0xFE9
  4722                           wreg	equ	0xFE8
  4723                           indf1	equ	0xFE7
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           postinc2	equ	0xFDE
  4728                           postdec2	equ	0xFDD
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _OSCILLATOR_Initialize *****************
  4734 ;; Defined at:
  4735 ;;		line 126 in file "mcc_generated_files/mcc.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, status,2
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4749 ;;      Params:         0       0       0       0       0       0       0
  4750 ;;      Locals:         0       0       0       0       0       0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0
  4752 ;;      Totals:         0       0       0       0       0       0       0
  4753 ;;Total ram usage:        0 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    9
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_SYSTEM_Initialize
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text22
  4764  002028                     __ptext22:
  4765                           	opt stack 0
  4766  002028                     _OSCILLATOR_Initialize:
  4767                           	opt stack 20
  4768                           
  4769                           ;mcc.c: 129: OSCCON = 0x50;
  4770                           
  4771                           ; BSR set to: 15
  4772                           ;incstack = 0
  4773  002028  0E50               	movlw	80
  4774  00202A  6ED3               	movwf	4051,c	;volatile
  4775                           
  4776                           ;mcc.c: 131: OSCCON2 = 0x04;
  4777  00202C  0E04               	movlw	4
  4778  00202E  6ED2               	movwf	4050,c	;volatile
  4779                           
  4780                           ;mcc.c: 133: OSCTUNE = 0x00;
  4781  002030  0E00               	movlw	0
  4782  002032  6E9B               	movwf	3995,c	;volatile
  4783  002034  0012               	return		;funcret
  4784  002036                     __end_of_OSCILLATOR_Initialize:
  4785                           	opt stack 0
  4786                           tblptru	equ	0xFF8
  4787                           tblptrh	equ	0xFF7
  4788                           tblptrl	equ	0xFF6
  4789                           tablat	equ	0xFF5
  4790                           prodh	equ	0xFF4
  4791                           prodl	equ	0xFF3
  4792                           intcon	equ	0xFF2
  4793                           intcon2	equ	0xFF1
  4794                           indf0	equ	0xFEF
  4795                           postinc0	equ	0xFEE
  4796                           fsr0h	equ	0xFEA
  4797                           fsr0l	equ	0xFE9
  4798                           wreg	equ	0xFE8
  4799                           indf1	equ	0xFE7
  4800                           fsr1h	equ	0xFE2
  4801                           fsr1l	equ	0xFE1
  4802                           indf2	equ	0xFDF
  4803                           postinc2	equ	0xFDE
  4804                           postdec2	equ	0xFDD
  4805                           fsr2h	equ	0xFDA
  4806                           fsr2l	equ	0xFD9
  4807                           status	equ	0xFD8
  4808                           
  4809 ;; *************** function _INTERRUPT_Initialize *****************
  4810 ;; Defined at:
  4811 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;		None
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;		None
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  1    wreg      void 
  4818 ;; Registers used:
  4819 ;;		None
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4825 ;;      Params:         0       0       0       0       0       0       0
  4826 ;;      Locals:         0       0       0       0       0       0       0
  4827 ;;      Temps:          0       0       0       0       0       0       0
  4828 ;;      Totals:         0       0       0       0       0       0       0
  4829 ;;Total ram usage:        0 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    9
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_SYSTEM_Initialize
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text23
  4840  001FE6                     __ptext23:
  4841                           	opt stack 0
  4842  001FE6                     _INTERRUPT_Initialize:
  4843                           	opt stack 20
  4844                           
  4845                           ;interrupt_manager.c: 54: RCONbits.IPEN = 1;
  4846                           
  4847                           ;incstack = 0
  4848  001FE6  8ED0               	bsf	4048,7,c	;volatile
  4849                           
  4850                           ;interrupt_manager.c: 61: INTCON3bits.INT1IP = 1;
  4851  001FE8  8CF0               	bsf	intcon3,6,c	;volatile
  4852                           
  4853                           ;interrupt_manager.c: 64: INTCON3bits.INT2IP = 1;
  4854  001FEA  8EF0               	bsf	intcon3,7,c	;volatile
  4855                           
  4856                           ;interrupt_manager.c: 67: INTCON2bits.TMR0IP = 1;
  4857  001FEC  84F1               	bsf	intcon2,2,c	;volatile
  4858                           
  4859                           ;interrupt_manager.c: 70: IPR1bits.SSP1IP = 1;
  4860  001FEE  869F               	bsf	3999,3,c	;volatile
  4861                           
  4862                           ;interrupt_manager.c: 73: IPR2bits.BCL1IP = 1;
  4863  001FF0  86A2               	bsf	4002,3,c	;volatile
  4864                           
  4865                           ;interrupt_manager.c: 77: IPR1bits.ADIP = 0;
  4866  001FF2  9C9F               	bcf	3999,6,c	;volatile
  4867                           
  4868                           ;interrupt_manager.c: 80: IPR1bits.RC1IP = 0;
  4869  001FF4  9A9F               	bcf	3999,5,c	;volatile
  4870  001FF6  0012               	return		;funcret
  4871  001FF8                     __end_of_INTERRUPT_Initialize:
  4872                           	opt stack 0
  4873                           tblptru	equ	0xFF8
  4874                           tblptrh	equ	0xFF7
  4875                           tblptrl	equ	0xFF6
  4876                           tablat	equ	0xFF5
  4877                           prodh	equ	0xFF4
  4878                           prodl	equ	0xFF3
  4879                           intcon	equ	0xFF2
  4880                           intcon2	equ	0xFF1
  4881                           intcon3	equ	0xFF0
  4882                           indf0	equ	0xFEF
  4883                           postinc0	equ	0xFEE
  4884                           fsr0h	equ	0xFEA
  4885                           fsr0l	equ	0xFE9
  4886                           wreg	equ	0xFE8
  4887                           indf1	equ	0xFE7
  4888                           fsr1h	equ	0xFE2
  4889                           fsr1l	equ	0xFE1
  4890                           indf2	equ	0xFDF
  4891                           postinc2	equ	0xFDE
  4892                           postdec2	equ	0xFDD
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function _I2C1_Initialize *****************
  4898 ;; Defined at:
  4899 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;		None
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;		None
  4904 ;; Return value:  Size  Location     Type
  4905 ;;                  1    wreg      void 
  4906 ;; Registers used:
  4907 ;;		wreg, status,2, status,0
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4913 ;;      Params:         0       0       0       0       0       0       0
  4914 ;;      Locals:         0       0       0       0       0       0       0
  4915 ;;      Temps:          0       0       0       0       0       0       0
  4916 ;;      Totals:         0       0       0       0       0       0       0
  4917 ;;Total ram usage:        0 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    9
  4920 ;; This function calls:
  4921 ;;		Nothing
  4922 ;; This function is called by:
  4923 ;;		_SYSTEM_Initialize
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text24
  4928  001CDE                     __ptext24:
  4929                           	opt stack 0
  4930  001CDE                     _I2C1_Initialize:
  4931                           	opt stack 20
  4932                           
  4933                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  4934                           
  4935                           ;incstack = 0
  4936  001CDE  0EA4               	movlw	low _i2c1_tr_queue
  4937  001CE0  0100               	movlb	0	; () banked
  4938  001CE2  6F62               	movwf	(_i2c1_object+2)& (0+255),b
  4939  001CE4  0E00               	movlw	high _i2c1_tr_queue
  4940  001CE6  6F63               	movwf	(_i2c1_object+3)& (0+255),b
  4941                           
  4942                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  4943  001CE8  0EA4               	movlw	low _i2c1_tr_queue
  4944  001CEA  6F60               	movwf	_i2c1_object& (0+255),b
  4945  001CEC  0E00               	movlw	high _i2c1_tr_queue
  4946  001CEE  6F61               	movwf	(_i2c1_object+1)& (0+255),b
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  4950  001CF0  8364               	bsf	(_i2c1_object+4)& (0+255),1,b
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  4954  001CF2  9164               	bcf	(_i2c1_object+4)& (0+255),0,b
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  4958  001CF4  0E00               	movlw	0
  4959  001CF6  6F66               	movwf	(_i2c1_object+6)& (0+255),b
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;i2c1.c: 208: SSP1STAT = 0x00;
  4963  001CF8  0E00               	movlw	0
  4964  001CFA  6EC7               	movwf	4039,c	;volatile
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  4968  001CFC  0E28               	movlw	40
  4969  001CFE  6EC6               	movwf	4038,c	;volatile
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  4973  001D00  0E00               	movlw	0
  4974  001D02  6ECB               	movwf	4043,c	;volatile
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;i2c1.c: 214: SSP1ADD = 0x03;
  4978  001D04  0E03               	movlw	3
  4979  001D06  6EC8               	movwf	4040,c	;volatile
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;i2c1.c: 218: PIR1bits.SSP1IF = 0;
  4983  001D08  969E               	bcf	3998,3,c	;volatile
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;i2c1.c: 220: PIE1bits.SSP1IE = 1;
  4987  001D0A  869D               	bsf	3997,3,c	;volatile
  4988                           
  4989                           ; BSR set to: 0
  4990  001D0C  0012               	return		;funcret
  4991  001D0E                     __end_of_I2C1_Initialize:
  4992                           	opt stack 0
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           intcon	equ	0xFF2
  5000                           intcon2	equ	0xFF1
  5001                           intcon3	equ	0xFF0
  5002                           indf0	equ	0xFEF
  5003                           postinc0	equ	0xFEE
  5004                           fsr0h	equ	0xFEA
  5005                           fsr0l	equ	0xFE9
  5006                           wreg	equ	0xFE8
  5007                           indf1	equ	0xFE7
  5008                           fsr1h	equ	0xFE2
  5009                           fsr1l	equ	0xFE1
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function _EXT_INT_Initialize *****************
  5018 ;; Defined at:
  5019 ;;		line 213 in file "mcc_generated_files/ext_int.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2, status,0, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5033 ;;      Params:         0       0       0       0       0       0       0
  5034 ;;      Locals:         0       0       0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0
  5036 ;;      Totals:         0       0       0       0       0       0       0
  5037 ;;Total ram usage:        0 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:   10
  5040 ;; This function calls:
  5041 ;;		_INT0_SetInterruptHandler
  5042 ;;		_INT1_SetInterruptHandler
  5043 ;;		_INT2_SetInterruptHandler
  5044 ;; This function is called by:
  5045 ;;		_SYSTEM_Initialize
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text25
  5050  001BF4                     __ptext25:
  5051                           	opt stack 0
  5052  001BF4                     _EXT_INT_Initialize:
  5053                           	opt stack 19
  5054                           
  5055                           ;ext_int.c: 221: (INTCON3bits.INT1IF = 0);
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;incstack = 0
  5059  001BF4  90F0               	bcf	intcon3,0,c	;volatile
  5060                           
  5061                           ;ext_int.c: 222: (INTCON2bits.INTEDG1 = 1);
  5062  001BF6  8AF1               	bsf	intcon2,5,c	;volatile
  5063                           
  5064                           ;ext_int.c: 224: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  5065  001BF8  0E92               	movlw	low _INT1_DefaultInterruptHandler
  5066  001BFA  0101               	movlb	1	; () banked
  5067  001BFC  6F2A               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5068  001BFE  0E20               	movlw	high _INT1_DefaultInterruptHandler
  5069  001C00  6F2B               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5070  001C02  EC2B  F010         	call	_INT1_SetInterruptHandler	;wreg free
  5071                           
  5072                           ;ext_int.c: 225: (INTCON3bits.INT1IE = 1);
  5073  001C06  86F0               	bsf	intcon3,3,c	;volatile
  5074                           
  5075                           ;ext_int.c: 234: (INTCON3bits.INT2IF = 0);
  5076  001C08  92F0               	bcf	intcon3,1,c	;volatile
  5077                           
  5078                           ;ext_int.c: 235: (INTCON2bits.INTEDG2 = 1);
  5079  001C0A  88F1               	bsf	intcon2,4,c	;volatile
  5080                           
  5081                           ;ext_int.c: 237: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5082  001C0C  0E90               	movlw	low _INT2_DefaultInterruptHandler
  5083  001C0E  0101               	movlb	1	; () banked
  5084  001C10  6F2A               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5085  001C12  0E20               	movlw	high _INT2_DefaultInterruptHandler
  5086  001C14  6F2B               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5087  001C16  EC26  F010         	call	_INT2_SetInterruptHandler	;wreg free
  5088                           
  5089                           ;ext_int.c: 238: (INTCON3bits.INT2IE = 1);
  5090  001C1A  88F0               	bsf	intcon3,4,c	;volatile
  5091                           
  5092                           ;ext_int.c: 247: (INTCONbits.INT0IF = 0);
  5093  001C1C  92F2               	bcf	intcon,1,c	;volatile
  5094                           
  5095                           ;ext_int.c: 248: (INTCON2bits.INTEDG0 = 1);
  5096  001C1E  8CF1               	bsf	intcon2,6,c	;volatile
  5097                           
  5098                           ;ext_int.c: 250: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  5099  001C20  0E94               	movlw	low _INT0_DefaultInterruptHandler
  5100  001C22  0101               	movlb	1	; () banked
  5101  001C24  6F2A               	movwf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  5102  001C26  0E20               	movlw	high _INT0_DefaultInterruptHandler
  5103  001C28  6F2B               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5104  001C2A  EC30  F010         	call	_INT0_SetInterruptHandler	;wreg free
  5105                           
  5106                           ;ext_int.c: 251: (INTCONbits.INT0IE = 1);
  5107  001C2E  88F2               	bsf	intcon,4,c	;volatile
  5108  001C30  0012               	return		;funcret
  5109  001C32                     __end_of_EXT_INT_Initialize:
  5110                           	opt stack 0
  5111                           tblptru	equ	0xFF8
  5112                           tblptrh	equ	0xFF7
  5113                           tblptrl	equ	0xFF6
  5114                           tablat	equ	0xFF5
  5115                           prodh	equ	0xFF4
  5116                           prodl	equ	0xFF3
  5117                           intcon	equ	0xFF2
  5118                           intcon2	equ	0xFF1
  5119                           intcon3	equ	0xFF0
  5120                           indf0	equ	0xFEF
  5121                           postinc0	equ	0xFEE
  5122                           fsr0h	equ	0xFEA
  5123                           fsr0l	equ	0xFE9
  5124                           wreg	equ	0xFE8
  5125                           indf1	equ	0xFE7
  5126                           fsr1h	equ	0xFE2
  5127                           fsr1l	equ	0xFE1
  5128                           indf2	equ	0xFDF
  5129                           postinc2	equ	0xFDE
  5130                           postdec2	equ	0xFDD
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function _INT2_SetInterruptHandler *****************
  5136 ;; Defined at:
  5137 ;;		line 137 in file "mcc_generated_files/ext_int.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5140 ;;		 -> INT2_DefaultInterruptHandler(1), 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;		None
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  1    wreg      void 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5152 ;;      Params:         0       0       2       0       0       0       0
  5153 ;;      Locals:         0       0       0       0       0       0       0
  5154 ;;      Temps:          0       0       0       0       0       0       0
  5155 ;;      Totals:         0       0       2       0       0       0       0
  5156 ;;Total ram usage:        2 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    9
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_EXT_INT_Initialize
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text26
  5167  00204C                     __ptext26:
  5168                           	opt stack 0
  5169  00204C                     _INT2_SetInterruptHandler:
  5170                           	opt stack 19
  5171                           
  5172                           ;ext_int.c: 138: INT2_InterruptHandler = InterruptHandler;
  5173                           
  5174                           ;incstack = 0
  5175  00204C  C12A  F0D8         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5176  002050  C12B  F0D9         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5177  002054  0012               	return		;funcret
  5178  002056                     __end_of_INT2_SetInterruptHandler:
  5179                           	opt stack 0
  5180                           tblptru	equ	0xFF8
  5181                           tblptrh	equ	0xFF7
  5182                           tblptrl	equ	0xFF6
  5183                           tablat	equ	0xFF5
  5184                           prodh	equ	0xFF4
  5185                           prodl	equ	0xFF3
  5186                           intcon	equ	0xFF2
  5187                           intcon2	equ	0xFF1
  5188                           intcon3	equ	0xFF0
  5189                           indf0	equ	0xFEF
  5190                           postinc0	equ	0xFEE
  5191                           fsr0h	equ	0xFEA
  5192                           fsr0l	equ	0xFE9
  5193                           wreg	equ	0xFE8
  5194                           indf1	equ	0xFE7
  5195                           fsr1h	equ	0xFE2
  5196                           fsr1l	equ	0xFE1
  5197                           indf2	equ	0xFDF
  5198                           postinc2	equ	0xFDE
  5199                           postdec2	equ	0xFDD
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function _INT1_SetInterruptHandler *****************
  5205 ;; Defined at:
  5206 ;;		line 84 in file "mcc_generated_files/ext_int.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5209 ;;		 -> INT1_DefaultInterruptHandler(1), 
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;		None
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, status,0
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5221 ;;      Params:         0       0       2       0       0       0       0
  5222 ;;      Locals:         0       0       0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0
  5224 ;;      Totals:         0       0       2       0       0       0       0
  5225 ;;Total ram usage:        2 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    9
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		_EXT_INT_Initialize
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text27
  5236  002056                     __ptext27:
  5237                           	opt stack 0
  5238  002056                     _INT1_SetInterruptHandler:
  5239                           	opt stack 19
  5240                           
  5241                           ;ext_int.c: 85: INT1_InterruptHandler = InterruptHandler;
  5242                           
  5243                           ;incstack = 0
  5244  002056  C12A  F0DA         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5245  00205A  C12B  F0DB         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5246  00205E  0012               	return		;funcret
  5247  002060                     __end_of_INT1_SetInterruptHandler:
  5248                           	opt stack 0
  5249                           tblptru	equ	0xFF8
  5250                           tblptrh	equ	0xFF7
  5251                           tblptrl	equ	0xFF6
  5252                           tablat	equ	0xFF5
  5253                           prodh	equ	0xFF4
  5254                           prodl	equ	0xFF3
  5255                           intcon	equ	0xFF2
  5256                           intcon2	equ	0xFF1
  5257                           intcon3	equ	0xFF0
  5258                           indf0	equ	0xFEF
  5259                           postinc0	equ	0xFEE
  5260                           fsr0h	equ	0xFEA
  5261                           fsr0l	equ	0xFE9
  5262                           wreg	equ	0xFE8
  5263                           indf1	equ	0xFE7
  5264                           fsr1h	equ	0xFE2
  5265                           fsr1l	equ	0xFE1
  5266                           indf2	equ	0xFDF
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function _INT0_SetInterruptHandler *****************
  5274 ;; Defined at:
  5275 ;;		line 190 in file "mcc_generated_files/ext_int.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5278 ;;		 -> INT0_DefaultInterruptHandler(1), 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;		None
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5290 ;;      Params:         0       0       2       0       0       0       0
  5291 ;;      Locals:         0       0       0       0       0       0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0
  5293 ;;      Totals:         0       0       2       0       0       0       0
  5294 ;;Total ram usage:        2 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    9
  5297 ;; This function calls:
  5298 ;;		Nothing
  5299 ;; This function is called by:
  5300 ;;		_EXT_INT_Initialize
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text28
  5305  002060                     __ptext28:
  5306                           	opt stack 0
  5307  002060                     _INT0_SetInterruptHandler:
  5308                           	opt stack 19
  5309                           
  5310                           ;ext_int.c: 191: INT0_InterruptHandler = InterruptHandler;
  5311                           
  5312                           ;incstack = 0
  5313  002060  C12A  F0D6         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  5314  002064  C12B  F0D7         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  5315  002068  0012               	return		;funcret
  5316  00206A                     __end_of_INT0_SetInterruptHandler:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           intcon2	equ	0xFF1
  5326                           intcon3	equ	0xFF0
  5327                           indf0	equ	0xFEF
  5328                           postinc0	equ	0xFEE
  5329                           fsr0h	equ	0xFEA
  5330                           fsr0l	equ	0xFE9
  5331                           wreg	equ	0xFE8
  5332                           indf1	equ	0xFE7
  5333                           fsr1h	equ	0xFE2
  5334                           fsr1l	equ	0xFE1
  5335                           indf2	equ	0xFDF
  5336                           postinc2	equ	0xFDE
  5337                           postdec2	equ	0xFDD
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function _EUSART1_Initialize *****************
  5343 ;; Defined at:
  5344 ;;		line 64 in file "mcc_generated_files/eusart1.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;		None
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;		None
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      void 
  5351 ;; Registers used:
  5352 ;;		wreg, status,2
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5358 ;;      Params:         0       0       0       0       0       0       0
  5359 ;;      Locals:         0       0       0       0       0       0       0
  5360 ;;      Temps:          0       0       0       0       0       0       0
  5361 ;;      Totals:         0       0       0       0       0       0       0
  5362 ;;Total ram usage:        0 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    9
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_SYSTEM_Initialize
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text29
  5373  001F74                     __ptext29:
  5374                           	opt stack 0
  5375  001F74                     _EUSART1_Initialize:
  5376                           	opt stack 20
  5377                           
  5378                           ;eusart1.c: 66: PIE1bits.RC1IE = 0;
  5379                           
  5380                           ;incstack = 0
  5381  001F74  9A9D               	bcf	3997,5,c	;volatile
  5382                           
  5383                           ;eusart1.c: 71: BAUDCON1 = 0x08;
  5384  001F76  0E08               	movlw	8
  5385  001F78  6EB8               	movwf	4024,c	;volatile
  5386                           
  5387                           ;eusart1.c: 74: RCSTA1 = 0x90;
  5388  001F7A  0E90               	movlw	144
  5389  001F7C  6EAB               	movwf	4011,c	;volatile
  5390                           
  5391                           ;eusart1.c: 77: TXSTA1 = 0x24;
  5392  001F7E  0E24               	movlw	36
  5393  001F80  6EAC               	movwf	4012,c	;volatile
  5394                           
  5395                           ;eusart1.c: 80: SPBRG1 = 0x9B;
  5396  001F82  0E9B               	movlw	155
  5397  001F84  6EAF               	movwf	4015,c	;volatile
  5398                           
  5399                           ;eusart1.c: 83: SPBRGH1 = 0x00;
  5400  001F86  0E00               	movlw	0
  5401  001F88  6EB0               	movwf	4016,c	;volatile
  5402                           
  5403                           ;eusart1.c: 86: PIE1bits.RC1IE = 1;
  5404  001F8A  8A9D               	bsf	3997,5,c	;volatile
  5405  001F8C  0012               	return		;funcret
  5406  001F8E                     __end_of_EUSART1_Initialize:
  5407                           	opt stack 0
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           intcon	equ	0xFF2
  5415                           intcon2	equ	0xFF1
  5416                           intcon3	equ	0xFF0
  5417                           indf0	equ	0xFEF
  5418                           postinc0	equ	0xFEE
  5419                           fsr0h	equ	0xFEA
  5420                           fsr0l	equ	0xFE9
  5421                           wreg	equ	0xFE8
  5422                           indf1	equ	0xFE7
  5423                           fsr1h	equ	0xFE2
  5424                           fsr1l	equ	0xFE1
  5425                           indf2	equ	0xFDF
  5426                           postinc2	equ	0xFDE
  5427                           postdec2	equ	0xFDD
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function _EPWM1_Initialize *****************
  5433 ;; Defined at:
  5434 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;		None
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;		None
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, status,2
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5448 ;;      Params:         0       0       0       0       0       0       0
  5449 ;;      Locals:         0       0       0       0       0       0       0
  5450 ;;      Temps:          0       0       0       0       0       0       0
  5451 ;;      Totals:         0       0       0       0       0       0       0
  5452 ;;Total ram usage:        0 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    9
  5455 ;; This function calls:
  5456 ;;		Nothing
  5457 ;; This function is called by:
  5458 ;;		_SYSTEM_Initialize
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           	psect	text30
  5463  001F36                     __ptext30:
  5464                           	opt stack 0
  5465  001F36                     _EPWM1_Initialize:
  5466                           	opt stack 20
  5467                           
  5468                           ;epwm1.c: 68: CCP1CON = 0x2C;
  5469                           
  5470                           ;incstack = 0
  5471  001F36  0E2C               	movlw	44
  5472  001F38  6EBD               	movwf	4029,c	;volatile
  5473                           
  5474                           ;epwm1.c: 71: ECCP1AS = 0x00;
  5475  001F3A  0E00               	movlw	0
  5476  001F3C  6EB6               	movwf	4022,c	;volatile
  5477                           
  5478                           ;epwm1.c: 74: PWM1CON = 0x80;
  5479  001F3E  0E80               	movlw	128
  5480  001F40  6EB7               	movwf	4023,c	;volatile
  5481                           
  5482                           ;epwm1.c: 77: PSTR1CON = 0x01;
  5483  001F42  0E01               	movlw	1
  5484  001F44  6EB9               	movwf	4025,c	;volatile
  5485                           
  5486                           ;epwm1.c: 80: CCPR1L = 0x12;
  5487  001F46  0E12               	movlw	18
  5488  001F48  6EBE               	movwf	4030,c	;volatile
  5489                           
  5490                           ;epwm1.c: 83: CCPR1H = 0x00;
  5491  001F4A  0E00               	movlw	0
  5492  001F4C  6EBF               	movwf	4031,c	;volatile
  5493                           
  5494                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x0;
  5495  001F4E  0EFC               	movlw	-4
  5496  001F50  010F               	movlb	15	; () banked
  5497  001F52  1749               	andwf	73,f,b	;volatile
  5498                           
  5499                           ; BSR set to: 15
  5500  001F54  0012               	return		;funcret
  5501  001F56                     __end_of_EPWM1_Initialize:
  5502                           	opt stack 0
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           prodh	equ	0xFF4
  5508                           prodl	equ	0xFF3
  5509                           intcon	equ	0xFF2
  5510                           intcon2	equ	0xFF1
  5511                           intcon3	equ	0xFF0
  5512                           indf0	equ	0xFEF
  5513                           postinc0	equ	0xFEE
  5514                           fsr0h	equ	0xFEA
  5515                           fsr0l	equ	0xFE9
  5516                           wreg	equ	0xFE8
  5517                           indf1	equ	0xFE7
  5518                           fsr1h	equ	0xFE2
  5519                           fsr1l	equ	0xFE1
  5520                           indf2	equ	0xFDF
  5521                           postinc2	equ	0xFDE
  5522                           postdec2	equ	0xFDD
  5523                           fsr2h	equ	0xFDA
  5524                           fsr2l	equ	0xFD9
  5525                           status	equ	0xFD8
  5526                           
  5527 ;; *************** function _ADC_Initialize *****************
  5528 ;; Defined at:
  5529 ;;		line 59 in file "mcc_generated_files/adc.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;		None
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5543 ;;      Params:         0       0       0       0       0       0       0
  5544 ;;      Locals:         0       0       0       0       0       0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0
  5546 ;;      Totals:         0       0       0       0       0       0       0
  5547 ;;Total ram usage:        0 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    9
  5550 ;; This function calls:
  5551 ;;		Nothing
  5552 ;; This function is called by:
  5553 ;;		_SYSTEM_Initialize
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text31
  5558  001F8E                     __ptext31:
  5559                           	opt stack 0
  5560  001F8E                     _ADC_Initialize:
  5561                           	opt stack 20
  5562                           
  5563                           ;adc.c: 63: ADCON0 = 0x0D;
  5564                           
  5565                           ; BSR set to: 15
  5566                           ;incstack = 0
  5567  001F8E  0E0D               	movlw	13
  5568  001F90  6EC2               	movwf	4034,c	;volatile
  5569                           
  5570                           ;adc.c: 66: ADCON1 = 0x00;
  5571  001F92  0E00               	movlw	0
  5572  001F94  6EC1               	movwf	4033,c	;volatile
  5573                           
  5574                           ;adc.c: 69: ADCON2 = 0x89;
  5575  001F96  0E89               	movlw	137
  5576  001F98  6EC0               	movwf	4032,c	;volatile
  5577                           
  5578                           ;adc.c: 72: ADRESL = 0x00;
  5579  001F9A  0E00               	movlw	0
  5580  001F9C  6EC3               	movwf	4035,c	;volatile
  5581                           
  5582                           ;adc.c: 75: ADRESH = 0x00;
  5583  001F9E  0E00               	movlw	0
  5584  001FA0  6EC4               	movwf	4036,c	;volatile
  5585                           
  5586                           ;adc.c: 78: PIE1bits.ADIE = 1;
  5587  001FA2  8C9D               	bsf	3997,6,c	;volatile
  5588  001FA4  0012               	return		;funcret
  5589  001FA6                     __end_of_ADC_Initialize:
  5590                           	opt stack 0
  5591                           tblptru	equ	0xFF8
  5592                           tblptrh	equ	0xFF7
  5593                           tblptrl	equ	0xFF6
  5594                           tablat	equ	0xFF5
  5595                           prodh	equ	0xFF4
  5596                           prodl	equ	0xFF3
  5597                           intcon	equ	0xFF2
  5598                           intcon2	equ	0xFF1
  5599                           intcon3	equ	0xFF0
  5600                           indf0	equ	0xFEF
  5601                           postinc0	equ	0xFEE
  5602                           fsr0h	equ	0xFEA
  5603                           fsr0l	equ	0xFE9
  5604                           wreg	equ	0xFE8
  5605                           indf1	equ	0xFE7
  5606                           fsr1h	equ	0xFE2
  5607                           fsr1l	equ	0xFE1
  5608                           indf2	equ	0xFDF
  5609                           postinc2	equ	0xFDE
  5610                           postdec2	equ	0xFDD
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function _OpenXLCD *****************
  5616 ;; Defined at:
  5617 ;;		line 56 in file "xlcd.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  lcdtype         1    wreg     unsigned char 
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;  lcdtype         1    0[COMRAM] unsigned char 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5631 ;;      Params:         0       0       0       0       0       0       0
  5632 ;;      Locals:         0       0       0       0       0       0       0
  5633 ;;      Temps:          0       0       0       0       0       0       0
  5634 ;;      Totals:         0       0       0       0       0       0       0
  5635 ;;Total ram usage:        0 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:   11
  5638 ;; This function calls:
  5639 ;;		_BusyXLCD
  5640 ;;		_DelayFor18TCY
  5641 ;;		_DelayPORXLCD
  5642 ;;		_DelayXLCD
  5643 ;;		_WriteCmdXLCD
  5644 ;; This function is called by:
  5645 ;;		_main
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           	psect	text32
  5650  0015F2                     __ptext32:
  5651                           	opt stack 0
  5652  0015F2                     _OpenXLCD:
  5653                           	opt stack 19
  5654                           
  5655                           ;xlcd.c: 60: DelayPORXLCD();
  5656                           
  5657                           ;incstack = 0
  5658  0015F2  EC57  F00F         	call	_DelayPORXLCD	;wreg free
  5659                           
  5660                           ;xlcd.c: 72: PORTD &= 0xf0;
  5661  0015F6  0EF0               	movlw	240
  5662  0015F8  1683               	andwf	3971,f,c	;volatile
  5663                           
  5664                           ;xlcd.c: 73: TRISD |= 0x0f;
  5665  0015FA  0E0F               	movlw	15
  5666  0015FC  1295               	iorwf	3989,f,c	;volatile
  5667                           
  5668                           ;xlcd.c: 76: TRISDbits.TRISD5 = 0;
  5669  0015FE  9A95               	bcf	3989,5,c	;volatile
  5670                           
  5671                           ;xlcd.c: 77: TRISDbits.TRISD4 = 0;
  5672  001600  9895               	bcf	3989,4,c	;volatile
  5673                           
  5674                           ;xlcd.c: 78: TRISDbits.TRISD6 = 0;
  5675  001602  9C95               	bcf	3989,6,c	;volatile
  5676                           
  5677                           ;xlcd.c: 79: LATDbits.LATD5 = 0;
  5678  001604  9A8C               	bcf	3980,5,c	;volatile
  5679                           
  5680                           ;xlcd.c: 80: LATDbits.LATD4 = 0;
  5681  001606  988C               	bcf	3980,4,c	;volatile
  5682                           
  5683                           ;xlcd.c: 81: LATDbits.LATD6 = 0;
  5684  001608  9C8C               	bcf	3980,6,c	;volatile
  5685                           
  5686                           ;xlcd.c: 84: DelayPORXLCD();
  5687  00160A  EC57  F00F         	call	_DelayPORXLCD	;wreg free
  5688                           
  5689                           ;xlcd.c: 97: TRISD &= 0xf0;
  5690  00160E  0EF0               	movlw	240
  5691  001610  1695               	andwf	3989,f,c	;volatile
  5692                           
  5693                           ;xlcd.c: 98: PORTD &= 0xf0;
  5694  001612  0EF0               	movlw	240
  5695  001614  1683               	andwf	3971,f,c	;volatile
  5696                           
  5697                           ;xlcd.c: 99: PORTD |= 0b00000011;
  5698  001616  0E03               	movlw	3
  5699  001618  1283               	iorwf	3971,f,c	;volatile
  5700                           
  5701                           ;xlcd.c: 102: LATDbits.LATD6 = 1;
  5702  00161A  8C8C               	bsf	3980,6,c	;volatile
  5703                           
  5704                           ;xlcd.c: 103: DelayFor18TCY();
  5705  00161C  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  5706                           
  5707                           ;xlcd.c: 104: LATDbits.LATD6 = 0;
  5708  001620  9C8C               	bcf	3980,6,c	;volatile
  5709                           
  5710                           ;xlcd.c: 107: DelayXLCD();
  5711  001622  ECFC  F00F         	call	_DelayXLCD	;wreg free
  5712                           
  5713                           ;xlcd.c: 118: TRISD &= 0xf0;
  5714  001626  0EF0               	movlw	240
  5715  001628  1695               	andwf	3989,f,c	;volatile
  5716                           
  5717                           ;xlcd.c: 119: PORTD &= 0xf0;
  5718  00162A  0EF0               	movlw	240
  5719  00162C  1683               	andwf	3971,f,c	;volatile
  5720                           
  5721                           ;xlcd.c: 120: PORTD |= 0b00000011;
  5722  00162E  0E03               	movlw	3
  5723  001630  1283               	iorwf	3971,f,c	;volatile
  5724                           
  5725                           ;xlcd.c: 123: LATDbits.LATD6 = 1;
  5726  001632  8C8C               	bsf	3980,6,c	;volatile
  5727                           
  5728                           ;xlcd.c: 124: DelayFor18TCY();
  5729  001634  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  5730                           
  5731                           ;xlcd.c: 125: LATDbits.LATD6 = 0;
  5732  001638  9C8C               	bcf	3980,6,c	;volatile
  5733                           
  5734                           ;xlcd.c: 128: DelayXLCD();
  5735  00163A  ECFC  F00F         	call	_DelayXLCD	;wreg free
  5736                           
  5737                           ;xlcd.c: 138: PORTD &= 0xf0;
  5738  00163E  0EF0               	movlw	240
  5739  001640  1683               	andwf	3971,f,c	;volatile
  5740                           
  5741                           ;xlcd.c: 139: PORTD |= 0b00000011;
  5742  001642  0E03               	movlw	3
  5743  001644  1283               	iorwf	3971,f,c	;volatile
  5744                           
  5745                           ;xlcd.c: 142: LATDbits.LATD6 = 1;
  5746  001646  8C8C               	bsf	3980,6,c	;volatile
  5747                           
  5748                           ;xlcd.c: 143: DelayFor18TCY();
  5749  001648  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  5750                           
  5751                           ;xlcd.c: 144: LATDbits.LATD6 = 0;
  5752  00164C  9C8C               	bcf	3980,6,c	;volatile
  5753                           
  5754                           ;xlcd.c: 147: DelayXLCD();
  5755  00164E  ECFC  F00F         	call	_DelayXLCD	;wreg free
  5756                           
  5757                           ;xlcd.c: 159: PORTD &= 0xf0;
  5758  001652  0EF0               	movlw	240
  5759  001654  1683               	andwf	3971,f,c	;volatile
  5760                           
  5761                           ;xlcd.c: 160: PORTD |= 0b00000010;
  5762  001656  8283               	bsf	3971,1,c	;volatile
  5763                           
  5764                           ;xlcd.c: 163: LATDbits.LATD6 = 1;
  5765  001658  8C8C               	bsf	3980,6,c	;volatile
  5766                           
  5767                           ;xlcd.c: 164: DelayFor18TCY();
  5768  00165A  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  5769                           
  5770                           ;xlcd.c: 165: LATDbits.LATD6 = 0;
  5771  00165E  9C8C               	bcf	3980,6,c	;volatile
  5772                           
  5773                           ;xlcd.c: 174: TRISD |= 0x0f;
  5774  001660  0E0F               	movlw	15
  5775  001662  1295               	iorwf	3989,f,c	;volatile
  5776  001664  EC36  F00E         	call	_BusyXLCD	;wreg free
  5777  001668  0900               	iorlw	0
  5778  00166A  A4D8               	btfss	status,2,c
  5779  00166C  D7FB               	goto	l644
  5780                           
  5781                           ;xlcd.c: 182: WriteCmdXLCD(0x28);
  5782  00166E  0E28               	movlw	40
  5783  001670  EC77  F00D         	call	_WriteCmdXLCD
  5784  001674  EC36  F00E         	call	_BusyXLCD	;wreg free
  5785  001678  0900               	iorlw	0
  5786  00167A  A4D8               	btfss	status,2,c
  5787  00167C  D7FB               	goto	l647
  5788                           
  5789                           ;xlcd.c: 188: WriteCmdXLCD(0x0D);
  5790  00167E  0E0D               	movlw	13
  5791  001680  EC77  F00D         	call	_WriteCmdXLCD
  5792  001684  EC36  F00E         	call	_BusyXLCD	;wreg free
  5793  001688  0900               	iorlw	0
  5794  00168A  A4D8               	btfss	status,2,c
  5795  00168C  D7FB               	goto	l650
  5796  00168E                     u7200:
  5797                           
  5798                           ;xlcd.c: 195: while (BusyXLCD());
  5799  00168E  EC36  F00E         	call	_BusyXLCD	;wreg free
  5800  001692  0900               	iorlw	0
  5801  001694  A4D8               	btfss	status,2,c
  5802  001696  D7FB               	goto	u7200
  5803                           
  5804                           ;xlcd.c: 196: WriteCmdXLCD(0x01);
  5805  001698  0E01               	movlw	1
  5806  00169A  EC77  F00D         	call	_WriteCmdXLCD
  5807  00169E  EC36  F00E         	call	_BusyXLCD	;wreg free
  5808  0016A2  0900               	iorlw	0
  5809  0016A4  A4D8               	btfss	status,2,c
  5810  0016A6  D7FB               	goto	l656
  5811                           
  5812                           ;xlcd.c: 201: WriteCmdXLCD(0x06);
  5813  0016A8  0E06               	movlw	6
  5814  0016AA  EC77  F00D         	call	_WriteCmdXLCD
  5815  0016AE  EC36  F00E         	call	_BusyXLCD	;wreg free
  5816  0016B2  0900               	iorlw	0
  5817  0016B4  A4D8               	btfss	status,2,c
  5818  0016B6  D7FB               	goto	l659
  5819                           
  5820                           ;xlcd.c: 207: WriteCmdXLCD(0x80);
  5821  0016B8  0E80               	movlw	128
  5822  0016BA  EC77  F00D         	call	_WriteCmdXLCD
  5823  0016BE  0012               	return	
  5824  0016C0                     __end_of_OpenXLCD:
  5825                           	opt stack 0
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           intcon	equ	0xFF2
  5833                           intcon2	equ	0xFF1
  5834                           intcon3	equ	0xFF0
  5835                           indf0	equ	0xFEF
  5836                           postinc0	equ	0xFEE
  5837                           fsr0h	equ	0xFEA
  5838                           fsr0l	equ	0xFE9
  5839                           wreg	equ	0xFE8
  5840                           indf1	equ	0xFE7
  5841                           fsr1h	equ	0xFE2
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           postdec2	equ	0xFDD
  5846                           fsr2h	equ	0xFDA
  5847                           fsr2l	equ	0xFD9
  5848                           status	equ	0xFD8
  5849                           
  5850 ;; *************** function _WriteCmdXLCD *****************
  5851 ;; Defined at:
  5852 ;;		line 538 in file "xlcd.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;  cmd             1    wreg     unsigned char 
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;  cmd             1    0[BANK1 ] unsigned char 
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  1    wreg      void 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5866 ;;      Params:         0       0       0       0       0       0       0
  5867 ;;      Locals:         0       0       1       0       0       0       0
  5868 ;;      Temps:          0       0       0       0       0       0       0
  5869 ;;      Totals:         0       0       1       0       0       0       0
  5870 ;;Total ram usage:        1 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:   10
  5873 ;; This function calls:
  5874 ;;		_DelayFor18TCY
  5875 ;; This function is called by:
  5876 ;;		_OpenXLCD
  5877 ;;		_main
  5878 ;;		_escreveLinhaLCD
  5879 ;;		_feedbackUSART
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text33
  5884  001AEE                     __ptext33:
  5885                           	opt stack 0
  5886  001AEE                     _WriteCmdXLCD:
  5887                           	opt stack 17
  5888                           
  5889                           ;incstack = 0
  5890                           ;WriteCmdXLCD@cmd stored from wreg
  5891  001AEE  0101               	movlb	1	; () banked
  5892  001AF0  6F2A               	movwf	WriteCmdXLCD@cmd& (0+255),b
  5893                           
  5894                           ;xlcd.c: 556: TRISD &= 0xf0;
  5895  001AF2  0EF0               	movlw	240
  5896  001AF4  1695               	andwf	3989,f,c	;volatile
  5897                           
  5898                           ;xlcd.c: 557: PORTD &= 0xf0;
  5899  001AF6  0EF0               	movlw	240
  5900  001AF8  1683               	andwf	3971,f,c	;volatile
  5901                           
  5902                           ;xlcd.c: 558: PORTD |= (cmd >> 4)&0x0f;
  5903  001AFA  0101               	movlb	1	; () banked
  5904  001AFC  392A               	swapf	WriteCmdXLCD@cmd& (0+255),w,b
  5905  001AFE  0B0F               	andlw	15
  5906  001B00  0B0F               	andlw	15
  5907  001B02  1283               	iorwf	3971,f,c	;volatile
  5908                           
  5909                           ; BSR set to: 1
  5910                           ;xlcd.c: 560: LATDbits.LATD5 = 0;
  5911  001B04  9A8C               	bcf	3980,5,c	;volatile
  5912                           
  5913                           ; BSR set to: 1
  5914                           ;xlcd.c: 561: LATDbits.LATD4 = 0;
  5915  001B06  988C               	bcf	3980,4,c	;volatile
  5916                           
  5917                           ; BSR set to: 1
  5918                           ;xlcd.c: 562: DelayFor18TCY();
  5919  001B08  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  5920                           
  5921                           ;xlcd.c: 563: LATDbits.LATD6 = 1;
  5922  001B0C  8C8C               	bsf	3980,6,c	;volatile
  5923                           
  5924                           ;xlcd.c: 564: DelayFor18TCY();
  5925  001B0E  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  5926                           
  5927                           ;xlcd.c: 565: LATDbits.LATD6 = 0;
  5928  001B12  9C8C               	bcf	3980,6,c	;volatile
  5929                           
  5930                           ;xlcd.c: 570: PORTD &= 0xf0;
  5931  001B14  0EF0               	movlw	240
  5932  001B16  1683               	andwf	3971,f,c	;volatile
  5933                           
  5934                           ;xlcd.c: 571: PORTD |= cmd & 0x0f;
  5935  001B18  0101               	movlb	1	; () banked
  5936  001B1A  512A               	movf	WriteCmdXLCD@cmd& (0+255),w,b
  5937  001B1C  0B0F               	andlw	15
  5938  001B1E  1283               	iorwf	3971,f,c	;volatile
  5939                           
  5940                           ; BSR set to: 1
  5941                           ;xlcd.c: 573: DelayFor18TCY();
  5942  001B20  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  5943                           
  5944                           ;xlcd.c: 574: LATDbits.LATD6 = 1;
  5945  001B24  8C8C               	bsf	3980,6,c	;volatile
  5946                           
  5947                           ;xlcd.c: 575: DelayFor18TCY();
  5948  001B26  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  5949                           
  5950                           ;xlcd.c: 576: LATDbits.LATD6 = 0;
  5951  001B2A  9C8C               	bcf	3980,6,c	;volatile
  5952                           
  5953                           ;xlcd.c: 580: TRISD |= 0x0f;
  5954  001B2C  0E0F               	movlw	15
  5955  001B2E  1295               	iorwf	3989,f,c	;volatile
  5956  001B30  0012               	return	
  5957  001B32                     __end_of_WriteCmdXLCD:
  5958                           	opt stack 0
  5959                           tblptru	equ	0xFF8
  5960                           tblptrh	equ	0xFF7
  5961                           tblptrl	equ	0xFF6
  5962                           tablat	equ	0xFF5
  5963                           prodh	equ	0xFF4
  5964                           prodl	equ	0xFF3
  5965                           intcon	equ	0xFF2
  5966                           intcon2	equ	0xFF1
  5967                           intcon3	equ	0xFF0
  5968                           indf0	equ	0xFEF
  5969                           postinc0	equ	0xFEE
  5970                           fsr0h	equ	0xFEA
  5971                           fsr0l	equ	0xFE9
  5972                           wreg	equ	0xFE8
  5973                           indf1	equ	0xFE7
  5974                           fsr1h	equ	0xFE2
  5975                           fsr1l	equ	0xFE1
  5976                           indf2	equ	0xFDF
  5977                           postinc2	equ	0xFDE
  5978                           postdec2	equ	0xFDD
  5979                           fsr2h	equ	0xFDA
  5980                           fsr2l	equ	0xFD9
  5981                           status	equ	0xFD8
  5982                           
  5983 ;; *************** function _DelayXLCD *****************
  5984 ;; Defined at:
  5985 ;;		line 33 in file "xlcd.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;		None
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;		None
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  1    wreg      void 
  5992 ;; Registers used:
  5993 ;;		wreg
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5999 ;;      Params:         0       0       0       0       0       0       0
  6000 ;;      Locals:         0       0       0       0       0       0       0
  6001 ;;      Temps:          0       0       1       0       0       0       0
  6002 ;;      Totals:         0       0       1       0       0       0       0
  6003 ;;Total ram usage:        1 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; Hardware stack levels required when called:    9
  6006 ;; This function calls:
  6007 ;;		Nothing
  6008 ;; This function is called by:
  6009 ;;		_OpenXLCD
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	text34
  6014  001FF8                     __ptext34:
  6015                           	opt stack 0
  6016  001FF8                     _DelayXLCD:
  6017                           	opt stack 20
  6018                           
  6019                           ;xlcd.c: 36: _delay((unsigned long)((15)*(6000000/4000.0)));
  6020                           
  6021                           ;incstack = 0
  6022  001FF8  0E1E               	movlw	30
  6023  001FFA  0101               	movlb	1	; () banked
  6024  001FFC  6F2A               	movwf	??_DelayXLCD& (0+255),b
  6025  001FFE  0E37               	movlw	55
  6026  002000                     u7447:
  6027  002000  2EE8               	decfsz	wreg,f,c
  6028  002002  D7FE               	bra	u7447
  6029  002004  2F2A               	decfsz	??_DelayXLCD& (0+255),f,b
  6030  002006  D7FC               	bra	u7447
  6031  002008  0012               	return	
  6032  00200A                     __end_of_DelayXLCD:
  6033                           	opt stack 0
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           prodh	equ	0xFF4
  6039                           prodl	equ	0xFF3
  6040                           intcon	equ	0xFF2
  6041                           intcon2	equ	0xFF1
  6042                           intcon3	equ	0xFF0
  6043                           indf0	equ	0xFEF
  6044                           postinc0	equ	0xFEE
  6045                           fsr0h	equ	0xFEA
  6046                           fsr0l	equ	0xFE9
  6047                           wreg	equ	0xFE8
  6048                           indf1	equ	0xFE7
  6049                           fsr1h	equ	0xFE2
  6050                           fsr1l	equ	0xFE1
  6051                           indf2	equ	0xFDF
  6052                           postinc2	equ	0xFDE
  6053                           postdec2	equ	0xFDD
  6054                           fsr2h	equ	0xFDA
  6055                           fsr2l	equ	0xFD9
  6056                           status	equ	0xFD8
  6057                           
  6058 ;; *************** function _DelayPORXLCD *****************
  6059 ;; Defined at:
  6060 ;;		line 25 in file "xlcd.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;		None
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;		None
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  1    wreg      void 
  6067 ;; Registers used:
  6068 ;;		wreg
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6074 ;;      Params:         0       0       0       0       0       0       0
  6075 ;;      Locals:         0       0       0       0       0       0       0
  6076 ;;      Temps:          0       0       1       0       0       0       0
  6077 ;;      Totals:         0       0       1       0       0       0       0
  6078 ;;Total ram usage:        1 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:    9
  6081 ;; This function calls:
  6082 ;;		Nothing
  6083 ;; This function is called by:
  6084 ;;		_OpenXLCD
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text35
  6089  001EAE                     __ptext35:
  6090                           	opt stack 0
  6091  001EAE                     _DelayPORXLCD:
  6092                           	opt stack 20
  6093                           
  6094                           ;xlcd.c: 28: _delay((unsigned long)((15)*(6000000/4000.0)));
  6095                           
  6096                           ;incstack = 0
  6097  001EAE  0E1E               	movlw	30
  6098  001EB0  0101               	movlb	1	; () banked
  6099  001EB2  6F2A               	movwf	??_DelayPORXLCD& (0+255),b
  6100  001EB4  0E37               	movlw	55
  6101  001EB6                     u7457:
  6102  001EB6  2EE8               	decfsz	wreg,f,c
  6103  001EB8  D7FE               	bra	u7457
  6104  001EBA  2F2A               	decfsz	??_DelayPORXLCD& (0+255),f,b
  6105  001EBC  D7FC               	bra	u7457
  6106                           
  6107                           ;xlcd.c: 29: _delay((unsigned long)((15)*(6000000/4000.0)));
  6108  001EBE  0E1E               	movlw	30
  6109  001EC0  0101               	movlb	1	; () banked
  6110  001EC2  6F2A               	movwf	??_DelayPORXLCD& (0+255),b
  6111  001EC4  0E37               	movlw	55
  6112  001EC6                     u7467:
  6113  001EC6  2EE8               	decfsz	wreg,f,c
  6114  001EC8  D7FE               	bra	u7467
  6115  001ECA  2F2A               	decfsz	??_DelayPORXLCD& (0+255),f,b
  6116  001ECC  D7FC               	bra	u7467
  6117  001ECE  0012               	return	
  6118  001ED0                     __end_of_DelayPORXLCD:
  6119                           	opt stack 0
  6120                           tblptru	equ	0xFF8
  6121                           tblptrh	equ	0xFF7
  6122                           tblptrl	equ	0xFF6
  6123                           tablat	equ	0xFF5
  6124                           prodh	equ	0xFF4
  6125                           prodl	equ	0xFF3
  6126                           intcon	equ	0xFF2
  6127                           intcon2	equ	0xFF1
  6128                           intcon3	equ	0xFF0
  6129                           indf0	equ	0xFEF
  6130                           postinc0	equ	0xFEE
  6131                           fsr0h	equ	0xFEA
  6132                           fsr0l	equ	0xFE9
  6133                           wreg	equ	0xFE8
  6134                           indf1	equ	0xFE7
  6135                           fsr1h	equ	0xFE2
  6136                           fsr1l	equ	0xFE1
  6137                           indf2	equ	0xFDF
  6138                           postinc2	equ	0xFDE
  6139                           postdec2	equ	0xFDD
  6140                           fsr2h	equ	0xFDA
  6141                           fsr2l	equ	0xFD9
  6142                           status	equ	0xFD8
  6143                           
  6144 ;; *************** function _BusyXLCD *****************
  6145 ;; Defined at:
  6146 ;;		line 218 in file "xlcd.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;		None
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;		None
  6151 ;; Return value:  Size  Location     Type
  6152 ;;                  1    wreg      unsigned char 
  6153 ;; Registers used:
  6154 ;;		wreg, cstack
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6160 ;;      Params:         0       0       0       0       0       0       0
  6161 ;;      Locals:         0       0       0       0       0       0       0
  6162 ;;      Temps:          0       0       0       0       0       0       0
  6163 ;;      Totals:         0       0       0       0       0       0       0
  6164 ;;Total ram usage:        0 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:   10
  6167 ;; This function calls:
  6168 ;;		_DelayFor18TCY
  6169 ;; This function is called by:
  6170 ;;		_OpenXLCD
  6171 ;;		_putsXLCD
  6172 ;;		_main
  6173 ;;		_escreveLinhaLCD
  6174 ;;		_feedbackUSART
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text36
  6179  001C6C                     __ptext36:
  6180                           	opt stack 0
  6181  001C6C                     _BusyXLCD:
  6182                           	opt stack 16
  6183                           
  6184                           ;xlcd.c: 219: LATDbits.LATD5 = 1;
  6185                           
  6186                           ;incstack = 0
  6187  001C6C  8A8C               	bsf	3980,5,c	;volatile
  6188                           
  6189                           ;xlcd.c: 220: LATDbits.LATD4 = 0;
  6190  001C6E  988C               	bcf	3980,4,c	;volatile
  6191                           
  6192                           ;xlcd.c: 221: DelayFor18TCY();
  6193  001C70  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  6194                           
  6195                           ;xlcd.c: 222: LATDbits.LATD6 = 1;
  6196  001C74  8C8C               	bsf	3980,6,c	;volatile
  6197                           
  6198                           ;xlcd.c: 223: DelayFor18TCY();
  6199  001C76  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  6200                           
  6201                           ;xlcd.c: 240: if (PORTD & 0x08)
  6202  001C7A  A683               	btfss	3971,3,c	;volatile
  6203  001C7C  D00A               	goto	l664
  6204                           
  6205                           ;xlcd.c: 242: {
  6206                           ;xlcd.c: 243: LATDbits.LATD6 = 0;
  6207  001C7E  9C8C               	bcf	3980,6,c	;volatile
  6208                           
  6209                           ;xlcd.c: 244: DelayFor18TCY();
  6210  001C80  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  6211                           
  6212                           ;xlcd.c: 245: LATDbits.LATD6 = 1;
  6213  001C84  8C8C               	bsf	3980,6,c	;volatile
  6214                           
  6215                           ;xlcd.c: 246: DelayFor18TCY();
  6216  001C86  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  6217                           
  6218                           ;xlcd.c: 247: LATDbits.LATD6 = 0;
  6219  001C8A  9C8C               	bcf	3980,6,c	;volatile
  6220                           
  6221                           ;xlcd.c: 248: LATDbits.LATD5 = 0;
  6222  001C8C  9A8C               	bcf	3980,5,c	;volatile
  6223                           
  6224                           ;xlcd.c: 249: return 1;
  6225  001C8E  0E01               	movlw	1
  6226                           
  6227                           ;xlcd.c: 250: } else
  6228  001C90  0012               	return	
  6229  001C92                     l664:
  6230                           
  6231                           ;xlcd.c: 251: {
  6232                           ;xlcd.c: 252: LATDbits.LATD6 = 0;
  6233  001C92  9C8C               	bcf	3980,6,c	;volatile
  6234                           
  6235                           ;xlcd.c: 253: DelayFor18TCY();
  6236  001C94  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  6237                           
  6238                           ;xlcd.c: 254: LATDbits.LATD6 = 1;
  6239  001C98  8C8C               	bsf	3980,6,c	;volatile
  6240                           
  6241                           ;xlcd.c: 255: DelayFor18TCY();
  6242  001C9A  ECDF  F00F         	call	_DelayFor18TCY	;wreg free
  6243                           
  6244                           ;xlcd.c: 256: LATDbits.LATD6 = 0;
  6245  001C9E  9C8C               	bcf	3980,6,c	;volatile
  6246                           
  6247                           ;xlcd.c: 257: LATDbits.LATD5 = 0;
  6248  001CA0  9A8C               	bcf	3980,5,c	;volatile
  6249                           
  6250                           ;xlcd.c: 258: return 0;
  6251  001CA2  0E00               	movlw	0
  6252  001CA4  0012               	return	
  6253  001CA6                     __end_of_BusyXLCD:
  6254                           	opt stack 0
  6255                           tblptru	equ	0xFF8
  6256                           tblptrh	equ	0xFF7
  6257                           tblptrl	equ	0xFF6
  6258                           tablat	equ	0xFF5
  6259                           prodh	equ	0xFF4
  6260                           prodl	equ	0xFF3
  6261                           intcon	equ	0xFF2
  6262                           intcon2	equ	0xFF1
  6263                           intcon3	equ	0xFF0
  6264                           indf0	equ	0xFEF
  6265                           postinc0	equ	0xFEE
  6266                           fsr0h	equ	0xFEA
  6267                           fsr0l	equ	0xFE9
  6268                           wreg	equ	0xFE8
  6269                           indf1	equ	0xFE7
  6270                           fsr1h	equ	0xFE2
  6271                           fsr1l	equ	0xFE1
  6272                           indf2	equ	0xFDF
  6273                           postinc2	equ	0xFDE
  6274                           postdec2	equ	0xFDD
  6275                           fsr2h	equ	0xFDA
  6276                           fsr2l	equ	0xFD9
  6277                           status	equ	0xFD8
  6278                           
  6279 ;; *************** function _DelayFor18TCY *****************
  6280 ;; Defined at:
  6281 ;;		line 18 in file "xlcd.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;		None
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;		None
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6295 ;;      Params:         0       0       0       0       0       0       0
  6296 ;;      Locals:         0       0       0       0       0       0       0
  6297 ;;      Temps:          0       0       0       0       0       0       0
  6298 ;;      Totals:         0       0       0       0       0       0       0
  6299 ;;Total ram usage:        0 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    9
  6302 ;; This function calls:
  6303 ;;		Nothing
  6304 ;; This function is called by:
  6305 ;;		_OpenXLCD
  6306 ;;		_BusyXLCD
  6307 ;;		_WriteCmdXLCD
  6308 ;;		_WriteDataXLCD
  6309 ;;		_ReadAddrXLCD
  6310 ;;		_ReadDataXLCD
  6311 ;;		_SetCGRamAddr
  6312 ;;		_SetDDRamAddr
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           	psect	text37
  6317  001FBE                     __ptext37:
  6318                           	opt stack 0
  6319  001FBE                     _DelayFor18TCY:
  6320                           	opt stack 16
  6321                           
  6322                           ;xlcd.c: 20: _delay((unsigned long)((18)*(6000000/4000000.0)));
  6323                           
  6324                           ;incstack = 0
  6325  001FBE  0E09               	movlw	9
  6326  001FC0                     u7477:
  6327  001FC0  2EE8               	decfsz	wreg,f,c
  6328  001FC2  D7FE               	bra	u7477
  6329                           
  6330                           ;xlcd.c: 21: _delay((unsigned long)((1)*(6000000/4000.0)));
  6331  001FC4  0ED6               	movlw	214
  6332  001FC6                     u7487:
  6333  001FC6  D000               	nop2	
  6334  001FC8  D000               	nop2	
  6335  001FCA  2EE8               	decfsz	wreg,f,c
  6336  001FCC  D7FC               	bra	u7487
  6337  001FCE  D000               	nop2	
  6338  001FD0  0012               	return	
  6339  001FD2                     __end_of_DelayFor18TCY:
  6340                           	opt stack 0
  6341                           tblptru	equ	0xFF8
  6342                           tblptrh	equ	0xFF7
  6343                           tblptrl	equ	0xFF6
  6344                           tablat	equ	0xFF5
  6345                           prodh	equ	0xFF4
  6346                           prodl	equ	0xFF3
  6347                           intcon	equ	0xFF2
  6348                           intcon2	equ	0xFF1
  6349                           intcon3	equ	0xFF0
  6350                           indf0	equ	0xFEF
  6351                           postinc0	equ	0xFEE
  6352                           fsr0h	equ	0xFEA
  6353                           fsr0l	equ	0xFE9
  6354                           wreg	equ	0xFE8
  6355                           indf1	equ	0xFE7
  6356                           fsr1h	equ	0xFE2
  6357                           fsr1l	equ	0xFE1
  6358                           indf2	equ	0xFDF
  6359                           postinc2	equ	0xFDE
  6360                           postdec2	equ	0xFDD
  6361                           fsr2h	equ	0xFDA
  6362                           fsr2l	equ	0xFD9
  6363                           status	equ	0xFD8
  6364                           
  6365 ;; *************** function _INTERRUPT_InterruptManagerLow *****************
  6366 ;; Defined at:
  6367 ;;		line 117 in file "mcc_generated_files/interrupt_manager.c"
  6368 ;; Parameters:    Size  Location     Type
  6369 ;;		None
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;		None
  6372 ;; Return value:  Size  Location     Type
  6373 ;;                  1    wreg      void 
  6374 ;; Registers used:
  6375 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6381 ;;      Params:         0       0       0       0       0       0       0
  6382 ;;      Locals:         0       0       0       0       0       0       0
  6383 ;;      Temps:          0      21       0       0       0       0       0
  6384 ;;      Totals:         0      21       0       0       0       0       0
  6385 ;;Total ram usage:       21 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:    8
  6388 ;; This function calls:
  6389 ;;		_ADC_ISR
  6390 ;;		_EUSART1_Receive_ISR
  6391 ;; This function is called by:
  6392 ;;		Interrupt level 1
  6393 ;; This function uses a non-reentrant model
  6394 ;;
  6395                           
  6396                           	psect	intcodelo
  6397  000018                     __pintcodelo:
  6398                           	opt stack 0
  6399  000018                     _INTERRUPT_InterruptManagerLow:
  6400                           	opt stack 16
  6401                           
  6402                           ;incstack = 0
  6403  000018  8049               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6404  00001A  CFD8 F0BF          	movff	status,??_INTERRUPT_InterruptManagerLow
  6405  00001E  CFE8 F0C0          	movff	wreg,??_INTERRUPT_InterruptManagerLow+1
  6406  000022  CFE0 F0C1          	movff	bsr,??_INTERRUPT_InterruptManagerLow+2
  6407  000026  CFFA F0C2          	movff	pclath,??_INTERRUPT_InterruptManagerLow+3
  6408  00002A  CFFB F0C3          	movff	pclatu,??_INTERRUPT_InterruptManagerLow+4
  6409  00002E  CFE9 F0C4          	movff	fsr0l,??_INTERRUPT_InterruptManagerLow+5
  6410  000032  CFEA F0C5          	movff	fsr0h,??_INTERRUPT_InterruptManagerLow+6
  6411  000036  CFE1 F0C6          	movff	fsr1l,??_INTERRUPT_InterruptManagerLow+7
  6412  00003A  CFE2 F0C7          	movff	fsr1h,??_INTERRUPT_InterruptManagerLow+8
  6413  00003E  CFD9 F0C8          	movff	fsr2l,??_INTERRUPT_InterruptManagerLow+9
  6414  000042  CFDA F0C9          	movff	fsr2h,??_INTERRUPT_InterruptManagerLow+10
  6415  000046  CFF3 F0CA          	movff	prodl,??_INTERRUPT_InterruptManagerLow+11
  6416  00004A  CFF4 F0CB          	movff	prodh,??_INTERRUPT_InterruptManagerLow+12
  6417  00004E  CFF6 F0CC          	movff	tblptrl,??_INTERRUPT_InterruptManagerLow+13
  6418  000052  CFF7 F0CD          	movff	tblptrh,??_INTERRUPT_InterruptManagerLow+14
  6419  000056  CFF8 F0CE          	movff	tblptru,??_INTERRUPT_InterruptManagerLow+15
  6420  00005A  CFF5 F0CF          	movff	tablat,??_INTERRUPT_InterruptManagerLow+16
  6421  00005E  C049  F0D0         	movff	btemp,??_INTERRUPT_InterruptManagerLow+17
  6422  000062  C04A  F0D1         	movff	btemp+1,??_INTERRUPT_InterruptManagerLow+18
  6423  000066  C04B  F0D2         	movff	btemp+2,??_INTERRUPT_InterruptManagerLow+19
  6424  00006A  C04C  F0D3         	movff	btemp+3,??_INTERRUPT_InterruptManagerLow+20
  6425                           
  6426                           ;interrupt_manager.c: 120: if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  6427  00006E  BC9D               	btfsc	3997,6,c	;volatile
  6428  000070  AC9E               	btfss	3998,6,c	;volatile
  6429  000072  D003               	goto	i1l133
  6430                           
  6431                           ;interrupt_manager.c: 121: {
  6432                           ;interrupt_manager.c: 122: ADC_ISR();
  6433  000074  ECCE  F006         	call	_ADC_ISR	;wreg free
  6434                           
  6435                           ;interrupt_manager.c: 123: }
  6436  000078  D005               	goto	i1l135
  6437  00007A                     i1l133:
  6438                           
  6439                           ;interrupt_manager.c: 124: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6440  00007A  BA9D               	btfsc	3997,5,c	;volatile
  6441  00007C  AA9E               	btfss	3998,5,c	;volatile
  6442  00007E  D002               	goto	i1l135
  6443                           
  6444                           ;interrupt_manager.c: 125: {
  6445                           ;interrupt_manager.c: 126: EUSART1_Receive_ISR();
  6446  000080  EC6A  F004         	call	_EUSART1_Receive_ISR	;wreg free
  6447  000084                     i1l135:
  6448                           
  6449                           ;interrupt_manager.c: 128: else
  6450                           ;interrupt_manager.c: 129: {
  6451  000084  C0D3  F04C         	movff	??_INTERRUPT_InterruptManagerLow+20,btemp+3
  6452  000088  C0D2  F04B         	movff	??_INTERRUPT_InterruptManagerLow+19,btemp+2
  6453  00008C  C0D1  F04A         	movff	??_INTERRUPT_InterruptManagerLow+18,btemp+1
  6454  000090  C0D0  F049         	movff	??_INTERRUPT_InterruptManagerLow+17,btemp
  6455  000094  C0CF  FFF5         	movff	??_INTERRUPT_InterruptManagerLow+16,tablat
  6456  000098  C0CE  FFF8         	movff	??_INTERRUPT_InterruptManagerLow+15,tblptru
  6457  00009C  C0CD  FFF7         	movff	??_INTERRUPT_InterruptManagerLow+14,tblptrh
  6458  0000A0  C0CC  FFF6         	movff	??_INTERRUPT_InterruptManagerLow+13,tblptrl
  6459  0000A4  C0CB  FFF4         	movff	??_INTERRUPT_InterruptManagerLow+12,prodh
  6460  0000A8  C0CA  FFF3         	movff	??_INTERRUPT_InterruptManagerLow+11,prodl
  6461  0000AC  C0C9  FFDA         	movff	??_INTERRUPT_InterruptManagerLow+10,fsr2h
  6462  0000B0  C0C8  FFD9         	movff	??_INTERRUPT_InterruptManagerLow+9,fsr2l
  6463  0000B4  C0C7  FFE2         	movff	??_INTERRUPT_InterruptManagerLow+8,fsr1h
  6464  0000B8  C0C6  FFE1         	movff	??_INTERRUPT_InterruptManagerLow+7,fsr1l
  6465  0000BC  C0C5  FFEA         	movff	??_INTERRUPT_InterruptManagerLow+6,fsr0h
  6466  0000C0  C0C4  FFE9         	movff	??_INTERRUPT_InterruptManagerLow+5,fsr0l
  6467  0000C4  C0C3  FFFB         	movff	??_INTERRUPT_InterruptManagerLow+4,pclatu
  6468  0000C8  C0C2  FFFA         	movff	??_INTERRUPT_InterruptManagerLow+3,pclath
  6469  0000CC  C0C1  FFE0         	movff	??_INTERRUPT_InterruptManagerLow+2,bsr
  6470  0000D0  C0C0  FFE8         	movff	??_INTERRUPT_InterruptManagerLow+1,wreg
  6471  0000D4  C0BF  FFD8         	movff	??_INTERRUPT_InterruptManagerLow,status
  6472  0000D8  9049               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6473  0000DA  0010               	retfie	
  6474  0000DC                     __end_of_INTERRUPT_InterruptManagerLow:
  6475                           	opt stack 0
  6476                           pclatu	equ	0xFFB
  6477                           pclath	equ	0xFFA
  6478                           tblptru	equ	0xFF8
  6479                           tblptrh	equ	0xFF7
  6480                           tblptrl	equ	0xFF6
  6481                           tablat	equ	0xFF5
  6482                           prodh	equ	0xFF4
  6483                           prodl	equ	0xFF3
  6484                           intcon	equ	0xFF2
  6485                           intcon2	equ	0xFF1
  6486                           intcon3	equ	0xFF0
  6487                           indf0	equ	0xFEF
  6488                           postinc0	equ	0xFEE
  6489                           fsr0h	equ	0xFEA
  6490                           fsr0l	equ	0xFE9
  6491                           wreg	equ	0xFE8
  6492                           indf1	equ	0xFE7
  6493                           fsr1h	equ	0xFE2
  6494                           fsr1l	equ	0xFE1
  6495                           bsr	equ	0xFE0
  6496                           indf2	equ	0xFDF
  6497                           postinc2	equ	0xFDE
  6498                           postdec2	equ	0xFDD
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _EUSART1_Receive_ISR *****************
  6504 ;; Defined at:
  6505 ;;		line 108 in file "mcc_generated_files/eusart1.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  tmpAlarme       1   31[COMRAM] unsigned char 
  6510 ;;  i2              2   29[COMRAM] int 
  6511 ;;  i1              2   27[COMRAM] int 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6521 ;;      Params:         0       0       0       0       0       0       0
  6522 ;;      Locals:         5       0       0       0       0       0       0
  6523 ;;      Temps:          5       0       0       0       0       0       0
  6524 ;;      Totals:        10       0       0       0       0       0       0
  6525 ;;Total ram usage:       10 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    4
  6528 ;; This function calls:
  6529 ;;		Nothing
  6530 ;; This function is called by:
  6531 ;;		_INTERRUPT_InterruptManagerLow
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text39
  6536  0008D4                     __ptext39:
  6537                           	opt stack 0
  6538  0008D4                     _EUSART1_Receive_ISR:
  6539                           	opt stack 19
  6540                           
  6541                           ;eusart1.c: 110: if (RCSTA1bits.OERR) {
  6542                           
  6543                           ;incstack = 0
  6544  0008D4  A2AB               	btfss	4011,1,c	;volatile
  6545  0008D6  D002               	goto	i1l597
  6546                           
  6547                           ;eusart1.c: 112: RCSTA1bits.CREN = 0;
  6548  0008D8  98AB               	bcf	4011,4,c	;volatile
  6549                           
  6550                           ;eusart1.c: 113: RCSTA1bits.CREN = 1;
  6551  0008DA  88AB               	bsf	4011,4,c	;volatile
  6552  0008DC                     i1l597:
  6553                           
  6554                           ;eusart1.c: 114: }
  6555                           ;eusart1.c: 116: if (j >= 0 && j < 42 - 1 && strUSART[j] != '\r') {
  6556  0008DC  BE40               	btfsc	_j,7,c	;volatile
  6557  0008DE  D062               	goto	i1l598
  6558  0008E0  5040               	movf	_j,w,c	;volatile
  6559  0008E2  0A80               	xorlw	128
  6560  0008E4  0F57               	addlw	-169
  6561  0008E6  B0D8               	btfsc	status,0,c
  6562  0008E8  D05D               	goto	i1l598
  6563  0008EA  5040               	movf	_j,w,c	;volatile
  6564  0008EC  0D01               	mullw	1
  6565  0008EE  0E6E               	movlw	low _strUSART
  6566  0008F0  24F3               	addwf	prodl,w,c
  6567  0008F2  6ED9               	movwf	fsr2l,c
  6568  0008F4  0E00               	movlw	high _strUSART
  6569  0008F6  20F4               	addwfc	prodh,w,c
  6570  0008F8  6EDA               	movwf	fsr2h,c
  6571  0008FA  0E0D               	movlw	13
  6572  0008FC  18DE               	xorwf	postinc2,w,c
  6573  0008FE  B4D8               	btfsc	status,2,c
  6574  000900  D051               	goto	i1l598
  6575                           
  6576                           ;eusart1.c: 118: eusart_Tx_On = 1;
  6577  000902  0E01               	movlw	1
  6578  000904  6E36               	movwf	_eusart_Tx_On,c	;volatile
  6579                           
  6580                           ;eusart1.c: 119: strUSART[j] = RCREG1;
  6581  000906  5040               	movf	_j,w,c	;volatile
  6582  000908  0D01               	mullw	1
  6583  00090A  0E6E               	movlw	low _strUSART
  6584  00090C  24F3               	addwf	prodl,w,c
  6585  00090E  6ED9               	movwf	fsr2l,c
  6586  000910  0E00               	movlw	high _strUSART
  6587  000912  20F4               	addwfc	prodh,w,c
  6588  000914  6EDA               	movwf	fsr2h,c
  6589  000916  CFAE FFDF          	movff	4014,indf2	;volatile
  6590                           
  6591                           ;eusart1.c: 122: if (j == 40) {
  6592  00091A  0E28               	movlw	40
  6593  00091C  1840               	xorwf	_j,w,c	;volatile
  6594  00091E  A4D8               	btfss	status,2,c
  6595  000920  D004               	goto	i1l599
  6596  000922                     i1u503_20:
  6597                           
  6598                           ;eusart1.c: 123: while (!PIR1bits.TX1IF);
  6599  000922  A89E               	btfss	3998,4,c	;volatile
  6600  000924  D7FE               	goto	i1u503_20
  6601                           
  6602                           ;eusart1.c: 124: TXREG1 = '\r';
  6603  000926  0E0D               	movlw	13
  6604  000928  D00B               	goto	L1
  6605  00092A                     i1l599:
  6606                           
  6607                           ;eusart1.c: 126: while (!PIR1bits.TX1IF);
  6608  00092A  A89E               	btfss	3998,4,c	;volatile
  6609  00092C  D7FE               	goto	i1l599
  6610                           
  6611                           ;eusart1.c: 127: TXREG1 = strUSART[j];
  6612  00092E  5040               	movf	_j,w,c	;volatile
  6613  000930  0D01               	mullw	1
  6614  000932  0E6E               	movlw	low _strUSART
  6615  000934  24F3               	addwf	prodl,w,c
  6616  000936  6ED9               	movwf	fsr2l,c
  6617  000938  0E00               	movlw	high _strUSART
  6618  00093A  20F4               	addwfc	prodh,w,c
  6619  00093C  6EDA               	movwf	fsr2h,c
  6620  00093E  50DF               	movf	indf2,w,c
  6621  000940                     L1:
  6622  000940  6EAD               	movwf	4013,c	;volatile
  6623                           
  6624                           ;eusart1.c: 128: }
  6625                           ;eusart1.c: 131: if (strUSART[j] != '\r' && strUSART[j] == 8) {
  6626  000942  5040               	movf	_j,w,c	;volatile
  6627  000944  0D01               	mullw	1
  6628  000946  0E6E               	movlw	low _strUSART
  6629  000948  24F3               	addwf	prodl,w,c
  6630  00094A  6ED9               	movwf	fsr2l,c
  6631  00094C  0E00               	movlw	high _strUSART
  6632  00094E  20F4               	addwfc	prodh,w,c
  6633  000950  6EDA               	movwf	fsr2h,c
  6634  000952  0E0D               	movlw	13
  6635  000954  18DE               	xorwf	postinc2,w,c
  6636  000956  B4D8               	btfsc	status,2,c
  6637  000958  D024               	goto	i1l608
  6638  00095A  5040               	movf	_j,w,c	;volatile
  6639  00095C  0D01               	mullw	1
  6640  00095E  0E6E               	movlw	low _strUSART
  6641  000960  24F3               	addwf	prodl,w,c
  6642  000962  6ED9               	movwf	fsr2l,c
  6643  000964  0E00               	movlw	high _strUSART
  6644  000966  20F4               	addwfc	prodh,w,c
  6645  000968  6EDA               	movwf	fsr2h,c
  6646  00096A  0E08               	movlw	8
  6647  00096C  18DE               	xorwf	postinc2,w,c
  6648  00096E  A4D8               	btfss	status,2,c
  6649  000970  D018               	goto	i1l608
  6650                           
  6651                           ;eusart1.c: 132: strUSART[j] = '\0';
  6652  000972  5040               	movf	_j,w,c	;volatile
  6653  000974  0D01               	mullw	1
  6654  000976  0E6E               	movlw	low _strUSART
  6655  000978  24F3               	addwf	prodl,w,c
  6656  00097A  6ED9               	movwf	fsr2l,c
  6657  00097C  0E00               	movlw	high _strUSART
  6658  00097E  20F4               	addwfc	prodh,w,c
  6659  000980  6EDA               	movwf	fsr2h,c
  6660  000982  0E00               	movlw	0
  6661  000984  6EDF               	movwf	indf2,c
  6662                           
  6663                           ;eusart1.c: 133: j--;
  6664  000986  0640               	decf	_j,f,c	;volatile
  6665                           
  6666                           ;eusart1.c: 134: if (j >= 0) {
  6667  000988  BE40               	btfsc	_j,7,c	;volatile
  6668  00098A  D00B               	goto	i1l608
  6669                           
  6670                           ;eusart1.c: 135: strUSART[j] = '\0';
  6671  00098C  5040               	movf	_j,w,c	;volatile
  6672  00098E  0D01               	mullw	1
  6673  000990  0E6E               	movlw	low _strUSART
  6674  000992  24F3               	addwf	prodl,w,c
  6675  000994  6ED9               	movwf	fsr2l,c
  6676  000996  0E00               	movlw	high _strUSART
  6677  000998  20F4               	addwfc	prodh,w,c
  6678  00099A  6EDA               	movwf	fsr2h,c
  6679  00099C  0E00               	movlw	0
  6680  00099E  6EDF               	movwf	indf2,c
  6681                           
  6682                           ;eusart1.c: 136: j--;
  6683  0009A0  0640               	decf	_j,f,c	;volatile
  6684  0009A2                     i1l608:
  6685                           
  6686                           ;eusart1.c: 137: }
  6687                           ;eusart1.c: 138: }
  6688                           ;eusart1.c: 139: j++;
  6689  0009A2  2A40               	incf	_j,f,c	;volatile
  6690  0009A4                     i1l598:
  6691                           
  6692                           ;eusart1.c: 140: }
  6693                           ;eusart1.c: 143: if (( ( strUSART[0] == 'S' ) && ( strUSART[1] == 'A' ) && ( strUSART[2]
      +                           == '=' ) && ( strUSART[3] != '\0' ) && ( strUSART[4] != '\0' ) && ( strUSART[5] == '\r'
      +                           ) )) {
  6694  0009A4  0E53               	movlw	83
  6695  0009A6  0100               	movlb	0	; () banked
  6696  0009A8  196E               	xorwf	_strUSART& (0+255),w,b	;volatile
  6697  0009AA  A4D8               	btfss	status,2,c
  6698  0009AC  D03F               	goto	i1l611
  6699                           
  6700                           ; BSR set to: 0
  6701  0009AE  0E41               	movlw	65
  6702  0009B0  196F               	xorwf	(_strUSART+1)& (0+255),w,b	;volatile
  6703  0009B2  A4D8               	btfss	status,2,c
  6704  0009B4  D03B               	goto	i1l611
  6705                           
  6706                           ; BSR set to: 0
  6707  0009B6  0E3D               	movlw	61
  6708  0009B8  1970               	xorwf	(_strUSART+2)& (0+255),w,b	;volatile
  6709  0009BA  A4D8               	btfss	status,2,c
  6710  0009BC  D037               	goto	i1l611
  6711                           
  6712                           ; BSR set to: 0
  6713  0009BE  5171               	movf	(_strUSART+3)& (0+255),w,b	;volatile
  6714  0009C0  B4D8               	btfsc	status,2,c
  6715  0009C2  D034               	goto	i1l611
  6716                           
  6717                           ; BSR set to: 0
  6718  0009C4  5172               	movf	(_strUSART+4)& (0+255),w,b	;volatile
  6719  0009C6  B4D8               	btfsc	status,2,c
  6720  0009C8  D031               	goto	i1l611
  6721                           
  6722                           ; BSR set to: 0
  6723  0009CA  0E0D               	movlw	13
  6724  0009CC  1973               	xorwf	(_strUSART+5)& (0+255),w,b	;volatile
  6725  0009CE  A4D8               	btfss	status,2,c
  6726  0009D0  D02D               	goto	i1l611
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;eusart1.c: 145: int i1, i2;
  6730                           ;eusart1.c: 147: i1 = strUSART[3] - '0';
  6731  0009D2  0ED0               	movlw	208
  6732  0009D4  2571               	addwf	(_strUSART+3)& (0+255),w,b	;volatile
  6733  0009D6  6E1C               	movwf	EUSART1_Receive_ISR@i1,c
  6734  0009D8  6A1D               	clrf	EUSART1_Receive_ISR@i1+1,c
  6735  0009DA  0EFF               	movlw	255
  6736  0009DC  221D               	addwfc	EUSART1_Receive_ISR@i1+1,f,c
  6737                           
  6738                           ;eusart1.c: 148: i2 = strUSART[4] - '0';
  6739  0009DE  0ED0               	movlw	208
  6740  0009E0  2572               	addwf	(_strUSART+4)& (0+255),w,b	;volatile
  6741  0009E2  6E1E               	movwf	EUSART1_Receive_ISR@i2,c
  6742  0009E4  6A1F               	clrf	EUSART1_Receive_ISR@i2+1,c
  6743  0009E6  0EFF               	movlw	255
  6744  0009E8  221F               	addwfc	EUSART1_Receive_ISR@i2+1,f,c
  6745                           
  6746                           ;eusart1.c: 150: if (i1 >= 0 && i1 <= 9 && i2 >= 0 && i2 <= 9) {
  6747  0009EA  BE1D               	btfsc	EUSART1_Receive_ISR@i1+1,7,c
  6748  0009EC  D01F               	goto	i1l611
  6749                           
  6750                           ; BSR set to: 0
  6751  0009EE  BE1D               	btfsc	EUSART1_Receive_ISR@i1+1,7,c
  6752  0009F0  D006               	goto	i1u516_20
  6753  0009F2  501D               	movf	EUSART1_Receive_ISR@i1+1,w,c
  6754  0009F4  E11B               	bnz	i1l4936
  6755  0009F6  0E0A               	movlw	10
  6756  0009F8  5C1C               	subwf	EUSART1_Receive_ISR@i1,w,c
  6757  0009FA  B0D8               	btfsc	status,0,c
  6758  0009FC  D017               	goto	i1l611
  6759  0009FE                     i1u516_20:
  6760                           
  6761                           ; BSR set to: 0
  6762  0009FE  BE1F               	btfsc	EUSART1_Receive_ISR@i2+1,7,c
  6763  000A00  D015               	goto	i1l611
  6764                           
  6765                           ; BSR set to: 0
  6766  000A02  BE1F               	btfsc	EUSART1_Receive_ISR@i2+1,7,c
  6767  000A04  D006               	goto	i1u518_20
  6768  000A06  501F               	movf	EUSART1_Receive_ISR@i2+1,w,c
  6769  000A08  E111               	bnz	i1l4936
  6770  000A0A  0E0A               	movlw	10
  6771  000A0C  5C1E               	subwf	EUSART1_Receive_ISR@i2,w,c
  6772  000A0E  B0D8               	btfsc	status,0,c
  6773  000A10  D00D               	goto	i1l611
  6774  000A12                     i1u518_20:
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;eusart1.c: 152: char tmpAlarme = 10 * i1 + i2;
  6778  000A12  501C               	movf	EUSART1_Receive_ISR@i1,w,c
  6779  000A14  0D0A               	mullw	10
  6780  000A16  50F3               	movf	prodl,w,c
  6781  000A18  241E               	addwf	EUSART1_Receive_ISR@i2,w,c
  6782  000A1A  6E20               	movwf	EUSART1_Receive_ISR@tmpAlarme,c
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;eusart1.c: 154: if (tmpAlarme >= 10 && tmpAlarme <= 40)
  6786  000A1C  0E09               	movlw	9
  6787  000A1E  6420               	cpfsgt	EUSART1_Receive_ISR@tmpAlarme,c
  6788  000A20  D005               	goto	i1l611
  6789                           
  6790                           ; BSR set to: 0
  6791  000A22  0E29               	movlw	41
  6792  000A24  6020               	cpfslt	EUSART1_Receive_ISR@tmpAlarme,c
  6793  000A26  D002               	goto	i1l611
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;eusart1.c: 155: tempAlarme = tmpAlarme;
  6797  000A28  C020  F048         	movff	EUSART1_Receive_ISR@tmpAlarme,_tempAlarme	;volatile
  6798  000A2C                     i1l611:
  6799  000A2C                     i1l4936:
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;eusart1.c: 156: }
  6803                           ;eusart1.c: 158: }
  6804                           ;eusart1.c: 160: if (j == 42 - 1 || strUSART[( j - 1 )] == '\r') {
  6805  000A2C  0E29               	movlw	41
  6806  000A2E  1840               	xorwf	_j,w,c	;volatile
  6807  000A30  B4D8               	btfsc	status,2,c
  6808  000A32  D017               	goto	i1u522_20
  6809                           
  6810                           ; BSR set to: 0
  6811  000A34  0EFF               	movlw	255
  6812  000A36  6E17               	movwf	??_EUSART1_Receive_ISR& (0+255),c
  6813  000A38  0EFF               	movlw	255
  6814  000A3A  6E18               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
  6815  000A3C  C040  F019         	movff	_j,??_EUSART1_Receive_ISR+2	;volatile
  6816  000A40  6A1A               	clrf	(??_EUSART1_Receive_ISR+3)& (0+255),c
  6817  000A42  BE19               	btfsc	(??_EUSART1_Receive_ISR+2)& (0+255),7,c
  6818  000A44  061A               	decf	(??_EUSART1_Receive_ISR+3)& (0+255),f,c
  6819  000A46  5017               	movf	??_EUSART1_Receive_ISR,w,c
  6820  000A48  2619               	addwf	??_EUSART1_Receive_ISR+2,f,c
  6821  000A4A  5018               	movf	??_EUSART1_Receive_ISR+1,w,c
  6822  000A4C  221A               	addwfc	??_EUSART1_Receive_ISR+3,f,c
  6823  000A4E  0E6E               	movlw	low _strUSART
  6824  000A50  2419               	addwf	??_EUSART1_Receive_ISR+2,w,c
  6825  000A52  6ED9               	movwf	fsr2l,c
  6826  000A54  0E00               	movlw	high _strUSART
  6827  000A56  201A               	addwfc	??_EUSART1_Receive_ISR+3,w,c
  6828  000A58  6EDA               	movwf	fsr2h,c
  6829  000A5A  0E0D               	movlw	13
  6830  000A5C  18DE               	xorwf	postinc2,w,c
  6831  000A5E  A4D8               	btfss	status,2,c
  6832  000A60  0012               	return	
  6833  000A62                     i1u522_20:
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;eusart1.c: 161: strUSART[j - 1] = '\0';
  6837                           
  6838                           ; BSR set to: 0
  6839  000A62  0EFF               	movlw	255
  6840  000A64  6E17               	movwf	??_EUSART1_Receive_ISR& (0+255),c
  6841  000A66  0EFF               	movlw	255
  6842  000A68  6E18               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
  6843  000A6A  C040  F019         	movff	_j,??_EUSART1_Receive_ISR+2	;volatile
  6844  000A6E  6A1A               	clrf	(??_EUSART1_Receive_ISR+3)& (0+255),c
  6845  000A70  BE19               	btfsc	(??_EUSART1_Receive_ISR+2)& (0+255),7,c
  6846  000A72  061A               	decf	(??_EUSART1_Receive_ISR+3)& (0+255),f,c
  6847  000A74  5017               	movf	??_EUSART1_Receive_ISR,w,c
  6848  000A76  2619               	addwf	??_EUSART1_Receive_ISR+2,f,c
  6849  000A78  5018               	movf	??_EUSART1_Receive_ISR+1,w,c
  6850  000A7A  221A               	addwfc	??_EUSART1_Receive_ISR+3,f,c
  6851  000A7C  0E6E               	movlw	low _strUSART
  6852  000A7E  2419               	addwf	??_EUSART1_Receive_ISR+2,w,c
  6853  000A80  6ED9               	movwf	fsr2l,c
  6854  000A82  0E00               	movlw	high _strUSART
  6855  000A84  201A               	addwfc	??_EUSART1_Receive_ISR+3,w,c
  6856  000A86  6EDA               	movwf	fsr2h,c
  6857  000A88  0E00               	movlw	0
  6858  000A8A  6EDF               	movwf	indf2,c
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;eusart1.c: 162: j = 0;
  6862  000A8C  0E00               	movlw	0
  6863  000A8E  6E40               	movwf	_j,c	;volatile
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;eusart1.c: 163: eusart_Tx_On = 0;
  6867  000A90  0E00               	movlw	0
  6868  000A92  6E36               	movwf	_eusart_Tx_On,c	;volatile
  6869  000A94  0012               	return	
  6870  000A96                     __end_of_EUSART1_Receive_ISR:
  6871                           	opt stack 0
  6872                           pclatu	equ	0xFFB
  6873                           pclath	equ	0xFFA
  6874                           tblptru	equ	0xFF8
  6875                           tblptrh	equ	0xFF7
  6876                           tblptrl	equ	0xFF6
  6877                           tablat	equ	0xFF5
  6878                           prodh	equ	0xFF4
  6879                           prodl	equ	0xFF3
  6880                           intcon	equ	0xFF2
  6881                           intcon2	equ	0xFF1
  6882                           intcon3	equ	0xFF0
  6883                           indf0	equ	0xFEF
  6884                           postinc0	equ	0xFEE
  6885                           fsr0h	equ	0xFEA
  6886                           fsr0l	equ	0xFE9
  6887                           wreg	equ	0xFE8
  6888                           indf1	equ	0xFE7
  6889                           fsr1h	equ	0xFE2
  6890                           fsr1l	equ	0xFE1
  6891                           bsr	equ	0xFE0
  6892                           indf2	equ	0xFDF
  6893                           postinc2	equ	0xFDE
  6894                           postdec2	equ	0xFDD
  6895                           fsr2h	equ	0xFDA
  6896                           fsr2l	equ	0xFD9
  6897                           status	equ	0xFD8
  6898                           
  6899 ;; *************** function _ADC_ISR *****************
  6900 ;; Defined at:
  6901 ;;		line 121 in file "mcc_generated_files/adc.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;		None
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;  var1            3   18[BANK0 ] void 
  6906 ;;  var2            1   17[BANK0 ] unsigned char 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6916 ;;      Params:         0       0       0       0       0       0       0
  6917 ;;      Locals:         0       4       0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0
  6919 ;;      Totals:         0       4       0       0       0       0       0
  6920 ;;Total ram usage:        4 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    7
  6923 ;; This function calls:
  6924 ;;		_ADC_GetConversionResult
  6925 ;;		___awtoft
  6926 ;;		___ftge
  6927 ;;		___ftmul
  6928 ;;		___ftsub
  6929 ;;		___fttol
  6930 ;;		___lbtoft
  6931 ;;		i1_EUSART1_Write
  6932 ;;		i1_sprintf
  6933 ;; This function is called by:
  6934 ;;		_INTERRUPT_InterruptManagerLow
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text40
  6939  000D9C                     __ptext40:
  6940                           	opt stack 0
  6941  000D9C                     _ADC_ISR:
  6942                           	opt stack 16
  6943                           
  6944                           ;adc.c: 123: binADC = ADC_GetConversionResult();
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;incstack = 0
  6948  000D9C  ECE9  F00F         	call	_ADC_GetConversionResult	;wreg free
  6949  000DA0  C017  F06B         	movff	?_ADC_GetConversionResult,_binADC	;volatile
  6950  000DA4  C018  F06C         	movff	?_ADC_GetConversionResult+1,_binADC+1	;volatile
  6951                           
  6952                           ;adc.c: 126: tmpTemp = (binADC - 83) * (0.24841333435);
  6953  000DA8  0EAD               	movlw	173
  6954  000DAA  0100               	movlb	0	; () banked
  6955  000DAC  256B               	addwf	_binADC& (0+255),w,b	;volatile
  6956  000DAE  6E1F               	movwf	___awtoft@c,c
  6957  000DB0  0EFF               	movlw	255
  6958  000DB2  216C               	addwfc	(_binADC+1)& (0+255),w,b	;volatile
  6959  000DB4  6E20               	movwf	___awtoft@c+1,c
  6960  000DB6  EC53  F00E         	call	___awtoft	;wreg free
  6961  000DBA  C01F  F023         	movff	?___awtoft,___ftmul@f1
  6962  000DBE  C020  F024         	movff	?___awtoft+1,___ftmul@f1+1
  6963  000DC2  C021  F025         	movff	?___awtoft+2,___ftmul@f1+2
  6964  000DC6  0E60               	movlw	96
  6965  000DC8  6E26               	movwf	___ftmul@f2,c
  6966  000DCA  0E7E               	movlw	126
  6967  000DCC  6E27               	movwf	___ftmul@f2+1,c
  6968  000DCE  0E3E               	movlw	62
  6969  000DD0  6E28               	movwf	___ftmul@f2+2,c
  6970  000DD2  EC2D  F009         	call	___ftmul	;wreg free
  6971  000DD6  C023  F02D         	movff	?___ftmul,_tmpTemp	;volatile
  6972  000DDA  C024  F02E         	movff	?___ftmul+1,_tmpTemp+1	;volatile
  6973  000DDE  C025  F02F         	movff	?___ftmul+2,_tmpTemp+2	;volatile
  6974                           
  6975                           ;adc.c: 130: double var1 = tmpTemp;
  6976  000DE2  C02D  F0BC         	movff	_tmpTemp,ADC_ISR@var1	;volatile
  6977  000DE6  C02E  F0BD         	movff	_tmpTemp+1,ADC_ISR@var1+1	;volatile
  6978  000DEA  C02F  F0BE         	movff	_tmpTemp+2,ADC_ISR@var1+2	;volatile
  6979                           
  6980                           ;adc.c: 131: char var2 = (char) tmpTemp;
  6981  000DEE  C02D  F017         	movff	_tmpTemp,___fttol@f1	;volatile
  6982  000DF2  C02E  F018         	movff	_tmpTemp+1,___fttol@f1+1	;volatile
  6983  000DF6  C02F  F019         	movff	_tmpTemp+2,___fttol@f1+2	;volatile
  6984  000DFA  ECA8  F009         	call	___fttol	;wreg free
  6985  000DFE  5017               	movf	?___fttol,w,c
  6986  000E00  0100               	movlb	0	; () banked
  6987  000E02  6FBB               	movwf	ADC_ISR@var2& (0+255),b
  6988                           
  6989                           ;adc.c: 132: var1 -= (double) var2;
  6990  000E04  C0BC  F0AA         	movff	ADC_ISR@var1,___ftsub@f1
  6991  000E08  C0BD  F0AB         	movff	ADC_ISR@var1+1,___ftsub@f1+1
  6992  000E0C  C0BE  F0AC         	movff	ADC_ISR@var1+2,___ftsub@f1+2
  6993  000E10  51BB               	movf	ADC_ISR@var2& (0+255),w,b
  6994  000E12  EC34  F00F         	call	___lbtoft
  6995  000E16  C01F  F0AD         	movff	?___lbtoft,___ftsub@f2
  6996  000E1A  C020  F0AE         	movff	?___lbtoft+1,___ftsub@f2+1
  6997  000E1E  C021  F0AF         	movff	?___lbtoft+2,___ftsub@f2+2
  6998  000E22  ECBA  F00D         	call	___ftsub	;wreg free
  6999  000E26  C0AA  F0BC         	movff	?___ftsub,ADC_ISR@var1
  7000  000E2A  C0AB  F0BD         	movff	?___ftsub+1,ADC_ISR@var1+1
  7001  000E2E  C0AC  F0BE         	movff	?___ftsub+2,ADC_ISR@var1+2
  7002                           
  7003                           ;adc.c: 134: tempAtual = (char) tmpTemp;
  7004  000E32  C02D  F017         	movff	_tmpTemp,___fttol@f1	;volatile
  7005  000E36  C02E  F018         	movff	_tmpTemp+1,___fttol@f1+1	;volatile
  7006  000E3A  C02F  F019         	movff	_tmpTemp+2,___fttol@f1+2	;volatile
  7007  000E3E  ECA8  F009         	call	___fttol	;wreg free
  7008  000E42  5017               	movf	?___fttol,w,c
  7009  000E44  6E47               	movwf	_tempAtual,c	;volatile
  7010                           
  7011                           ;adc.c: 136: if (var1 >= 0.5)
  7012  000E46  C0BC  F017         	movff	ADC_ISR@var1,___ftge@ff1
  7013  000E4A  C0BD  F018         	movff	ADC_ISR@var1+1,___ftge@ff1+1
  7014  000E4E  C0BE  F019         	movff	ADC_ISR@var1+2,___ftge@ff1+2
  7015  000E52  0E00               	movlw	0
  7016  000E54  6E1A               	movwf	___ftge@ff2,c
  7017  000E56  0E00               	movlw	0
  7018  000E58  6E1B               	movwf	___ftge@ff2+1,c
  7019  000E5A  0E3F               	movlw	63
  7020  000E5C  6E1C               	movwf	___ftge@ff2+2,c
  7021  000E5E  ECB7  F00B         	call	___ftge	;wreg free
  7022  000E62  B0D8               	btfsc	status,0,c
  7023                           
  7024                           ;adc.c: 137: tempAtual++;
  7025  000E64  2A47               	incf	_tempAtual,f,c	;volatile
  7026                           
  7027                           ;adc.c: 139: if (eusart_Tx_On == 0 && eusart_Tx_En == 0) {
  7028  000E66  5036               	movf	_eusart_Tx_On,w,c	;volatile
  7029  000E68  A4D8               	btfss	status,2,c
  7030  000E6A  D03A               	goto	i1u717_20
  7031  000E6C  5037               	movf	_eusart_Tx_En,w,c	;volatile
  7032  000E6E  A4D8               	btfss	status,2,c
  7033  000E70  D037               	goto	i1u717_20
  7034                           
  7035                           ;adc.c: 140: sprintf(strUSART, "\fTM=%2d_TA=%2d_AA=%1d\r", tempAtual, tempAlarme, alarme
      +                          );
  7036  000E72  0E6E               	movlw	low _strUSART
  7037  000E74  6E23               	movwf	i1sprintf@sp,c
  7038  000E76  0E00               	movlw	high _strUSART
  7039  000E78  6E24               	movwf	i1sprintf@sp+1,c
  7040  000E7A  0ED3               	movlw	low STR_1
  7041  000E7C  6E25               	movwf	i1sprintf@f,c
  7042  000E7E  0E7E               	movlw	high STR_1
  7043  000E80  6E26               	movwf	i1sprintf@f+1,c
  7044  000E82  C047  F027         	movff	_tempAtual,?i1_sprintf+4	;volatile
  7045  000E86  6A28               	clrf	?i1_sprintf+5,c
  7046  000E88  C048  F029         	movff	_tempAlarme,?i1_sprintf+6	;volatile
  7047  000E8C  6A2A               	clrf	?i1_sprintf+7,c
  7048  000E8E  C039  F02B         	movff	_alarme,?i1_sprintf+8	;volatile
  7049  000E92  6A2C               	clrf	?i1_sprintf+9,c
  7050  000E94  ECE2  F001         	call	i1_sprintf	;wreg free
  7051                           
  7052                           ;adc.c: 141: for (i = 0; strUSART[i] != '\0'; i++) {
  7053  000E98  0E00               	movlw	0
  7054  000E9A  6E41               	movwf	_i,c	;volatile
  7055  000E9C  D016               	goto	i1l518
  7056  000E9E                     
  7057                           ;adc.c: 142: EUSART1_Write(strUSART[i]);
  7058  000E9E  5041               	movf	_i,w,c	;volatile
  7059  000EA0  0D01               	mullw	1
  7060  000EA2  0E6E               	movlw	low _strUSART
  7061  000EA4  24F3               	addwf	prodl,w,c
  7062  000EA6  6ED9               	movwf	fsr2l,c
  7063  000EA8  0E00               	movlw	high _strUSART
  7064  000EAA  20F4               	addwfc	prodh,w,c
  7065  000EAC  6EDA               	movwf	fsr2h,c
  7066  000EAE  50DF               	movf	indf2,w,c
  7067  000EB0  EC1B  F010         	call	i1_EUSART1_Write
  7068                           
  7069                           ;adc.c: 143: strUSART[i] = '\0';
  7070  000EB4  5041               	movf	_i,w,c	;volatile
  7071  000EB6  0D01               	mullw	1
  7072  000EB8  0E6E               	movlw	low _strUSART
  7073  000EBA  24F3               	addwf	prodl,w,c
  7074  000EBC  6ED9               	movwf	fsr2l,c
  7075  000EBE  0E00               	movlw	high _strUSART
  7076  000EC0  20F4               	addwfc	prodh,w,c
  7077  000EC2  6EDA               	movwf	fsr2h,c
  7078  000EC4  0E00               	movlw	0
  7079  000EC6  6EDF               	movwf	indf2,c
  7080  000EC8  2A41               	incf	_i,f,c	;volatile
  7081  000ECA                     i1l518:
  7082  000ECA  5041               	movf	_i,w,c	;volatile
  7083  000ECC  0D01               	mullw	1
  7084  000ECE  0E6E               	movlw	low _strUSART
  7085  000ED0  24F3               	addwf	prodl,w,c
  7086  000ED2  6ED9               	movwf	fsr2l,c
  7087  000ED4  0E00               	movlw	high _strUSART
  7088  000ED6  20F4               	addwfc	prodh,w,c
  7089  000ED8  6EDA               	movwf	fsr2h,c
  7090  000EDA  50DF               	movf	indf2,w,c
  7091  000EDC  A4D8               	btfss	status,2,c
  7092  000EDE  D7DF               	goto	i1l519
  7093  000EE0                     i1u717_20:
  7094                           
  7095                           ;adc.c: 144: }
  7096                           ;adc.c: 145: }
  7097                           ;adc.c: 148: PIR1bits.ADIF = 0;
  7098  000EE0  9C9E               	bcf	3998,6,c	;volatile
  7099  000EE2  0012               	return		;funcret
  7100  000EE4                     __end_of_ADC_ISR:
  7101                           	opt stack 0
  7102                           pclatu	equ	0xFFB
  7103                           pclath	equ	0xFFA
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           intcon	equ	0xFF2
  7111                           intcon2	equ	0xFF1
  7112                           intcon3	equ	0xFF0
  7113                           indf0	equ	0xFEF
  7114                           postinc0	equ	0xFEE
  7115                           fsr0h	equ	0xFEA
  7116                           fsr0l	equ	0xFE9
  7117                           wreg	equ	0xFE8
  7118                           indf1	equ	0xFE7
  7119                           fsr1h	equ	0xFE2
  7120                           fsr1l	equ	0xFE1
  7121                           bsr	equ	0xFE0
  7122                           indf2	equ	0xFDF
  7123                           postinc2	equ	0xFDE
  7124                           postdec2	equ	0xFDD
  7125                           fsr2h	equ	0xFDA
  7126                           fsr2l	equ	0xFD9
  7127                           status	equ	0xFD8
  7128                           
  7129 ;; *************** function i1_sprintf *****************
  7130 ;; Defined at:
  7131 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;  sp              2   34[COMRAM] PTR unsigned char 
  7134 ;;		 -> strLCD(42), strUSART(42), 
  7135 ;;  f               2   36[COMRAM] PTR const unsigned char 
  7136 ;;		 -> STR_22(3), STR_21(3), STR_18(3), STR_15(4), 
  7137 ;;		 -> STR_14(4), STR_13(15), STR_12(15), STR_11(15), 
  7138 ;;		 -> STR_10(22), STR_9(22), STR_3(3), STR_1(23), 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  sprintf         4    0        struct .
  7141 ;;  sprintf         2   14[BANK0 ] int 
  7142 ;;  sprintf         2   12[BANK0 ] unsigned int 
  7143 ;;  sprintf         2   10[BANK0 ] unsigned int 
  7144 ;;  sprintf         2    8[BANK0 ] PTR void [1]
  7145 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  7146 ;;  sprintf         2    4[BANK0 ] PTR const unsigned char 
  7147 ;;		 -> sprintf@c(1), 
  7148 ;;  sprintf         1   16[BANK0 ] char 
  7149 ;;  sprintf         1    7[BANK0 ] unsigned char 
  7150 ;;  sprintf         1    6[BANK0 ] char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  2   34[COMRAM] int 
  7153 ;; Registers used:
  7154 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7160 ;;      Params:        10       0       0       0       0       0       0
  7161 ;;      Locals:         0      13       0       0       0       0       0
  7162 ;;      Temps:          0       4       0       0       0       0       0
  7163 ;;      Totals:        10      17       0       0       0       0       0
  7164 ;;Total ram usage:       27 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    5
  7167 ;; This function calls:
  7168 ;;		i1___lwdiv
  7169 ;;		i1___lwmod
  7170 ;;		i1___wmul
  7171 ;;		i1_isdigit
  7172 ;; This function is called by:
  7173 ;;		_ADC_ISR
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177                           	psect	text41
  7178  0003C4                     __ptext41:
  7179                           	opt stack 0
  7180  0003C4                     i1_sprintf:
  7181                           	opt stack 17
  7182                           
  7183                           ;doprnt.c: 494: va_list ap;
  7184                           ;doprnt.c: 499: signed char c;
  7185                           ;doprnt.c: 501: int width;
  7186                           ;doprnt.c: 506: signed char prec;
  7187                           ;doprnt.c: 508: unsigned char flag;
  7188                           ;doprnt.c: 523: union {
  7189                           ;doprnt.c: 524: unsigned long vd;
  7190                           ;doprnt.c: 525: double integ;
  7191                           ;doprnt.c: 526: } tmpval;
  7192                           ;doprnt.c: 528: unsigned int val;
  7193                           ;doprnt.c: 529: unsigned len;
  7194                           ;doprnt.c: 530: const char * cp;
  7195                           ;doprnt.c: 533: *ap = __va_start();
  7196                           
  7197                           ;incstack = 0
  7198  0003C4  0E27               	movlw	low (?i1_sprintf+4)
  7199  0003C6  0100               	movlb	0	; () banked
  7200  0003C8  6FB2               	movwf	i1sprintf@ap& (0+255),b
  7201  0003CA  0E00               	movlw	high (?i1_sprintf+4)
  7202  0003CC  6FB3               	movwf	(i1sprintf@ap+1)& (0+255),b
  7203                           
  7204                           ;doprnt.c: 536: while(c = *f++) {
  7205  0003CE  D157               	goto	i1u712_20
  7206  0003D0                     
  7207                           ; BSR set to: 0
  7208                           ;doprnt.c: 538: if(c != '%')
  7209                           
  7210                           ; BSR set to: 0
  7211  0003D0  0E25               	movlw	37
  7212  0003D2  19BA               	xorwf	i1sprintf@c& (0+255),w,b
  7213  0003D4  B4D8               	btfsc	status,2,c
  7214  0003D6  D009               	goto	i1l1087
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;doprnt.c: 540: {
  7218                           ;doprnt.c: 541: ((*sp++ = (c)));
  7219  0003D8  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7220  0003DC  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7221  0003E0  C0BA  FFDF         	movff	i1sprintf@c,indf2
  7222                           
  7223                           ; BSR set to: 0
  7224  0003E4  4A23               	infsnz	i1sprintf@sp,f,c
  7225  0003E6  2A24               	incf	i1sprintf@sp+1,f,c
  7226                           
  7227                           ;doprnt.c: 542: continue;
  7228  0003E8  D14A               	goto	i1u712_20
  7229  0003EA                     i1l1087:
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;doprnt.c: 543: }
  7233                           ;doprnt.c: 546: width = 0;
  7234                           
  7235                           ; BSR set to: 0
  7236  0003EA  0E00               	movlw	0
  7237  0003EC  6FB9               	movwf	(i1sprintf@width+1)& (0+255),b
  7238  0003EE  0E00               	movlw	0
  7239  0003F0  6FB8               	movwf	i1sprintf@width& (0+255),b
  7240                           
  7241                           ;doprnt.c: 548: flag = 0;
  7242  0003F2  0E00               	movlw	0
  7243  0003F4  6FB1               	movwf	i1sprintf@flag& (0+255),b
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7247  0003F6  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7248  0003FA  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7249  0003FE                     	if	0	;tblptru may be non-zero
  7250  0003FE                     	endif
  7251  0003FE                     	if	0	;tblptru may be non-zero
  7252  0003FE                     	endif
  7253  0003FE  0008               	tblrd		*
  7254  000400  50F5               	movf	tablat,w,c
  7255  000402  ECAB  F00F         	call	i1_isdigit
  7256  000406  A0D8               	btfss	status,0,c
  7257  000408  D081               	goto	i1l1091
  7258                           
  7259                           ;doprnt.c: 598: width = 0;
  7260  00040A  0E00               	movlw	0
  7261  00040C  0100               	movlb	0	; () banked
  7262  00040E  6FB9               	movwf	(i1sprintf@width+1)& (0+255),b
  7263  000410  0E00               	movlw	0
  7264  000412  6FB8               	movwf	i1sprintf@width& (0+255),b
  7265  000414                     
  7266                           ;doprnt.c: 600: width *= 10;
  7267                           
  7268                           ; BSR set to: 0
  7269  000414  C0B8  F017         	movff	i1sprintf@width,i1___wmul@multiplier
  7270  000418  C0B9  F018         	movff	i1sprintf@width+1,i1___wmul@multiplier+1
  7271  00041C  0E00               	movlw	0
  7272  00041E  6E1A               	movwf	i1___wmul@multiplicand+1,c
  7273  000420  0E0A               	movlw	10
  7274  000422  6E19               	movwf	i1___wmul@multiplicand,c
  7275  000424  EC21  F00F         	call	i1___wmul	;wreg free
  7276  000428  C017  F0B8         	movff	?i1___wmul,i1sprintf@width
  7277  00042C  C018  F0B9         	movff	?i1___wmul+1,i1sprintf@width+1
  7278                           
  7279                           ;doprnt.c: 601: width += *f++ - '0';
  7280  000430  0ED0               	movlw	208
  7281  000432  0100               	movlb	0	; () banked
  7282  000434  6FAA               	movwf	??i1_sprintf& (0+255),b
  7283  000436  0EFF               	movlw	255
  7284  000438  6FAB               	movwf	(??i1_sprintf+1)& (0+255),b
  7285  00043A  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7286  00043E  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7287  000442                     	if	0	;tblptru may be non-zero
  7288  000442                     	endif
  7289  000442                     	if	0	;tblptru may be non-zero
  7290  000442                     	endif
  7291  000442  0008               	tblrd		*
  7292  000444  50F5               	movf	tablat,w,c
  7293  000446  6FAC               	movwf	(??i1_sprintf+2)& (0+255),b
  7294  000448  6BAD               	clrf	(??i1_sprintf+3)& (0+255),b
  7295  00044A  51AA               	movf	??i1_sprintf& (0+255),w,b
  7296  00044C  27AC               	addwf	(??i1_sprintf+2)& (0+255),f,b
  7297  00044E  51AB               	movf	(??i1_sprintf+1)& (0+255),w,b
  7298  000450  23AD               	addwfc	(??i1_sprintf+3)& (0+255),f,b
  7299  000452  51AC               	movf	(??i1_sprintf+2)& (0+255),w,b
  7300  000454  27B8               	addwf	i1sprintf@width& (0+255),f,b
  7301  000456  51AD               	movf	(??i1_sprintf+3)& (0+255),w,b
  7302  000458  23B9               	addwfc	(i1sprintf@width+1)& (0+255),f,b
  7303                           
  7304                           ; BSR set to: 0
  7305  00045A  4A25               	infsnz	i1sprintf@f,f,c
  7306  00045C  2A26               	incf	i1sprintf@f+1,f,c
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7310  00045E  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7311  000462  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7312  000466                     	if	0	;tblptru may be non-zero
  7313  000466                     	endif
  7314  000466                     	if	0	;tblptru may be non-zero
  7315  000466                     	endif
  7316  000466  0008               	tblrd		*
  7317  000468  50F5               	movf	tablat,w,c
  7318  00046A  ECAB  F00F         	call	i1_isdigit
  7319  00046E  A0D8               	btfss	status,0,c
  7320  000470  D04D               	goto	i1l1091
  7321  000472  D7D0               	goto	i1l1089
  7322  000474                     
  7323                           ;doprnt.c: 757: if(width > len)
  7324  000474  0100               	movlb	0	; () banked
  7325  000476  51B8               	movf	i1sprintf@width& (0+255),w,b
  7326  000478  5DB4               	subwf	i1sprintf@len& (0+255),w,b
  7327  00047A  51B9               	movf	(i1sprintf@width+1)& (0+255),w,b
  7328  00047C  59B5               	subwfb	(i1sprintf@len+1)& (0+255),w,b
  7329  00047E  B0D8               	btfsc	status,0,c
  7330  000480  D005               	goto	i1l1098
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;doprnt.c: 758: width -= len;
  7334  000482  51B4               	movf	i1sprintf@len& (0+255),w,b
  7335  000484  5FB8               	subwf	i1sprintf@width& (0+255),f,b
  7336  000486  51B5               	movf	(i1sprintf@len+1)& (0+255),w,b
  7337  000488  5BB9               	subwfb	(i1sprintf@width+1)& (0+255),f,b
  7338  00048A  D00D               	goto	i1l1100
  7339  00048C                     i1l1098:
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;doprnt.c: 759: else
  7343                           ;doprnt.c: 760: width = 0;
  7344                           
  7345                           ; BSR set to: 0
  7346  00048C  0E00               	movlw	0
  7347  00048E  6FB9               	movwf	(i1sprintf@width+1)& (0+255),b
  7348  000490  0E00               	movlw	0
  7349  000492  6FB8               	movwf	i1sprintf@width& (0+255),b
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;doprnt.c: 764: while(width--)
  7353  000494  D008               	goto	i1l1100
  7354  000496                     i1l6176:
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;doprnt.c: 765: ((*sp++ = (' ')));
  7358  000496  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7359  00049A  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7360  00049E  0E20               	movlw	32
  7361  0004A0  6EDF               	movwf	indf2,c
  7362                           
  7363                           ; BSR set to: 0
  7364  0004A2  4A23               	infsnz	i1sprintf@sp,f,c
  7365  0004A4  2A24               	incf	i1sprintf@sp+1,f,c
  7366  0004A6                     i1l1100:
  7367                           
  7368                           ; BSR set to: 0
  7369                           
  7370                           ; BSR set to: 0
  7371  0004A6  07B8               	decf	i1sprintf@width& (0+255),f,b
  7372  0004A8  A0D8               	btfss	status,0,c
  7373  0004AA  07B9               	decf	(i1sprintf@width+1)& (0+255),f,b
  7374  0004AC  29B8               	incf	i1sprintf@width& (0+255),w,b
  7375  0004AE  E1F3               	bnz	i1l6176
  7376  0004B0  29B9               	incf	(i1sprintf@width+1)& (0+255),w,b
  7377  0004B2  B4D8               	btfsc	status,2,c
  7378  0004B4  D00F               	goto	i1l1103
  7379  0004B6  D7EF               	goto	i1l1101
  7380  0004B8                     i1l6182:
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  7384  0004B8  C0AE  FFD9         	movff	i1sprintf@cp,fsr2l
  7385  0004BC  C0AF  FFDA         	movff	i1sprintf@cp+1,fsr2h
  7386  0004C0  C023  FFE1         	movff	i1sprintf@sp,fsr1l
  7387  0004C4  C024  FFE2         	movff	i1sprintf@sp+1,fsr1h
  7388  0004C8  CFDF FFE7          	movff	indf2,indf1
  7389                           
  7390                           ; BSR set to: 0
  7391  0004CC  4BAE               	infsnz	i1sprintf@cp& (0+255),f,b
  7392  0004CE  2BAF               	incf	(i1sprintf@cp+1)& (0+255),f,b
  7393                           
  7394                           ; BSR set to: 0
  7395  0004D0  4A23               	infsnz	i1sprintf@sp,f,c
  7396  0004D2  2A24               	incf	i1sprintf@sp+1,f,c
  7397  0004D4                     i1l1103:
  7398                           
  7399                           ; BSR set to: 0
  7400                           
  7401                           ; BSR set to: 0
  7402  0004D4  07B4               	decf	i1sprintf@len& (0+255),f,b
  7403  0004D6  A0D8               	btfss	status,0,c
  7404  0004D8  07B5               	decf	(i1sprintf@len+1)& (0+255),f,b
  7405  0004DA  29B4               	incf	i1sprintf@len& (0+255),w,b
  7406  0004DC  E1ED               	bnz	i1l6182
  7407  0004DE  29B5               	incf	(i1sprintf@len+1)& (0+255),w,b
  7408  0004E0  B4D8               	btfsc	status,2,c
  7409  0004E2  D0CD               	goto	i1u712_20
  7410  0004E4  D7E9               	goto	i1l1104
  7411  0004E6                     
  7412                           ; BSR set to: 0
  7413                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7414                           
  7415                           ; BSR set to: 0
  7416  0004E6  C0B2  FFD9         	movff	i1sprintf@ap,fsr2l
  7417  0004EA  C0B3  FFDA         	movff	i1sprintf@ap+1,fsr2h
  7418  0004EE  50DF               	movf	indf2,w,c
  7419  0004F0  6FBA               	movwf	i1sprintf@c& (0+255),b
  7420                           
  7421                           ; BSR set to: 0
  7422  0004F2  0E02               	movlw	2
  7423  0004F4  27B2               	addwf	i1sprintf@ap& (0+255),f,b
  7424  0004F6  0E00               	movlw	0
  7425  0004F8  23B3               	addwfc	(i1sprintf@ap+1)& (0+255),f,b
  7426  0004FA                     
  7427                           ; BSR set to: 0
  7428                           ;doprnt.c: 805: cp = (char *)&c;
  7429                           
  7430                           ; BSR set to: 0
  7431  0004FA  0EBA               	movlw	low i1sprintf@c
  7432  0004FC  6FAE               	movwf	i1sprintf@cp& (0+255),b
  7433  0004FE  0E00               	movlw	high i1sprintf@c
  7434  000500  6FAF               	movwf	(i1sprintf@cp+1)& (0+255),b
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;doprnt.c: 806: len = 1;
  7438  000502  0E00               	movlw	0
  7439  000504  6FB5               	movwf	(i1sprintf@len+1)& (0+255),b
  7440  000506  0E01               	movlw	1
  7441  000508  6FB4               	movwf	i1sprintf@len& (0+255),b
  7442                           
  7443                           ;doprnt.c: 807: goto dostring;
  7444  00050A  D7B4               	goto	i1l1097
  7445  00050C                     i1l1091:
  7446                           
  7447                           ; BSR set to: 0
  7448  00050C  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7449  000510  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7450  000514  4A25               	infsnz	i1sprintf@f,f,c
  7451  000516  2A26               	incf	i1sprintf@f+1,f,c
  7452  000518                     	if	0	;tblptru may be non-zero
  7453  000518                     	endif
  7454  000518                     	if	0	;tblptru may be non-zero
  7455  000518                     	endif
  7456  000518  0008               	tblrd		*
  7457  00051A  CFF5 F0BA          	movff	tablat,i1sprintf@c
  7458  00051E  0100               	movlb	0	; () banked
  7459  000520  51BA               	movf	i1sprintf@c& (0+255),w,b
  7460                           
  7461                           ; Switch size 1, requested type "space"
  7462                           ; Number of cases is 4, Range of values is 0 to 105
  7463                           ; switch strategies available:
  7464                           ; Name         Instructions Cycles
  7465                           ; simple_byte           13     7 (average)
  7466                           ;	Chosen strategy is simple_byte
  7467  000522  0A00               	xorlw	0	; case 0
  7468  000524  B4D8               	btfsc	status,2,c
  7469  000526  D0B7               	goto	i1u713_20
  7470  000528  0A63               	xorlw	99	; case 99
  7471  00052A  B4D8               	btfsc	status,2,c
  7472  00052C  D7DC               	goto	i1l1106
  7473  00052E  0A07               	xorlw	7	; case 100
  7474  000530  B4D8               	btfsc	status,2,c
  7475  000532  D003               	goto	i1l1096
  7476  000534  0A0D               	xorlw	13	; case 105
  7477  000536  A4D8               	btfss	status,2,c
  7478  000538  D7E0               	goto	i1l1107
  7479  00053A                     i1l1096:
  7480                           
  7481                           ;doprnt.c: 1253: {
  7482                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7483                           
  7484                           ; BSR set to: 0
  7485  00053A  C0B2  FFD9         	movff	i1sprintf@ap,fsr2l
  7486  00053E  C0B3  FFDA         	movff	i1sprintf@ap+1,fsr2h
  7487  000542  CFDE F0B6          	movff	postinc2,i1sprintf@val
  7488  000546  CFDD F0B7          	movff	postdec2,i1sprintf@val+1
  7489  00054A  0E02               	movlw	2
  7490  00054C  0100               	movlb	0	; () banked
  7491  00054E  27B2               	addwf	i1sprintf@ap& (0+255),f,b
  7492  000550  0E00               	movlw	0
  7493  000552  23B3               	addwfc	(i1sprintf@ap+1)& (0+255),f,b
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;doprnt.c: 1261: if((int)val < 0) {
  7497  000554  AFB7               	btfss	(i1sprintf@val+1)& (0+255),7,b
  7498  000556  D006               	goto	i1l1108
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;doprnt.c: 1262: flag |= 0x03;
  7502  000558  0E03               	movlw	3
  7503  00055A  13B1               	iorwf	i1sprintf@flag& (0+255),f,b
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;doprnt.c: 1263: val = -val;
  7507  00055C  6DB6               	negf	i1sprintf@val& (0+255),b
  7508  00055E  1FB7               	comf	(i1sprintf@val+1)& (0+255),f,b
  7509  000560  B0D8               	btfsc	status,0,c
  7510  000562  2BB7               	incf	(i1sprintf@val+1)& (0+255),f,b
  7511  000564                     i1l1108:
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;doprnt.c: 1264: }
  7515                           ;doprnt.c: 1266: }
  7516                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7517                           
  7518                           ; BSR set to: 0
  7519  000564  0E01               	movlw	1
  7520  000566  6FBA               	movwf	i1sprintf@c& (0+255),b
  7521  000568                     i1l6214:
  7522                           
  7523                           ; BSR set to: 0
  7524  000568  0E05               	movlw	5
  7525  00056A  19BA               	xorwf	i1sprintf@c& (0+255),w,b
  7526  00056C  B4D8               	btfsc	status,2,c
  7527  00056E  D012               	goto	i1u705_20
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;doprnt.c: 1306: if(val < dpowers[c])
  7531                           
  7532                           ; BSR set to: 0
  7533                           
  7534                           ; BSR set to: 0
  7535  000570  51BA               	movf	i1sprintf@c& (0+255),w,b
  7536  000572  0D02               	mullw	2
  7537  000574  0EC9               	movlw	low _dpowers
  7538  000576  24F3               	addwf	prodl,w,c
  7539  000578  6EF6               	movwf	tblptrl,c
  7540  00057A  0E7E               	movlw	high _dpowers
  7541  00057C  20F4               	addwfc	prodh,w,c
  7542  00057E  6EF7               	movwf	tblptrh,c
  7543  000580                     	if	0	;There are less than 3 active tblptr bytes
  7544  000580                     	endif
  7545  000580  0009               	tblrd		*+
  7546  000582  50F5               	movf	tablat,w,c
  7547  000584  5DB6               	subwf	i1sprintf@val& (0+255),w,b
  7548  000586  0009               	tblrd		*+
  7549  000588  50F5               	movf	tablat,w,c
  7550  00058A  59B7               	subwfb	(i1sprintf@val+1)& (0+255),w,b
  7551  00058C  A0D8               	btfss	status,0,c
  7552  00058E  D002               	goto	i1u705_20
  7553                           
  7554                           ; BSR set to: 0
  7555                           
  7556                           ; BSR set to: 0
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;doprnt.c: 1307: break;
  7560  000590  2BBA               	incf	i1sprintf@c& (0+255),f,b
  7561  000592  D7EA               	goto	i1l6214
  7562  000594                     i1u705_20:
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7566                           
  7567                           ; BSR set to: 0
  7568  000594  51B8               	movf	i1sprintf@width& (0+255),w,b
  7569  000596  11B9               	iorwf	(i1sprintf@width+1)& (0+255),w,b
  7570  000598  B4D8               	btfsc	status,2,c
  7571  00059A  D009               	goto	i1l1112
  7572                           
  7573                           ; BSR set to: 0
  7574  00059C  C0B1  F0AA         	movff	i1sprintf@flag,??i1_sprintf
  7575  0005A0  0E03               	movlw	3
  7576  0005A2  17AA               	andwf	??i1_sprintf& (0+255),f,b
  7577  0005A4  B4D8               	btfsc	status,2,c
  7578  0005A6  D003               	goto	i1l1112
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;doprnt.c: 1346: width--;
  7582  0005A8  07B8               	decf	i1sprintf@width& (0+255),f,b
  7583  0005AA  A0D8               	btfss	status,0,c
  7584  0005AC  07B9               	decf	(i1sprintf@width+1)& (0+255),f,b
  7585  0005AE                     i1l1112:
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;doprnt.c: 1381: if(width > c)
  7589                           
  7590                           ; BSR set to: 0
  7591  0005AE  0E80               	movlw	128
  7592  0005B0  BFBA               	btfsc	i1sprintf@c& (0+255),7,b
  7593  0005B2  0E7F               	movlw	127
  7594  0005B4  6FAA               	movwf	??i1_sprintf& (0+255),b
  7595  0005B6  51B8               	movf	i1sprintf@width& (0+255),w,b
  7596  0005B8  5DBA               	subwf	i1sprintf@c& (0+255),w,b
  7597  0005BA  51B9               	movf	(i1sprintf@width+1)& (0+255),w,b
  7598  0005BC  0A80               	xorlw	128
  7599  0005BE  59AA               	subwfb	??i1_sprintf& (0+255),w,b
  7600  0005C0  B0D8               	btfsc	status,0,c
  7601  0005C2  D007               	goto	i1l1113
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;doprnt.c: 1382: width -= c;
  7605  0005C4  51BA               	movf	i1sprintf@c& (0+255),w,b
  7606  0005C6  5FB8               	subwf	i1sprintf@width& (0+255),f,b
  7607  0005C8  0E00               	movlw	0
  7608  0005CA  BFBA               	btfsc	i1sprintf@c& (0+255),7,b
  7609  0005CC  0EFF               	movlw	255
  7610  0005CE  5BB9               	subwfb	(i1sprintf@width+1)& (0+255),f,b
  7611  0005D0  D004               	goto	i1l1114
  7612  0005D2                     i1l1113:
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;doprnt.c: 1383: else
  7616                           ;doprnt.c: 1384: width = 0;
  7617                           
  7618                           ; BSR set to: 0
  7619  0005D2  0E00               	movlw	0
  7620  0005D4  6FB9               	movwf	(i1sprintf@width+1)& (0+255),b
  7621  0005D6  0E00               	movlw	0
  7622  0005D8  6FB8               	movwf	i1sprintf@width& (0+255),b
  7623  0005DA                     i1l1114:
  7624                           
  7625                           ; BSR set to: 0
  7626                           ;doprnt.c: 1422: {
  7627                           ;doprnt.c: 1424: if(width
  7628                           ;doprnt.c: 1428: )
  7629                           
  7630                           ; BSR set to: 0
  7631  0005DA  51B8               	movf	i1sprintf@width& (0+255),w,b
  7632  0005DC  11B9               	iorwf	(i1sprintf@width+1)& (0+255),w,b
  7633  0005DE  B4D8               	btfsc	status,2,c
  7634  0005E0  D00F               	goto	i1u710_20
  7635  0005E2                     i1u709_20:
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7639                           
  7640                           ; BSR set to: 0
  7641                           
  7642                           ;doprnt.c: 1429: do
  7643  0005E2  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7644  0005E6  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7645  0005EA  0E20               	movlw	32
  7646  0005EC  6EDF               	movwf	indf2,c
  7647                           
  7648                           ; BSR set to: 0
  7649  0005EE  4A23               	infsnz	i1sprintf@sp,f,c
  7650  0005F0  2A24               	incf	i1sprintf@sp+1,f,c
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;doprnt.c: 1431: while(--width);
  7654  0005F2  07B8               	decf	i1sprintf@width& (0+255),f,b
  7655  0005F4  A0D8               	btfss	status,0,c
  7656  0005F6  07B9               	decf	(i1sprintf@width+1)& (0+255),f,b
  7657  0005F8  51B8               	movf	i1sprintf@width& (0+255),w,b
  7658  0005FA  11B9               	iorwf	(i1sprintf@width+1)& (0+255),w,b
  7659  0005FC  A4D8               	btfss	status,2,c
  7660  0005FE  D7F1               	goto	i1u709_20
  7661  000600                     i1u710_20:
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;doprnt.c: 1438: if(flag & 0x03)
  7665                           
  7666                           ; BSR set to: 0
  7667                           
  7668                           ; BSR set to: 0
  7669  000600  C0B1  F0AA         	movff	i1sprintf@flag,??i1_sprintf
  7670  000604  0E03               	movlw	3
  7671  000606  17AA               	andwf	??i1_sprintf& (0+255),f,b
  7672  000608  B4D8               	btfsc	status,2,c
  7673  00060A  D008               	goto	i1l1118
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7677  00060C  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7678  000610  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7679  000614  0E2D               	movlw	45
  7680  000616  6EDF               	movwf	indf2,c
  7681                           
  7682                           ; BSR set to: 0
  7683  000618  4A23               	infsnz	i1sprintf@sp,f,c
  7684  00061A  2A24               	incf	i1sprintf@sp+1,f,c
  7685  00061C                     i1l1118:
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;doprnt.c: 1469: }
  7689                           ;doprnt.c: 1472: prec = c;
  7690                           
  7691                           ; BSR set to: 0
  7692  00061C  C0BA  F0B0         	movff	i1sprintf@c,i1sprintf@prec
  7693                           
  7694                           ;doprnt.c: 1474: while(prec--) {
  7695  000620  D02A               	goto	i1l1119
  7696  000622                     
  7697                           ; BSR set to: 0
  7698                           ;doprnt.c: 1478: {
  7699                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7700                           
  7701                           ; BSR set to: 0
  7702  000622  51B0               	movf	i1sprintf@prec& (0+255),w,b
  7703  000624  0D02               	mullw	2
  7704  000626  0EC9               	movlw	low _dpowers
  7705  000628  24F3               	addwf	prodl,w,c
  7706  00062A  6EF6               	movwf	tblptrl,c
  7707  00062C  0E7E               	movlw	high _dpowers
  7708  00062E  20F4               	addwfc	prodh,w,c
  7709  000630  6EF7               	movwf	tblptrh,c
  7710  000632                     	if	0	;There are less than 3 active tblptr bytes
  7711  000632                     	endif
  7712  000632  0009               	tblrd		*+
  7713  000634  CFF5 F019          	movff	tablat,i1___lwdiv@divisor
  7714  000638  000A               	tblrd		*-
  7715  00063A  CFF5 F01A          	movff	tablat,i1___lwdiv@divisor+1
  7716  00063E  C0B6  F017         	movff	i1sprintf@val,i1___lwdiv@dividend
  7717  000642  C0B7  F018         	movff	i1sprintf@val+1,i1___lwdiv@dividend+1
  7718  000646  ECE7  F00C         	call	i1___lwdiv	;wreg free
  7719  00064A  C017  F01E         	movff	?i1___lwdiv,i1___lwmod@dividend
  7720  00064E  C018  F01F         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
  7721  000652  0E00               	movlw	0
  7722  000654  6E21               	movwf	i1___lwmod@divisor+1,c
  7723  000656  0E0A               	movlw	10
  7724  000658  6E20               	movwf	i1___lwmod@divisor,c
  7725  00065A  EC99  F00D         	call	i1___lwmod	;wreg free
  7726  00065E  501E               	movf	?i1___lwmod,w,c
  7727  000660  0F30               	addlw	48
  7728  000662  0100               	movlb	0	; () banked
  7729  000664  6FBA               	movwf	i1sprintf@c& (0+255),b
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;doprnt.c: 1523: }
  7733                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7734  000666  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7735  00066A  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7736  00066E  C0BA  FFDF         	movff	i1sprintf@c,indf2
  7737                           
  7738                           ; BSR set to: 0
  7739  000672  4A23               	infsnz	i1sprintf@sp,f,c
  7740  000674  2A24               	incf	i1sprintf@sp+1,f,c
  7741  000676                     i1l1119:
  7742                           
  7743                           ; BSR set to: 0
  7744                           
  7745                           ; BSR set to: 0
  7746  000676  07B0               	decf	i1sprintf@prec& (0+255),f,b
  7747  000678  29B0               	incf	i1sprintf@prec& (0+255),w,b
  7748  00067A  A4D8               	btfss	status,2,c
  7749  00067C  D7D2               	goto	i1l1120
  7750  00067E                     i1u712_20:
  7751                           
  7752                           ; BSR set to: 0
  7753                           
  7754                           ; BSR set to: 0
  7755                           
  7756                           ; BSR set to: 0
  7757  00067E  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7758  000682  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7759  000686  4A25               	infsnz	i1sprintf@f,f,c
  7760  000688  2A26               	incf	i1sprintf@f+1,f,c
  7761  00068A                     	if	0	;tblptru may be non-zero
  7762  00068A                     	endif
  7763  00068A                     	if	0	;tblptru may be non-zero
  7764  00068A                     	endif
  7765  00068A  0008               	tblrd		*
  7766  00068C  CFF5 F0BA          	movff	tablat,i1sprintf@c
  7767  000690  51BA               	movf	i1sprintf@c& (0+255),w,b
  7768  000692  A4D8               	btfss	status,2,c
  7769  000694  D69D               	goto	i1l1086
  7770  000696                     i1u713_20:
  7771                           
  7772                           ;doprnt.c: 1538: *sp = 0;
  7773                           
  7774                           ; BSR set to: 0
  7775                           
  7776                           ;doprnt.c: 1525: }
  7777                           ;doprnt.c: 1533: }
  7778                           ;doprnt.c: 1535: alldone:
  7779                           
  7780                           ; BSR set to: 0
  7781  000696  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7782  00069A  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7783  00069E  0E00               	movlw	0
  7784  0006A0  6EDF               	movwf	indf2,c
  7785  0006A2  0012               	return	
  7786  0006A4                     __end_ofi1_sprintf:
  7787                           	opt stack 0
  7788                           pclatu	equ	0xFFB
  7789                           pclath	equ	0xFFA
  7790                           tblptru	equ	0xFF8
  7791                           tblptrh	equ	0xFF7
  7792                           tblptrl	equ	0xFF6
  7793                           tablat	equ	0xFF5
  7794                           prodh	equ	0xFF4
  7795                           prodl	equ	0xFF3
  7796                           intcon	equ	0xFF2
  7797                           intcon2	equ	0xFF1
  7798                           intcon3	equ	0xFF0
  7799                           indf0	equ	0xFEF
  7800                           postinc0	equ	0xFEE
  7801                           fsr0h	equ	0xFEA
  7802                           fsr0l	equ	0xFE9
  7803                           wreg	equ	0xFE8
  7804                           indf1	equ	0xFE7
  7805                           fsr1h	equ	0xFE2
  7806                           fsr1l	equ	0xFE1
  7807                           bsr	equ	0xFE0
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815 ;; *************** function i1_isdigit *****************
  7816 ;; Defined at:
  7817 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;  c               1    wreg     unsigned char 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  c               1   24[COMRAM] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;		None               void
  7824 ;; Registers used:
  7825 ;;		wreg, status,2, status,0
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7831 ;;      Params:         0       0       0       0       0       0       0
  7832 ;;      Locals:         2       0       0       0       0       0       0
  7833 ;;      Temps:          1       0       0       0       0       0       0
  7834 ;;      Totals:         3       0       0       0       0       0       0
  7835 ;;Total ram usage:        3 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    4
  7838 ;; This function calls:
  7839 ;;		Nothing
  7840 ;; This function is called by:
  7841 ;;		i1_sprintf
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text42
  7846  001F56                     __ptext42:
  7847                           	opt stack 0
  7848  001F56                     i1_isdigit:
  7849                           	opt stack 17
  7850                           
  7851                           ;incstack = 0
  7852                           ;i1isdigit@c stored from wreg
  7853  001F56  6E19               	movwf	i1isdigit@c,c
  7854  001F58  0E00               	movlw	0
  7855  001F5A  6E18               	movwf	i1_isdigit$2577,c
  7856  001F5C  0E3A               	movlw	58
  7857  001F5E  6019               	cpfslt	i1isdigit@c,c
  7858  001F60  D005               	goto	i1l1453
  7859  001F62  0E2F               	movlw	47
  7860  001F64  6419               	cpfsgt	i1isdigit@c,c
  7861  001F66  D002               	goto	i1l1453
  7862  001F68  0E01               	movlw	1
  7863  001F6A  6E18               	movwf	i1_isdigit$2577,c
  7864  001F6C                     i1l1453:
  7865  001F6C  C018  F017         	movff	i1_isdigit$2577,??i1_isdigit
  7866  001F70  3017               	rrcf	??i1_isdigit,w,c
  7867  001F72  0012               	return	
  7868  001F74                     __end_ofi1_isdigit:
  7869                           	opt stack 0
  7870                           pclatu	equ	0xFFB
  7871                           pclath	equ	0xFFA
  7872                           tblptru	equ	0xFF8
  7873                           tblptrh	equ	0xFF7
  7874                           tblptrl	equ	0xFF6
  7875                           tablat	equ	0xFF5
  7876                           prodh	equ	0xFF4
  7877                           prodl	equ	0xFF3
  7878                           intcon	equ	0xFF2
  7879                           intcon2	equ	0xFF1
  7880                           intcon3	equ	0xFF0
  7881                           indf0	equ	0xFEF
  7882                           postinc0	equ	0xFEE
  7883                           fsr0h	equ	0xFEA
  7884                           fsr0l	equ	0xFE9
  7885                           wreg	equ	0xFE8
  7886                           indf1	equ	0xFE7
  7887                           fsr1h	equ	0xFE2
  7888                           fsr1l	equ	0xFE1
  7889                           bsr	equ	0xFE0
  7890                           indf2	equ	0xFDF
  7891                           postinc2	equ	0xFDE
  7892                           postdec2	equ	0xFDD
  7893                           fsr2h	equ	0xFDA
  7894                           fsr2l	equ	0xFD9
  7895                           status	equ	0xFD8
  7896                           
  7897 ;; *************** function i1___wmul *****************
  7898 ;; Defined at:
  7899 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  7900 ;; Parameters:    Size  Location     Type
  7901 ;;  multiplier      2   22[COMRAM] unsigned int 
  7902 ;;  multiplicand    2   24[COMRAM] unsigned int 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;  __wmul          2   26[COMRAM] unsigned int 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  2   22[COMRAM] unsigned int 
  7907 ;; Registers used:
  7908 ;;		wreg, status,2, status,0, prodl, prodh
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7914 ;;      Params:         4       0       0       0       0       0       0
  7915 ;;      Locals:         2       0       0       0       0       0       0
  7916 ;;      Temps:          0       0       0       0       0       0       0
  7917 ;;      Totals:         6       0       0       0       0       0       0
  7918 ;;Total ram usage:        6 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    4
  7921 ;; This function calls:
  7922 ;;		Nothing
  7923 ;; This function is called by:
  7924 ;;		i1_sprintf
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text43
  7929  001E42                     __ptext43:
  7930                           	opt stack 0
  7931  001E42                     i1___wmul:
  7932                           	opt stack 17
  7933                           
  7934                           ;incstack = 0
  7935  001E42  5017               	movf	i1___wmul@multiplier,w,c
  7936  001E44  0219               	mulwf	i1___wmul@multiplicand,c
  7937  001E46  CFF3 F01B          	movff	prodl,i1___wmul@product
  7938  001E4A  CFF4 F01C          	movff	prodh,i1___wmul@product+1
  7939  001E4E  5017               	movf	i1___wmul@multiplier,w,c
  7940  001E50  021A               	mulwf	i1___wmul@multiplicand+1,c
  7941  001E52  50F3               	movf	prodl,w,c
  7942  001E54  261C               	addwf	i1___wmul@product+1,f,c
  7943  001E56  5018               	movf	i1___wmul@multiplier+1,w,c
  7944  001E58  0219               	mulwf	i1___wmul@multiplicand,c
  7945  001E5A  50F3               	movf	prodl,w,c
  7946  001E5C  261C               	addwf	i1___wmul@product+1,f,c
  7947  001E5E  C01B  F017         	movff	i1___wmul@product,?i1___wmul
  7948  001E62  C01C  F018         	movff	i1___wmul@product+1,?i1___wmul+1
  7949  001E66  0012               	return	
  7950  001E68                     __end_ofi1___wmul:
  7951                           	opt stack 0
  7952                           pclatu	equ	0xFFB
  7953                           pclath	equ	0xFFA
  7954                           tblptru	equ	0xFF8
  7955                           tblptrh	equ	0xFF7
  7956                           tblptrl	equ	0xFF6
  7957                           tablat	equ	0xFF5
  7958                           prodh	equ	0xFF4
  7959                           prodl	equ	0xFF3
  7960                           intcon	equ	0xFF2
  7961                           intcon2	equ	0xFF1
  7962                           intcon3	equ	0xFF0
  7963                           indf0	equ	0xFEF
  7964                           postinc0	equ	0xFEE
  7965                           fsr0h	equ	0xFEA
  7966                           fsr0l	equ	0xFE9
  7967                           wreg	equ	0xFE8
  7968                           indf1	equ	0xFE7
  7969                           fsr1h	equ	0xFE2
  7970                           fsr1l	equ	0xFE1
  7971                           bsr	equ	0xFE0
  7972                           indf2	equ	0xFDF
  7973                           postinc2	equ	0xFDE
  7974                           postdec2	equ	0xFDD
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function i1___lwmod *****************
  7980 ;; Defined at:
  7981 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  dividend        2   29[COMRAM] unsigned int 
  7984 ;;  divisor         2   31[COMRAM] unsigned int 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  __lwmod         1   33[COMRAM] unsigned char 
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  2   29[COMRAM] unsigned int 
  7989 ;; Registers used:
  7990 ;;		wreg, status,2, status,0
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7996 ;;      Params:         4       0       0       0       0       0       0
  7997 ;;      Locals:         1       0       0       0       0       0       0
  7998 ;;      Temps:          0       0       0       0       0       0       0
  7999 ;;      Totals:         5       0       0       0       0       0       0
  8000 ;;Total ram usage:        5 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:    4
  8003 ;; This function calls:
  8004 ;;		Nothing
  8005 ;; This function is called by:
  8006 ;;		i1_sprintf
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           	psect	text44
  8011  001B32                     __ptext44:
  8012                           	opt stack 0
  8013  001B32                     i1___lwmod:
  8014                           	opt stack 17
  8015                           
  8016                           ;incstack = 0
  8017  001B32  5020               	movf	i1___lwmod@divisor,w,c
  8018  001B34  1021               	iorwf	i1___lwmod@divisor+1,w,c
  8019  001B36  B4D8               	btfsc	status,2,c
  8020  001B38  D018               	goto	i1l1547
  8021  001B3A  0E01               	movlw	1
  8022  001B3C  6E22               	movwf	i1___lwmod@counter,c
  8023  001B3E  D004               	goto	i1l1542
  8024  001B40  90D8               	bcf	status,0,c
  8025  001B42  3620               	rlcf	i1___lwmod@divisor,f,c
  8026  001B44  3621               	rlcf	i1___lwmod@divisor+1,f,c
  8027  001B46  2A22               	incf	i1___lwmod@counter,f,c
  8028  001B48                     i1l1542:
  8029  001B48  AE21               	btfss	i1___lwmod@divisor+1,7,c
  8030  001B4A  D7FA               	goto	i1l1543
  8031  001B4C                     i1u650_20:
  8032  001B4C  5020               	movf	i1___lwmod@divisor,w,c
  8033  001B4E  5C1E               	subwf	i1___lwmod@dividend,w,c
  8034  001B50  5021               	movf	i1___lwmod@divisor+1,w,c
  8035  001B52  581F               	subwfb	i1___lwmod@dividend+1,w,c
  8036  001B54  A0D8               	btfss	status,0,c
  8037  001B56  D004               	goto	i1l1546
  8038  001B58  5020               	movf	i1___lwmod@divisor,w,c
  8039  001B5A  5E1E               	subwf	i1___lwmod@dividend,f,c
  8040  001B5C  5021               	movf	i1___lwmod@divisor+1,w,c
  8041  001B5E  5A1F               	subwfb	i1___lwmod@dividend+1,f,c
  8042  001B60                     i1l1546:
  8043  001B60  90D8               	bcf	status,0,c
  8044  001B62  3221               	rrcf	i1___lwmod@divisor+1,f,c
  8045  001B64  3220               	rrcf	i1___lwmod@divisor,f,c
  8046  001B66  2E22               	decfsz	i1___lwmod@counter,f,c
  8047  001B68  D7F1               	goto	i1u650_20
  8048  001B6A                     i1l1547:
  8049  001B6A  C01E  F01E         	movff	i1___lwmod@dividend,?i1___lwmod
  8050  001B6E  C01F  F01F         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
  8051  001B72  0012               	return		;funcret
  8052  001B74                     __end_ofi1___lwmod:
  8053                           	opt stack 0
  8054                           pclatu	equ	0xFFB
  8055                           pclath	equ	0xFFA
  8056                           tblptru	equ	0xFF8
  8057                           tblptrh	equ	0xFF7
  8058                           tblptrl	equ	0xFF6
  8059                           tablat	equ	0xFF5
  8060                           prodh	equ	0xFF4
  8061                           prodl	equ	0xFF3
  8062                           intcon	equ	0xFF2
  8063                           intcon2	equ	0xFF1
  8064                           intcon3	equ	0xFF0
  8065                           indf0	equ	0xFEF
  8066                           postinc0	equ	0xFEE
  8067                           fsr0h	equ	0xFEA
  8068                           fsr0l	equ	0xFE9
  8069                           wreg	equ	0xFE8
  8070                           indf1	equ	0xFE7
  8071                           fsr1h	equ	0xFE2
  8072                           fsr1l	equ	0xFE1
  8073                           bsr	equ	0xFE0
  8074                           indf2	equ	0xFDF
  8075                           postinc2	equ	0xFDE
  8076                           postdec2	equ	0xFDD
  8077                           fsr2h	equ	0xFDA
  8078                           fsr2l	equ	0xFD9
  8079                           status	equ	0xFD8
  8080                           
  8081 ;; *************** function i1___lwdiv *****************
  8082 ;; Defined at:
  8083 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  dividend        2   22[COMRAM] unsigned int 
  8086 ;;  divisor         2   24[COMRAM] unsigned int 
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;  __lwdiv         2   27[COMRAM] unsigned int 
  8089 ;;  __lwdiv         1   26[COMRAM] unsigned char 
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  2   22[COMRAM] unsigned int 
  8092 ;; Registers used:
  8093 ;;		wreg, status,2, status,0
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8099 ;;      Params:         4       0       0       0       0       0       0
  8100 ;;      Locals:         3       0       0       0       0       0       0
  8101 ;;      Temps:          0       0       0       0       0       0       0
  8102 ;;      Totals:         7       0       0       0       0       0       0
  8103 ;;Total ram usage:        7 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:    4
  8106 ;; This function calls:
  8107 ;;		Nothing
  8108 ;; This function is called by:
  8109 ;;		i1_sprintf
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113                           	psect	text45
  8114  0019CE                     __ptext45:
  8115                           	opt stack 0
  8116  0019CE                     i1___lwdiv:
  8117                           	opt stack 17
  8118                           
  8119                           ;incstack = 0
  8120  0019CE  0E00               	movlw	0
  8121  0019D0  6E1D               	movwf	i1___lwdiv@quotient+1,c
  8122  0019D2  0E00               	movlw	0
  8123  0019D4  6E1C               	movwf	i1___lwdiv@quotient,c
  8124  0019D6  5019               	movf	i1___lwdiv@divisor,w,c
  8125  0019D8  101A               	iorwf	i1___lwdiv@divisor+1,w,c
  8126  0019DA  B4D8               	btfsc	status,2,c
  8127  0019DC  D01C               	goto	i1l1537
  8128  0019DE  0E01               	movlw	1
  8129  0019E0  6E1B               	movwf	i1___lwdiv@counter,c
  8130  0019E2  D004               	goto	i1l1532
  8131  0019E4  90D8               	bcf	status,0,c
  8132  0019E6  3619               	rlcf	i1___lwdiv@divisor,f,c
  8133  0019E8  361A               	rlcf	i1___lwdiv@divisor+1,f,c
  8134  0019EA  2A1B               	incf	i1___lwdiv@counter,f,c
  8135  0019EC                     i1l1532:
  8136  0019EC  AE1A               	btfss	i1___lwdiv@divisor+1,7,c
  8137  0019EE  D7FA               	goto	i1l1533
  8138  0019F0                     i1u647_20:
  8139  0019F0  90D8               	bcf	status,0,c
  8140  0019F2  361C               	rlcf	i1___lwdiv@quotient,f,c
  8141  0019F4  361D               	rlcf	i1___lwdiv@quotient+1,f,c
  8142  0019F6  5019               	movf	i1___lwdiv@divisor,w,c
  8143  0019F8  5C17               	subwf	i1___lwdiv@dividend,w,c
  8144  0019FA  501A               	movf	i1___lwdiv@divisor+1,w,c
  8145  0019FC  5818               	subwfb	i1___lwdiv@dividend+1,w,c
  8146  0019FE  A0D8               	btfss	status,0,c
  8147  001A00  D005               	goto	i1l1536
  8148  001A02  5019               	movf	i1___lwdiv@divisor,w,c
  8149  001A04  5E17               	subwf	i1___lwdiv@dividend,f,c
  8150  001A06  501A               	movf	i1___lwdiv@divisor+1,w,c
  8151  001A08  5A18               	subwfb	i1___lwdiv@dividend+1,f,c
  8152  001A0A  801C               	bsf	i1___lwdiv@quotient,0,c
  8153  001A0C                     i1l1536:
  8154  001A0C  90D8               	bcf	status,0,c
  8155  001A0E  321A               	rrcf	i1___lwdiv@divisor+1,f,c
  8156  001A10  3219               	rrcf	i1___lwdiv@divisor,f,c
  8157  001A12  2E1B               	decfsz	i1___lwdiv@counter,f,c
  8158  001A14  D7ED               	goto	i1u647_20
  8159  001A16                     i1l1537:
  8160  001A16  C01C  F017         	movff	i1___lwdiv@quotient,?i1___lwdiv
  8161  001A1A  C01D  F018         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  8162  001A1E  0012               	return		;funcret
  8163  001A20                     __end_ofi1___lwdiv:
  8164                           	opt stack 0
  8165                           pclatu	equ	0xFFB
  8166                           pclath	equ	0xFFA
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           intcon2	equ	0xFF1
  8175                           intcon3	equ	0xFF0
  8176                           indf0	equ	0xFEF
  8177                           postinc0	equ	0xFEE
  8178                           fsr0h	equ	0xFEA
  8179                           fsr0l	equ	0xFE9
  8180                           wreg	equ	0xFE8
  8181                           indf1	equ	0xFE7
  8182                           fsr1h	equ	0xFE2
  8183                           fsr1l	equ	0xFE1
  8184                           bsr	equ	0xFE0
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192 ;; *************** function i1_EUSART1_Write *****************
  8193 ;; Defined at:
  8194 ;;		line 103 in file "mcc_generated_files/eusart1.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;  txData          1    wreg     unsigned char 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  txData          1   22[COMRAM] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  1    wreg      void 
  8201 ;; Registers used:
  8202 ;;		wreg
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8208 ;;      Params:         0       0       0       0       0       0       0
  8209 ;;      Locals:         1       0       0       0       0       0       0
  8210 ;;      Temps:          0       0       0       0       0       0       0
  8211 ;;      Totals:         1       0       0       0       0       0       0
  8212 ;;Total ram usage:        1 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    4
  8215 ;; This function calls:
  8216 ;;		Nothing
  8217 ;; This function is called by:
  8218 ;;		_ADC_ISR
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text46
  8223  002036                     __ptext46:
  8224                           	opt stack 0
  8225  002036                     i1_EUSART1_Write:
  8226                           	opt stack 18
  8227                           
  8228                           ;incstack = 0
  8229                           ;i1EUSART1_Write@txData stored from wreg
  8230  002036  6E17               	movwf	i1EUSART1_Write@txData,c
  8231  002038                     
  8232                           ;eusart1.c: 104: while (!PIR1bits.TX1IF);
  8233  002038  A89E               	btfss	3998,4,c	;volatile
  8234  00203A  D7FE               	goto	i1l6144
  8235                           
  8236                           ;eusart1.c: 105: TXREG1 = txData;
  8237  00203C  C017  FFAD         	movff	i1EUSART1_Write@txData,4013	;volatile
  8238  002040  0012               	return		;funcret
  8239  002042                     __end_ofi1_EUSART1_Write:
  8240                           	opt stack 0
  8241                           pclatu	equ	0xFFB
  8242                           pclath	equ	0xFFA
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           intcon	equ	0xFF2
  8250                           intcon2	equ	0xFF1
  8251                           intcon3	equ	0xFF0
  8252                           indf0	equ	0xFEF
  8253                           postinc0	equ	0xFEE
  8254                           fsr0h	equ	0xFEA
  8255                           fsr0l	equ	0xFE9
  8256                           wreg	equ	0xFE8
  8257                           indf1	equ	0xFE7
  8258                           fsr1h	equ	0xFE2
  8259                           fsr1l	equ	0xFE1
  8260                           bsr	equ	0xFE0
  8261                           indf2	equ	0xFDF
  8262                           postinc2	equ	0xFDE
  8263                           postdec2	equ	0xFDD
  8264                           fsr2h	equ	0xFDA
  8265                           fsr2l	equ	0xFD9
  8266                           status	equ	0xFD8
  8267                           
  8268 ;; *************** function ___lbtoft *****************
  8269 ;; Defined at:
  8270 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  8271 ;; Parameters:    Size  Location     Type
  8272 ;;  c               1    wreg     unsigned char 
  8273 ;; Auto vars:     Size  Location     Type
  8274 ;;  c               1   33[COMRAM] unsigned char 
  8275 ;; Return value:  Size  Location     Type
  8276 ;;                  3   30[COMRAM] float 
  8277 ;; Registers used:
  8278 ;;		wreg, status,2, status,0, cstack
  8279 ;; Tracked objects:
  8280 ;;		On entry : 0/0
  8281 ;;		On exit  : 0/0
  8282 ;;		Unchanged: 0/0
  8283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8284 ;;      Params:         3       0       0       0       0       0       0
  8285 ;;      Locals:         1       0       0       0       0       0       0
  8286 ;;      Temps:          0       0       0       0       0       0       0
  8287 ;;      Totals:         4       0       0       0       0       0       0
  8288 ;;Total ram usage:        4 bytes
  8289 ;; Hardware stack levels used:    1
  8290 ;; Hardware stack levels required when called:    5
  8291 ;; This function calls:
  8292 ;;		___ftpack
  8293 ;; This function is called by:
  8294 ;;		_ADC_ISR
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text47
  8299  001E68                     __ptext47:
  8300                           	opt stack 0
  8301  001E68                     ___lbtoft:
  8302                           	opt stack 17
  8303                           
  8304                           ;incstack = 0
  8305                           ;___lbtoft@c stored from wreg
  8306  001E68  6E22               	movwf	___lbtoft@c,c
  8307  001E6A  5022               	movf	___lbtoft@c,w,c
  8308  001E6C  6E17               	movwf	___ftpack@arg,c
  8309  001E6E  6A18               	clrf	___ftpack@arg+1,c
  8310  001E70  6A19               	clrf	___ftpack@arg+2,c
  8311  001E72  0E8E               	movlw	142
  8312  001E74  6E1A               	movwf	___ftpack@exp,c
  8313  001E76  0E00               	movlw	0
  8314  001E78  6E1B               	movwf	___ftpack@sign,c
  8315  001E7A  EC60  F00B         	call	___ftpack	;wreg free
  8316  001E7E  C017  F01F         	movff	?___ftpack,?___lbtoft
  8317  001E82  C018  F020         	movff	?___ftpack+1,?___lbtoft+1
  8318  001E86  C019  F021         	movff	?___ftpack+2,?___lbtoft+2
  8319  001E8A  0012               	return	
  8320  001E8C                     __end_of___lbtoft:
  8321                           	opt stack 0
  8322                           pclatu	equ	0xFFB
  8323                           pclath	equ	0xFFA
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           intcon	equ	0xFF2
  8331                           intcon2	equ	0xFF1
  8332                           intcon3	equ	0xFF0
  8333                           indf0	equ	0xFEF
  8334                           postinc0	equ	0xFEE
  8335                           fsr0h	equ	0xFEA
  8336                           fsr0l	equ	0xFE9
  8337                           wreg	equ	0xFE8
  8338                           indf1	equ	0xFE7
  8339                           fsr1h	equ	0xFE2
  8340                           fsr1l	equ	0xFE1
  8341                           bsr	equ	0xFE0
  8342                           indf2	equ	0xFDF
  8343                           postinc2	equ	0xFDE
  8344                           postdec2	equ	0xFDD
  8345                           fsr2h	equ	0xFDA
  8346                           fsr2l	equ	0xFD9
  8347                           status	equ	0xFD8
  8348                           
  8349 ;; *************** function ___fttol *****************
  8350 ;; Defined at:
  8351 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;  f1              3   22[COMRAM] float 
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  lval            4   32[COMRAM] unsigned long 
  8356 ;;  exp1            1   36[COMRAM] unsigned char 
  8357 ;;  sign1           1   31[COMRAM] unsigned char 
  8358 ;; Return value:  Size  Location     Type
  8359 ;;                  4   22[COMRAM] long 
  8360 ;; Registers used:
  8361 ;;		wreg, status,2, status,0
  8362 ;; Tracked objects:
  8363 ;;		On entry : 0/0
  8364 ;;		On exit  : 0/0
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8367 ;;      Params:         4       0       0       0       0       0       0
  8368 ;;      Locals:         6       0       0       0       0       0       0
  8369 ;;      Temps:          5       0       0       0       0       0       0
  8370 ;;      Totals:        15       0       0       0       0       0       0
  8371 ;;Total ram usage:       15 bytes
  8372 ;; Hardware stack levels used:    1
  8373 ;; Hardware stack levels required when called:    4
  8374 ;; This function calls:
  8375 ;;		Nothing
  8376 ;; This function is called by:
  8377 ;;		_ADC_ISR
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           	psect	text48
  8382  001350                     __ptext48:
  8383                           	opt stack 0
  8384  001350                     ___fttol:
  8385                           	opt stack 18
  8386                           
  8387                           ;incstack = 0
  8388  001350  C019  F01B         	movff	___fttol@f1+2,??___fttol
  8389  001354  6A1C               	clrf	(??___fttol+1)& (0+255),c
  8390  001356  6A1D               	clrf	(??___fttol+2)& (0+255),c
  8391  001358  3418               	rlcf	___fttol@f1+1,w,c
  8392  00135A  361B               	rlcf	??___fttol& (0+255),f,c
  8393  00135C  E301               	bnc	u687_21
  8394  00135E  801C               	bsf	(??___fttol+1)& (0+255),0,c
  8395  001360                     u687_21:
  8396  001360  501B               	movf	??___fttol,w,c
  8397  001362  6E25               	movwf	___fttol@exp1,c
  8398  001364  5025               	movf	___fttol@exp1,w,c
  8399  001366  A4D8               	btfss	status,2,c
  8400  001368  D009               	goto	i1l1438
  8401  00136A  0E00               	movlw	0
  8402  00136C  6E17               	movwf	?___fttol,c
  8403  00136E  0E00               	movlw	0
  8404  001370  6E18               	movwf	?___fttol+1,c
  8405  001372  0E00               	movlw	0
  8406  001374  6E19               	movwf	?___fttol+2,c
  8407  001376  0E00               	movlw	0
  8408  001378  6E1A               	movwf	?___fttol+3,c
  8409  00137A  0012               	return	
  8410  00137C                     i1l1438:
  8411  00137C  0E17               	movlw	23
  8412  00137E  6E1B               	movwf	??___fttol& (0+255),c
  8413  001380  C017  F01C         	movff	___fttol@f1,??___fttol+1
  8414  001384  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  8415  001388  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  8416  00138C  281B               	incf	??___fttol,w,c
  8417  00138E  6E1F               	movwf	(??___fttol+4)& (0+255),c
  8418  001390  D004               	goto	i1u689_20
  8419  001392                     i1u689_25:
  8420  001392  90D8               	bcf	status,0,c
  8421  001394  321E               	rrcf	??___fttol+3,f,c
  8422  001396  321D               	rrcf	??___fttol+2,f,c
  8423  001398  321C               	rrcf	??___fttol+1,f,c
  8424  00139A                     i1u689_20:
  8425  00139A  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  8426  00139C  D7FA               	goto	i1u689_25
  8427  00139E  501C               	movf	??___fttol+1,w,c
  8428  0013A0  6E20               	movwf	___fttol@sign1,c
  8429  0013A2  8E18               	bsf	___fttol@f1+1,7,c
  8430  0013A4  0EFF               	movlw	255
  8431  0013A6  1617               	andwf	___fttol@f1,f,c
  8432  0013A8  0EFF               	movlw	255
  8433  0013AA  1618               	andwf	___fttol@f1+1,f,c
  8434  0013AC  0E00               	movlw	0
  8435  0013AE  1619               	andwf	___fttol@f1+2,f,c
  8436  0013B0  5017               	movf	___fttol@f1,w,c
  8437  0013B2  6E21               	movwf	___fttol@lval,c
  8438  0013B4  5018               	movf	___fttol@f1+1,w,c
  8439  0013B6  6E22               	movwf	___fttol@lval+1,c
  8440  0013B8  5019               	movf	___fttol@f1+2,w,c
  8441  0013BA  6E23               	movwf	___fttol@lval+2,c
  8442  0013BC  6A24               	clrf	___fttol@lval+3,c
  8443  0013BE  0E8E               	movlw	142
  8444  0013C0  5E25               	subwf	___fttol@exp1,f,c
  8445  0013C2  AE25               	btfss	___fttol@exp1,7,c
  8446  0013C4  D016               	goto	i1l1440
  8447  0013C6  5025               	movf	___fttol@exp1,w,c
  8448  0013C8  0A80               	xorlw	128
  8449  0013CA  0F8F               	addlw	143
  8450  0013CC  B0D8               	btfsc	status,0,c
  8451  0013CE  D009               	goto	i1l1441
  8452  0013D0  0E00               	movlw	0
  8453  0013D2  6E17               	movwf	?___fttol,c
  8454  0013D4  0E00               	movlw	0
  8455  0013D6  6E18               	movwf	?___fttol+1,c
  8456  0013D8  0E00               	movlw	0
  8457  0013DA  6E19               	movwf	?___fttol+2,c
  8458  0013DC  0E00               	movlw	0
  8459  0013DE  6E1A               	movwf	?___fttol+3,c
  8460  0013E0  0012               	return	
  8461  0013E2                     i1l1441:
  8462  0013E2  90D8               	bcf	status,0,c
  8463  0013E4  3224               	rrcf	___fttol@lval+3,f,c
  8464  0013E6  3223               	rrcf	___fttol@lval+2,f,c
  8465  0013E8  3222               	rrcf	___fttol@lval+1,f,c
  8466  0013EA  3221               	rrcf	___fttol@lval,f,c
  8467  0013EC  3E25               	incfsz	___fttol@exp1,f,c
  8468  0013EE  D7F9               	goto	i1l1441
  8469  0013F0  D015               	goto	i1u693_20
  8470  0013F2                     i1l1440:
  8471  0013F2  0E17               	movlw	23
  8472  0013F4  6425               	cpfsgt	___fttol@exp1,c
  8473  0013F6  D00F               	goto	i1l1446
  8474  0013F8  0E00               	movlw	0
  8475  0013FA  6E17               	movwf	?___fttol,c
  8476  0013FC  0E00               	movlw	0
  8477  0013FE  6E18               	movwf	?___fttol+1,c
  8478  001400  0E00               	movlw	0
  8479  001402  6E19               	movwf	?___fttol+2,c
  8480  001404  0E00               	movlw	0
  8481  001406  6E1A               	movwf	?___fttol+3,c
  8482  001408  0012               	return	
  8483  00140A  90D8               	bcf	status,0,c
  8484  00140C  3621               	rlcf	___fttol@lval,f,c
  8485  00140E  3622               	rlcf	___fttol@lval+1,f,c
  8486  001410  3623               	rlcf	___fttol@lval+2,f,c
  8487  001412  3624               	rlcf	___fttol@lval+3,f,c
  8488  001414  0625               	decf	___fttol@exp1,f,c
  8489  001416                     i1l1446:
  8490  001416  5025               	movf	___fttol@exp1,w,c
  8491  001418  A4D8               	btfss	status,2,c
  8492  00141A  D7F7               	goto	i1l1447
  8493  00141C                     i1u693_20:
  8494  00141C  5020               	movf	___fttol@sign1,w,c
  8495  00141E  B4D8               	btfsc	status,2,c
  8496  001420  D008               	goto	i1l1449
  8497  001422  1E24               	comf	___fttol@lval+3,f,c
  8498  001424  1E23               	comf	___fttol@lval+2,f,c
  8499  001426  1E22               	comf	___fttol@lval+1,f,c
  8500  001428  6C21               	negf	___fttol@lval,c
  8501  00142A  0E00               	movlw	0
  8502  00142C  2222               	addwfc	___fttol@lval+1,f,c
  8503  00142E  2223               	addwfc	___fttol@lval+2,f,c
  8504  001430  2224               	addwfc	___fttol@lval+3,f,c
  8505  001432                     i1l1449:
  8506  001432  C021  F017         	movff	___fttol@lval,?___fttol
  8507  001436  C022  F018         	movff	___fttol@lval+1,?___fttol+1
  8508  00143A  C023  F019         	movff	___fttol@lval+2,?___fttol+2
  8509  00143E  C024  F01A         	movff	___fttol@lval+3,?___fttol+3
  8510  001442  0012               	return	
  8511  001444                     __end_of___fttol:
  8512                           	opt stack 0
  8513                           pclatu	equ	0xFFB
  8514                           pclath	equ	0xFFA
  8515                           tblptru	equ	0xFF8
  8516                           tblptrh	equ	0xFF7
  8517                           tblptrl	equ	0xFF6
  8518                           tablat	equ	0xFF5
  8519                           prodh	equ	0xFF4
  8520                           prodl	equ	0xFF3
  8521                           intcon	equ	0xFF2
  8522                           intcon2	equ	0xFF1
  8523                           intcon3	equ	0xFF0
  8524                           indf0	equ	0xFEF
  8525                           postinc0	equ	0xFEE
  8526                           fsr0h	equ	0xFEA
  8527                           fsr0l	equ	0xFE9
  8528                           wreg	equ	0xFE8
  8529                           indf1	equ	0xFE7
  8530                           fsr1h	equ	0xFE2
  8531                           fsr1l	equ	0xFE1
  8532                           bsr	equ	0xFE0
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           postdec2	equ	0xFDD
  8536                           fsr2h	equ	0xFDA
  8537                           fsr2l	equ	0xFD9
  8538                           status	equ	0xFD8
  8539                           
  8540 ;; *************** function ___ftsub *****************
  8541 ;; Defined at:
  8542 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  f1              3    0[BANK0 ] float 
  8545 ;;  f2              3    3[BANK0 ] float 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;		None
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  3    0[BANK0 ] float 
  8550 ;; Registers used:
  8551 ;;		wreg, status,2, status,0, cstack
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8557 ;;      Params:         0       6       0       0       0       0       0
  8558 ;;      Locals:         0       0       0       0       0       0       0
  8559 ;;      Temps:          0       0       0       0       0       0       0
  8560 ;;      Totals:         0       6       0       0       0       0       0
  8561 ;;Total ram usage:        6 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    6
  8564 ;; This function calls:
  8565 ;;		___ftadd
  8566 ;; This function is called by:
  8567 ;;		_ADC_ISR
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           	psect	text49
  8572  001B74                     __ptext49:
  8573                           	opt stack 0
  8574  001B74                     ___ftsub:
  8575                           	opt stack 16
  8576                           
  8577                           ;incstack = 0
  8578  001B74  0100               	movlb	0	; () banked
  8579  001B76  51AD               	movf	___ftsub@f2& (0+255),w,b
  8580  001B78  11AE               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8581  001B7A  11AF               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8582  001B7C  B4D8               	btfsc	status,2,c
  8583  001B7E  D006               	goto	i1l1434
  8584                           
  8585                           ; BSR set to: 0
  8586  001B80  0E00               	movlw	0
  8587  001B82  1BAD               	xorwf	___ftsub@f2& (0+255),f,b
  8588  001B84  0E00               	movlw	0
  8589  001B86  1BAE               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8590  001B88  0E80               	movlw	128
  8591  001B8A  1BAF               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8592  001B8C                     i1l1434:
  8593                           
  8594                           ; BSR set to: 0
  8595                           
  8596                           ; BSR set to: 0
  8597  001B8C  C0AA  F01F         	movff	___ftsub@f1,___ftadd@f1
  8598  001B90  C0AB  F020         	movff	___ftsub@f1+1,___ftadd@f1+1
  8599  001B94  C0AC  F021         	movff	___ftsub@f1+2,___ftadd@f1+2
  8600  001B98  C0AD  F022         	movff	___ftsub@f2,___ftadd@f2
  8601  001B9C  C0AE  F023         	movff	___ftsub@f2+1,___ftadd@f2+1
  8602  001BA0  C0AF  F024         	movff	___ftsub@f2+2,___ftadd@f2+2
  8603  001BA4  EC4B  F005         	call	___ftadd	;wreg free
  8604  001BA8  C01F  F0AA         	movff	?___ftadd,?___ftsub
  8605  001BAC  C020  F0AB         	movff	?___ftadd+1,?___ftsub+1
  8606  001BB0  C021  F0AC         	movff	?___ftadd+2,?___ftsub+2
  8607  001BB4  0012               	return	
  8608  001BB6                     __end_of___ftsub:
  8609                           	opt stack 0
  8610                           pclatu	equ	0xFFB
  8611                           pclath	equ	0xFFA
  8612                           tblptru	equ	0xFF8
  8613                           tblptrh	equ	0xFF7
  8614                           tblptrl	equ	0xFF6
  8615                           tablat	equ	0xFF5
  8616                           prodh	equ	0xFF4
  8617                           prodl	equ	0xFF3
  8618                           intcon	equ	0xFF2
  8619                           intcon2	equ	0xFF1
  8620                           intcon3	equ	0xFF0
  8621                           indf0	equ	0xFEF
  8622                           postinc0	equ	0xFEE
  8623                           fsr0h	equ	0xFEA
  8624                           fsr0l	equ	0xFE9
  8625                           wreg	equ	0xFE8
  8626                           indf1	equ	0xFE7
  8627                           fsr1h	equ	0xFE2
  8628                           fsr1l	equ	0xFE1
  8629                           bsr	equ	0xFE0
  8630                           indf2	equ	0xFDF
  8631                           postinc2	equ	0xFDE
  8632                           postdec2	equ	0xFDD
  8633                           fsr2h	equ	0xFDA
  8634                           fsr2l	equ	0xFD9
  8635                           status	equ	0xFD8
  8636                           
  8637 ;; *************** function ___ftadd *****************
  8638 ;; Defined at:
  8639 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;  f1              3   30[COMRAM] float 
  8642 ;;  f2              3   33[COMRAM] float 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  exp1            1   41[COMRAM] unsigned char 
  8645 ;;  exp2            1   40[COMRAM] unsigned char 
  8646 ;;  sign            1   39[COMRAM] unsigned char 
  8647 ;; Return value:  Size  Location     Type
  8648 ;;                  3   30[COMRAM] float 
  8649 ;; Registers used:
  8650 ;;		wreg, status,2, status,0, cstack
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8656 ;;      Params:         6       0       0       0       0       0       0
  8657 ;;      Locals:         3       0       0       0       0       0       0
  8658 ;;      Temps:          3       0       0       0       0       0       0
  8659 ;;      Totals:        12       0       0       0       0       0       0
  8660 ;;Total ram usage:       12 bytes
  8661 ;; Hardware stack levels used:    1
  8662 ;; Hardware stack levels required when called:    5
  8663 ;; This function calls:
  8664 ;;		___ftpack
  8665 ;; This function is called by:
  8666 ;;		___ftsub
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	text50
  8671  000A96                     __ptext50:
  8672                           	opt stack 0
  8673  000A96                     ___ftadd:
  8674                           	opt stack 16
  8675                           
  8676                           ;incstack = 0
  8677  000A96  C021  F025         	movff	___ftadd@f1+2,??___ftadd
  8678  000A9A  6A26               	clrf	(??___ftadd+1)& (0+255),c
  8679  000A9C  6A27               	clrf	(??___ftadd+2)& (0+255),c
  8680  000A9E  3420               	rlcf	___ftadd@f1+1,w,c
  8681  000AA0  3625               	rlcf	??___ftadd& (0+255),f,c
  8682  000AA2  E301               	bnc	u623_21
  8683  000AA4  8026               	bsf	(??___ftadd+1)& (0+255),0,c
  8684  000AA6                     u623_21:
  8685  000AA6  5025               	movf	??___ftadd,w,c
  8686  000AA8  6E2A               	movwf	___ftadd@exp1,c
  8687  000AAA  C024  F025         	movff	___ftadd@f2+2,??___ftadd
  8688  000AAE  6A26               	clrf	(??___ftadd+1)& (0+255),c
  8689  000AB0  6A27               	clrf	(??___ftadd+2)& (0+255),c
  8690  000AB2  3423               	rlcf	___ftadd@f2+1,w,c
  8691  000AB4  3625               	rlcf	??___ftadd& (0+255),f,c
  8692  000AB6  E301               	bnc	u624_21
  8693  000AB8  8026               	bsf	(??___ftadd+1)& (0+255),0,c
  8694  000ABA                     u624_21:
  8695  000ABA  5025               	movf	??___ftadd,w,c
  8696  000ABC  6E29               	movwf	___ftadd@exp2,c
  8697  000ABE  502A               	movf	___ftadd@exp1,w,c
  8698  000AC0  B4D8               	btfsc	status,2,c
  8699  000AC2  D00B               	goto	i1u627_20
  8700  000AC4  5029               	movf	___ftadd@exp2,w,c
  8701  000AC6  5C2A               	subwf	___ftadd@exp1,w,c
  8702  000AC8  B0D8               	btfsc	status,0,c
  8703  000ACA  D00E               	goto	i1l1369
  8704  000ACC  502A               	movf	___ftadd@exp1,w,c
  8705  000ACE  0800               	sublw	0
  8706  000AD0  2429               	addwf	___ftadd@exp2,w,c
  8707  000AD2  6E25               	movwf	??___ftadd& (0+255),c
  8708  000AD4  0E18               	movlw	24
  8709  000AD6  6425               	cpfsgt	??___ftadd,c
  8710  000AD8  D007               	goto	i1l1369
  8711  000ADA                     i1u627_20:
  8712  000ADA  C022  F01F         	movff	___ftadd@f2,?___ftadd
  8713  000ADE  C023  F020         	movff	___ftadd@f2+1,?___ftadd+1
  8714  000AE2  C024  F021         	movff	___ftadd@f2+2,?___ftadd+2
  8715  000AE6  0012               	return	
  8716  000AE8                     i1l1369:
  8717  000AE8  5029               	movf	___ftadd@exp2,w,c
  8718  000AEA  B4D8               	btfsc	status,2,c
  8719  000AEC  D00B               	goto	i1u630_20
  8720  000AEE  502A               	movf	___ftadd@exp1,w,c
  8721  000AF0  5C29               	subwf	___ftadd@exp2,w,c
  8722  000AF2  B0D8               	btfsc	status,0,c
  8723  000AF4  D00E               	goto	i1l1373
  8724  000AF6  5029               	movf	___ftadd@exp2,w,c
  8725  000AF8  0800               	sublw	0
  8726  000AFA  242A               	addwf	___ftadd@exp1,w,c
  8727  000AFC  6E25               	movwf	??___ftadd& (0+255),c
  8728  000AFE  0E18               	movlw	24
  8729  000B00  6425               	cpfsgt	??___ftadd,c
  8730  000B02  D007               	goto	i1l1373
  8731  000B04                     i1u630_20:
  8732  000B04  C01F  F01F         	movff	___ftadd@f1,?___ftadd
  8733  000B08  C020  F020         	movff	___ftadd@f1+1,?___ftadd+1
  8734  000B0C  C021  F021         	movff	___ftadd@f1+2,?___ftadd+2
  8735  000B10  0012               	return	
  8736  000B12                     i1l1373:
  8737  000B12  0E06               	movlw	6
  8738  000B14  6E28               	movwf	___ftadd@sign,c
  8739  000B16  BE21               	btfsc	___ftadd@f1+2,7,c
  8740  000B18  8E28               	bsf	___ftadd@sign,7,c
  8741  000B1A  BE24               	btfsc	___ftadd@f2+2,7,c
  8742  000B1C  8C28               	bsf	___ftadd@sign,6,c
  8743  000B1E  8E20               	bsf	___ftadd@f1+1,7,c
  8744  000B20  0EFF               	movlw	255
  8745  000B22  161F               	andwf	___ftadd@f1,f,c
  8746  000B24  0EFF               	movlw	255
  8747  000B26  1620               	andwf	___ftadd@f1+1,f,c
  8748  000B28  0E00               	movlw	0
  8749  000B2A  1621               	andwf	___ftadd@f1+2,f,c
  8750  000B2C  8E23               	bsf	___ftadd@f2+1,7,c
  8751  000B2E  0EFF               	movlw	255
  8752  000B30  1622               	andwf	___ftadd@f2,f,c
  8753  000B32  0EFF               	movlw	255
  8754  000B34  1623               	andwf	___ftadd@f2+1,f,c
  8755  000B36  0E00               	movlw	0
  8756  000B38  1624               	andwf	___ftadd@f2+2,f,c
  8757  000B3A  5029               	movf	___ftadd@exp2,w,c
  8758  000B3C  5C2A               	subwf	___ftadd@exp1,w,c
  8759  000B3E  B0D8               	btfsc	status,0,c
  8760  000B40  D01B               	goto	i1l1378
  8761  000B42                     i1u633_20:
  8762  000B42  90D8               	bcf	status,0,c
  8763  000B44  3622               	rlcf	___ftadd@f2,f,c
  8764  000B46  3623               	rlcf	___ftadd@f2+1,f,c
  8765  000B48  3624               	rlcf	___ftadd@f2+2,f,c
  8766  000B4A  0629               	decf	___ftadd@exp2,f,c
  8767  000B4C  502A               	movf	___ftadd@exp1,w,c
  8768  000B4E  1829               	xorwf	___ftadd@exp2,w,c
  8769  000B50  B4D8               	btfsc	status,2,c
  8770  000B52  D00D               	goto	i1l1383
  8771  000B54  0628               	decf	___ftadd@sign,f,c
  8772  000B56  C028  F025         	movff	___ftadd@sign,??___ftadd
  8773  000B5A  0E07               	movlw	7
  8774  000B5C  1625               	andwf	??___ftadd,f,c
  8775  000B5E  B4D8               	btfsc	status,2,c
  8776  000B60  D006               	goto	i1l1383
  8777  000B62  D7EF               	goto	i1u633_20
  8778  000B64  90D8               	bcf	status,0,c
  8779  000B66  3221               	rrcf	___ftadd@f1+2,f,c
  8780  000B68  3220               	rrcf	___ftadd@f1+1,f,c
  8781  000B6A  321F               	rrcf	___ftadd@f1,f,c
  8782  000B6C  2A2A               	incf	___ftadd@exp1,f,c
  8783  000B6E                     i1l1383:
  8784  000B6E  5029               	movf	___ftadd@exp2,w,c
  8785  000B70  182A               	xorwf	___ftadd@exp1,w,c
  8786  000B72  B4D8               	btfsc	status,2,c
  8787  000B74  D01F               	goto	i1u640_20
  8788  000B76  D7F6               	goto	i1l1384
  8789  000B78                     i1l1378:
  8790  000B78  502A               	movf	___ftadd@exp1,w,c
  8791  000B7A  5C29               	subwf	___ftadd@exp2,w,c
  8792  000B7C  B0D8               	btfsc	status,0,c
  8793  000B7E  D01A               	goto	i1u640_20
  8794  000B80                     i1u637_20:
  8795  000B80  90D8               	bcf	status,0,c
  8796  000B82  361F               	rlcf	___ftadd@f1,f,c
  8797  000B84  3620               	rlcf	___ftadd@f1+1,f,c
  8798  000B86  3621               	rlcf	___ftadd@f1+2,f,c
  8799  000B88  062A               	decf	___ftadd@exp1,f,c
  8800  000B8A  502A               	movf	___ftadd@exp1,w,c
  8801  000B8C  1829               	xorwf	___ftadd@exp2,w,c
  8802  000B8E  B4D8               	btfsc	status,2,c
  8803  000B90  D00D               	goto	i1l1392
  8804  000B92  0628               	decf	___ftadd@sign,f,c
  8805  000B94  C028  F025         	movff	___ftadd@sign,??___ftadd
  8806  000B98  0E07               	movlw	7
  8807  000B9A  1625               	andwf	??___ftadd,f,c
  8808  000B9C  B4D8               	btfsc	status,2,c
  8809  000B9E  D006               	goto	i1l1392
  8810  000BA0  D7EF               	goto	i1u637_20
  8811  000BA2  90D8               	bcf	status,0,c
  8812  000BA4  3224               	rrcf	___ftadd@f2+2,f,c
  8813  000BA6  3223               	rrcf	___ftadd@f2+1,f,c
  8814  000BA8  3222               	rrcf	___ftadd@f2,f,c
  8815  000BAA  2A29               	incf	___ftadd@exp2,f,c
  8816  000BAC                     i1l1392:
  8817  000BAC  5029               	movf	___ftadd@exp2,w,c
  8818  000BAE  182A               	xorwf	___ftadd@exp1,w,c
  8819  000BB0  A4D8               	btfss	status,2,c
  8820  000BB2  D7F7               	goto	i1l1393
  8821  000BB4                     i1u640_20:
  8822  000BB4  AE28               	btfss	___ftadd@sign,7,c
  8823  000BB6  D00C               	goto	i1l1395
  8824  000BB8  0EFF               	movlw	255
  8825  000BBA  1A1F               	xorwf	___ftadd@f1,f,c
  8826  000BBC  0EFF               	movlw	255
  8827  000BBE  1A20               	xorwf	___ftadd@f1+1,f,c
  8828  000BC0  0EFF               	movlw	255
  8829  000BC2  1A21               	xorwf	___ftadd@f1+2,f,c
  8830  000BC4  0E01               	movlw	1
  8831  000BC6  261F               	addwf	___ftadd@f1,f,c
  8832  000BC8  0E00               	movlw	0
  8833  000BCA  2220               	addwfc	___ftadd@f1+1,f,c
  8834  000BCC  0E00               	movlw	0
  8835  000BCE  2221               	addwfc	___ftadd@f1+2,f,c
  8836  000BD0                     i1l1395:
  8837  000BD0  AC28               	btfss	___ftadd@sign,6,c
  8838  000BD2  D00C               	goto	i1l1396
  8839  000BD4  0EFF               	movlw	255
  8840  000BD6  1A22               	xorwf	___ftadd@f2,f,c
  8841  000BD8  0EFF               	movlw	255
  8842  000BDA  1A23               	xorwf	___ftadd@f2+1,f,c
  8843  000BDC  0EFF               	movlw	255
  8844  000BDE  1A24               	xorwf	___ftadd@f2+2,f,c
  8845  000BE0  0E01               	movlw	1
  8846  000BE2  2622               	addwf	___ftadd@f2,f,c
  8847  000BE4  0E00               	movlw	0
  8848  000BE6  2223               	addwfc	___ftadd@f2+1,f,c
  8849  000BE8  0E00               	movlw	0
  8850  000BEA  2224               	addwfc	___ftadd@f2+2,f,c
  8851  000BEC                     i1l1396:
  8852  000BEC  0E00               	movlw	0
  8853  000BEE  6E28               	movwf	___ftadd@sign,c
  8854  000BF0  501F               	movf	___ftadd@f1,w,c
  8855  000BF2  2622               	addwf	___ftadd@f2,f,c
  8856  000BF4  5020               	movf	___ftadd@f1+1,w,c
  8857  000BF6  2223               	addwfc	___ftadd@f2+1,f,c
  8858  000BF8  5021               	movf	___ftadd@f1+2,w,c
  8859  000BFA  2224               	addwfc	___ftadd@f2+2,f,c
  8860  000BFC  AE24               	btfss	___ftadd@f2+2,7,c
  8861  000BFE  D00E               	goto	i1l1397
  8862  000C00  0EFF               	movlw	255
  8863  000C02  1A22               	xorwf	___ftadd@f2,f,c
  8864  000C04  0EFF               	movlw	255
  8865  000C06  1A23               	xorwf	___ftadd@f2+1,f,c
  8866  000C08  0EFF               	movlw	255
  8867  000C0A  1A24               	xorwf	___ftadd@f2+2,f,c
  8868  000C0C  0E01               	movlw	1
  8869  000C0E  2622               	addwf	___ftadd@f2,f,c
  8870  000C10  0E00               	movlw	0
  8871  000C12  2223               	addwfc	___ftadd@f2+1,f,c
  8872  000C14  0E00               	movlw	0
  8873  000C16  2224               	addwfc	___ftadd@f2+2,f,c
  8874  000C18  0E01               	movlw	1
  8875  000C1A  6E28               	movwf	___ftadd@sign,c
  8876  000C1C                     i1l1397:
  8877  000C1C  C022  F017         	movff	___ftadd@f2,___ftpack@arg
  8878  000C20  C023  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  8879  000C24  C024  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  8880  000C28  C02A  F01A         	movff	___ftadd@exp1,___ftpack@exp
  8881  000C2C  C028  F01B         	movff	___ftadd@sign,___ftpack@sign
  8882  000C30  EC60  F00B         	call	___ftpack	;wreg free
  8883  000C34  C017  F01F         	movff	?___ftpack,?___ftadd
  8884  000C38  C018  F020         	movff	?___ftpack+1,?___ftadd+1
  8885  000C3C  C019  F021         	movff	?___ftpack+2,?___ftadd+2
  8886  000C40  0012               	return	
  8887  000C42                     __end_of___ftadd:
  8888                           	opt stack 0
  8889                           pclatu	equ	0xFFB
  8890                           pclath	equ	0xFFA
  8891                           tblptru	equ	0xFF8
  8892                           tblptrh	equ	0xFF7
  8893                           tblptrl	equ	0xFF6
  8894                           tablat	equ	0xFF5
  8895                           prodh	equ	0xFF4
  8896                           prodl	equ	0xFF3
  8897                           intcon	equ	0xFF2
  8898                           intcon2	equ	0xFF1
  8899                           intcon3	equ	0xFF0
  8900                           indf0	equ	0xFEF
  8901                           postinc0	equ	0xFEE
  8902                           fsr0h	equ	0xFEA
  8903                           fsr0l	equ	0xFE9
  8904                           wreg	equ	0xFE8
  8905                           indf1	equ	0xFE7
  8906                           fsr1h	equ	0xFE2
  8907                           fsr1l	equ	0xFE1
  8908                           bsr	equ	0xFE0
  8909                           indf2	equ	0xFDF
  8910                           postinc2	equ	0xFDE
  8911                           postdec2	equ	0xFDD
  8912                           fsr2h	equ	0xFDA
  8913                           fsr2l	equ	0xFD9
  8914                           status	equ	0xFD8
  8915                           
  8916 ;; *************** function ___ftmul *****************
  8917 ;; Defined at:
  8918 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  8919 ;; Parameters:    Size  Location     Type
  8920 ;;  f1              3   34[COMRAM] float 
  8921 ;;  f2              3   37[COMRAM] float 
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  8924 ;;  sign            1    5[BANK0 ] unsigned char 
  8925 ;;  cntr            1    4[BANK0 ] unsigned char 
  8926 ;;  exp             1    0[BANK0 ] unsigned char 
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  3   34[COMRAM] float 
  8929 ;; Registers used:
  8930 ;;		wreg, status,2, status,0, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8936 ;;      Params:         6       0       0       0       0       0       0
  8937 ;;      Locals:         0       6       0       0       0       0       0
  8938 ;;      Temps:          3       0       0       0       0       0       0
  8939 ;;      Totals:         9       6       0       0       0       0       0
  8940 ;;Total ram usage:       15 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    5
  8943 ;; This function calls:
  8944 ;;		___ftpack
  8945 ;; This function is called by:
  8946 ;;		_ADC_ISR
  8947 ;; This function uses a non-reentrant model
  8948 ;;
  8949                           
  8950                           	psect	text51
  8951  00125A                     __ptext51:
  8952                           	opt stack 0
  8953  00125A                     ___ftmul:
  8954                           	opt stack 17
  8955                           
  8956                           ;incstack = 0
  8957  00125A  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  8958  00125E  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  8959  001260  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  8960  001262  3424               	rlcf	___ftmul@f1+1,w,c
  8961  001264  3629               	rlcf	??___ftmul& (0+255),f,c
  8962  001266  E301               	bnc	u676_21
  8963  001268  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  8964  00126A                     u676_21:
  8965  00126A  5029               	movf	??___ftmul,w,c
  8966  00126C  0100               	movlb	0	; () banked
  8967  00126E  6FAA               	movwf	___ftmul@exp& (0+255),b
  8968  001270  51AA               	movf	___ftmul@exp& (0+255),w,b
  8969  001272  A4D8               	btfss	status,2,c
  8970  001274  D007               	goto	i1l1417
  8971                           
  8972                           ; BSR set to: 0
  8973  001276  0E00               	movlw	0
  8974  001278  6E23               	movwf	?___ftmul,c
  8975  00127A  0E00               	movlw	0
  8976  00127C  6E24               	movwf	?___ftmul+1,c
  8977  00127E  0E00               	movlw	0
  8978  001280  6E25               	movwf	?___ftmul+2,c
  8979                           
  8980                           ; BSR set to: 0
  8981  001282  0012               	return	
  8982  001284                     i1l1417:
  8983                           
  8984                           ; BSR set to: 0
  8985                           
  8986                           ; BSR set to: 0
  8987  001284  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  8988  001288  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  8989  00128A  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  8990  00128C  3427               	rlcf	___ftmul@f2+1,w,c
  8991  00128E  3629               	rlcf	??___ftmul& (0+255),f,c
  8992  001290  E301               	bnc	u678_21
  8993  001292  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  8994  001294                     u678_21:
  8995  001294  5029               	movf	??___ftmul,w,c
  8996  001296  6FAF               	movwf	___ftmul@sign& (0+255),b
  8997  001298  51AF               	movf	___ftmul@sign& (0+255),w,b
  8998  00129A  A4D8               	btfss	status,2,c
  8999  00129C  D007               	goto	i1l1419
  9000                           
  9001                           ; BSR set to: 0
  9002  00129E  0E00               	movlw	0
  9003  0012A0  6E23               	movwf	?___ftmul,c
  9004  0012A2  0E00               	movlw	0
  9005  0012A4  6E24               	movwf	?___ftmul+1,c
  9006  0012A6  0E00               	movlw	0
  9007  0012A8  6E25               	movwf	?___ftmul+2,c
  9008                           
  9009                           ; BSR set to: 0
  9010  0012AA  0012               	return	
  9011  0012AC                     i1l1419:
  9012                           
  9013                           ; BSR set to: 0
  9014                           
  9015                           ; BSR set to: 0
  9016  0012AC  51AF               	movf	___ftmul@sign& (0+255),w,b
  9017  0012AE  0F7B               	addlw	123
  9018  0012B0  27AA               	addwf	___ftmul@exp& (0+255),f,b
  9019                           
  9020                           ; BSR set to: 0
  9021  0012B2  C025  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
  9022  0012B6  5028               	movf	___ftmul@f2+2,w,c
  9023  0012B8  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
  9024  0012BA  0E80               	movlw	128
  9025  0012BC  17AF               	andwf	___ftmul@sign& (0+255),f,b
  9026                           
  9027                           ; BSR set to: 0
  9028  0012BE  8E24               	bsf	___ftmul@f1+1,7,c
  9029                           
  9030                           ; BSR set to: 0
  9031  0012C0  8E27               	bsf	___ftmul@f2+1,7,c
  9032                           
  9033                           ; BSR set to: 0
  9034  0012C2  0EFF               	movlw	255
  9035  0012C4  1626               	andwf	___ftmul@f2,f,c
  9036  0012C6  0EFF               	movlw	255
  9037  0012C8  1627               	andwf	___ftmul@f2+1,f,c
  9038  0012CA  0E00               	movlw	0
  9039  0012CC  1628               	andwf	___ftmul@f2+2,f,c
  9040                           
  9041                           ; BSR set to: 0
  9042  0012CE  0E00               	movlw	0
  9043  0012D0  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
  9044  0012D2  0E00               	movlw	0
  9045  0012D4  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9046  0012D6  0E00               	movlw	0
  9047  0012D8  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9048                           
  9049                           ; BSR set to: 0
  9050  0012DA  0E07               	movlw	7
  9051  0012DC  6FAE               	movwf	___ftmul@cntr& (0+255),b
  9052  0012DE                     
  9053                           ; BSR set to: 0
  9054                           
  9055                           ; BSR set to: 0
  9056  0012DE  A023               	btfss	___ftmul@f1,0,c
  9057  0012E0  D006               	goto	i1l1421
  9058                           
  9059                           ; BSR set to: 0
  9060  0012E2  5026               	movf	___ftmul@f2,w,c
  9061  0012E4  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9062  0012E6  5027               	movf	___ftmul@f2+1,w,c
  9063  0012E8  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9064  0012EA  5028               	movf	___ftmul@f2+2,w,c
  9065  0012EC  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9066  0012EE                     i1l1421:
  9067                           
  9068                           ; BSR set to: 0
  9069                           
  9070                           ; BSR set to: 0
  9071  0012EE  90D8               	bcf	status,0,c
  9072  0012F0  3225               	rrcf	___ftmul@f1+2,f,c
  9073  0012F2  3224               	rrcf	___ftmul@f1+1,f,c
  9074  0012F4  3223               	rrcf	___ftmul@f1,f,c
  9075  0012F6  90D8               	bcf	status,0,c
  9076  0012F8  3626               	rlcf	___ftmul@f2,f,c
  9077  0012FA  3627               	rlcf	___ftmul@f2+1,f,c
  9078  0012FC  3628               	rlcf	___ftmul@f2+2,f,c
  9079                           
  9080                           ; BSR set to: 0
  9081  0012FE  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
  9082  001300  D7EE               	goto	i1l1420
  9083                           
  9084                           ; BSR set to: 0
  9085                           
  9086                           ; BSR set to: 0
  9087  001302  0E09               	movlw	9
  9088  001304  6FAE               	movwf	___ftmul@cntr& (0+255),b
  9089  001306                     
  9090                           ; BSR set to: 0
  9091                           
  9092                           ; BSR set to: 0
  9093  001306  A023               	btfss	___ftmul@f1,0,c
  9094  001308  D006               	goto	i1l1424
  9095                           
  9096                           ; BSR set to: 0
  9097  00130A  5026               	movf	___ftmul@f2,w,c
  9098  00130C  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9099  00130E  5027               	movf	___ftmul@f2+1,w,c
  9100  001310  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9101  001312  5028               	movf	___ftmul@f2+2,w,c
  9102  001314  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9103  001316                     i1l1424:
  9104                           
  9105                           ; BSR set to: 0
  9106                           
  9107                           ; BSR set to: 0
  9108  001316  90D8               	bcf	status,0,c
  9109  001318  3225               	rrcf	___ftmul@f1+2,f,c
  9110  00131A  3224               	rrcf	___ftmul@f1+1,f,c
  9111  00131C  3223               	rrcf	___ftmul@f1,f,c
  9112  00131E  90D8               	bcf	status,0,c
  9113  001320  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9114  001322  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9115  001324  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9116                           
  9117                           ; BSR set to: 0
  9118  001326  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
  9119  001328  D7EE               	goto	i1l1423
  9120                           
  9121                           ; BSR set to: 0
  9122                           
  9123                           ; BSR set to: 0
  9124  00132A  C0AB  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  9125  00132E  C0AC  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9126  001332  C0AD  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9127  001336  C0AA  F01A         	movff	___ftmul@exp,___ftpack@exp
  9128  00133A  C0AF  F01B         	movff	___ftmul@sign,___ftpack@sign
  9129  00133E  EC60  F00B         	call	___ftpack	;wreg free
  9130  001342  C017  F023         	movff	?___ftpack,?___ftmul
  9131  001346  C018  F024         	movff	?___ftpack+1,?___ftmul+1
  9132  00134A  C019  F025         	movff	?___ftpack+2,?___ftmul+2
  9133  00134E  0012               	return	
  9134  001350                     __end_of___ftmul:
  9135                           	opt stack 0
  9136                           pclatu	equ	0xFFB
  9137                           pclath	equ	0xFFA
  9138                           tblptru	equ	0xFF8
  9139                           tblptrh	equ	0xFF7
  9140                           tblptrl	equ	0xFF6
  9141                           tablat	equ	0xFF5
  9142                           prodh	equ	0xFF4
  9143                           prodl	equ	0xFF3
  9144                           intcon	equ	0xFF2
  9145                           intcon2	equ	0xFF1
  9146                           intcon3	equ	0xFF0
  9147                           indf0	equ	0xFEF
  9148                           postinc0	equ	0xFEE
  9149                           fsr0h	equ	0xFEA
  9150                           fsr0l	equ	0xFE9
  9151                           wreg	equ	0xFE8
  9152                           indf1	equ	0xFE7
  9153                           fsr1h	equ	0xFE2
  9154                           fsr1l	equ	0xFE1
  9155                           bsr	equ	0xFE0
  9156                           indf2	equ	0xFDF
  9157                           postinc2	equ	0xFDE
  9158                           postdec2	equ	0xFDD
  9159                           fsr2h	equ	0xFDA
  9160                           fsr2l	equ	0xFD9
  9161                           status	equ	0xFD8
  9162                           
  9163 ;; *************** function ___ftge *****************
  9164 ;; Defined at:
  9165 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;  ff1             3   22[COMRAM] float 
  9168 ;;  ff2             3   25[COMRAM] float 
  9169 ;; Auto vars:     Size  Location     Type
  9170 ;;		None
  9171 ;; Return value:  Size  Location     Type
  9172 ;;		None               void
  9173 ;; Registers used:
  9174 ;;		wreg, status,2, status,0
  9175 ;; Tracked objects:
  9176 ;;		On entry : 0/0
  9177 ;;		On exit  : 0/0
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9180 ;;      Params:         6       0       0       0       0       0       0
  9181 ;;      Locals:         0       0       0       0       0       0       0
  9182 ;;      Temps:          3       0       0       0       0       0       0
  9183 ;;      Totals:         9       0       0       0       0       0       0
  9184 ;;Total ram usage:        9 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; Hardware stack levels required when called:    4
  9187 ;; This function calls:
  9188 ;;		Nothing
  9189 ;; This function is called by:
  9190 ;;		_ADC_ISR
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           	psect	text52
  9195  00176E                     __ptext52:
  9196                           	opt stack 0
  9197  00176E                     ___ftge:
  9198                           	opt stack 18
  9199                           
  9200                           ;incstack = 0
  9201  00176E  AE19               	btfss	___ftge@ff1+2,7,c
  9202  001770  D016               	goto	i1l1410
  9203  001772  C017  F01D         	movff	___ftge@ff1,??___ftge
  9204  001776  C018  F01E         	movff	___ftge@ff1+1,??___ftge+1
  9205  00177A  C019  F01F         	movff	___ftge@ff1+2,??___ftge+2
  9206  00177E  1E1D               	comf	??___ftge,f,c
  9207  001780  1E1E               	comf	??___ftge+1,f,c
  9208  001782  1E1F               	comf	??___ftge+2,f,c
  9209  001784  2A1D               	incf	??___ftge,f,c
  9210  001786  0E00               	movlw	0
  9211  001788  221E               	addwfc	??___ftge+1,f,c
  9212  00178A  221F               	addwfc	??___ftge+2,f,c
  9213  00178C  0E00               	movlw	0
  9214  00178E  241D               	addwf	??___ftge,w,c
  9215  001790  6E17               	movwf	___ftge@ff1,c
  9216  001792  0E00               	movlw	0
  9217  001794  201E               	addwfc	??___ftge+1,w,c
  9218  001796  6E18               	movwf	___ftge@ff1+1,c
  9219  001798  0E80               	movlw	128
  9220  00179A  201F               	addwfc	??___ftge+2,w,c
  9221  00179C  6E19               	movwf	___ftge@ff1+2,c
  9222  00179E                     i1l1410:
  9223  00179E  AE1C               	btfss	___ftge@ff2+2,7,c
  9224  0017A0  D016               	goto	i1l1411
  9225  0017A2  C01A  F01D         	movff	___ftge@ff2,??___ftge
  9226  0017A6  C01B  F01E         	movff	___ftge@ff2+1,??___ftge+1
  9227  0017AA  C01C  F01F         	movff	___ftge@ff2+2,??___ftge+2
  9228  0017AE  1E1D               	comf	??___ftge,f,c
  9229  0017B0  1E1E               	comf	??___ftge+1,f,c
  9230  0017B2  1E1F               	comf	??___ftge+2,f,c
  9231  0017B4  2A1D               	incf	??___ftge,f,c
  9232  0017B6  0E00               	movlw	0
  9233  0017B8  221E               	addwfc	??___ftge+1,f,c
  9234  0017BA  221F               	addwfc	??___ftge+2,f,c
  9235  0017BC  0E00               	movlw	0
  9236  0017BE  241D               	addwf	??___ftge,w,c
  9237  0017C0  6E1A               	movwf	___ftge@ff2,c
  9238  0017C2  0E00               	movlw	0
  9239  0017C4  201E               	addwfc	??___ftge+1,w,c
  9240  0017C6  6E1B               	movwf	___ftge@ff2+1,c
  9241  0017C8  0E80               	movlw	128
  9242  0017CA  201F               	addwfc	??___ftge+2,w,c
  9243  0017CC  6E1C               	movwf	___ftge@ff2+2,c
  9244  0017CE                     i1l1411:
  9245  0017CE  0E00               	movlw	0
  9246  0017D0  1A17               	xorwf	___ftge@ff1,f,c
  9247  0017D2  0E00               	movlw	0
  9248  0017D4  1A18               	xorwf	___ftge@ff1+1,f,c
  9249  0017D6  0E80               	movlw	128
  9250  0017D8  1A19               	xorwf	___ftge@ff1+2,f,c
  9251  0017DA  0E00               	movlw	0
  9252  0017DC  1A1A               	xorwf	___ftge@ff2,f,c
  9253  0017DE  0E00               	movlw	0
  9254  0017E0  1A1B               	xorwf	___ftge@ff2+1,f,c
  9255  0017E2  0E80               	movlw	128
  9256  0017E4  1A1C               	xorwf	___ftge@ff2+2,f,c
  9257  0017E6  501A               	movf	___ftge@ff2,w,c
  9258  0017E8  5C17               	subwf	___ftge@ff1,w,c
  9259  0017EA  501B               	movf	___ftge@ff2+1,w,c
  9260  0017EC  5818               	subwfb	___ftge@ff1+1,w,c
  9261  0017EE  501C               	movf	___ftge@ff2+2,w,c
  9262  0017F0  5819               	subwfb	___ftge@ff1+2,w,c
  9263  0017F2  B0D8               	btfsc	status,0,c
  9264  0017F4  D002               	goto	i1l5292
  9265  0017F6  90D8               	bcf	status,0,c
  9266  0017F8  0012               	return	
  9267  0017FA                     i1l5292:
  9268  0017FA  80D8               	bsf	status,0,c
  9269  0017FC  0012               	return	
  9270  0017FE                     __end_of___ftge:
  9271                           	opt stack 0
  9272                           pclatu	equ	0xFFB
  9273                           pclath	equ	0xFFA
  9274                           tblptru	equ	0xFF8
  9275                           tblptrh	equ	0xFF7
  9276                           tblptrl	equ	0xFF6
  9277                           tablat	equ	0xFF5
  9278                           prodh	equ	0xFF4
  9279                           prodl	equ	0xFF3
  9280                           intcon	equ	0xFF2
  9281                           intcon2	equ	0xFF1
  9282                           intcon3	equ	0xFF0
  9283                           indf0	equ	0xFEF
  9284                           postinc0	equ	0xFEE
  9285                           fsr0h	equ	0xFEA
  9286                           fsr0l	equ	0xFE9
  9287                           wreg	equ	0xFE8
  9288                           indf1	equ	0xFE7
  9289                           fsr1h	equ	0xFE2
  9290                           fsr1l	equ	0xFE1
  9291                           bsr	equ	0xFE0
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function ___awtoft *****************
  9300 ;; Defined at:
  9301 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;  c               2   30[COMRAM] int 
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;  sign            1   33[COMRAM] unsigned char 
  9306 ;; Return value:  Size  Location     Type
  9307 ;;                  3   30[COMRAM] float 
  9308 ;; Registers used:
  9309 ;;		wreg, status,2, status,0, cstack
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9315 ;;      Params:         3       0       0       0       0       0       0
  9316 ;;      Locals:         1       0       0       0       0       0       0
  9317 ;;      Temps:          0       0       0       0       0       0       0
  9318 ;;      Totals:         4       0       0       0       0       0       0
  9319 ;;Total ram usage:        4 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    5
  9322 ;; This function calls:
  9323 ;;		___ftpack
  9324 ;; This function is called by:
  9325 ;;		_ADC_ISR
  9326 ;; This function uses a non-reentrant model
  9327 ;;
  9328                           
  9329                           	psect	text53
  9330  001CA6                     __ptext53:
  9331                           	opt stack 0
  9332  001CA6                     ___awtoft:
  9333                           	opt stack 17
  9334                           
  9335                           ;incstack = 0
  9336  001CA6  0E00               	movlw	0
  9337  001CA8  6E22               	movwf	___awtoft@sign,c
  9338  001CAA  AE20               	btfss	___awtoft@c+1,7,c
  9339  001CAC  D006               	goto	i1l1319
  9340  001CAE  6C1F               	negf	___awtoft@c,c
  9341  001CB0  1E20               	comf	___awtoft@c+1,f,c
  9342  001CB2  B0D8               	btfsc	status,0,c
  9343  001CB4  2A20               	incf	___awtoft@c+1,f,c
  9344  001CB6  0E01               	movlw	1
  9345  001CB8  6E22               	movwf	___awtoft@sign,c
  9346  001CBA                     i1l1319:
  9347  001CBA  C01F  F017         	movff	___awtoft@c,___ftpack@arg
  9348  001CBE  C020  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  9349  001CC2  6A19               	clrf	___ftpack@arg+2,c
  9350  001CC4  0E8E               	movlw	142
  9351  001CC6  6E1A               	movwf	___ftpack@exp,c
  9352  001CC8  C022  F01B         	movff	___awtoft@sign,___ftpack@sign
  9353  001CCC  EC60  F00B         	call	___ftpack	;wreg free
  9354  001CD0  C017  F01F         	movff	?___ftpack,?___awtoft
  9355  001CD4  C018  F020         	movff	?___ftpack+1,?___awtoft+1
  9356  001CD8  C019  F021         	movff	?___ftpack+2,?___awtoft+2
  9357  001CDC  0012               	return	
  9358  001CDE                     __end_of___awtoft:
  9359                           	opt stack 0
  9360                           pclatu	equ	0xFFB
  9361                           pclath	equ	0xFFA
  9362                           tblptru	equ	0xFF8
  9363                           tblptrh	equ	0xFF7
  9364                           tblptrl	equ	0xFF6
  9365                           tablat	equ	0xFF5
  9366                           prodh	equ	0xFF4
  9367                           prodl	equ	0xFF3
  9368                           intcon	equ	0xFF2
  9369                           intcon2	equ	0xFF1
  9370                           intcon3	equ	0xFF0
  9371                           indf0	equ	0xFEF
  9372                           postinc0	equ	0xFEE
  9373                           fsr0h	equ	0xFEA
  9374                           fsr0l	equ	0xFE9
  9375                           wreg	equ	0xFE8
  9376                           indf1	equ	0xFE7
  9377                           fsr1h	equ	0xFE2
  9378                           fsr1l	equ	0xFE1
  9379                           bsr	equ	0xFE0
  9380                           indf2	equ	0xFDF
  9381                           postinc2	equ	0xFDE
  9382                           postdec2	equ	0xFDD
  9383                           fsr2h	equ	0xFDA
  9384                           fsr2l	equ	0xFD9
  9385                           status	equ	0xFD8
  9386                           
  9387 ;; *************** function ___ftpack *****************
  9388 ;; Defined at:
  9389 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  arg             3   22[COMRAM] unsigned um
  9392 ;;  exp             1   25[COMRAM] unsigned char 
  9393 ;;  sign            1   26[COMRAM] unsigned char 
  9394 ;; Auto vars:     Size  Location     Type
  9395 ;;		None
  9396 ;; Return value:  Size  Location     Type
  9397 ;;                  3   22[COMRAM] float 
  9398 ;; Registers used:
  9399 ;;		wreg, status,2, status,0
  9400 ;; Tracked objects:
  9401 ;;		On entry : 0/0
  9402 ;;		On exit  : 0/0
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9405 ;;      Params:         5       0       0       0       0       0       0
  9406 ;;      Locals:         0       0       0       0       0       0       0
  9407 ;;      Temps:          3       0       0       0       0       0       0
  9408 ;;      Totals:         8       0       0       0       0       0       0
  9409 ;;Total ram usage:        8 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    4
  9412 ;; This function calls:
  9413 ;;		Nothing
  9414 ;; This function is called by:
  9415 ;;		___awtoft
  9416 ;;		___ftadd
  9417 ;;		___ftmul
  9418 ;;		___lbtoft
  9419 ;; This function uses a non-reentrant model
  9420 ;;
  9421                           
  9422                           	psect	text54
  9423  0016C0                     __ptext54:
  9424                           	opt stack 0
  9425  0016C0                     ___ftpack:
  9426                           	opt stack 17
  9427                           
  9428                           ;incstack = 0
  9429  0016C0  501A               	movf	___ftpack@exp,w,c
  9430  0016C2  B4D8               	btfsc	status,2,c
  9431  0016C4  D005               	goto	i1u575_20
  9432  0016C6  5017               	movf	___ftpack@arg,w,c
  9433  0016C8  1018               	iorwf	___ftpack@arg+1,w,c
  9434  0016CA  1019               	iorwf	___ftpack@arg+2,w,c
  9435  0016CC  A4D8               	btfss	status,2,c
  9436  0016CE  D00C               	goto	i1l1338
  9437  0016D0                     i1u575_20:
  9438  0016D0  0E00               	movlw	0
  9439  0016D2  6E17               	movwf	?___ftpack,c
  9440  0016D4  0E00               	movlw	0
  9441  0016D6  6E18               	movwf	?___ftpack+1,c
  9442  0016D8  0E00               	movlw	0
  9443  0016DA  6E19               	movwf	?___ftpack+2,c
  9444  0016DC  0012               	return	
  9445  0016DE  2A1A               	incf	___ftpack@exp,f,c
  9446  0016E0  90D8               	bcf	status,0,c
  9447  0016E2  3219               	rrcf	___ftpack@arg+2,f,c
  9448  0016E4  3218               	rrcf	___ftpack@arg+1,f,c
  9449  0016E6  3217               	rrcf	___ftpack@arg,f,c
  9450  0016E8                     i1l1338:
  9451  0016E8  0E00               	movlw	0
  9452  0016EA  1417               	andwf	___ftpack@arg,w,c
  9453  0016EC  6E1C               	movwf	??___ftpack& (0+255),c
  9454  0016EE  0E00               	movlw	0
  9455  0016F0  1418               	andwf	___ftpack@arg+1,w,c
  9456  0016F2  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  9457  0016F4  0EFE               	movlw	254
  9458  0016F6  1419               	andwf	___ftpack@arg+2,w,c
  9459  0016F8  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  9460  0016FA  501C               	movf	??___ftpack,w,c
  9461  0016FC  101D               	iorwf	??___ftpack+1,w,c
  9462  0016FE  101E               	iorwf	??___ftpack+2,w,c
  9463  001700  B4D8               	btfsc	status,2,c
  9464  001702  D00C               	goto	i1l1341
  9465  001704  D7EC               	goto	i1l1339
  9466  001706  2A1A               	incf	___ftpack@exp,f,c
  9467  001708  0E01               	movlw	1
  9468  00170A  2617               	addwf	___ftpack@arg,f,c
  9469  00170C  0E00               	movlw	0
  9470  00170E  2218               	addwfc	___ftpack@arg+1,f,c
  9471  001710  0E00               	movlw	0
  9472  001712  2219               	addwfc	___ftpack@arg+2,f,c
  9473  001714  90D8               	bcf	status,0,c
  9474  001716  3219               	rrcf	___ftpack@arg+2,f,c
  9475  001718  3218               	rrcf	___ftpack@arg+1,f,c
  9476  00171A  3217               	rrcf	___ftpack@arg,f,c
  9477  00171C                     i1l1341:
  9478  00171C  0E00               	movlw	0
  9479  00171E  1417               	andwf	___ftpack@arg,w,c
  9480  001720  6E1C               	movwf	??___ftpack& (0+255),c
  9481  001722  0E00               	movlw	0
  9482  001724  1418               	andwf	___ftpack@arg+1,w,c
  9483  001726  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  9484  001728  0EFF               	movlw	255
  9485  00172A  1419               	andwf	___ftpack@arg+2,w,c
  9486  00172C  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  9487  00172E  501C               	movf	??___ftpack,w,c
  9488  001730  101D               	iorwf	??___ftpack+1,w,c
  9489  001732  101E               	iorwf	??___ftpack+2,w,c
  9490  001734  B4D8               	btfsc	status,2,c
  9491  001736  D006               	goto	i1l1344
  9492  001738  D7E6               	goto	i1l1342
  9493  00173A  061A               	decf	___ftpack@exp,f,c
  9494  00173C  90D8               	bcf	status,0,c
  9495  00173E  3617               	rlcf	___ftpack@arg,f,c
  9496  001740  3618               	rlcf	___ftpack@arg+1,f,c
  9497  001742  3619               	rlcf	___ftpack@arg+2,f,c
  9498  001744                     i1l1344:
  9499  001744  BE18               	btfsc	___ftpack@arg+1,7,c
  9500  001746  D003               	goto	i1u579_20
  9501  001748  0E02               	movlw	2
  9502  00174A  601A               	cpfslt	___ftpack@exp,c
  9503  00174C  D7F6               	goto	i1l1345
  9504  00174E                     i1u579_20:
  9505  00174E  A01A               	btfss	___ftpack@exp,0,c
  9506  001750  9E18               	bcf	___ftpack@arg+1,7,c
  9507  001752  90D8               	bcf	status,0,c
  9508  001754  321A               	rrcf	___ftpack@exp,f,c
  9509  001756  501A               	movf	___ftpack@exp,w,c
  9510  001758  1219               	iorwf	___ftpack@arg+2,f,c
  9511  00175A  501B               	movf	___ftpack@sign,w,c
  9512  00175C  A4D8               	btfss	status,2,c
  9513  00175E  8E19               	bsf	___ftpack@arg+2,7,c
  9514  001760  C017  F017         	movff	___ftpack@arg,?___ftpack
  9515  001764  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  9516  001768  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  9517  00176C  0012               	return	
  9518  00176E                     __end_of___ftpack:
  9519                           	opt stack 0
  9520                           pclatu	equ	0xFFB
  9521                           pclath	equ	0xFFA
  9522                           tblptru	equ	0xFF8
  9523                           tblptrh	equ	0xFF7
  9524                           tblptrl	equ	0xFF6
  9525                           tablat	equ	0xFF5
  9526                           prodh	equ	0xFF4
  9527                           prodl	equ	0xFF3
  9528                           intcon	equ	0xFF2
  9529                           intcon2	equ	0xFF1
  9530                           intcon3	equ	0xFF0
  9531                           indf0	equ	0xFEF
  9532                           postinc0	equ	0xFEE
  9533                           fsr0h	equ	0xFEA
  9534                           fsr0l	equ	0xFE9
  9535                           wreg	equ	0xFE8
  9536                           indf1	equ	0xFE7
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           bsr	equ	0xFE0
  9540                           indf2	equ	0xFDF
  9541                           postinc2	equ	0xFDE
  9542                           postdec2	equ	0xFDD
  9543                           fsr2h	equ	0xFDA
  9544                           fsr2l	equ	0xFD9
  9545                           status	equ	0xFD8
  9546                           
  9547 ;; *************** function _ADC_GetConversionResult *****************
  9548 ;; Defined at:
  9549 ;;		line 98 in file "mcc_generated_files/adc.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;		None
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  2   22[COMRAM] unsigned int 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9563 ;;      Params:         2       0       0       0       0       0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0
  9565 ;;      Temps:          2       0       0       0       0       0       0
  9566 ;;      Totals:         4       0       0       0       0       0       0
  9567 ;;Total ram usage:        4 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    4
  9570 ;; This function calls:
  9571 ;;		Nothing
  9572 ;; This function is called by:
  9573 ;;		_ADC_ISR
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           	psect	text55
  9578  001FD2                     __ptext55:
  9579                           	opt stack 0
  9580  001FD2                     _ADC_GetConversionResult:
  9581                           	opt stack 18
  9582                           
  9583                           ;adc.c: 100: return ((adc_result_t) ((ADRESH << 8) + ADRESL));
  9584                           
  9585                           ;incstack = 0
  9586  001FD2  50C4               	movf	4036,w,c	;volatile
  9587  001FD4  6E1A               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  9588  001FD6  6A19               	clrf	??_ADC_GetConversionResult& (0+255),c
  9589  001FD8  50C3               	movf	4035,w,c	;volatile
  9590  001FDA  2419               	addwf	??_ADC_GetConversionResult,w,c
  9591  001FDC  6E17               	movwf	?_ADC_GetConversionResult,c
  9592  001FDE  0E00               	movlw	0
  9593  001FE0  201A               	addwfc	??_ADC_GetConversionResult+1,w,c
  9594  001FE2  6E18               	movwf	?_ADC_GetConversionResult+1,c
  9595  001FE4  0012               	return	
  9596  001FE6                     __end_of_ADC_GetConversionResult:
  9597                           	opt stack 0
  9598                           pclatu	equ	0xFFB
  9599                           pclath	equ	0xFFA
  9600                           tblptru	equ	0xFF8
  9601                           tblptrh	equ	0xFF7
  9602                           tblptrl	equ	0xFF6
  9603                           tablat	equ	0xFF5
  9604                           prodh	equ	0xFF4
  9605                           prodl	equ	0xFF3
  9606                           intcon	equ	0xFF2
  9607                           intcon2	equ	0xFF1
  9608                           intcon3	equ	0xFF0
  9609                           indf0	equ	0xFEF
  9610                           postinc0	equ	0xFEE
  9611                           fsr0h	equ	0xFEA
  9612                           fsr0l	equ	0xFE9
  9613                           wreg	equ	0xFE8
  9614                           indf1	equ	0xFE7
  9615                           fsr1h	equ	0xFE2
  9616                           fsr1l	equ	0xFE1
  9617                           bsr	equ	0xFE0
  9618                           indf2	equ	0xFDF
  9619                           postinc2	equ	0xFDE
  9620                           postdec2	equ	0xFDD
  9621                           fsr2h	equ	0xFDA
  9622                           fsr2l	equ	0xFD9
  9623                           status	equ	0xFD8
  9624                           
  9625 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
  9626 ;; Defined at:
  9627 ;;		line 84 in file "mcc_generated_files/interrupt_manager.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;		None
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;		None
  9632 ;; Return value:  Size  Location     Type
  9633 ;;                  1    wreg      void 
  9634 ;; Registers used:
  9635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9641 ;;      Params:         0       0       0       0       0       0       0
  9642 ;;      Locals:         0       0       0       0       0       0       0
  9643 ;;      Temps:         18       0       0       0       0       0       0
  9644 ;;      Totals:        18       0       0       0       0       0       0
  9645 ;;Total ram usage:       18 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:    3
  9648 ;; This function calls:
  9649 ;;		_I2C1_BusCollisionISR
  9650 ;;		_I2C1_ISR
  9651 ;;		_INT0_ISR
  9652 ;;		_INT1_ISR
  9653 ;;		_INT2_ISR
  9654 ;;		_TMR0_ISR
  9655 ;; This function is called by:
  9656 ;;		Interrupt level 2
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	intcode
  9661  000008                     __pintcode:
  9662                           	opt stack 0
  9663  000008                     _INTERRUPT_InterruptManagerHigh:
  9664                           	opt stack 16
  9665                           
  9666                           ;incstack = 0
  9667  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9668  00000A  EF22  F00A         	goto	int_func
  9669                           pclatu	equ	0xFFB
  9670                           pclath	equ	0xFFA
  9671                           tblptru	equ	0xFF8
  9672                           tblptrh	equ	0xFF7
  9673                           tblptrl	equ	0xFF6
  9674                           tablat	equ	0xFF5
  9675                           prodh	equ	0xFF4
  9676                           prodl	equ	0xFF3
  9677                           intcon	equ	0xFF2
  9678                           intcon2	equ	0xFF1
  9679                           intcon3	equ	0xFF0
  9680                           indf0	equ	0xFEF
  9681                           postinc0	equ	0xFEE
  9682                           fsr0h	equ	0xFEA
  9683                           fsr0l	equ	0xFE9
  9684                           wreg	equ	0xFE8
  9685                           indf1	equ	0xFE7
  9686                           fsr1h	equ	0xFE2
  9687                           fsr1l	equ	0xFE1
  9688                           bsr	equ	0xFE0
  9689                           indf2	equ	0xFDF
  9690                           postinc2	equ	0xFDE
  9691                           postdec2	equ	0xFDD
  9692                           fsr2h	equ	0xFDA
  9693                           fsr2l	equ	0xFD9
  9694                           status	equ	0xFD8
  9695                           
  9696                           	psect	intcode_body
  9697  001444                     __pintcode_body:
  9698                           	opt stack 16
  9699  001444                     int_func:
  9700                           	opt stack 16
  9701  001444  CFFA F005          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
  9702  001448  CFFB F006          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
  9703  00144C  CFE9 F007          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
  9704  001450  CFEA F008          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
  9705  001454  CFE1 F009          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
  9706  001458  CFE2 F00A          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
  9707  00145C  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
  9708  001460  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
  9709  001464  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
  9710  001468  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
  9711  00146C  CFF6 F00F          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
  9712  001470  CFF7 F010          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
  9713  001474  CFF8 F011          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
  9714  001478  CFF5 F012          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
  9715  00147C  C049  F013         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
  9716  001480  C04A  F014         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
  9717  001484  C04B  F015         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
  9718  001488  C04C  F016         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
  9719                           
  9720                           ;interrupt_manager.c: 87: if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  9721  00148C  B8F2               	btfsc	intcon,4,c	;volatile
  9722  00148E  A2F2               	btfss	intcon,1,c	;volatile
  9723  001490  D003               	goto	i2l116
  9724                           
  9725                           ;interrupt_manager.c: 88: {
  9726                           ;interrupt_manager.c: 89: INT0_ISR();
  9727  001492  ECE2  F00E         	call	_INT0_ISR	;wreg free
  9728                           
  9729                           ;interrupt_manager.c: 90: }
  9730  001496  D01D               	goto	i2l126
  9731  001498                     i2l116:
  9732                           
  9733                           ;interrupt_manager.c: 91: else if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
  9734  001498  B6F0               	btfsc	intcon3,3,c	;volatile
  9735  00149A  A0F0               	btfss	intcon3,0,c	;volatile
  9736  00149C  D003               	goto	i2l118
  9737                           
  9738                           ;interrupt_manager.c: 92: {
  9739                           ;interrupt_manager.c: 93: INT1_ISR();
  9740  00149E  ECCC  F00E         	call	_INT1_ISR	;wreg free
  9741                           
  9742                           ;interrupt_manager.c: 94: }
  9743  0014A2  D017               	goto	i2l126
  9744  0014A4                     i2l118:
  9745                           
  9746                           ;interrupt_manager.c: 95: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
  9747  0014A4  B8F0               	btfsc	intcon3,4,c	;volatile
  9748  0014A6  A2F0               	btfss	intcon3,1,c	;volatile
  9749  0014A8  D003               	goto	i2l120
  9750                           
  9751                           ;interrupt_manager.c: 96: {
  9752                           ;interrupt_manager.c: 97: INT2_ISR();
  9753  0014AA  ECB6  F00E         	call	_INT2_ISR	;wreg free
  9754                           
  9755                           ;interrupt_manager.c: 98: }
  9756  0014AE  D011               	goto	i2l126
  9757  0014B0                     i2l120:
  9758                           
  9759                           ;interrupt_manager.c: 99: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  9760  0014B0  BAF2               	btfsc	intcon,5,c	;volatile
  9761  0014B2  A4F2               	btfss	intcon,2,c	;volatile
  9762  0014B4  D003               	goto	i2l122
  9763                           
  9764                           ;interrupt_manager.c: 100: {
  9765                           ;interrupt_manager.c: 101: TMR0_ISR();
  9766  0014B6  EC13  F008         	call	_TMR0_ISR	;wreg free
  9767                           
  9768                           ;interrupt_manager.c: 102: }
  9769  0014BA  D00B               	goto	i2l126
  9770  0014BC                     i2l122:
  9771                           
  9772                           ;interrupt_manager.c: 103: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  9773  0014BC  B69D               	btfsc	3997,3,c	;volatile
  9774  0014BE  A69E               	btfss	3998,3,c	;volatile
  9775  0014C0  D003               	goto	i2l124
  9776                           
  9777                           ;interrupt_manager.c: 104: {
  9778                           ;interrupt_manager.c: 105: I2C1_ISR();
  9779  0014C2  EC52  F003         	call	_I2C1_ISR	;wreg free
  9780                           
  9781                           ;interrupt_manager.c: 106: }
  9782  0014C6  D005               	goto	i2l126
  9783  0014C8                     i2l124:
  9784                           
  9785                           ;interrupt_manager.c: 107: else if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  9786  0014C8  B6A0               	btfsc	4000,3,c	;volatile
  9787  0014CA  A6A1               	btfss	4001,3,c	;volatile
  9788  0014CC  D002               	goto	i2l126
  9789                           
  9790                           ;interrupt_manager.c: 108: {
  9791                           ;interrupt_manager.c: 109: I2C1_BusCollisionISR();
  9792  0014CE  EC4B  F010         	call	_I2C1_BusCollisionISR	;wreg free
  9793  0014D2                     i2l126:
  9794                           
  9795                           ;interrupt_manager.c: 111: else
  9796                           ;interrupt_manager.c: 112: {
  9797  0014D2  C016  F04C         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
  9798  0014D6  C015  F04B         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
  9799  0014DA  C014  F04A         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
  9800  0014DE  C013  F049         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
  9801  0014E2  C012  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
  9802  0014E6  C011  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
  9803  0014EA  C010  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
  9804  0014EE  C00F  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
  9805  0014F2  C00E  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
  9806  0014F6  C00D  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
  9807  0014FA  C00C  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
  9808  0014FE  C00B  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
  9809  001502  C00A  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
  9810  001506  C009  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
  9811  00150A  C008  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
  9812  00150E  C007  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
  9813  001512  C006  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
  9814  001516  C005  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
  9815  00151A  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9816  00151C  0011               	retfie		f
  9817  00151E                     __end_of_INTERRUPT_InterruptManagerHigh:
  9818                           	opt stack 0
  9819                           pclatu	equ	0xFFB
  9820                           pclath	equ	0xFFA
  9821                           tblptru	equ	0xFF8
  9822                           tblptrh	equ	0xFF7
  9823                           tblptrl	equ	0xFF6
  9824                           tablat	equ	0xFF5
  9825                           prodh	equ	0xFF4
  9826                           prodl	equ	0xFF3
  9827                           intcon	equ	0xFF2
  9828                           intcon2	equ	0xFF1
  9829                           intcon3	equ	0xFF0
  9830                           indf0	equ	0xFEF
  9831                           postinc0	equ	0xFEE
  9832                           fsr0h	equ	0xFEA
  9833                           fsr0l	equ	0xFE9
  9834                           wreg	equ	0xFE8
  9835                           indf1	equ	0xFE7
  9836                           fsr1h	equ	0xFE2
  9837                           fsr1l	equ	0xFE1
  9838                           bsr	equ	0xFE0
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           postdec2	equ	0xFDD
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function _TMR0_ISR *****************
  9847 ;; Defined at:
  9848 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;		None
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;		None
  9853 ;; Return value:  Size  Location     Type
  9854 ;;                  1    wreg      void 
  9855 ;; Registers used:
  9856 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9862 ;;      Params:         0       0       0       0       0       0       0
  9863 ;;      Locals:         0       0       0       0       0       0       0
  9864 ;;      Temps:          0       0       0       0       0       0       0
  9865 ;;      Totals:         0       0       0       0       0       0       0
  9866 ;;Total ram usage:        0 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:    1
  9869 ;; This function calls:
  9870 ;;		Absolute function
  9871 ;;		_ADC_StartConversion
  9872 ;;		_EPWM1_LoadDutyValue
  9873 ;;		_TMR0_DefaultInterruptHandler
  9874 ;;		_TMR2_LoadPeriodRegister
  9875 ;;		_TMR2_StartTimer
  9876 ;;		_TMR2_StopTimer
  9877 ;; This function is called by:
  9878 ;;		_INTERRUPT_InterruptManagerHigh
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text57
  9883  001026                     __ptext57:
  9884                           	opt stack 0
  9885  001026                     _TMR0_ISR:
  9886                           	opt stack 17
  9887                           
  9888                           ;tmr0.c: 136: INTCONbits.TMR0IF = 0;
  9889                           
  9890                           ;incstack = 0
  9891  001026  94F2               	bcf	intcon,2,c	;volatile
  9892                           
  9893                           ;tmr0.c: 140: TMR0H = timer0ReloadVal >> 8;
  9894  001028  5046               	movf	_timer0ReloadVal+1,w,c	;volatile
  9895  00102A  6ED7               	movwf	4055,c	;volatile
  9896                           
  9897                           ;tmr0.c: 141: TMR0L = ( uint8_t ) timer0ReloadVal;
  9898  00102C  C045  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  9899                           
  9900                           ;tmr0.c: 143: if (TMR0_InterruptHandler) {
  9901  001030  0100               	movlb	0	; () banked
  9902  001032  51D4               	movf	_TMR0_InterruptHandler& (0+255),w,b
  9903  001034  11D5               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  9904  001036  B4D8               	btfsc	status,2,c
  9905  001038  D00C               	goto	i2u451_49
  9906                           
  9907                           ; BSR set to: 0
  9908                           ;tmr0.c: 144: TMR0_InterruptHandler();
  9909  00103A  D801               	call	i2u451_48
  9910  00103C  D00A               	goto	i2u451_49
  9911  00103E                     i2u451_48:
  9912  00103E  0005               	push	
  9913  001040  6EFA               	movwf	pclath,c
  9914  001042  51D4               	movf	_TMR0_InterruptHandler& (0+255),w,b
  9915  001044  6EFD               	movwf	tosl,c
  9916  001046  51D5               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  9917  001048  6EFE               	movwf	tosh,c
  9918  00104A  50F8               	movf	tblptru,w,c
  9919  00104C  6EFF               	movwf	tosu,c
  9920  00104E  50FA               	movf	pclath,w,c
  9921  001050  0012               	return		;indir
  9922  001052                     i2u451_49:
  9923                           
  9924                           ;tmr0.c: 145: }
  9925                           ;tmr0.c: 148: clk4Hz = !clk4Hz;
  9926  001052  503F               	movf	_clk4Hz,w,c	;volatile
  9927  001054  A4D8               	btfss	status,2,c
  9928  001056  D002               	goto	i2u452_40
  9929  001058  0E01               	movlw	1
  9930  00105A  D001               	goto	i2u453_40
  9931  00105C                     i2u452_40:
  9932  00105C  0E00               	movlw	0
  9933  00105E                     i2u453_40:
  9934  00105E  6E3F               	movwf	_clk4Hz,c	;volatile
  9935                           
  9936                           ;tmr0.c: 149: if (clk4Hz) {
  9937  001060  503F               	movf	_clk4Hz,w,c	;volatile
  9938  001062  B4D8               	btfsc	status,2,c
  9939  001064  D009               	goto	i2l353
  9940                           
  9941                           ;tmr0.c: 150: ADC_StartConversion();
  9942  001066  EC43  F010         	call	_ADC_StartConversion	;wreg free
  9943                           
  9944                           ;tmr0.c: 151: clk2Hz = !clk2Hz;
  9945  00106A  503E               	movf	_clk2Hz,w,c	;volatile
  9946  00106C  A4D8               	btfss	status,2,c
  9947  00106E  D002               	goto	i2u455_40
  9948  001070  0E01               	movlw	1
  9949  001072  D001               	goto	i2u456_40
  9950  001074                     i2u455_40:
  9951  001074  0E00               	movlw	0
  9952  001076                     i2u456_40:
  9953  001076  6E3E               	movwf	_clk2Hz,c	;volatile
  9954  001078                     i2l353:
  9955                           
  9956                           ;tmr0.c: 152: }
  9957                           ;tmr0.c: 153: if (clk2Hz && clk4Hz)
  9958  001078  503E               	movf	_clk2Hz,w,c	;volatile
  9959  00107A  B4D8               	btfsc	status,2,c
  9960  00107C  D00A               	goto	i2l354
  9961  00107E  503F               	movf	_clk4Hz,w,c	;volatile
  9962  001080  B4D8               	btfsc	status,2,c
  9963  001082  D007               	goto	i2l354
  9964                           
  9965                           ;tmr0.c: 154: clk1Hz = !clk1Hz;
  9966  001084  503D               	movf	_clk1Hz,w,c	;volatile
  9967  001086  A4D8               	btfss	status,2,c
  9968  001088  D002               	goto	i2u459_40
  9969  00108A  0E01               	movlw	1
  9970  00108C  D001               	goto	i2u460_40
  9971  00108E                     i2u459_40:
  9972  00108E  0E00               	movlw	0
  9973  001090                     i2u460_40:
  9974  001090  6E3D               	movwf	_clk1Hz,c	;volatile
  9975  001092                     i2l354:
  9976                           
  9977                           ;tmr0.c: 155: if (clk1Hz && clk2Hz && clk4Hz)
  9978  001092  503D               	movf	_clk1Hz,w,c	;volatile
  9979  001094  B4D8               	btfsc	status,2,c
  9980  001096  D00D               	goto	i2l355
  9981  001098  503E               	movf	_clk2Hz,w,c	;volatile
  9982  00109A  B4D8               	btfsc	status,2,c
  9983  00109C  D00A               	goto	i2l355
  9984  00109E  503F               	movf	_clk4Hz,w,c	;volatile
  9985  0010A0  B4D8               	btfsc	status,2,c
  9986  0010A2  D007               	goto	i2l355
  9987                           
  9988                           ;tmr0.c: 156: clk1_2Hz = !clk1_2Hz;
  9989  0010A4  503C               	movf	_clk1_2Hz,w,c	;volatile
  9990  0010A6  A4D8               	btfss	status,2,c
  9991  0010A8  D002               	goto	i2u464_40
  9992  0010AA  0E01               	movlw	1
  9993  0010AC  D001               	goto	i2u465_40
  9994  0010AE                     i2u464_40:
  9995  0010AE  0E00               	movlw	0
  9996  0010B0                     i2u465_40:
  9997  0010B0  6E3C               	movwf	_clk1_2Hz,c	;volatile
  9998  0010B2                     i2l355:
  9999                           
 10000                           ;tmr0.c: 157: if (clk1_2Hz && clk1Hz && clk2Hz && clk4Hz)
 10001  0010B2  503C               	movf	_clk1_2Hz,w,c	;volatile
 10002  0010B4  B4D8               	btfsc	status,2,c
 10003  0010B6  D010               	goto	i2l356
 10004  0010B8  503D               	movf	_clk1Hz,w,c	;volatile
 10005  0010BA  B4D8               	btfsc	status,2,c
 10006  0010BC  D00D               	goto	i2l356
 10007  0010BE  503E               	movf	_clk2Hz,w,c	;volatile
 10008  0010C0  B4D8               	btfsc	status,2,c
 10009  0010C2  D00A               	goto	i2l356
 10010  0010C4  503F               	movf	_clk4Hz,w,c	;volatile
 10011  0010C6  B4D8               	btfsc	status,2,c
 10012  0010C8  D007               	goto	i2l356
 10013                           
 10014                           ;tmr0.c: 158: clk1_4Hz = !clk1_4Hz;
 10015  0010CA  503B               	movf	_clk1_4Hz,w,c	;volatile
 10016  0010CC  A4D8               	btfss	status,2,c
 10017  0010CE  D002               	goto	i2u470_40
 10018  0010D0  0E01               	movlw	1
 10019  0010D2  D001               	goto	i2u471_40
 10020  0010D4                     i2u470_40:
 10021  0010D4  0E00               	movlw	0
 10022  0010D6                     i2u471_40:
 10023  0010D6  6E3B               	movwf	_clk1_4Hz,c	;volatile
 10024  0010D8                     i2l356:
 10025                           
 10026                           ;tmr0.c: 159: if (clk1_4Hz && clk1_2Hz && clk1Hz && clk2Hz && clk4Hz)
 10027  0010D8  503B               	movf	_clk1_4Hz,w,c	;volatile
 10028  0010DA  B4D8               	btfsc	status,2,c
 10029  0010DC  D013               	goto	i2l357
 10030  0010DE  503C               	movf	_clk1_2Hz,w,c	;volatile
 10031  0010E0  B4D8               	btfsc	status,2,c
 10032  0010E2  D010               	goto	i2l357
 10033  0010E4  503D               	movf	_clk1Hz,w,c	;volatile
 10034  0010E6  B4D8               	btfsc	status,2,c
 10035  0010E8  D00D               	goto	i2l357
 10036  0010EA  503E               	movf	_clk2Hz,w,c	;volatile
 10037  0010EC  B4D8               	btfsc	status,2,c
 10038  0010EE  D00A               	goto	i2l357
 10039  0010F0  503F               	movf	_clk4Hz,w,c	;volatile
 10040  0010F2  B4D8               	btfsc	status,2,c
 10041  0010F4  D007               	goto	i2l357
 10042                           
 10043                           ;tmr0.c: 160: clk1_8Hz = !clk1_8Hz;
 10044  0010F6  503A               	movf	_clk1_8Hz,w,c	;volatile
 10045  0010F8  A4D8               	btfss	status,2,c
 10046  0010FA  D002               	goto	i2u477_40
 10047  0010FC  0E01               	movlw	1
 10048  0010FE  D001               	goto	i2u478_40
 10049  001100                     i2u477_40:
 10050  001100  0E00               	movlw	0
 10051  001102                     i2u478_40:
 10052  001102  6E3A               	movwf	_clk1_8Hz,c	;volatile
 10053  001104                     i2l357:
 10054                           
 10055                           ;tmr0.c: 162: if (( int ) tempAtual > tempAlarme) {
 10056  001104  5047               	movf	_tempAtual,w,c	;volatile
 10057  001106  5C48               	subwf	_tempAlarme,w,c	;volatile
 10058  001108  B0D8               	btfsc	status,0,c
 10059  00110A  D023               	goto	i2l358
 10060                           
 10061                           ;tmr0.c: 163: alarme = 1;
 10062  00110C  0E01               	movlw	1
 10063  00110E  6E39               	movwf	_alarme,c	;volatile
 10064                           
 10065                           ;tmr0.c: 165: TMR2_StartTimer();
 10066  001110  EC41  F010         	call	_TMR2_StartTimer	;wreg free
 10067                           
 10068                           ;tmr0.c: 168: switch (clk2Hz) {
 10069  001114  D016               	goto	i2l359
 10070  001116                     
 10071                           ;tmr0.c: 170: EPWM1_LoadDutyValue(124);
 10072  001116  0E00               	movlw	0
 10073  001118  6E02               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
 10074  00111A  0E7C               	movlw	124
 10075  00111C  6E01               	movwf	EPWM1_LoadDutyValue@dutyValue,c
 10076  00111E  EC87  F00E         	call	_EPWM1_LoadDutyValue	;wreg free
 10077                           
 10078                           ;tmr0.c: 171: TMR2_LoadPeriodRegister(249);
 10079  001122  0EF9               	movlw	249
 10080  001124  EC35  F010         	call	_TMR2_LoadPeriodRegister
 10081                           
 10082                           ;tmr0.c: 172: do { LATBbits.LATB7 = 0; } while(0);
 10083  001128  9E8A               	bcf	3978,7,c	;volatile
 10084                           
 10085                           ;tmr0.c: 173: break;
 10086  00112A  0012               	return	
 10087  00112C                     
 10088                           ;tmr0.c: 175: EPWM1_LoadDutyValue(74);
 10089  00112C  0E00               	movlw	0
 10090  00112E  6E02               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
 10091  001130  0E4A               	movlw	74
 10092  001132  6E01               	movwf	EPWM1_LoadDutyValue@dutyValue,c
 10093  001134  EC87  F00E         	call	_EPWM1_LoadDutyValue	;wreg free
 10094                           
 10095                           ;tmr0.c: 176: TMR2_LoadPeriodRegister(149);
 10096  001138  0E95               	movlw	149
 10097  00113A  EC35  F010         	call	_TMR2_LoadPeriodRegister
 10098                           
 10099                           ;tmr0.c: 177: do { LATBbits.LATB7 = 1; } while(0);
 10100  00113E  8E8A               	bsf	3978,7,c	;volatile
 10101                           
 10102                           ;tmr0.c: 179: }
 10103                           
 10104                           ;tmr0.c: 178: break;
 10105  001140  0012               	return	
 10106  001142                     i2l359:
 10107  001142  503E               	movf	_clk2Hz,w,c	;volatile
 10108                           
 10109                           ; Switch size 1, requested type "space"
 10110                           ; Number of cases is 2, Range of values is 0 to 1
 10111                           ; switch strategies available:
 10112                           ; Name         Instructions Cycles
 10113                           ; simple_byte            7     4 (average)
 10114                           ;	Chosen strategy is simple_byte
 10115  001144  0A00               	xorlw	0	; case 0
 10116  001146  B4D8               	btfsc	status,2,c
 10117  001148  D7E6               	goto	i2l360
 10118  00114A  0A01               	xorlw	1	; case 1
 10119  00114C  A4D8               	btfss	status,2,c
 10120                           
 10121                           ;tmr0.c: 180: } else {
 10122  00114E  0012               	return	
 10123  001150  D7ED               	goto	i2l364
 10124  001152                     i2l358:
 10125                           
 10126                           ;tmr0.c: 181: alarme = 0;
 10127  001152  0E00               	movlw	0
 10128  001154  6E39               	movwf	_alarme,c	;volatile
 10129                           
 10130                           ;tmr0.c: 182: TMR2_StopTimer();
 10131  001156  EC3F  F010         	call	_TMR2_StopTimer	;wreg free
 10132                           
 10133                           ;tmr0.c: 183: do { LATBbits.LATB7 = 0; } while(0);
 10134  00115A  9E8A               	bcf	3978,7,c	;volatile
 10135  00115C  0012               	return	
 10136  00115E                     __end_of_TMR0_ISR:
 10137                           	opt stack 0
 10138                           tosu	equ	0xFFF
 10139                           tosh	equ	0xFFE
 10140                           tosl	equ	0xFFD
 10141                           pclatu	equ	0xFFB
 10142                           pclath	equ	0xFFA
 10143                           tblptru	equ	0xFF8
 10144                           tblptrh	equ	0xFF7
 10145                           tblptrl	equ	0xFF6
 10146                           tablat	equ	0xFF5
 10147                           prodh	equ	0xFF4
 10148                           prodl	equ	0xFF3
 10149                           intcon	equ	0xFF2
 10150                           intcon2	equ	0xFF1
 10151                           intcon3	equ	0xFF0
 10152                           indf0	equ	0xFEF
 10153                           postinc0	equ	0xFEE
 10154                           fsr0h	equ	0xFEA
 10155                           fsr0l	equ	0xFE9
 10156                           wreg	equ	0xFE8
 10157                           indf1	equ	0xFE7
 10158                           fsr1h	equ	0xFE2
 10159                           fsr1l	equ	0xFE1
 10160                           bsr	equ	0xFE0
 10161                           indf2	equ	0xFDF
 10162                           postinc2	equ	0xFDE
 10163                           postdec2	equ	0xFDD
 10164                           fsr2h	equ	0xFDA
 10165                           fsr2l	equ	0xFD9
 10166                           status	equ	0xFD8
 10167                           
 10168 ;; *************** function _TMR2_StopTimer *****************
 10169 ;; Defined at:
 10170 ;;		line 84 in file "mcc_generated_files/tmr2.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;		None
 10173 ;; Auto vars:     Size  Location     Type
 10174 ;;		None
 10175 ;; Return value:  Size  Location     Type
 10176 ;;                  1    wreg      void 
 10177 ;; Registers used:
 10178 ;;		None
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10184 ;;      Params:         0       0       0       0       0       0       0
 10185 ;;      Locals:         0       0       0       0       0       0       0
 10186 ;;      Temps:          0       0       0       0       0       0       0
 10187 ;;      Totals:         0       0       0       0       0       0       0
 10188 ;;Total ram usage:        0 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; This function calls:
 10191 ;;		Nothing
 10192 ;; This function is called by:
 10193 ;;		_TMR0_ISR
 10194 ;; This function uses a non-reentrant model
 10195 ;;
 10196                           
 10197                           	psect	text58
 10198  00207E                     __ptext58:
 10199                           	opt stack 0
 10200  00207E                     _TMR2_StopTimer:
 10201                           	opt stack 17
 10202                           
 10203                           ;tmr2.c: 87: T2CONbits.TMR2ON = 0;
 10204                           
 10205                           ;incstack = 0
 10206  00207E  94BA               	bcf	4026,2,c	;volatile
 10207  002080  0012               	return		;funcret
 10208  002082                     __end_of_TMR2_StopTimer:
 10209                           	opt stack 0
 10210                           tosu	equ	0xFFF
 10211                           tosh	equ	0xFFE
 10212                           tosl	equ	0xFFD
 10213                           pclatu	equ	0xFFB
 10214                           pclath	equ	0xFFA
 10215                           tblptru	equ	0xFF8
 10216                           tblptrh	equ	0xFF7
 10217                           tblptrl	equ	0xFF6
 10218                           tablat	equ	0xFF5
 10219                           prodh	equ	0xFF4
 10220                           prodl	equ	0xFF3
 10221                           intcon	equ	0xFF2
 10222                           intcon2	equ	0xFF1
 10223                           intcon3	equ	0xFF0
 10224                           indf0	equ	0xFEF
 10225                           postinc0	equ	0xFEE
 10226                           fsr0h	equ	0xFEA
 10227                           fsr0l	equ	0xFE9
 10228                           wreg	equ	0xFE8
 10229                           indf1	equ	0xFE7
 10230                           fsr1h	equ	0xFE2
 10231                           fsr1l	equ	0xFE1
 10232                           bsr	equ	0xFE0
 10233                           indf2	equ	0xFDF
 10234                           postinc2	equ	0xFDE
 10235                           postdec2	equ	0xFDD
 10236                           fsr2h	equ	0xFDA
 10237                           fsr2l	equ	0xFD9
 10238                           status	equ	0xFD8
 10239                           
 10240 ;; *************** function _TMR2_StartTimer *****************
 10241 ;; Defined at:
 10242 ;;		line 78 in file "mcc_generated_files/tmr2.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;		None
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;		None
 10247 ;; Return value:  Size  Location     Type
 10248 ;;                  1    wreg      void 
 10249 ;; Registers used:
 10250 ;;		None
 10251 ;; Tracked objects:
 10252 ;;		On entry : 0/0
 10253 ;;		On exit  : 0/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10256 ;;      Params:         0       0       0       0       0       0       0
 10257 ;;      Locals:         0       0       0       0       0       0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0
 10259 ;;      Totals:         0       0       0       0       0       0       0
 10260 ;;Total ram usage:        0 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; This function calls:
 10263 ;;		Nothing
 10264 ;; This function is called by:
 10265 ;;		_TMR0_ISR
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           	psect	text59
 10270  002082                     __ptext59:
 10271                           	opt stack 0
 10272  002082                     _TMR2_StartTimer:
 10273                           	opt stack 17
 10274                           
 10275                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
 10276                           
 10277                           ;incstack = 0
 10278  002082  84BA               	bsf	4026,2,c	;volatile
 10279  002084  0012               	return		;funcret
 10280  002086                     __end_of_TMR2_StartTimer:
 10281                           	opt stack 0
 10282                           tosu	equ	0xFFF
 10283                           tosh	equ	0xFFE
 10284                           tosl	equ	0xFFD
 10285                           pclatu	equ	0xFFB
 10286                           pclath	equ	0xFFA
 10287                           tblptru	equ	0xFF8
 10288                           tblptrh	equ	0xFF7
 10289                           tblptrl	equ	0xFF6
 10290                           tablat	equ	0xFF5
 10291                           prodh	equ	0xFF4
 10292                           prodl	equ	0xFF3
 10293                           intcon	equ	0xFF2
 10294                           intcon2	equ	0xFF1
 10295                           intcon3	equ	0xFF0
 10296                           indf0	equ	0xFEF
 10297                           postinc0	equ	0xFEE
 10298                           fsr0h	equ	0xFEA
 10299                           fsr0l	equ	0xFE9
 10300                           wreg	equ	0xFE8
 10301                           indf1	equ	0xFE7
 10302                           fsr1h	equ	0xFE2
 10303                           fsr1l	equ	0xFE1
 10304                           bsr	equ	0xFE0
 10305                           indf2	equ	0xFDF
 10306                           postinc2	equ	0xFDE
 10307                           postdec2	equ	0xFDD
 10308                           fsr2h	equ	0xFDA
 10309                           fsr2l	equ	0xFD9
 10310                           status	equ	0xFD8
 10311                           
 10312 ;; *************** function _TMR2_LoadPeriodRegister *****************
 10313 ;; Defined at:
 10314 ;;		line 105 in file "mcc_generated_files/tmr2.c"
 10315 ;; Parameters:    Size  Location     Type
 10316 ;;  periodVal       1    wreg     unsigned char 
 10317 ;; Auto vars:     Size  Location     Type
 10318 ;;  periodVal       1    0[COMRAM] unsigned char 
 10319 ;; Return value:  Size  Location     Type
 10320 ;;                  1    wreg      void 
 10321 ;; Registers used:
 10322 ;;		wreg
 10323 ;; Tracked objects:
 10324 ;;		On entry : 0/0
 10325 ;;		On exit  : 0/0
 10326 ;;		Unchanged: 0/0
 10327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10328 ;;      Params:         0       0       0       0       0       0       0
 10329 ;;      Locals:         1       0       0       0       0       0       0
 10330 ;;      Temps:          0       0       0       0       0       0       0
 10331 ;;      Totals:         1       0       0       0       0       0       0
 10332 ;;Total ram usage:        1 bytes
 10333 ;; Hardware stack levels used:    1
 10334 ;; This function calls:
 10335 ;;		Nothing
 10336 ;; This function is called by:
 10337 ;;		_TMR0_ISR
 10338 ;; This function uses a non-reentrant model
 10339 ;;
 10340                           
 10341                           	psect	text60
 10342  00206A                     __ptext60:
 10343                           	opt stack 0
 10344  00206A                     _TMR2_LoadPeriodRegister:
 10345                           	opt stack 17
 10346                           
 10347                           ;incstack = 0
 10348                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 10349  00206A  6E01               	movwf	TMR2_LoadPeriodRegister@periodVal,c
 10350                           
 10351                           ;tmr2.c: 107: PR2 = periodVal;
 10352  00206C  C001  FFBB         	movff	TMR2_LoadPeriodRegister@periodVal,4027	;volatile
 10353  002070  0012               	return		;funcret
 10354  002072                     __end_of_TMR2_LoadPeriodRegister:
 10355                           	opt stack 0
 10356                           tosu	equ	0xFFF
 10357                           tosh	equ	0xFFE
 10358                           tosl	equ	0xFFD
 10359                           pclatu	equ	0xFFB
 10360                           pclath	equ	0xFFA
 10361                           tblptru	equ	0xFF8
 10362                           tblptrh	equ	0xFF7
 10363                           tblptrl	equ	0xFF6
 10364                           tablat	equ	0xFF5
 10365                           prodh	equ	0xFF4
 10366                           prodl	equ	0xFF3
 10367                           intcon	equ	0xFF2
 10368                           intcon2	equ	0xFF1
 10369                           intcon3	equ	0xFF0
 10370                           indf0	equ	0xFEF
 10371                           postinc0	equ	0xFEE
 10372                           fsr0h	equ	0xFEA
 10373                           fsr0l	equ	0xFE9
 10374                           wreg	equ	0xFE8
 10375                           indf1	equ	0xFE7
 10376                           fsr1h	equ	0xFE2
 10377                           fsr1l	equ	0xFE1
 10378                           bsr	equ	0xFE0
 10379                           indf2	equ	0xFDF
 10380                           postinc2	equ	0xFDE
 10381                           postdec2	equ	0xFDD
 10382                           fsr2h	equ	0xFDA
 10383                           fsr2l	equ	0xFD9
 10384                           status	equ	0xFD8
 10385                           
 10386 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 10387 ;; Defined at:
 10388 ;;		line 192 in file "mcc_generated_files/tmr0.c"
 10389 ;; Parameters:    Size  Location     Type
 10390 ;;		None
 10391 ;; Auto vars:     Size  Location     Type
 10392 ;;		None
 10393 ;; Return value:  Size  Location     Type
 10394 ;;                  1    wreg      void 
 10395 ;; Registers used:
 10396 ;;		None
 10397 ;; Tracked objects:
 10398 ;;		On entry : 0/0
 10399 ;;		On exit  : 0/0
 10400 ;;		Unchanged: 0/0
 10401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10402 ;;      Params:         0       0       0       0       0       0       0
 10403 ;;      Locals:         0       0       0       0       0       0       0
 10404 ;;      Temps:          0       0       0       0       0       0       0
 10405 ;;      Totals:         0       0       0       0       0       0       0
 10406 ;;Total ram usage:        0 bytes
 10407 ;; Hardware stack levels used:    1
 10408 ;; This function calls:
 10409 ;;		Nothing
 10410 ;; This function is called by:
 10411 ;;		_TMR0_Initialize
 10412 ;;		_TMR0_ISR
 10413 ;; This function uses a non-reentrant model
 10414 ;;
 10415                           
 10416                           	psect	text61
 10417  00208E                     __ptext61:
 10418                           	opt stack 0
 10419  00208E                     _TMR0_DefaultInterruptHandler:
 10420                           	opt stack 17
 10421                           
 10422                           ;incstack = 0
 10423  00208E  0012               	return		;funcret
 10424  002090                     __end_of_TMR0_DefaultInterruptHandler:
 10425                           	opt stack 0
 10426                           tosu	equ	0xFFF
 10427                           tosh	equ	0xFFE
 10428                           tosl	equ	0xFFD
 10429                           pclatu	equ	0xFFB
 10430                           pclath	equ	0xFFA
 10431                           tblptru	equ	0xFF8
 10432                           tblptrh	equ	0xFF7
 10433                           tblptrl	equ	0xFF6
 10434                           tablat	equ	0xFF5
 10435                           prodh	equ	0xFF4
 10436                           prodl	equ	0xFF3
 10437                           intcon	equ	0xFF2
 10438                           intcon2	equ	0xFF1
 10439                           intcon3	equ	0xFF0
 10440                           indf0	equ	0xFEF
 10441                           postinc0	equ	0xFEE
 10442                           fsr0h	equ	0xFEA
 10443                           fsr0l	equ	0xFE9
 10444                           wreg	equ	0xFE8
 10445                           indf1	equ	0xFE7
 10446                           fsr1h	equ	0xFE2
 10447                           fsr1l	equ	0xFE1
 10448                           bsr	equ	0xFE0
 10449                           indf2	equ	0xFDF
 10450                           postinc2	equ	0xFDE
 10451                           postdec2	equ	0xFDD
 10452                           fsr2h	equ	0xFDA
 10453                           fsr2l	equ	0xFD9
 10454                           status	equ	0xFD8
 10455                           
 10456 ;; *************** function _EPWM1_LoadDutyValue *****************
 10457 ;; Defined at:
 10458 ;;		line 90 in file "mcc_generated_files/epwm1.c"
 10459 ;; Parameters:    Size  Location     Type
 10460 ;;  dutyValue       2    0[COMRAM] unsigned int 
 10461 ;; Auto vars:     Size  Location     Type
 10462 ;;		None
 10463 ;; Return value:  Size  Location     Type
 10464 ;;                  1    wreg      void 
 10465 ;; Registers used:
 10466 ;;		wreg, status,2, status,0
 10467 ;; Tracked objects:
 10468 ;;		On entry : 0/0
 10469 ;;		On exit  : 0/0
 10470 ;;		Unchanged: 0/0
 10471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10472 ;;      Params:         2       0       0       0       0       0       0
 10473 ;;      Locals:         0       0       0       0       0       0       0
 10474 ;;      Temps:          2       0       0       0       0       0       0
 10475 ;;      Totals:         4       0       0       0       0       0       0
 10476 ;;Total ram usage:        4 bytes
 10477 ;; Hardware stack levels used:    1
 10478 ;; This function calls:
 10479 ;;		Nothing
 10480 ;; This function is called by:
 10481 ;;		_TMR0_ISR
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           	psect	text62
 10486  001D0E                     __ptext62:
 10487                           	opt stack 0
 10488  001D0E                     _EPWM1_LoadDutyValue:
 10489                           	opt stack 17
 10490                           
 10491                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
 10492                           
 10493                           ;incstack = 0
 10494  001D0E  C001  F003         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 10495  001D12  C002  F004         	movff	EPWM1_LoadDutyValue@dutyValue+1,??_EPWM1_LoadDutyValue+1
 10496  001D16  90D8               	bcf	status,0,c
 10497  001D18  3204               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
 10498  001D1A  3203               	rrcf	??_EPWM1_LoadDutyValue,f,c
 10499  001D1C  90D8               	bcf	status,0,c
 10500  001D1E  3204               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
 10501  001D20  3203               	rrcf	??_EPWM1_LoadDutyValue,f,c
 10502  001D22  5003               	movf	??_EPWM1_LoadDutyValue,w,c
 10503  001D24  6EBE               	movwf	4030,c	;volatile
 10504                           
 10505                           ;epwm1.c: 96: CCP1CON = ((uint8_t)(CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4));
 10506  001D26  C001  F003         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 10507  001D2A  0E03               	movlw	3
 10508  001D2C  1603               	andwf	??_EPWM1_LoadDutyValue,f,c
 10509  001D2E  3A03               	swapf	??_EPWM1_LoadDutyValue,f,c
 10510  001D30  0EF0               	movlw	240
 10511  001D32  1603               	andwf	??_EPWM1_LoadDutyValue,f,c
 10512  001D34  50BD               	movf	4029,w,c	;volatile
 10513  001D36  0BCF               	andlw	207
 10514  001D38  1003               	iorwf	??_EPWM1_LoadDutyValue,w,c
 10515  001D3A  6EBD               	movwf	4029,c	;volatile
 10516  001D3C  0012               	return		;funcret
 10517  001D3E                     __end_of_EPWM1_LoadDutyValue:
 10518                           	opt stack 0
 10519                           tosu	equ	0xFFF
 10520                           tosh	equ	0xFFE
 10521                           tosl	equ	0xFFD
 10522                           pclatu	equ	0xFFB
 10523                           pclath	equ	0xFFA
 10524                           tblptru	equ	0xFF8
 10525                           tblptrh	equ	0xFF7
 10526                           tblptrl	equ	0xFF6
 10527                           tablat	equ	0xFF5
 10528                           prodh	equ	0xFF4
 10529                           prodl	equ	0xFF3
 10530                           intcon	equ	0xFF2
 10531                           intcon2	equ	0xFF1
 10532                           intcon3	equ	0xFF0
 10533                           indf0	equ	0xFEF
 10534                           postinc0	equ	0xFEE
 10535                           fsr0h	equ	0xFEA
 10536                           fsr0l	equ	0xFE9
 10537                           wreg	equ	0xFE8
 10538                           indf1	equ	0xFE7
 10539                           fsr1h	equ	0xFE2
 10540                           fsr1l	equ	0xFE1
 10541                           bsr	equ	0xFE0
 10542                           indf2	equ	0xFDF
 10543                           postinc2	equ	0xFDE
 10544                           postdec2	equ	0xFDD
 10545                           fsr2h	equ	0xFDA
 10546                           fsr2l	equ	0xFD9
 10547                           status	equ	0xFD8
 10548                           
 10549 ;; *************** function _ADC_StartConversion *****************
 10550 ;; Defined at:
 10551 ;;		line 88 in file "mcc_generated_files/adc.c"
 10552 ;; Parameters:    Size  Location     Type
 10553 ;;		None
 10554 ;; Auto vars:     Size  Location     Type
 10555 ;;		None
 10556 ;; Return value:  Size  Location     Type
 10557 ;;                  1    wreg      void 
 10558 ;; Registers used:
 10559 ;;		None
 10560 ;; Tracked objects:
 10561 ;;		On entry : 0/0
 10562 ;;		On exit  : 0/0
 10563 ;;		Unchanged: 0/0
 10564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10565 ;;      Params:         0       0       0       0       0       0       0
 10566 ;;      Locals:         0       0       0       0       0       0       0
 10567 ;;      Temps:          0       0       0       0       0       0       0
 10568 ;;      Totals:         0       0       0       0       0       0       0
 10569 ;;Total ram usage:        0 bytes
 10570 ;; Hardware stack levels used:    1
 10571 ;; This function calls:
 10572 ;;		Nothing
 10573 ;; This function is called by:
 10574 ;;		_TMR0_ISR
 10575 ;; This function uses a non-reentrant model
 10576 ;;
 10577                           
 10578                           	psect	text63
 10579  002086                     __ptext63:
 10580                           	opt stack 0
 10581  002086                     _ADC_StartConversion:
 10582                           	opt stack 17
 10583                           
 10584                           ;adc.c: 90: ADCON0bits.GO_nDONE = 1;
 10585                           
 10586                           ;incstack = 0
 10587  002086  82C2               	bsf	4034,1,c	;volatile
 10588  002088  0012               	return		;funcret
 10589  00208A                     __end_of_ADC_StartConversion:
 10590                           	opt stack 0
 10591                           tosu	equ	0xFFF
 10592                           tosh	equ	0xFFE
 10593                           tosl	equ	0xFFD
 10594                           pclatu	equ	0xFFB
 10595                           pclath	equ	0xFFA
 10596                           tblptru	equ	0xFF8
 10597                           tblptrh	equ	0xFF7
 10598                           tblptrl	equ	0xFF6
 10599                           tablat	equ	0xFF5
 10600                           prodh	equ	0xFF4
 10601                           prodl	equ	0xFF3
 10602                           intcon	equ	0xFF2
 10603                           intcon2	equ	0xFF1
 10604                           intcon3	equ	0xFF0
 10605                           indf0	equ	0xFEF
 10606                           postinc0	equ	0xFEE
 10607                           fsr0h	equ	0xFEA
 10608                           fsr0l	equ	0xFE9
 10609                           wreg	equ	0xFE8
 10610                           indf1	equ	0xFE7
 10611                           fsr1h	equ	0xFE2
 10612                           fsr1l	equ	0xFE1
 10613                           bsr	equ	0xFE0
 10614                           indf2	equ	0xFDF
 10615                           postinc2	equ	0xFDE
 10616                           postdec2	equ	0xFDD
 10617                           fsr2h	equ	0xFDA
 10618                           fsr2l	equ	0xFD9
 10619                           status	equ	0xFD8
 10620                           
 10621 ;; *************** function _INT2_ISR *****************
 10622 ;; Defined at:
 10623 ;;		line 99 in file "mcc_generated_files/ext_int.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;		None
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;		None
 10628 ;; Return value:  Size  Location     Type
 10629 ;;                  1    wreg      void 
 10630 ;; Registers used:
 10631 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 10632 ;; Tracked objects:
 10633 ;;		On entry : 0/0
 10634 ;;		On exit  : 0/0
 10635 ;;		Unchanged: 0/0
 10636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10637 ;;      Params:         0       0       0       0       0       0       0
 10638 ;;      Locals:         0       0       0       0       0       0       0
 10639 ;;      Temps:          0       0       0       0       0       0       0
 10640 ;;      Totals:         0       0       0       0       0       0       0
 10641 ;;Total ram usage:        0 bytes
 10642 ;; Hardware stack levels used:    1
 10643 ;; Hardware stack levels required when called:    2
 10644 ;; This function calls:
 10645 ;;		_INT2_CallBack
 10646 ;; This function is called by:
 10647 ;;		_INTERRUPT_InterruptManagerHigh
 10648 ;; This function uses a non-reentrant model
 10649 ;;
 10650                           
 10651                           	psect	text64
 10652  001D6C                     __ptext64:
 10653                           	opt stack 0
 10654  001D6C                     _INT2_ISR:
 10655                           	opt stack 16
 10656                           
 10657                           ;ext_int.c: 102: if (PORTBbits.RB3 == 1) {
 10658                           
 10659                           ;incstack = 0
 10660  001D6C  A681               	btfss	3969,3,c	;volatile
 10661  001D6E  D002               	goto	i2l221
 10662                           
 10663                           ;ext_int.c: 103: TeclaTMP = '3';
 10664  001D70  0E33               	movlw	51
 10665  001D72  6E42               	movwf	_TeclaTMP,c	;volatile
 10666  001D74                     i2l221:
 10667                           
 10668                           ;ext_int.c: 104: }
 10669                           ;ext_int.c: 105: if (PORTBbits.RB4 == 1) {
 10670  001D74  A881               	btfss	3969,4,c	;volatile
 10671  001D76  D002               	goto	i2l222
 10672                           
 10673                           ;ext_int.c: 106: TeclaTMP = '6';
 10674  001D78  0E36               	movlw	54
 10675  001D7A  6E42               	movwf	_TeclaTMP,c	;volatile
 10676  001D7C                     i2l222:
 10677                           
 10678                           ;ext_int.c: 107: }
 10679                           ;ext_int.c: 108: if (PORTBbits.RB5 == 1) {
 10680  001D7C  AA81               	btfss	3969,5,c	;volatile
 10681  001D7E  D002               	goto	i2l223
 10682                           
 10683                           ;ext_int.c: 109: TeclaTMP = '9';
 10684  001D80  0E39               	movlw	57
 10685  001D82  6E42               	movwf	_TeclaTMP,c	;volatile
 10686  001D84                     i2l223:
 10687                           
 10688                           ;ext_int.c: 110: }
 10689                           ;ext_int.c: 111: if (PORTBbits.RB6 == 1) {
 10690  001D84  AC81               	btfss	3969,6,c	;volatile
 10691  001D86  D002               	goto	i2l224
 10692                           
 10693                           ;ext_int.c: 112: TeclaTMP = '#';
 10694  001D88  0E23               	movlw	35
 10695  001D8A  6E42               	movwf	_TeclaTMP,c	;volatile
 10696  001D8C                     i2l224:
 10697                           
 10698                           ;ext_int.c: 113: }
 10699                           ;ext_int.c: 114: WrEnFl = 1;
 10700  001D8C  0E01               	movlw	1
 10701  001D8E  6E38               	movwf	_WrEnFl,c	;volatile
 10702                           
 10703                           ;ext_int.c: 118: (INTCON3bits.INT2IF = 0);
 10704  001D90  92F0               	bcf	intcon3,1,c	;volatile
 10705                           
 10706                           ;ext_int.c: 121: INT2_CallBack();
 10707  001D92  EC68  F00F         	call	_INT2_CallBack	;wreg free
 10708  001D96  0012               	return		;funcret
 10709  001D98                     __end_of_INT2_ISR:
 10710                           	opt stack 0
 10711                           tosu	equ	0xFFF
 10712                           tosh	equ	0xFFE
 10713                           tosl	equ	0xFFD
 10714                           pclatu	equ	0xFFB
 10715                           pclath	equ	0xFFA
 10716                           tblptru	equ	0xFF8
 10717                           tblptrh	equ	0xFF7
 10718                           tblptrl	equ	0xFF6
 10719                           tablat	equ	0xFF5
 10720                           prodh	equ	0xFF4
 10721                           prodl	equ	0xFF3
 10722                           intcon	equ	0xFF2
 10723                           intcon2	equ	0xFF1
 10724                           intcon3	equ	0xFF0
 10725                           indf0	equ	0xFEF
 10726                           postinc0	equ	0xFEE
 10727                           fsr0h	equ	0xFEA
 10728                           fsr0l	equ	0xFE9
 10729                           wreg	equ	0xFE8
 10730                           indf1	equ	0xFE7
 10731                           fsr1h	equ	0xFE2
 10732                           fsr1l	equ	0xFE1
 10733                           bsr	equ	0xFE0
 10734                           indf2	equ	0xFDF
 10735                           postinc2	equ	0xFDE
 10736                           postdec2	equ	0xFDD
 10737                           fsr2h	equ	0xFDA
 10738                           fsr2l	equ	0xFD9
 10739                           status	equ	0xFD8
 10740                           
 10741 ;; *************** function _INT2_CallBack *****************
 10742 ;; Defined at:
 10743 ;;		line 127 in file "mcc_generated_files/ext_int.c"
 10744 ;; Parameters:    Size  Location     Type
 10745 ;;		None
 10746 ;; Auto vars:     Size  Location     Type
 10747 ;;		None
 10748 ;; Return value:  Size  Location     Type
 10749 ;;                  1    wreg      void 
 10750 ;; Registers used:
 10751 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 10752 ;; Tracked objects:
 10753 ;;		On entry : 0/0
 10754 ;;		On exit  : 0/0
 10755 ;;		Unchanged: 0/0
 10756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10757 ;;      Params:         0       0       0       0       0       0       0
 10758 ;;      Locals:         0       0       0       0       0       0       0
 10759 ;;      Temps:          0       0       0       0       0       0       0
 10760 ;;      Totals:         0       0       0       0       0       0       0
 10761 ;;Total ram usage:        0 bytes
 10762 ;; Hardware stack levels used:    1
 10763 ;; Hardware stack levels required when called:    1
 10764 ;; This function calls:
 10765 ;;		Absolute function
 10766 ;;		_INT2_DefaultInterruptHandler
 10767 ;; This function is called by:
 10768 ;;		_INT2_ISR
 10769 ;; This function uses a non-reentrant model
 10770 ;;
 10771                           
 10772                           	psect	text65
 10773  001ED0                     __ptext65:
 10774                           	opt stack 0
 10775  001ED0                     _INT2_CallBack:
 10776                           	opt stack 16
 10777                           
 10778                           ;ext_int.c: 129: if (INT2_InterruptHandler) {
 10779                           
 10780                           ;incstack = 0
 10781  001ED0  0100               	movlb	0	; () banked
 10782  001ED2  51D8               	movf	_INT2_InterruptHandler& (0+255),w,b
 10783  001ED4  11D9               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 10784  001ED6  B4D8               	btfsc	status,2,c
 10785  001ED8  0012               	return	
 10786                           
 10787                           ; BSR set to: 0
 10788                           ;ext_int.c: 130: INT2_InterruptHandler();
 10789  001EDA  D801               	call	i2u373_48
 10790  001EDC  0012               	return	
 10791  001EDE                     i2u373_48:
 10792  001EDE  0005               	push	
 10793  001EE0  6EFA               	movwf	pclath,c
 10794  001EE2  51D8               	movf	_INT2_InterruptHandler& (0+255),w,b
 10795  001EE4  6EFD               	movwf	tosl,c
 10796  001EE6  51D9               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 10797  001EE8  6EFE               	movwf	tosh,c
 10798  001EEA  50F8               	movf	tblptru,w,c
 10799  001EEC  6EFF               	movwf	tosu,c
 10800  001EEE  50FA               	movf	pclath,w,c
 10801  001EF0  0012               	return		;indir
 10802  001EF2                     __end_of_INT2_CallBack:
 10803                           	opt stack 0
 10804                           tosu	equ	0xFFF
 10805                           tosh	equ	0xFFE
 10806                           tosl	equ	0xFFD
 10807                           pclatu	equ	0xFFB
 10808                           pclath	equ	0xFFA
 10809                           tblptru	equ	0xFF8
 10810                           tblptrh	equ	0xFF7
 10811                           tblptrl	equ	0xFF6
 10812                           tablat	equ	0xFF5
 10813                           prodh	equ	0xFF4
 10814                           prodl	equ	0xFF3
 10815                           intcon	equ	0xFF2
 10816                           intcon2	equ	0xFF1
 10817                           intcon3	equ	0xFF0
 10818                           indf0	equ	0xFEF
 10819                           postinc0	equ	0xFEE
 10820                           fsr0h	equ	0xFEA
 10821                           fsr0l	equ	0xFE9
 10822                           wreg	equ	0xFE8
 10823                           indf1	equ	0xFE7
 10824                           fsr1h	equ	0xFE2
 10825                           fsr1l	equ	0xFE1
 10826                           bsr	equ	0xFE0
 10827                           indf2	equ	0xFDF
 10828                           postinc2	equ	0xFDE
 10829                           postdec2	equ	0xFDD
 10830                           fsr2h	equ	0xFDA
 10831                           fsr2l	equ	0xFD9
 10832                           status	equ	0xFD8
 10833                           
 10834 ;; *************** function _INT2_DefaultInterruptHandler *****************
 10835 ;; Defined at:
 10836 ;;		line 144 in file "mcc_generated_files/ext_int.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;		None
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;		None
 10841 ;; Return value:  Size  Location     Type
 10842 ;;                  1    wreg      void 
 10843 ;; Registers used:
 10844 ;;		None
 10845 ;; Tracked objects:
 10846 ;;		On entry : 0/0
 10847 ;;		On exit  : 0/0
 10848 ;;		Unchanged: 0/0
 10849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10850 ;;      Params:         0       0       0       0       0       0       0
 10851 ;;      Locals:         0       0       0       0       0       0       0
 10852 ;;      Temps:          0       0       0       0       0       0       0
 10853 ;;      Totals:         0       0       0       0       0       0       0
 10854 ;;Total ram usage:        0 bytes
 10855 ;; Hardware stack levels used:    1
 10856 ;; This function calls:
 10857 ;;		Nothing
 10858 ;; This function is called by:
 10859 ;;		_EXT_INT_Initialize
 10860 ;;		_INT2_CallBack
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864                           	psect	text66
 10865  002090                     __ptext66:
 10866                           	opt stack 0
 10867  002090                     _INT2_DefaultInterruptHandler:
 10868                           	opt stack 16
 10869                           
 10870                           ;incstack = 0
 10871  002090  0012               	return		;funcret
 10872  002092                     __end_of_INT2_DefaultInterruptHandler:
 10873                           	opt stack 0
 10874                           tosu	equ	0xFFF
 10875                           tosh	equ	0xFFE
 10876                           tosl	equ	0xFFD
 10877                           pclatu	equ	0xFFB
 10878                           pclath	equ	0xFFA
 10879                           tblptru	equ	0xFF8
 10880                           tblptrh	equ	0xFF7
 10881                           tblptrl	equ	0xFF6
 10882                           tablat	equ	0xFF5
 10883                           prodh	equ	0xFF4
 10884                           prodl	equ	0xFF3
 10885                           intcon	equ	0xFF2
 10886                           intcon2	equ	0xFF1
 10887                           intcon3	equ	0xFF0
 10888                           indf0	equ	0xFEF
 10889                           postinc0	equ	0xFEE
 10890                           fsr0h	equ	0xFEA
 10891                           fsr0l	equ	0xFE9
 10892                           wreg	equ	0xFE8
 10893                           indf1	equ	0xFE7
 10894                           fsr1h	equ	0xFE2
 10895                           fsr1l	equ	0xFE1
 10896                           bsr	equ	0xFE0
 10897                           indf2	equ	0xFDF
 10898                           postinc2	equ	0xFDE
 10899                           postdec2	equ	0xFDD
 10900                           fsr2h	equ	0xFDA
 10901                           fsr2l	equ	0xFD9
 10902                           status	equ	0xFD8
 10903                           
 10904 ;; *************** function _INT1_ISR *****************
 10905 ;; Defined at:
 10906 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 10907 ;; Parameters:    Size  Location     Type
 10908 ;;		None
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;		None
 10911 ;; Return value:  Size  Location     Type
 10912 ;;                  1    wreg      void 
 10913 ;; Registers used:
 10914 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10920 ;;      Params:         0       0       0       0       0       0       0
 10921 ;;      Locals:         0       0       0       0       0       0       0
 10922 ;;      Temps:          0       0       0       0       0       0       0
 10923 ;;      Totals:         0       0       0       0       0       0       0
 10924 ;;Total ram usage:        0 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    2
 10927 ;; This function calls:
 10928 ;;		_INT1_CallBack
 10929 ;; This function is called by:
 10930 ;;		_INTERRUPT_InterruptManagerHigh
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           	psect	text67
 10935  001D98                     __ptext67:
 10936                           	opt stack 0
 10937  001D98                     _INT1_ISR:
 10938                           	opt stack 16
 10939                           
 10940                           ;ext_int.c: 49: if (PORTBbits.RB3 == 1) {
 10941                           
 10942                           ;incstack = 0
 10943  001D98  A681               	btfss	3969,3,c	;volatile
 10944  001D9A  D002               	goto	i2l204
 10945                           
 10946                           ;ext_int.c: 50: TeclaTMP = '2';
 10947  001D9C  0E32               	movlw	50
 10948  001D9E  6E42               	movwf	_TeclaTMP,c	;volatile
 10949  001DA0                     i2l204:
 10950                           
 10951                           ;ext_int.c: 51: }
 10952                           ;ext_int.c: 52: if (PORTBbits.RB4 == 1) {
 10953  001DA0  A881               	btfss	3969,4,c	;volatile
 10954  001DA2  D002               	goto	i2l205
 10955                           
 10956                           ;ext_int.c: 53: TeclaTMP = '5';
 10957  001DA4  0E35               	movlw	53
 10958  001DA6  6E42               	movwf	_TeclaTMP,c	;volatile
 10959  001DA8                     i2l205:
 10960                           
 10961                           ;ext_int.c: 54: }
 10962                           ;ext_int.c: 55: if (PORTBbits.RB5 == 1) {
 10963  001DA8  AA81               	btfss	3969,5,c	;volatile
 10964  001DAA  D002               	goto	i2l206
 10965                           
 10966                           ;ext_int.c: 56: TeclaTMP = '8';
 10967  001DAC  0E38               	movlw	56
 10968  001DAE  6E42               	movwf	_TeclaTMP,c	;volatile
 10969  001DB0                     i2l206:
 10970                           
 10971                           ;ext_int.c: 57: }
 10972                           ;ext_int.c: 58: if (PORTBbits.RB6 == 1) {
 10973  001DB0  AC81               	btfss	3969,6,c	;volatile
 10974  001DB2  D002               	goto	i2l207
 10975                           
 10976                           ;ext_int.c: 59: TeclaTMP = '0';
 10977  001DB4  0E30               	movlw	48
 10978  001DB6  6E42               	movwf	_TeclaTMP,c	;volatile
 10979  001DB8                     i2l207:
 10980                           
 10981                           ;ext_int.c: 60: }
 10982                           ;ext_int.c: 61: WrEnFl = 1;
 10983  001DB8  0E01               	movlw	1
 10984  001DBA  6E38               	movwf	_WrEnFl,c	;volatile
 10985                           
 10986                           ;ext_int.c: 65: (INTCON3bits.INT1IF = 0);
 10987  001DBC  90F0               	bcf	intcon3,0,c	;volatile
 10988                           
 10989                           ;ext_int.c: 68: INT1_CallBack();
 10990  001DBE  EC79  F00F         	call	_INT1_CallBack	;wreg free
 10991  001DC2  0012               	return		;funcret
 10992  001DC4                     __end_of_INT1_ISR:
 10993                           	opt stack 0
 10994                           tosu	equ	0xFFF
 10995                           tosh	equ	0xFFE
 10996                           tosl	equ	0xFFD
 10997                           pclatu	equ	0xFFB
 10998                           pclath	equ	0xFFA
 10999                           tblptru	equ	0xFF8
 11000                           tblptrh	equ	0xFF7
 11001                           tblptrl	equ	0xFF6
 11002                           tablat	equ	0xFF5
 11003                           prodh	equ	0xFF4
 11004                           prodl	equ	0xFF3
 11005                           intcon	equ	0xFF2
 11006                           intcon2	equ	0xFF1
 11007                           intcon3	equ	0xFF0
 11008                           indf0	equ	0xFEF
 11009                           postinc0	equ	0xFEE
 11010                           fsr0h	equ	0xFEA
 11011                           fsr0l	equ	0xFE9
 11012                           wreg	equ	0xFE8
 11013                           indf1	equ	0xFE7
 11014                           fsr1h	equ	0xFE2
 11015                           fsr1l	equ	0xFE1
 11016                           bsr	equ	0xFE0
 11017                           indf2	equ	0xFDF
 11018                           postinc2	equ	0xFDE
 11019                           postdec2	equ	0xFDD
 11020                           fsr2h	equ	0xFDA
 11021                           fsr2l	equ	0xFD9
 11022                           status	equ	0xFD8
 11023                           
 11024 ;; *************** function _INT1_CallBack *****************
 11025 ;; Defined at:
 11026 ;;		line 74 in file "mcc_generated_files/ext_int.c"
 11027 ;; Parameters:    Size  Location     Type
 11028 ;;		None
 11029 ;; Auto vars:     Size  Location     Type
 11030 ;;		None
 11031 ;; Return value:  Size  Location     Type
 11032 ;;                  1    wreg      void 
 11033 ;; Registers used:
 11034 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11040 ;;      Params:         0       0       0       0       0       0       0
 11041 ;;      Locals:         0       0       0       0       0       0       0
 11042 ;;      Temps:          0       0       0       0       0       0       0
 11043 ;;      Totals:         0       0       0       0       0       0       0
 11044 ;;Total ram usage:        0 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; Hardware stack levels required when called:    1
 11047 ;; This function calls:
 11048 ;;		Absolute function
 11049 ;;		_INT1_DefaultInterruptHandler
 11050 ;; This function is called by:
 11051 ;;		_INT1_ISR
 11052 ;; This function uses a non-reentrant model
 11053 ;;
 11054                           
 11055                           	psect	text68
 11056  001EF2                     __ptext68:
 11057                           	opt stack 0
 11058  001EF2                     _INT1_CallBack:
 11059                           	opt stack 16
 11060                           
 11061                           ;ext_int.c: 76: if (INT1_InterruptHandler) {
 11062                           
 11063                           ;incstack = 0
 11064  001EF2  0100               	movlb	0	; () banked
 11065  001EF4  51DA               	movf	_INT1_InterruptHandler& (0+255),w,b
 11066  001EF6  11DB               	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
 11067  001EF8  B4D8               	btfsc	status,2,c
 11068  001EFA  0012               	return	
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;ext_int.c: 77: INT1_InterruptHandler();
 11072  001EFC  D801               	call	i2u371_48
 11073  001EFE  0012               	return	
 11074  001F00                     i2u371_48:
 11075  001F00  0005               	push	
 11076  001F02  6EFA               	movwf	pclath,c
 11077  001F04  51DA               	movf	_INT1_InterruptHandler& (0+255),w,b
 11078  001F06  6EFD               	movwf	tosl,c
 11079  001F08  51DB               	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
 11080  001F0A  6EFE               	movwf	tosh,c
 11081  001F0C  50F8               	movf	tblptru,w,c
 11082  001F0E  6EFF               	movwf	tosu,c
 11083  001F10  50FA               	movf	pclath,w,c
 11084  001F12  0012               	return		;indir
 11085  001F14                     __end_of_INT1_CallBack:
 11086                           	opt stack 0
 11087                           tosu	equ	0xFFF
 11088                           tosh	equ	0xFFE
 11089                           tosl	equ	0xFFD
 11090                           pclatu	equ	0xFFB
 11091                           pclath	equ	0xFFA
 11092                           tblptru	equ	0xFF8
 11093                           tblptrh	equ	0xFF7
 11094                           tblptrl	equ	0xFF6
 11095                           tablat	equ	0xFF5
 11096                           prodh	equ	0xFF4
 11097                           prodl	equ	0xFF3
 11098                           intcon	equ	0xFF2
 11099                           intcon2	equ	0xFF1
 11100                           intcon3	equ	0xFF0
 11101                           indf0	equ	0xFEF
 11102                           postinc0	equ	0xFEE
 11103                           fsr0h	equ	0xFEA
 11104                           fsr0l	equ	0xFE9
 11105                           wreg	equ	0xFE8
 11106                           indf1	equ	0xFE7
 11107                           fsr1h	equ	0xFE2
 11108                           fsr1l	equ	0xFE1
 11109                           bsr	equ	0xFE0
 11110                           indf2	equ	0xFDF
 11111                           postinc2	equ	0xFDE
 11112                           postdec2	equ	0xFDD
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8
 11116                           
 11117 ;; *************** function _INT1_DefaultInterruptHandler *****************
 11118 ;; Defined at:
 11119 ;;		line 91 in file "mcc_generated_files/ext_int.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;		None
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;		None
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      void 
 11126 ;; Registers used:
 11127 ;;		None
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11133 ;;      Params:         0       0       0       0       0       0       0
 11134 ;;      Locals:         0       0       0       0       0       0       0
 11135 ;;      Temps:          0       0       0       0       0       0       0
 11136 ;;      Totals:         0       0       0       0       0       0       0
 11137 ;;Total ram usage:        0 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; This function calls:
 11140 ;;		Nothing
 11141 ;; This function is called by:
 11142 ;;		_EXT_INT_Initialize
 11143 ;;		_INT1_CallBack
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           	psect	text69
 11148  002092                     __ptext69:
 11149                           	opt stack 0
 11150  002092                     _INT1_DefaultInterruptHandler:
 11151                           	opt stack 16
 11152                           
 11153                           ;incstack = 0
 11154  002092  0012               	return		;funcret
 11155  002094                     __end_of_INT1_DefaultInterruptHandler:
 11156                           	opt stack 0
 11157                           tosu	equ	0xFFF
 11158                           tosh	equ	0xFFE
 11159                           tosl	equ	0xFFD
 11160                           pclatu	equ	0xFFB
 11161                           pclath	equ	0xFFA
 11162                           tblptru	equ	0xFF8
 11163                           tblptrh	equ	0xFF7
 11164                           tblptrl	equ	0xFF6
 11165                           tablat	equ	0xFF5
 11166                           prodh	equ	0xFF4
 11167                           prodl	equ	0xFF3
 11168                           intcon	equ	0xFF2
 11169                           intcon2	equ	0xFF1
 11170                           intcon3	equ	0xFF0
 11171                           indf0	equ	0xFEF
 11172                           postinc0	equ	0xFEE
 11173                           fsr0h	equ	0xFEA
 11174                           fsr0l	equ	0xFE9
 11175                           wreg	equ	0xFE8
 11176                           indf1	equ	0xFE7
 11177                           fsr1h	equ	0xFE2
 11178                           fsr1l	equ	0xFE1
 11179                           bsr	equ	0xFE0
 11180                           indf2	equ	0xFDF
 11181                           postinc2	equ	0xFDE
 11182                           postdec2	equ	0xFDD
 11183                           fsr2h	equ	0xFDA
 11184                           fsr2l	equ	0xFD9
 11185                           status	equ	0xFD8
 11186                           
 11187 ;; *************** function _INT0_ISR *****************
 11188 ;; Defined at:
 11189 ;;		line 152 in file "mcc_generated_files/ext_int.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;		None
 11192 ;; Auto vars:     Size  Location     Type
 11193 ;;		None
 11194 ;; Return value:  Size  Location     Type
 11195 ;;                  1    wreg      void 
 11196 ;; Registers used:
 11197 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11198 ;; Tracked objects:
 11199 ;;		On entry : 0/0
 11200 ;;		On exit  : 0/0
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11203 ;;      Params:         0       0       0       0       0       0       0
 11204 ;;      Locals:         0       0       0       0       0       0       0
 11205 ;;      Temps:          0       0       0       0       0       0       0
 11206 ;;      Totals:         0       0       0       0       0       0       0
 11207 ;;Total ram usage:        0 bytes
 11208 ;; Hardware stack levels used:    1
 11209 ;; Hardware stack levels required when called:    2
 11210 ;; This function calls:
 11211 ;;		_INT0_CallBack
 11212 ;; This function is called by:
 11213 ;;		_INTERRUPT_InterruptManagerHigh
 11214 ;; This function uses a non-reentrant model
 11215 ;;
 11216                           
 11217                           	psect	text70
 11218  001DC4                     __ptext70:
 11219                           	opt stack 0
 11220  001DC4                     _INT0_ISR:
 11221                           	opt stack 16
 11222                           
 11223                           ;ext_int.c: 155: if (PORTBbits.RB3 == 1) {
 11224                           
 11225                           ;incstack = 0
 11226  001DC4  A681               	btfss	3969,3,c	;volatile
 11227  001DC6  D002               	goto	i2l238
 11228                           
 11229                           ;ext_int.c: 156: TeclaTMP = '1';
 11230  001DC8  0E31               	movlw	49
 11231  001DCA  6E42               	movwf	_TeclaTMP,c	;volatile
 11232  001DCC                     i2l238:
 11233                           
 11234                           ;ext_int.c: 157: }
 11235                           ;ext_int.c: 158: if (PORTBbits.RB4 == 1) {
 11236  001DCC  A881               	btfss	3969,4,c	;volatile
 11237  001DCE  D002               	goto	i2l239
 11238                           
 11239                           ;ext_int.c: 159: TeclaTMP = '4';
 11240  001DD0  0E34               	movlw	52
 11241  001DD2  6E42               	movwf	_TeclaTMP,c	;volatile
 11242  001DD4                     i2l239:
 11243                           
 11244                           ;ext_int.c: 160: }
 11245                           ;ext_int.c: 161: if (PORTBbits.RB5 == 1) {
 11246  001DD4  AA81               	btfss	3969,5,c	;volatile
 11247  001DD6  D002               	goto	i2l240
 11248                           
 11249                           ;ext_int.c: 162: TeclaTMP = '7';
 11250  001DD8  0E37               	movlw	55
 11251  001DDA  6E42               	movwf	_TeclaTMP,c	;volatile
 11252  001DDC                     i2l240:
 11253                           
 11254                           ;ext_int.c: 163: }
 11255                           ;ext_int.c: 164: if (PORTBbits.RB6 == 1) {
 11256  001DDC  AC81               	btfss	3969,6,c	;volatile
 11257  001DDE  D002               	goto	i2l241
 11258                           
 11259                           ;ext_int.c: 165: TeclaTMP = '*';
 11260  001DE0  0E2A               	movlw	42
 11261  001DE2  6E42               	movwf	_TeclaTMP,c	;volatile
 11262  001DE4                     i2l241:
 11263                           
 11264                           ;ext_int.c: 166: }
 11265                           ;ext_int.c: 167: WrEnFl = 1;
 11266  001DE4  0E01               	movlw	1
 11267  001DE6  6E38               	movwf	_WrEnFl,c	;volatile
 11268                           
 11269                           ;ext_int.c: 171: (INTCONbits.INT0IF = 0);
 11270  001DE8  92F2               	bcf	intcon,1,c	;volatile
 11271                           
 11272                           ;ext_int.c: 174: INT0_CallBack();
 11273  001DEA  EC8A  F00F         	call	_INT0_CallBack	;wreg free
 11274  001DEE  0012               	return		;funcret
 11275  001DF0                     __end_of_INT0_ISR:
 11276                           	opt stack 0
 11277                           tosu	equ	0xFFF
 11278                           tosh	equ	0xFFE
 11279                           tosl	equ	0xFFD
 11280                           pclatu	equ	0xFFB
 11281                           pclath	equ	0xFFA
 11282                           tblptru	equ	0xFF8
 11283                           tblptrh	equ	0xFF7
 11284                           tblptrl	equ	0xFF6
 11285                           tablat	equ	0xFF5
 11286                           prodh	equ	0xFF4
 11287                           prodl	equ	0xFF3
 11288                           intcon	equ	0xFF2
 11289                           intcon2	equ	0xFF1
 11290                           intcon3	equ	0xFF0
 11291                           indf0	equ	0xFEF
 11292                           postinc0	equ	0xFEE
 11293                           fsr0h	equ	0xFEA
 11294                           fsr0l	equ	0xFE9
 11295                           wreg	equ	0xFE8
 11296                           indf1	equ	0xFE7
 11297                           fsr1h	equ	0xFE2
 11298                           fsr1l	equ	0xFE1
 11299                           bsr	equ	0xFE0
 11300                           indf2	equ	0xFDF
 11301                           postinc2	equ	0xFDE
 11302                           postdec2	equ	0xFDD
 11303                           fsr2h	equ	0xFDA
 11304                           fsr2l	equ	0xFD9
 11305                           status	equ	0xFD8
 11306                           
 11307 ;; *************** function _INT0_CallBack *****************
 11308 ;; Defined at:
 11309 ;;		line 180 in file "mcc_generated_files/ext_int.c"
 11310 ;; Parameters:    Size  Location     Type
 11311 ;;		None
 11312 ;; Auto vars:     Size  Location     Type
 11313 ;;		None
 11314 ;; Return value:  Size  Location     Type
 11315 ;;                  1    wreg      void 
 11316 ;; Registers used:
 11317 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11318 ;; Tracked objects:
 11319 ;;		On entry : 0/0
 11320 ;;		On exit  : 0/0
 11321 ;;		Unchanged: 0/0
 11322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11323 ;;      Params:         0       0       0       0       0       0       0
 11324 ;;      Locals:         0       0       0       0       0       0       0
 11325 ;;      Temps:          0       0       0       0       0       0       0
 11326 ;;      Totals:         0       0       0       0       0       0       0
 11327 ;;Total ram usage:        0 bytes
 11328 ;; Hardware stack levels used:    1
 11329 ;; Hardware stack levels required when called:    1
 11330 ;; This function calls:
 11331 ;;		Absolute function
 11332 ;;		_INT0_DefaultInterruptHandler
 11333 ;; This function is called by:
 11334 ;;		_INT0_ISR
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           	psect	text71
 11339  001F14                     __ptext71:
 11340                           	opt stack 0
 11341  001F14                     _INT0_CallBack:
 11342                           	opt stack 16
 11343                           
 11344                           ;ext_int.c: 182: if (INT0_InterruptHandler) {
 11345                           
 11346                           ;incstack = 0
 11347  001F14  0100               	movlb	0	; () banked
 11348  001F16  51D6               	movf	_INT0_InterruptHandler& (0+255),w,b
 11349  001F18  11D7               	iorwf	(_INT0_InterruptHandler+1)& (0+255),w,b
 11350  001F1A  B4D8               	btfsc	status,2,c
 11351  001F1C  0012               	return	
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;ext_int.c: 183: INT0_InterruptHandler();
 11355  001F1E  D801               	call	i2u375_48
 11356  001F20  0012               	return	
 11357  001F22                     i2u375_48:
 11358  001F22  0005               	push	
 11359  001F24  6EFA               	movwf	pclath,c
 11360  001F26  51D6               	movf	_INT0_InterruptHandler& (0+255),w,b
 11361  001F28  6EFD               	movwf	tosl,c
 11362  001F2A  51D7               	movf	(_INT0_InterruptHandler+1)& (0+255),w,b
 11363  001F2C  6EFE               	movwf	tosh,c
 11364  001F2E  50F8               	movf	tblptru,w,c
 11365  001F30  6EFF               	movwf	tosu,c
 11366  001F32  50FA               	movf	pclath,w,c
 11367  001F34  0012               	return		;indir
 11368  001F36                     __end_of_INT0_CallBack:
 11369                           	opt stack 0
 11370                           tosu	equ	0xFFF
 11371                           tosh	equ	0xFFE
 11372                           tosl	equ	0xFFD
 11373                           pclatu	equ	0xFFB
 11374                           pclath	equ	0xFFA
 11375                           tblptru	equ	0xFF8
 11376                           tblptrh	equ	0xFF7
 11377                           tblptrl	equ	0xFF6
 11378                           tablat	equ	0xFF5
 11379                           prodh	equ	0xFF4
 11380                           prodl	equ	0xFF3
 11381                           intcon	equ	0xFF2
 11382                           intcon2	equ	0xFF1
 11383                           intcon3	equ	0xFF0
 11384                           indf0	equ	0xFEF
 11385                           postinc0	equ	0xFEE
 11386                           fsr0h	equ	0xFEA
 11387                           fsr0l	equ	0xFE9
 11388                           wreg	equ	0xFE8
 11389                           indf1	equ	0xFE7
 11390                           fsr1h	equ	0xFE2
 11391                           fsr1l	equ	0xFE1
 11392                           bsr	equ	0xFE0
 11393                           indf2	equ	0xFDF
 11394                           postinc2	equ	0xFDE
 11395                           postdec2	equ	0xFDD
 11396                           fsr2h	equ	0xFDA
 11397                           fsr2l	equ	0xFD9
 11398                           status	equ	0xFD8
 11399                           
 11400 ;; *************** function _INT0_DefaultInterruptHandler *****************
 11401 ;; Defined at:
 11402 ;;		line 197 in file "mcc_generated_files/ext_int.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;		None
 11405 ;; Auto vars:     Size  Location     Type
 11406 ;;		None
 11407 ;; Return value:  Size  Location     Type
 11408 ;;                  1    wreg      void 
 11409 ;; Registers used:
 11410 ;;		None
 11411 ;; Tracked objects:
 11412 ;;		On entry : 0/0
 11413 ;;		On exit  : 0/0
 11414 ;;		Unchanged: 0/0
 11415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11416 ;;      Params:         0       0       0       0       0       0       0
 11417 ;;      Locals:         0       0       0       0       0       0       0
 11418 ;;      Temps:          0       0       0       0       0       0       0
 11419 ;;      Totals:         0       0       0       0       0       0       0
 11420 ;;Total ram usage:        0 bytes
 11421 ;; Hardware stack levels used:    1
 11422 ;; This function calls:
 11423 ;;		Nothing
 11424 ;; This function is called by:
 11425 ;;		_EXT_INT_Initialize
 11426 ;;		_INT0_CallBack
 11427 ;; This function uses a non-reentrant model
 11428 ;;
 11429                           
 11430                           	psect	text72
 11431  002094                     __ptext72:
 11432                           	opt stack 0
 11433  002094                     _INT0_DefaultInterruptHandler:
 11434                           	opt stack 16
 11435                           
 11436                           ;incstack = 0
 11437  002094  0012               	return		;funcret
 11438  002096                     __end_of_INT0_DefaultInterruptHandler:
 11439                           	opt stack 0
 11440                           tosu	equ	0xFFF
 11441                           tosh	equ	0xFFE
 11442                           tosl	equ	0xFFD
 11443                           pclatu	equ	0xFFB
 11444                           pclath	equ	0xFFA
 11445                           tblptru	equ	0xFF8
 11446                           tblptrh	equ	0xFF7
 11447                           tblptrl	equ	0xFF6
 11448                           tablat	equ	0xFF5
 11449                           prodh	equ	0xFF4
 11450                           prodl	equ	0xFF3
 11451                           intcon	equ	0xFF2
 11452                           intcon2	equ	0xFF1
 11453                           intcon3	equ	0xFF0
 11454                           indf0	equ	0xFEF
 11455                           postinc0	equ	0xFEE
 11456                           fsr0h	equ	0xFEA
 11457                           fsr0l	equ	0xFE9
 11458                           wreg	equ	0xFE8
 11459                           indf1	equ	0xFE7
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           bsr	equ	0xFE0
 11463                           indf2	equ	0xFDF
 11464                           postinc2	equ	0xFDE
 11465                           postdec2	equ	0xFDD
 11466                           fsr2h	equ	0xFDA
 11467                           fsr2l	equ	0xFD9
 11468                           status	equ	0xFD8
 11469                           
 11470 ;; *************** function _I2C1_ISR *****************
 11471 ;; Defined at:
 11472 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;		None
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;		None
 11477 ;; Return value:  Size  Location     Type
 11478 ;;                  1    wreg      void 
 11479 ;; Registers used:
 11480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11486 ;;      Params:         0       0       0       0       0       0       0
 11487 ;;      Locals:         0       0       0       0       0       0       0
 11488 ;;      Temps:          2       0       0       0       0       0       0
 11489 ;;      Totals:         2       0       0       0       0       0       0
 11490 ;;Total ram usage:        2 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    1
 11493 ;; This function calls:
 11494 ;;		_I2C1_FunctionComplete
 11495 ;;		_I2C1_Stop
 11496 ;; This function is called by:
 11497 ;;		_INTERRUPT_InterruptManagerHigh
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           	psect	text73
 11502  0006A4                     __ptext73:
 11503                           	opt stack 0
 11504  0006A4                     _I2C1_ISR:
 11505                           	opt stack 17
 11506                           
 11507                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 11508                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 11509                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 11510                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 11511                           ;i2c1.c: 241: PIR1bits.SSP1IF = 0;
 11512                           
 11513                           ;incstack = 0
 11514  0006A4  969E               	bcf	3998,3,c	;volatile
 11515                           
 11516                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 11517  0006A6  AEC6               	btfss	4038,7,c	;volatile
 11518  0006A8  D0F2               	goto	i2l986
 11519                           
 11520                           ;i2c1.c: 246: {
 11521                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 11522  0006AA  9EC6               	bcf	4038,7,c	;volatile
 11523                           
 11524                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 11525  0006AC  0E00               	movlw	0
 11526  0006AE  6E35               	movwf	_i2c1_state,c
 11527                           
 11528                           ;i2c1.c: 253: p_i2c1_current = (0);
 11529  0006B0  0E00               	movlw	0
 11530  0006B2  0100               	movlb	0	; () banked
 11531  0006B4  6F69               	movwf	_p_i2c1_current& (0+255),b
 11532  0006B6  0E00               	movlw	0
 11533  0006B8  6F6A               	movwf	(_p_i2c1_current+1)& (0+255),b
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;i2c1.c: 255: return;
 11537  0006BA  0012               	return	
 11538  0006BC                     i2l987:
 11539                           
 11540                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 11541  0006BC  0100               	movlb	0	; () banked
 11542  0006BE  B364               	btfsc	(_i2c1_object+4)& (0+255),1,b
 11543  0006C0  0012               	return	
 11544                           
 11545                           ; BSR set to: 0
 11546                           ;i2c1.c: 264: {
 11547                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 11548  0006C2  C062  F069         	movff	_i2c1_object+2,_p_i2c1_current
 11549  0006C6  C063  F06A         	movff	_i2c1_object+3,_p_i2c1_current+1
 11550                           
 11551                           ; BSR set to: 0
 11552                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 11553  0006CA  C062  FFD9         	movff	_i2c1_object+2,fsr2l
 11554  0006CE  C063  FFDA         	movff	_i2c1_object+3,fsr2h
 11555  0006D2  50DF               	movf	indf2,w,c
 11556  0006D4  6E34               	movwf	_i2c1_trb_count,c
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 11560  0006D6  EE20 F001          	lfsr	2,1
 11561  0006DA  5162               	movf	(_i2c1_object+2)& (0+255),w,b
 11562  0006DC  26D9               	addwf	fsr2l,f,c
 11563  0006DE  5163               	movf	(_i2c1_object+3)& (0+255),w,b
 11564  0006E0  22DA               	addwfc	fsr2h,f,c
 11565  0006E2  CFDE F030          	movff	postinc2,_p_i2c1_trb_current
 11566  0006E6  CFDD F031          	movff	postdec2,_p_i2c1_trb_current+1
 11567                           
 11568                           ; BSR set to: 0
 11569                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 11570  0006EA  0E06               	movlw	6
 11571  0006EC  2762               	addwf	(_i2c1_object+2)& (0+255),f,b
 11572  0006EE  0E00               	movlw	0
 11573  0006F0  2363               	addwfc	(_i2c1_object+3)& (0+255),f,b
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 11577  0006F2  0EAA               	movlw	low (_i2c1_tr_queue+6)
 11578  0006F4  1962               	xorwf	(_i2c1_object+2)& (0+255),w,b
 11579  0006F6  E108               	bnz	i2l4740
 11580  0006F8  0E00               	movlw	high (_i2c1_tr_queue+6)
 11581  0006FA  1963               	xorwf	(_i2c1_object+3)& (0+255),w,b
 11582  0006FC  A4D8               	btfss	status,2,c
 11583  0006FE  D004               	goto	i2l989
 11584                           
 11585                           ; BSR set to: 0
 11586                           ;i2c1.c: 274: {
 11587                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 11588  000700  0EA4               	movlw	low _i2c1_tr_queue
 11589  000702  6F62               	movwf	(_i2c1_object+2)& (0+255),b
 11590  000704  0E00               	movlw	high _i2c1_tr_queue
 11591  000706  6F63               	movwf	(_i2c1_object+3)& (0+255),b
 11592  000708                     i2l989:
 11593  000708                     i2l4740:
 11594                           
 11595                           ; BSR set to: 0
 11596                           ;i2c1.c: 277: }
 11597                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 11598  000708  9164               	bcf	(_i2c1_object+4)& (0+255),0,b
 11599                           
 11600                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 11601  00070A  5160               	movf	_i2c1_object& (0+255),w,b
 11602  00070C  1962               	xorwf	(_i2c1_object+2)& (0+255),w,b
 11603  00070E  E104               	bnz	i2l990
 11604  000710  5161               	movf	(_i2c1_object+1)& (0+255),w,b
 11605  000712  1963               	xorwf	(_i2c1_object+3)& (0+255),w,b
 11606  000714  B4D8               	btfsc	status,2,c
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;i2c1.c: 285: {
 11610                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 11611  000716  8364               	bsf	(_i2c1_object+4)& (0+255),1,b
 11612  000718                     i2l990:
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;i2c1.c: 288: }
 11616                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 11617  000718  80C5               	bsf	4037,0,c	;volatile
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 11621  00071A  0E02               	movlw	2
 11622  00071C  6E35               	movwf	_i2c1_state,c
 11623                           
 11624                           ; BSR set to: 0
 11625                           ;i2c1.c: 295: }
 11626                           ;i2c1.c: 297: break;
 11627  00071E  0012               	return	
 11628  000720                     i2l992:
 11629                           
 11630                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 11631  000720  82C5               	bsf	4037,1,c	;volatile
 11632                           
 11633                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 11634  000722  0E02               	movlw	2
 11635  000724  6E35               	movwf	_i2c1_state,c
 11636                           
 11637                           ;i2c1.c: 309: break;
 11638  000726  0012               	return	
 11639  000728                     i2l993:
 11640                           
 11641                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 11642  000728  ACC5               	btfss	4037,6,c	;volatile
 11643  00072A  D006               	goto	i2l994
 11644                           
 11645                           ;i2c1.c: 314: {
 11646                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 11647  00072C  0100               	movlb	0	; () banked
 11648  00072E  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11652  000730  0E04               	movlw	4
 11653  000732  EC39  F010         	call	_I2C1_Stop
 11654                           
 11655                           ;i2c1.c: 317: }
 11656  000736  0012               	return	
 11657  000738                     i2l994:
 11658                           
 11659                           ;i2c1.c: 318: else
 11660                           ;i2c1.c: 319: {
 11661                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 11662  000738  90D8               	bcf	status,0,c
 11663  00073A  3044               	rrcf	I2C1_ISR@i2c_address+1,w,c
 11664  00073C  6E02               	movwf	(??_I2C1_ISR+1)& (0+255),c
 11665  00073E  3043               	rrcf	I2C1_ISR@i2c_address,w,c
 11666  000740  6E01               	movwf	??_I2C1_ISR& (0+255),c
 11667  000742  5001               	movf	??_I2C1_ISR,w,c
 11668  000744  6EC9               	movwf	4041,c	;volatile
 11669                           
 11670                           ;i2c1.c: 324: if(i2c_address & 0x01)
 11671  000746  A043               	btfss	I2C1_ISR@i2c_address,0,c
 11672  000748  D003               	goto	i2l996
 11673                           
 11674                           ;i2c1.c: 325: {
 11675                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 11676  00074A  0E0B               	movlw	11
 11677  00074C  6E35               	movwf	_i2c1_state,c
 11678                           
 11679                           ;i2c1.c: 329: }
 11680  00074E  0012               	return	
 11681  000750                     i2l996:
 11682                           
 11683                           ;i2c1.c: 330: else
 11684                           ;i2c1.c: 331: {
 11685                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 11686  000750  0E03               	movlw	3
 11687  000752  6E35               	movwf	_i2c1_state,c
 11688                           
 11689                           ;i2c1.c: 334: }
 11690                           ;i2c1.c: 335: }
 11691                           ;i2c1.c: 337: break;
 11692  000754  0012               	return	
 11693  000756                     i2l998:
 11694                           
 11695                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 11696  000756  ACC5               	btfss	4037,6,c	;volatile
 11697  000758  D006               	goto	i2l999
 11698                           
 11699                           ;i2c1.c: 342: {
 11700                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 11701  00075A  0100               	movlb	0	; () banked
 11702  00075C  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11706  00075E  0E04               	movlw	4
 11707  000760  EC39  F010         	call	_I2C1_Stop
 11708                           
 11709                           ;i2c1.c: 345: }
 11710  000764  0012               	return	
 11711  000766                     i2l999:
 11712                           
 11713                           ;i2c1.c: 346: else
 11714                           ;i2c1.c: 347: {
 11715                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 11716  000766  82C5               	bsf	4037,1,c	;volatile
 11717                           
 11718                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 11719  000768  C043  F001         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
 11720  00076C  C044  F002         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
 11721  000770  C002  F001         	movff	??_I2C1_ISR+1,??_I2C1_ISR
 11722  000774  6A02               	clrf	??_I2C1_ISR+1,c
 11723  000776  0E06               	movlw	6
 11724  000778  1601               	andwf	??_I2C1_ISR,f,c
 11725  00077A  0E00               	movlw	0
 11726  00077C  1602               	andwf	??_I2C1_ISR+1,f,c
 11727  00077E  0EF0               	movlw	240
 11728  000780  1001               	iorwf	??_I2C1_ISR,w,c
 11729  000782  6E43               	movwf	I2C1_ISR@i2c_address,c
 11730  000784  5002               	movf	??_I2C1_ISR+1,w,c
 11731  000786  6E44               	movwf	I2C1_ISR@i2c_address+1,c
 11732                           
 11733                           ;i2c1.c: 357: i2c_address |= 0x0001;
 11734  000788  8043               	bsf	I2C1_ISR@i2c_address,0,c
 11735                           
 11736                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 11737  00078A  0E01               	movlw	1
 11738  00078C  6E32               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
 11739                           
 11740                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 11741  00078E  0E02               	movlw	2
 11742  000790  6E35               	movwf	_i2c1_state,c
 11743                           
 11744                           ;i2c1.c: 364: }
 11745                           ;i2c1.c: 366: break;
 11746  000792  0012               	return	
 11747  000794                     
 11748                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 11749  000794  0432               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
 11750  000796  B4D8               	btfsc	status,2,c
 11751  000798  D01A               	goto	i2l1003
 11752                           
 11753                           ;i2c1.c: 382: {
 11754                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 11755  00079A  C030  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 11756  00079E  C031  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 11757  0007A2  CFDE F043          	movff	postinc2,I2C1_ISR@i2c_address
 11758  0007A6  CFDD F044          	movff	postdec2,I2C1_ISR@i2c_address+1
 11759                           
 11760                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 11761  0007AA  EE20 F003          	lfsr	2,3
 11762  0007AE  5030               	movf	_p_i2c1_trb_current,w,c
 11763  0007B0  26D9               	addwf	fsr2l,f,c
 11764  0007B2  5031               	movf	_p_i2c1_trb_current+1,w,c
 11765  0007B4  22DA               	addwfc	fsr2h,f,c
 11766  0007B6  CFDE F067          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 11767  0007BA  CFDD F068          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 11768                           
 11769                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 11770  0007BE  EE20 F002          	lfsr	2,2
 11771  0007C2  5030               	movf	_p_i2c1_trb_current,w,c
 11772  0007C4  26D9               	addwf	fsr2l,f,c
 11773  0007C6  5031               	movf	_p_i2c1_trb_current+1,w,c
 11774  0007C8  22DA               	addwfc	fsr2h,f,c
 11775  0007CA  50DF               	movf	indf2,w,c
 11776  0007CC  6E33               	movwf	I2C1_ISR@i2c_bytes_left,c
 11777  0007CE                     i2l1003:
 11778                           
 11779                           ;i2c1.c: 409: else
 11780                           ;i2c1.c: 410: {
 11781                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 11782  0007CE  C043  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
 11783                           
 11784                           ;i2c1.c: 413: if(i2c_address & 0x01)
 11785  0007D2  A043               	btfss	I2C1_ISR@i2c_address,0,c
 11786  0007D4  D003               	goto	i2l1007
 11787                           
 11788                           ;i2c1.c: 414: {
 11789                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 11790  0007D6  0E05               	movlw	5
 11791  0007D8  6E35               	movwf	_i2c1_state,c
 11792                           
 11793                           ;i2c1.c: 417: }
 11794  0007DA  0012               	return	
 11795  0007DC                     i2l1007:
 11796                           
 11797                           ;i2c1.c: 418: else
 11798                           ;i2c1.c: 419: {
 11799                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 11800  0007DC  0E03               	movlw	3
 11801  0007DE  6E35               	movwf	_i2c1_state,c
 11802                           
 11803                           ;i2c1.c: 422: }
 11804                           ;i2c1.c: 423: }
 11805                           ;i2c1.c: 424: break;
 11806  0007E0  0012               	return	
 11807  0007E2                     i2l1009:
 11808                           
 11809                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 11810  0007E2  ACC5               	btfss	4037,6,c	;volatile
 11811  0007E4  D007               	goto	i2l1010
 11812                           
 11813                           ;i2c1.c: 430: {
 11814                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 11815  0007E6  0100               	movlb	0	; () banked
 11816  0007E8  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 11820  0007EA  9CC5               	bcf	4037,6,c	;volatile
 11821                           
 11822                           ; BSR set to: 0
 11823                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 11824  0007EC  0E05               	movlw	5
 11825  0007EE  EC39  F010         	call	_I2C1_Stop
 11826                           
 11827                           ;i2c1.c: 440: }
 11828  0007F2  0012               	return	
 11829  0007F4                     i2l1010:
 11830                           
 11831                           ;i2c1.c: 441: else
 11832                           ;i2c1.c: 442: {
 11833                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 11834  0007F4  0633               	decf	I2C1_ISR@i2c_bytes_left,f,c
 11835  0007F6  2833               	incf	I2C1_ISR@i2c_bytes_left,w,c
 11836  0007F8  A4D8               	btfss	status,2,c
 11837  0007FA  D00E               	goto	i2l1012
 11838                           
 11839                           ;i2c1.c: 445: {
 11840                           ;i2c1.c: 449: p_i2c1_trb_current++;
 11841  0007FC  0E06               	movlw	6
 11842  0007FE  2630               	addwf	_p_i2c1_trb_current,f,c
 11843  000800  0E00               	movlw	0
 11844  000802  2231               	addwfc	_p_i2c1_trb_current+1,f,c
 11845                           
 11846                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 11847  000804  2E34               	decfsz	_i2c1_trb_count,f,c
 11848  000806  D004               	goto	i2l1013
 11849                           
 11850                           ;i2c1.c: 453: {
 11851                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 11852  000808  0E00               	movlw	0
 11853  00080A  EC39  F010         	call	_I2C1_Stop
 11854                           
 11855                           ;i2c1.c: 455: }
 11856  00080E  0012               	return	
 11857  000810                     i2l1013:
 11858                           
 11859                           ;i2c1.c: 456: else
 11860                           ;i2c1.c: 457: {
 11861                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 11862  000810  82C5               	bsf	4037,1,c	;volatile
 11863                           
 11864                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 11865  000812  0E02               	movlw	2
 11866  000814  6E35               	movwf	_i2c1_state,c
 11867                           
 11868                           ;i2c1.c: 469: }
 11869                           ;i2c1.c: 470: }
 11870  000816  0012               	return	
 11871  000818                     i2l1012:
 11872                           
 11873                           ;i2c1.c: 471: else
 11874                           ;i2c1.c: 472: {
 11875                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 11876  000818  C067  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 11877  00081C  C068  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 11878  000820  50DF               	movf	indf2,w,c
 11879  000822  6EC9               	movwf	4041,c	;volatile
 11880  000824  0100               	movlb	0	; () banked
 11881  000826  4B67               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 11882  000828  2B68               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;i2c1.c: 475: }
 11886                           ;i2c1.c: 476: }
 11887                           ;i2c1.c: 477: break;
 11888                           
 11889                           ; BSR set to: 0
 11890  00082A  0012               	return	
 11891  00082C                     i2l1016:
 11892                           
 11893                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 11894  00082C  ACC5               	btfss	4037,6,c	;volatile
 11895  00082E  D007               	goto	i2l1017
 11896                           
 11897                           ;i2c1.c: 483: {
 11898                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 11899  000830  0100               	movlb	0	; () banked
 11900  000832  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11901                           
 11902                           ; BSR set to: 0
 11903                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11904  000834  0E04               	movlw	4
 11905  000836  EC39  F010         	call	_I2C1_Stop
 11906                           
 11907                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 11908  00083A  9CC5               	bcf	4037,6,c	;volatile
 11909                           
 11910                           ;i2c1.c: 493: }
 11911  00083C  0012               	return	
 11912  00083E                     i2l1017:
 11913                           
 11914                           ;i2c1.c: 494: else
 11915                           ;i2c1.c: 495: {
 11916                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 11917  00083E  86C5               	bsf	4037,3,c	;volatile
 11918                           
 11919                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11920  000840  0E08               	movlw	8
 11921  000842  6E35               	movwf	_i2c1_state,c
 11922                           
 11923                           ;i2c1.c: 498: }
 11924                           ;i2c1.c: 499: break;
 11925  000844  0012               	return	
 11926  000846                     
 11927                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11928  000846  0E08               	movlw	8
 11929  000848  6E35               	movwf	_i2c1_state,c
 11930                           
 11931                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 11932  00084A  86C5               	bsf	4037,3,c	;volatile
 11933                           
 11934                           ;i2c1.c: 511: break;
 11935  00084C  0012               	return	
 11936  00084E                     
 11937                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 11938  00084E  C067  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 11939  000852  C068  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 11940  000856  CFC9 FFDF          	movff	4041,indf2	;volatile
 11941  00085A  0100               	movlb	0	; () banked
 11942  00085C  4B67               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 11943  00085E  2B68               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;i2c1.c: 519: if(--i2c_bytes_left)
 11947  000860  0E01               	movlw	1
 11948  000862  5E33               	subwf	I2C1_ISR@i2c_bytes_left,f,c
 11949  000864  B4D8               	btfsc	status,2,c
 11950  000866  D004               	goto	i2l1021
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;i2c1.c: 520: {
 11954                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 11955  000868  9AC5               	bcf	4037,5,c	;volatile
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 11959  00086A  0E06               	movlw	6
 11960  00086C  6E35               	movwf	_i2c1_state,c
 11961                           
 11962                           ;i2c1.c: 530: }
 11963  00086E  D003               	goto	i2l1022
 11964  000870                     i2l1021:
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;i2c1.c: 531: else
 11968                           ;i2c1.c: 532: {
 11969                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 11970  000870  8AC5               	bsf	4037,5,c	;volatile
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;i2c1.c: 538: I2C1_FunctionComplete();
 11974  000872  ECD3  F00F         	call	_I2C1_FunctionComplete	;wreg free
 11975  000876                     i2l1022:
 11976                           
 11977                           ;i2c1.c: 539: }
 11978                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 11979  000876  88C5               	bsf	4037,4,c	;volatile
 11980                           
 11981                           ;i2c1.c: 543: break;
 11982  000878  0012               	return	
 11983  00087A                     
 11984                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 11985                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 11986  00087A  0E00               	movlw	0
 11987  00087C  EC39  F010         	call	_I2C1_Stop
 11988                           
 11989                           ;i2c1.c: 550: break;
 11990  000880  0012               	return	
 11991  000882                     
 11992                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 11993  000882  0100               	movlb	0	; () banked
 11994  000884  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11995                           
 11996                           ; BSR set to: 0
 11997                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 11998  000886  0E06               	movlw	6
 11999  000888  EC39  F010         	call	_I2C1_Stop
 12000                           
 12001                           ;i2c1.c: 560: }
 12002                           
 12003                           ;i2c1.c: 558: break;
 12004  00088C  0012               	return	
 12005  00088E                     i2l986:
 12006  00088E  5035               	movf	_i2c1_state,w,c
 12007                           
 12008                           ; Switch size 1, requested type "space"
 12009                           ; Number of cases is 11, Range of values is 0 to 11
 12010                           ; switch strategies available:
 12011                           ; Name         Instructions Cycles
 12012                           ; simple_byte           34    18 (average)
 12013                           ;	Chosen strategy is simple_byte
 12014  000890  0A00               	xorlw	0	; case 0
 12015  000892  B4D8               	btfsc	status,2,c
 12016  000894  D713               	goto	i2l987
 12017  000896  0A01               	xorlw	1	; case 1
 12018  000898  B4D8               	btfsc	status,2,c
 12019  00089A  D742               	goto	i2l992
 12020  00089C  0A03               	xorlw	3	; case 2
 12021  00089E  B4D8               	btfsc	status,2,c
 12022  0008A0  D779               	goto	i2l1001
 12023  0008A2  0A01               	xorlw	1	; case 3
 12024  0008A4  B4D8               	btfsc	status,2,c
 12025  0008A6  D79D               	goto	i2l1009
 12026  0008A8  0A07               	xorlw	7	; case 4
 12027  0008AA  B4D8               	btfsc	status,2,c
 12028  0008AC  D7E6               	goto	i2l1023
 12029  0008AE  0A01               	xorlw	1	; case 5
 12030  0008B0  B4D8               	btfsc	status,2,c
 12031  0008B2  D7BC               	goto	i2l1016
 12032  0008B4  0A03               	xorlw	3	; case 6
 12033  0008B6  B4D8               	btfsc	status,2,c
 12034  0008B8  D7C6               	goto	i2l1019
 12035  0008BA  0A01               	xorlw	1	; case 7
 12036  0008BC  B4D8               	btfsc	status,2,c
 12037  0008BE  D7DD               	goto	i2l1023
 12038  0008C0  0A0F               	xorlw	15	; case 8
 12039  0008C2  B4D8               	btfsc	status,2,c
 12040  0008C4  D7C4               	goto	i2l1020
 12041  0008C6  0A02               	xorlw	2	; case 10
 12042  0008C8  B4D8               	btfsc	status,2,c
 12043  0008CA  D72E               	goto	i2l993
 12044  0008CC  0A01               	xorlw	1	; case 11
 12045  0008CE  B4D8               	btfsc	status,2,c
 12046  0008D0  D742               	goto	i2l998
 12047  0008D2  D7D7               	goto	i2l1025
 12048  0008D4                     __end_of_I2C1_ISR:
 12049                           	opt stack 0
 12050                           tosu	equ	0xFFF
 12051                           tosh	equ	0xFFE
 12052                           tosl	equ	0xFFD
 12053                           pclatu	equ	0xFFB
 12054                           pclath	equ	0xFFA
 12055                           tblptru	equ	0xFF8
 12056                           tblptrh	equ	0xFF7
 12057                           tblptrl	equ	0xFF6
 12058                           tablat	equ	0xFF5
 12059                           prodh	equ	0xFF4
 12060                           prodl	equ	0xFF3
 12061                           intcon	equ	0xFF2
 12062                           intcon2	equ	0xFF1
 12063                           intcon3	equ	0xFF0
 12064                           indf0	equ	0xFEF
 12065                           postinc0	equ	0xFEE
 12066                           fsr0h	equ	0xFEA
 12067                           fsr0l	equ	0xFE9
 12068                           wreg	equ	0xFE8
 12069                           indf1	equ	0xFE7
 12070                           fsr1h	equ	0xFE2
 12071                           fsr1l	equ	0xFE1
 12072                           bsr	equ	0xFE0
 12073                           indf2	equ	0xFDF
 12074                           postinc2	equ	0xFDE
 12075                           postdec2	equ	0xFDD
 12076                           fsr2h	equ	0xFDA
 12077                           fsr2l	equ	0xFD9
 12078                           status	equ	0xFD8
 12079                           
 12080 ;; *************** function _I2C1_Stop *****************
 12081 ;; Defined at:
 12082 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;  completion_c    1    wreg     enum E6972
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;  completion_c    1    0[COMRAM] enum E6972
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  1    wreg      void 
 12089 ;; Registers used:
 12090 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12096 ;;      Params:         0       0       0       0       0       0       0
 12097 ;;      Locals:         0       0       0       0       0       0       0
 12098 ;;      Temps:          0       0       0       0       0       0       0
 12099 ;;      Totals:         0       0       0       0       0       0       0
 12100 ;;Total ram usage:        0 bytes
 12101 ;; Hardware stack levels used:    1
 12102 ;; This function calls:
 12103 ;;		Nothing
 12104 ;; This function is called by:
 12105 ;;		_I2C1_ISR
 12106 ;; This function uses a non-reentrant model
 12107 ;;
 12108                           
 12109                           	psect	text74
 12110  002072                     __ptext74:
 12111                           	opt stack 0
 12112  002072                     _I2C1_Stop:
 12113                           	opt stack 17
 12114                           
 12115                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 12116                           
 12117                           ;incstack = 0
 12118  002072  84C5               	bsf	4037,2,c	;volatile
 12119                           
 12120                           ;i2c1.c: 591: }
 12121                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 12122  002074  0E00               	movlw	0
 12123  002076  6E35               	movwf	_i2c1_state,c
 12124  002078  0012               	return		;funcret
 12125  00207A                     __end_of_I2C1_Stop:
 12126                           	opt stack 0
 12127                           tosu	equ	0xFFF
 12128                           tosh	equ	0xFFE
 12129                           tosl	equ	0xFFD
 12130                           pclatu	equ	0xFFB
 12131                           pclath	equ	0xFFA
 12132                           tblptru	equ	0xFF8
 12133                           tblptrh	equ	0xFF7
 12134                           tblptrl	equ	0xFF6
 12135                           tablat	equ	0xFF5
 12136                           prodh	equ	0xFF4
 12137                           prodl	equ	0xFF3
 12138                           intcon	equ	0xFF2
 12139                           intcon2	equ	0xFF1
 12140                           intcon3	equ	0xFF0
 12141                           indf0	equ	0xFEF
 12142                           postinc0	equ	0xFEE
 12143                           fsr0h	equ	0xFEA
 12144                           fsr0l	equ	0xFE9
 12145                           wreg	equ	0xFE8
 12146                           indf1	equ	0xFE7
 12147                           fsr1h	equ	0xFE2
 12148                           fsr1l	equ	0xFE1
 12149                           bsr	equ	0xFE0
 12150                           indf2	equ	0xFDF
 12151                           postinc2	equ	0xFDE
 12152                           postdec2	equ	0xFDD
 12153                           fsr2h	equ	0xFDA
 12154                           fsr2l	equ	0xFD9
 12155                           status	equ	0xFD8
 12156                           
 12157 ;; *************** function _I2C1_FunctionComplete *****************
 12158 ;; Defined at:
 12159 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;		None
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;		None
 12164 ;; Return value:  Size  Location     Type
 12165 ;;                  1    wreg      void 
 12166 ;; Registers used:
 12167 ;;		wreg, status,2, status,0
 12168 ;; Tracked objects:
 12169 ;;		On entry : 0/0
 12170 ;;		On exit  : 0/0
 12171 ;;		Unchanged: 0/0
 12172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12173 ;;      Params:         0       0       0       0       0       0       0
 12174 ;;      Locals:         0       0       0       0       0       0       0
 12175 ;;      Temps:          0       0       0       0       0       0       0
 12176 ;;      Totals:         0       0       0       0       0       0       0
 12177 ;;Total ram usage:        0 bytes
 12178 ;; Hardware stack levels used:    1
 12179 ;; This function calls:
 12180 ;;		Nothing
 12181 ;; This function is called by:
 12182 ;;		_I2C1_ISR
 12183 ;; This function uses a non-reentrant model
 12184 ;;
 12185                           
 12186                           	psect	text75
 12187  001FA6                     __ptext75:
 12188                           	opt stack 0
 12189  001FA6                     _I2C1_FunctionComplete:
 12190                           	opt stack 17
 12191                           
 12192                           ;i2c1.c: 567: p_i2c1_trb_current++;
 12193                           
 12194                           ;incstack = 0
 12195  001FA6  0E06               	movlw	6
 12196  001FA8  2630               	addwf	_p_i2c1_trb_current,f,c
 12197  001FAA  0E00               	movlw	0
 12198  001FAC  2231               	addwfc	_p_i2c1_trb_current+1,f,c
 12199                           
 12200                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 12201  001FAE  2E34               	decfsz	_i2c1_trb_count,f,c
 12202  001FB0  D003               	goto	i2l1028
 12203                           
 12204                           ;i2c1.c: 571: {
 12205                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 12206  001FB2  0E04               	movlw	4
 12207  001FB4  6E35               	movwf	_i2c1_state,c
 12208                           
 12209                           ;i2c1.c: 573: }
 12210  001FB6  0012               	return	
 12211  001FB8                     i2l1028:
 12212                           
 12213                           ;i2c1.c: 574: else
 12214                           ;i2c1.c: 575: {
 12215                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 12216  001FB8  0E01               	movlw	1
 12217  001FBA  6E35               	movwf	_i2c1_state,c
 12218  001FBC  0012               	return	
 12219  001FBE                     __end_of_I2C1_FunctionComplete:
 12220                           	opt stack 0
 12221                           tosu	equ	0xFFF
 12222                           tosh	equ	0xFFE
 12223                           tosl	equ	0xFFD
 12224                           pclatu	equ	0xFFB
 12225                           pclath	equ	0xFFA
 12226                           tblptru	equ	0xFF8
 12227                           tblptrh	equ	0xFF7
 12228                           tblptrl	equ	0xFF6
 12229                           tablat	equ	0xFF5
 12230                           prodh	equ	0xFF4
 12231                           prodl	equ	0xFF3
 12232                           intcon	equ	0xFF2
 12233                           intcon2	equ	0xFF1
 12234                           intcon3	equ	0xFF0
 12235                           indf0	equ	0xFEF
 12236                           postinc0	equ	0xFEE
 12237                           fsr0h	equ	0xFEA
 12238                           fsr0l	equ	0xFE9
 12239                           wreg	equ	0xFE8
 12240                           indf1	equ	0xFE7
 12241                           fsr1h	equ	0xFE2
 12242                           fsr1l	equ	0xFE1
 12243                           bsr	equ	0xFE0
 12244                           indf2	equ	0xFDF
 12245                           postinc2	equ	0xFDE
 12246                           postdec2	equ	0xFDD
 12247                           fsr2h	equ	0xFDA
 12248                           fsr2l	equ	0xFD9
 12249                           status	equ	0xFD8
 12250                           
 12251 ;; *************** function _I2C1_BusCollisionISR *****************
 12252 ;; Defined at:
 12253 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 12254 ;; Parameters:    Size  Location     Type
 12255 ;;		None
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;		None
 12258 ;; Return value:  Size  Location     Type
 12259 ;;                  1    wreg      void 
 12260 ;; Registers used:
 12261 ;;		None
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12267 ;;      Params:         0       0       0       0       0       0       0
 12268 ;;      Locals:         0       0       0       0       0       0       0
 12269 ;;      Temps:          0       0       0       0       0       0       0
 12270 ;;      Totals:         0       0       0       0       0       0       0
 12271 ;;Total ram usage:        0 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; This function calls:
 12274 ;;		Nothing
 12275 ;; This function is called by:
 12276 ;;		_INTERRUPT_InterruptManagerHigh
 12277 ;; This function uses a non-reentrant model
 12278 ;;
 12279                           
 12280                           	psect	text76
 12281  002096                     __ptext76:
 12282                           	opt stack 0
 12283  002096                     _I2C1_BusCollisionISR:
 12284                           	opt stack 18
 12285                           
 12286                           ;incstack = 0
 12287  002096  0012               	return		;funcret
 12288  002098                     __end_of_I2C1_BusCollisionISR:
 12289                           	opt stack 0
 12290                           tosu	equ	0xFFF
 12291                           tosh	equ	0xFFE
 12292                           tosl	equ	0xFFD
 12293                           pclatu	equ	0xFFB
 12294                           pclath	equ	0xFFA
 12295                           tblptru	equ	0xFF8
 12296                           tblptrh	equ	0xFF7
 12297                           tblptrl	equ	0xFF6
 12298                           tablat	equ	0xFF5
 12299                           prodh	equ	0xFF4
 12300                           prodl	equ	0xFF3
 12301                           intcon	equ	0xFF2
 12302                           intcon2	equ	0xFF1
 12303                           intcon3	equ	0xFF0
 12304                           indf0	equ	0xFEF
 12305                           postinc0	equ	0xFEE
 12306                           fsr0h	equ	0xFEA
 12307                           fsr0l	equ	0xFE9
 12308                           wreg	equ	0xFE8
 12309                           indf1	equ	0xFE7
 12310                           fsr1h	equ	0xFE2
 12311                           fsr1l	equ	0xFE1
 12312                           bsr	equ	0xFE0
 12313                           indf2	equ	0xFDF
 12314                           postinc2	equ	0xFDE
 12315                           postdec2	equ	0xFDD
 12316                           fsr2h	equ	0xFDA
 12317                           fsr2l	equ	0xFD9
 12318                           status	equ	0xFD8
 12319                           tosu	equ	0xFFF
 12320                           tosh	equ	0xFFE
 12321                           tosl	equ	0xFFD
 12322                           pclatu	equ	0xFFB
 12323                           pclath	equ	0xFFA
 12324                           tblptru	equ	0xFF8
 12325                           tblptrh	equ	0xFF7
 12326                           tblptrl	equ	0xFF6
 12327                           tablat	equ	0xFF5
 12328                           prodh	equ	0xFF4
 12329                           prodl	equ	0xFF3
 12330                           intcon	equ	0xFF2
 12331                           intcon2	equ	0xFF1
 12332                           intcon3	equ	0xFF0
 12333                           indf0	equ	0xFEF
 12334                           postinc0	equ	0xFEE
 12335                           fsr0h	equ	0xFEA
 12336                           fsr0l	equ	0xFE9
 12337                           wreg	equ	0xFE8
 12338                           indf1	equ	0xFE7
 12339                           fsr1h	equ	0xFE2
 12340                           fsr1l	equ	0xFE1
 12341                           bsr	equ	0xFE0
 12342                           indf2	equ	0xFDF
 12343                           postinc2	equ	0xFDE
 12344                           postdec2	equ	0xFDD
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349                           	psect	text77
 12350  000000                     __ptext77:
 12351                           	opt stack 0
 12352                           tosu	equ	0xFFF
 12353                           tosh	equ	0xFFE
 12354                           tosl	equ	0xFFD
 12355                           pclatu	equ	0xFFB
 12356                           pclath	equ	0xFFA
 12357                           tblptru	equ	0xFF8
 12358                           tblptrh	equ	0xFF7
 12359                           tblptrl	equ	0xFF6
 12360                           tablat	equ	0xFF5
 12361                           prodh	equ	0xFF4
 12362                           prodl	equ	0xFF3
 12363                           intcon	equ	0xFF2
 12364                           intcon2	equ	0xFF1
 12365                           intcon3	equ	0xFF0
 12366                           indf0	equ	0xFEF
 12367                           postinc0	equ	0xFEE
 12368                           fsr0h	equ	0xFEA
 12369                           fsr0l	equ	0xFE9
 12370                           wreg	equ	0xFE8
 12371                           indf1	equ	0xFE7
 12372                           fsr1h	equ	0xFE2
 12373                           fsr1l	equ	0xFE1
 12374                           bsr	equ	0xFE0
 12375                           indf2	equ	0xFDF
 12376                           postinc2	equ	0xFDE
 12377                           postdec2	equ	0xFDD
 12378                           fsr2h	equ	0xFDA
 12379                           fsr2l	equ	0xFD9
 12380                           status	equ	0xFD8
 12381                           
 12382                           	psect	rparam
 12383  0000                     tosu	equ	0xFFF
 12384                           tosh	equ	0xFFE
 12385                           tosl	equ	0xFFD
 12386                           pclatu	equ	0xFFB
 12387                           pclath	equ	0xFFA
 12388                           tblptru	equ	0xFF8
 12389                           tblptrh	equ	0xFF7
 12390                           tblptrl	equ	0xFF6
 12391                           tablat	equ	0xFF5
 12392                           prodh	equ	0xFF4
 12393                           prodl	equ	0xFF3
 12394                           intcon	equ	0xFF2
 12395                           intcon2	equ	0xFF1
 12396                           intcon3	equ	0xFF0
 12397                           indf0	equ	0xFEF
 12398                           postinc0	equ	0xFEE
 12399                           fsr0h	equ	0xFEA
 12400                           fsr0l	equ	0xFE9
 12401                           wreg	equ	0xFE8
 12402                           indf1	equ	0xFE7
 12403                           fsr1h	equ	0xFE2
 12404                           fsr1l	equ	0xFE1
 12405                           bsr	equ	0xFE0
 12406                           indf2	equ	0xFDF
 12407                           postinc2	equ	0xFDE
 12408                           postdec2	equ	0xFDD
 12409                           fsr2h	equ	0xFDA
 12410                           fsr2l	equ	0xFD9
 12411                           status	equ	0xFD8
 12412                           
 12413                           	psect	temp
 12414  000049                     btemp:
 12415                           	opt stack 0
 12416  000049                     	ds	1
 12417  0000                     int$flags	set	btemp
 12418  0000                     wtemp6	set	btemp+1
 12419                           tosu	equ	0xFFF
 12420                           tosh	equ	0xFFE
 12421                           tosl	equ	0xFFD
 12422                           pclatu	equ	0xFFB
 12423                           pclath	equ	0xFFA
 12424                           tblptru	equ	0xFF8
 12425                           tblptrh	equ	0xFF7
 12426                           tblptrl	equ	0xFF6
 12427                           tablat	equ	0xFF5
 12428                           prodh	equ	0xFF4
 12429                           prodl	equ	0xFF3
 12430                           intcon	equ	0xFF2
 12431                           intcon2	equ	0xFF1
 12432                           intcon3	equ	0xFF0
 12433                           indf0	equ	0xFEF
 12434                           postinc0	equ	0xFEE
 12435                           fsr0h	equ	0xFEA
 12436                           fsr0l	equ	0xFE9
 12437                           wreg	equ	0xFE8
 12438                           indf1	equ	0xFE7
 12439                           fsr1h	equ	0xFE2
 12440                           fsr1l	equ	0xFE1
 12441                           bsr	equ	0xFE0
 12442                           indf2	equ	0xFDF
 12443                           postinc2	equ	0xFDE
 12444                           postdec2	equ	0xFDD
 12445                           fsr2h	equ	0xFDA
 12446                           fsr2l	equ	0xFD9
 12447                           status	equ	0xFD8


Data Sizes:
    Strings     299
    Constant    10
    Data        4
    BSS         140
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      72
    BANK0           160     42     126
    BANK1           256     40      82
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.pTrFlag	PTR enum E6972 size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK1[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_18(CODE[3]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[15]), STR_12(CODE[15]), STR_11(CODE[15]), 
		 -> STR_10(CODE[22]), STR_9(CODE[22]), STR_3(CODE[3]), STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 42
		 -> strLCD(BANK1[42]), strUSART(BANK0[42]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_sprintf(COMRAM[2]), ?_sprintf(BANK1[2]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.pTrFlag	PTR enum E6972 size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    F7084.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F7079.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E6972 size(2) Largest target is 0

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    S2001$pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    S2013$pTrFlag	PTR enum E6972 size(2) Largest target is 0

    p_i2c1_current.pTrFlag	PTR enum E6972 size(2) Largest target is 0

    S2013$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), NULL(NULL[0]), 

    S2024$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    S2024$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    escreveLinhaLCD@texto	PTR unsigned char  size(2) Largest target is 42
		 -> STR_20(CODE[21]), STR_19(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), 
		 -> STR_8(CODE[20]), STR_7(CODE[22]), STR_6(CODE[22]), STR_5(CODE[22]), 
		 -> STR_4(CODE[22]), strLCD(BANK1[42]), STR_2(CODE[20]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 42
		 -> STR_20(CODE[21]), STR_19(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), 
		 -> STR_8(CODE[20]), STR_7(CODE[22]), STR_6(CODE[22]), STR_5(CODE[22]), 
		 -> STR_4(CODE[22]), strLCD(BANK1[42]), STR_2(CODE[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in COMRAM

    _ADC_ISR->i1_sprintf
    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv
    ___lbtoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _TMR0_ISR->_EPWM1_LoadDutyValue

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK0

    _INTERRUPT_InterruptManagerLow->_ADC_ISR
    _ADC_ISR->i1_sprintf

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    _menu->_defTempAlarme
    _testeTeclado->_sprintf
    _monitorizacao->_sprintf
    _feedbackUSART->_escreveLinhaLCD
    _defTempAlarme->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _escreveLinhaLCD->_putsXLCD
    _putsXLCD->_WriteDataXLCD
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _OpenXLCD->_DelayPORXLCD
    _OpenXLCD->_DelayXLCD
    _OpenXLCD->_WriteCmdXLCD

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   31888
                           _BusyXLCD
                           _OpenXLCD
                  _SYSTEM_Initialize
                       _WriteCmdXLCD
                               _menu
 ---------------------------------------------------------------------------------
 (1) _menu                                                 0     0      0   31280
                      _defTempAlarme
                    _escreveLinhaLCD
                      _feedbackUSART
                      _monitorizacao
                            _sprintf
                       _testeTeclado
 ---------------------------------------------------------------------------------
 (2) _testeTeclado                                         1     1      0    7143
                                             35 BANK1      1     1      0
                    _escreveLinhaLCD
                         _getKBInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _monitorizacao                                        0     0      0    7109
                    _escreveLinhaLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _feedbackUSART                                        0     0      0    2324
                           _BusyXLCD
                      _EUSART1_Write
                       _WriteCmdXLCD
                    _escreveLinhaLCD
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _defTempAlarme                                        5     5      0    7595
                                             35 BANK1      5     5      0
                    _escreveLinhaLCD
                         _getKBInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             27    21      6    4878
                                             12 BANK1     23    17      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     418
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              7 BANK1      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (3) _getKBInput                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _escreveLinhaLCD                                      3     1      2    2231
                                              3 BANK1      3     1      2
                           _BusyXLCD
                       _WriteCmdXLCD
                           _putsXLCD
 ---------------------------------------------------------------------------------
 (4) _putsXLCD                                             2     0      2     217
                                              1 BANK1      2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (5) _WriteDataXLCD                                        1     1      0      62
                                              0 BANK1      1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     484
                     _ADC_Initialize
                   _EPWM1_Initialize
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     121
                                              2 BANK1      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     363
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenXLCD                                             1     1      0      62
                           _BusyXLCD
                      _DelayFor18TCY
                       _DelayPORXLCD
                          _DelayXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (4) _WriteCmdXLCD                                         1     1      0      62
                                              0 BANK1      1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _DelayXLCD                                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DelayPORXLCD                                         1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (6) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManagerLow                       21    21      0   18368
                                             21 BANK0     21    21      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                 10    10      0     201
                                             22 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              4     4      0   18167
                                             17 BANK0      4     4      0
            _ADC_GetConversionResult
                           ___awtoft
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                    i1_EUSART1_Write
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (9) i1_sprintf                                           31    21     10    2510
                                             34 COMRAM    10     0     10
                                              0 BANK0     17    17      0
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
 ---------------------------------------------------------------------------------
 (10) i1_isdigit                                           3     3      0      99
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     296
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1___lwmod                                           5     1      4     302
                                             29 COMRAM     5     1      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     311
                                             22 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) i1_EUSART1_Write                                      1     1      0      31
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) ___lbtoft                                             4     1      3    2924
                                             30 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     551
                                             22 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4854
                                              0 BANK0      6     0      6
                            ___ftadd
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    4438
                                             30 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    3701
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     378
                                             22 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    3116
                                             30 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2893
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                             22 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManagerHigh                     18    18      0     218
                                              4 COMRAM    18    18      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0     218
                   Absolute function *
                _ADC_StartConversion
                _EPWM1_LoadDutyValue
       _TMR0_DefaultInterruptHandler *
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (14) _TMR2_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR2_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR2_LoadPeriodRegister                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EPWM1_LoadDutyValue                                 4     2      2     196
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (14) _ADC_StartConversion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (14) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (14) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
                      _INT0_CallBack
 ---------------------------------------------------------------------------------
 (14) _INT0_CallBack                                       0     0      0       0
                   Absolute function *
       _INT0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _INT0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C1_ISR                                            2     2      0       0
                                              0 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (14) _I2C1_Stop                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_FunctionComplete                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C1_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyXLCD
     _DelayFor18TCY
   _OpenXLCD
     _BusyXLCD
       _DelayFor18TCY
     _DelayFor18TCY
     _DelayPORXLCD
     _DelayXLCD
     _WriteCmdXLCD
       _DelayFor18TCY
   _SYSTEM_Initialize
     _ADC_Initialize
     _EPWM1_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
   _WriteCmdXLCD
     _DelayFor18TCY
   _menu
     _defTempAlarme
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
       _getKBInput
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _escreveLinhaLCD
       _BusyXLCD
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
       _putsXLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteDataXLCD
           _DelayFor18TCY
     _feedbackUSART
       _BusyXLCD
         _DelayFor18TCY
       _EUSART1_Write
       _WriteCmdXLCD
         _DelayFor18TCY
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
     _monitorizacao
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _testeTeclado
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
       _getKBInput
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _INTERRUPT_InterruptManagerLow (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     ___awtoft
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftsub
       ___ftadd
         ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
     i1_EUSART1_Write
     i1_sprintf
       i1___lwdiv
       i1___lwmod
         i1___lwdiv (ARG)
       i1___wmul
       i1_isdigit
   _EUSART1_Receive_ISR

 _INTERRUPT_InterruptManagerHigh (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _INT0_ISR
     _INT0_CallBack
       Absolute function(Fake) *
       _INT0_DefaultInterruptHandler *
   _INT1_ISR
     _INT1_CallBack
       Absolute function(Fake) *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR
     _INT2_CallBack
       Absolute function(Fake) *
       _INT2_DefaultInterruptHandler *
   _TMR0_ISR
     Absolute function(Fake) *
     _ADC_StartConversion *
     _EPWM1_LoadDutyValue *
     _TMR0_DefaultInterruptHandler *
     _TMR2_LoadPeriodRegister *
     _TMR2_StartTimer *
     _TMR2_StopTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     28      52       6       32.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2A      7E       4       78.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      48       1       76.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     118       9        0.0%
DATA                 0      0     118      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Dec 19 16:51:20 2017

                                       _i 0041                                         _j 0040  
                                      bsr 000FE0                       ___wmul@multiplicand 012C  
                        i1___wmul@product 001B                           _timer0ReloadVal 0045  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 002A                              ___ftadd@exp2 0029  
                            ___ftadd@sign 0028                                       l650 1684  
                                     l802 0EF4                                       l811 0F18  
                                     l644 1664                                       l820 0F9C  
                                     l812 0F22                                       l901 1906  
                                     l813 0F32                                       l805 0EFC  
                                     l670 191E                                       l910 15E0  
                                     l830 0FEC                                       l814 0FD0  
                                     l647 1674                                       l903 1918  
                                     l911 1530                                       l815 0FAE  
                                     l664 1C92                                       l656 169E  
                                     l840 0CDA                                       l816 0F66  
                                     l921 15C0                                       l913 1538  
                                     l841 0CA4                                       l825 0FF2  
                                     l817 0FCA                                       l809 0F08  
                                     l842 0CE8                                       l826 0FDA  
                                     l818 0F78                                       l659 16AE  
                                     l915 154A                                       l843 0CC2  
                                     l827 100E                                       l819 0F8A  
                                     l828 0FE0                                       l669 1952  
                                     l917 15A4                                       l845 0D2E  
                                     l829 0FE6                                       l918 1578  
                                     l838 0C9C                                       l782 1BCE  
                                     l847 0D86                                       l839 0CFA  
                                     l881 18CE                                       l857 18B4  
                                     l785 1BDE                                       l866 1164  
                                     l858 1882                                       l891 18EA  
                                     l875 18C0                                       l867 1218  
                                     l787 1BEE                                       l779 1BBE  
                                     l797 1D54                                       l886 18DC  
                                     l896 18F8                              __CFG_CPB$OFF 000000  
                                     _PR2 000FBB                              __CFG_CPD$OFF 000000  
              ??_INT0_SetInterruptHandler 012C                           __end_of_ADC_ISR 0EE4  
                   __size_of_WriteCmdXLCD 0044                           _TMR2_Initialize 200A  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                             _INT0_CallBack 1F14  
                            __CFG_LVP$OFF 000000                             _INT1_CallBack 1EF2  
                        __end_of_I2C1_ISR 08D4                                      l1100 01C4  
                                    l1101 01B4                                      l1103 01F2  
                                    l1120 0340                                      l1112 02CC  
                                    l1104 01D6                                      l1113 02F0  
                                    l1114 02F8                                      l1106 0204  
                                    l1107 0218                                      l1108 0282  
                                    l1118 033A                                      l1119 0396  
                                    l1091 022A                                      l1086 00EC  
                                    l1087 0106                                      l1096 0258  
                                    l1097 0192                                      l1089 0130  
                                    l1098 01AA                                      l1532 199A  
                                    l1533 1992                                      l1453 1EA6  
                                    l1542 1A7E                                      l1543 1A76  
                                    l1536 19BA                                      l1537 19C4  
                                    l1546 1A96                                      l1547 1AA0  
                                    l5530 01D6                                      l5620 1D42  
                                    l5524 01B4                                      l5616 201E  
                                    l5562 0286                                      l5976 1542  
                                    STR_1 7ED3                                      STR_2 7FC2  
                                    STR_3 7FFB                                      STR_4 7EEA  
                                    STR_5 7F16                                      STR_6 7F2C  
                                    STR_7 7F00                                      STR_8 7FC2  
                                    STR_9 7F42                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u6010 0300                                      u6020 031E  
                                    u6040 039E                                      u6050 03B6  
                                    u7200 168E                                      u5700 1972  
                                    u6180 1902                                      u7320 0FD4  
                                    u7250 0F00                                      u5707 1968  
                                    u6540 0D8C                                      u5830 199E  
                                    u6630 1214                                      u6710 1572  
                                    u7270 0F0C                                      u6560 0D96  
                                    u5690 1948                                      u5860 1A82  
                                    u6740 15E4                                      u6660 18B8  
                                    u7437 124A                                      u7447 2000  
                                    u7457 1EB6                                      u5697 193E  
                                    u5970 02B2                                      u7467 1EC6  
                                    u7477 1FC0                                      u7487 1FC6  
                                    _TMR2 000FBC                                      _WPUB 000F61  
                           _INT2_CallBack 1ED0                             _EUSART1_Write 201A  
                                    _main 1BB6                              ___ftpack@arg 0017  
                                    _menu 0EE4                              ___ftpack@exp 001A  
                         _TMR0_StartTimer 207A                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      indf0 000FEF  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0049                             __CFG_BORV$190 000000  
       __size_of_INT2_SetInterruptHandler 000A                 ?_INT2_SetInterruptHandler 012A  
                  __size_of_WriteDataXLCD 0044                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00DC  
                           __CFG_IESO$OFF 000000                     ??_EPWM1_LoadDutyValue 0003  
                            ___ftmul@cntr 00AE                              ___param_bank 000000  
                            ___ftmul@sign 00AF                  __size_of_escreveLinhaLCD 002E  
                            ___fttol@exp1 0025                              ___fttol@lval 0021  
                            _WriteCmdXLCD 1AEE                   __end_of_TMR0_Initialize 1C6C  
                              _i2c1_state 0035                          __end_of_INT0_ISR 1DF0  
                        __end_of_INT1_ISR 1DC4                          __end_of_INT2_ISR 1D98  
          ??_TMR0_DefaultInterruptHandler 0001            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 2036                                     ?_main 0001  
                                   ?_menu 0001                         __end_of_I2C1_Stop 207A  
                         __end_of___ftadd 0C42                                     STR_10 7F58  
                                   STR_11 7FE5                                     STR_12 7FD6  
                                   STR_20 7F83                                     STR_13 7FD6  
                                   STR_21 7FF8                                     STR_22 7FF8  
                                   STR_14 7FF4                                     STR_15 7FF4  
                                   STR_16 7F98                                     STR_17 7F6E  
                                   STR_18 7FF8                                     STR_19 7FAD  
                         __end_of___ftmul 1350                                     _T0CON 000FD5  
                         __end_of___ftsub 1BB6                           __end_of___fttol 1444  
                                   _T2CON 000FBA                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwdiv 19CE                                     i1l133 007A  
                                   i1l135 0084                                     i2l120 14B0  
                         __end_of___lwmod 1AAA                                     i2l122 14BC  
                                   i1l611 0A2C                                     i2l204 1DA0  
                                   i2l124 14C8                                     i2l116 1498  
                                   i2l205 1DA8                                     i2l221 1D74  
                                   i2l206 1DB0                                     i2l222 1D7C  
                                   i2l126 14D2                                     i2l118 14A4  
                                   i1l518 0ECA                                     i2l207 1DB8  
                                   i2l223 1D84                                     i1l519 0E9E  
                                   i2l240 1DDC                                     i2l224 1D8C  
                                   i1l608 09A2                                     i2l241 1DE4  
                                   i2l238 1DCC                                     i2l239 1DD4  
                                   i2l360 1116                                     i2l353 1078  
                                   i2l354 1092                                     i2l355 10B2  
                                   i2l364 112C                                     i2l356 10D8  
                                   i2l357 1104                                     i1l597 08DC  
                                   i2l358 1152                                     i1l598 09A4  
                                   i2l359 1142                                     i1l599 092A  
                                   i2l990 0718                                     i2l992 0720  
                                   i2l993 0728                                     i2l986 088E  
                                   i2l994 0738                                     i2l987 06BC  
                                   i2l996 0750                                     i2l989 0708  
                                   i2l998 0756                                     i2l999 0766  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _PORTD 000F83                                     _TRISA 000F92  
                                   _TRISB 000F93                            ?_INT0_CallBack 0001  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                                i1isdigit@c 0019  
        __size_of_ADC_GetConversionResult 0014         __size_of_TMR0_SetInterruptHandler 000A  
            __end_of_I2C1_BusCollisionISR 2098                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 012A                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ??_I2C1_Initialize 012A  
                        __end_of_TMR0_ISR 115E                     __end_of_feedbackUSART 15F2  
                           __CFG_WRTB$OFF 000000                        i1___lwmod@dividend 001E  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          ?_INT1_CallBack 0001                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0022                           __end_of_dpowers 7ED3  
          ??_INT1_DefaultInterruptHandler 0001                           __end_of_isdigit 1EAE  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001B  
                          ?_INT2_CallBack 0001                  _INT1_SetInterruptHandler 2056  
                          ?_EUSART1_Write 0001                                     pclath 000FFA  
                                   tablat 000FF5                          __end_ofi1___wmul 1E68  
                                   status 000FD8                       i1___wmul@multiplier 0017  
                                   wtemp6 004A                           __end_of_sprintf 03C4  
                          __CFG_HFOFST$ON 000000                           _TMR2_StartTimer 2082  
        __size_of_TMR2_LoadPeriodRegister 0008                            __CFG_FOSC$ECMP 000000  
                      __size_ofi1___lwdiv 0052            ?_INTERRUPT_InterruptManagerLow 0001  
                      __size_ofi1___lwmod 0042                            __CFG_PBADEN$ON 000000  
                         __initialization 17FE                __end_of_EUSART1_Initialize 1F8E  
                            __end_of_main 1BF4                              __end_of_menu 1026  
                        __end_of_BusyXLCD 1CA6                        __size_ofi1_isdigit 001E  
                      __size_of_DelayXLCD 0012                     __size_of_DelayPORXLCD 0022  
                 __end_of_TMR2_Initialize 201A                                 ??_ADC_ISR 002D  
                              i1sprintf@c 00BA                                i1sprintf@f 0025  
                        __end_of_OpenXLCD 16C0                               _i2c1_object 0060  
                                  ??_main 0152                             ___fttol@sign1 0020  
                                  ??_menu 0152                        __size_ofi1_sprintf 02E0  
                           __activetblptr 000002                             _WriteDataXLCD 1AAA  
                 __end_of_TMR0_StartTimer 207E                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _CCPR1H 000FBF                                    _CCPR1L 000FBE  
                        __end_of___awtoft 1CDE                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 176E                          __end_of___lbtoft 1E8C  
                                  i1l1100 04A6                                    i1l1101 0496  
                                  i1l1103 04D4                                    i1l1120 0622  
                                  i1l1112 05AE                                    i1l1104 04B8  
                                  i1l1113 05D2                                    i1l1114 05DA  
                                  i1l1106 04E6                                    i1l1107 04FA  
                                  i1l1108 0564                                    i1l1118 061C  
                                  i1l1119 0676                                    i1l1410 179E  
                                  i1l1411 17CE                                    i1l1091 050C  
                                  i1l1420 12DE                                    i1l1341 171C  
                                  i1l1421 12EE                                    i1l1342 1706  
                                  i1l1086 03D0                                    i1l1319 1CBA  
                                  i1l1423 1306                                    i1l1087 03EA  
                                  i1l1344 1744                                    i1l1424 1316  
                                  i1l1440 13F2                                    i1l1096 053A  
                                  i1l1345 173A                                    i1l1417 1284  
                                  i1l1441 13E2                                    i1l1097 0474  
                                  i1l1089 0414                                    i1l1338 16E8  
                                  i1l1434 1B8C                                    i1l1098 048C  
                                  i1l1339 16DE                                    i1l1419 12AC  
                                  i1l1532 19EC                                    i1l1373 0B12  
                                  i1l1533 19E4                                    i1l1453 1F6C  
                                  i1l1446 1416                                    i1l1438 137C  
                                  i1l1542 1B48                                    i1l1383 0B6E  
                                  i1l1447 140A                                    i1l1543 1B40  
                                  i1l1392 0BAC                                    i1l1384 0B64  
                                  i1l1536 1A0C                                    i2l1001 0794  
                                  i1l1393 0BA2                                    i1l1369 0AE8  
                                  i1l1449 1432                                    i1l1537 1A16  
                                  i2l1010 07F4                                    i1l1378 0B78  
                                  i1l1546 1B60                                    i2l1003 07CE  
                                  i1l1395 0BD0                                    i1l1547 1B6A  
                                  i2l1020 084E                                    i2l1012 0818  
                                  i1l1396 0BEC                                    i2l1021 0870  
                                  i2l1013 0810                                    i1l1397 0C1C  
                                  i2l1022 0876                                    i2l1023 087A  
                                  i2l1007 07DC                                    i2l1016 082C  
                                  i2l1025 0882                                    i2l1017 083E  
                                  i2l1009 07E2                                    i2l1019 0846  
                                  i2l1028 1FB8                                    i1l6214 0568  
                                  i1l6144 2038                                    i1l5292 17FA  
                                  i1l6182 04B8                                    i1l6176 0496  
                          __CFG_WDTEN$OFF 000000                                    i1l4936 0A2C  
                                  i2l4740 0708                                    _RCREG1 000FAE  
                                  u623_21 0AA6                                    _RCSTA1 000FAB  
                                  u624_21 0ABA                                    _OSCCON 000FD3  
                                  u676_21 126A                                    _SPBRG1 000FAF  
                                  u678_21 1294                                    u687_21 1360  
                                  _TXREG1 000FAD                             i1sprintf@flag 00B1  
                                  _TXSTA1 000FAC                             i1sprintf@prec 00B0  
                            _DelayPORXLCD 1EAE                           i1_EUSART1_Write 2036  
                          __CFG_XINST$OFF 000000                                    _WrEnFl 0038  
                            _CCPTMRS0bits 000F49                            _p_i2c1_current 0069  
                                  ___ftge 176E                                    _binADC 006B  
                                  _clk1Hz 003D                                    _clk2Hz 003E  
                                  _clk4Hz 003F                                    ___wmul 1E1A  
                               ??___ftadd 0025                            __CFG_STVREN$ON 000000  
                                  _alarme 0039                                 ??___ftmul 0029  
                               ??___ftsub 002B                                 ??___fttol 001B  
                               ??___lwdiv 012E                                 ??___lwmod 0135  
                   EUSART1_Receive_ISR@i1 001C                     EUSART1_Receive_ISR@i2 001E  
                        ?_TMR0_Initialize 0001                                 ?_I2C1_ISR 0001  
                                  clear_0 1834                                    clear_1 1840  
                                  clear_2 184C                                    _strLCD 0100  
                                  _update 00DD                           ??_INT0_CallBack 0001  
                          ?_WriteDataXLCD 0001                     ___ftmul@f3_as_product 00AB  
                       ??_escreveLinhaLCD 012F      __end_of_INT2_DefaultInterruptHandler 2092  
   __size_of_INT2_DefaultInterruptHandler 0002                         __end_ofi1___lwdiv 1A20  
            _INT2_DefaultInterruptHandler 2090                              __pdataCOMRAM 0047  
                       __end_ofi1___lwmod 1B74                                 ??_isdigit 012A  
                         ??_INT1_CallBack 0001                              __mediumconst 7EC8  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                          __end_of_putsXLCD 197A  
                         ??_INT2_CallBack 0001                           ??_EUSART1_Write 012A  
                 __end_of_TMR2_StartTimer 2086  TMR0_SetInterruptHandler@InterruptHandler 012A  
INT0_SetInterruptHandler@InterruptHandler 012A  INT2_SetInterruptHandler@InterruptHandler 012A  
INT1_SetInterruptHandler@InterruptHandler 012A                                 ??_sprintf 013C  
                   __end_of_monitorizacao 0D9C                         __end_ofi1_isdigit 1F74  
           __size_of_INTERRUPT_Initialize 0012                         __end_of_DelayXLCD 200A  
        ??_INTERRUPT_InterruptManagerHigh 0005           ?_INTERRUPT_InterruptManagerHigh 0001  
                       _SYSTEM_Initialize 1DF0                                __accesstop 0060  
                 __end_of__initialization 1852                                 ?_INT0_ISR 0001  
                               ?_INT1_ISR 0001                                 ?_INT2_ISR 0001  
                              ___ftadd@f1 001F                                ___ftadd@f2 0022  
                              ___ftge@ff1 0017                                ___ftge@ff2 001A  
                      ?_SYSTEM_Initialize 0001                         __end_ofi1_sprintf 06A4  
                           ___rparam_used 000001                    __size_of_defTempAlarme 00FC  
                          _i2c1_trb_count 0034                                ___awtoft@c 001F  
                              ___lbtoft@c 0022                                ___ftmul@f1 0023  
                              ___ftmul@f2 0026                     _I2C1_FunctionComplete 1FA6  
                    _I2C1_BusCollisionISR 2096                         ?_EPWM1_Initialize 0001  
                              ___ftsub@f1 00AA                                ___ftsub@f2 00AD  
                              ___fttol@f1 0017              __size_of_ADC_StartConversion 0004  
                          __pcstackCOMRAM 0001                              __pidataBANK0 208C  
                     ??_SYSTEM_Initialize 012E                                 ?_TMR0_ISR 0001  
                      ??_EPWM1_Initialize 012A                                ??_I2C1_ISR 0001  
                        ?_TMR2_Initialize 0001                                 ?i1___wmul 0017  
                 _ADC_GetConversionResult 1FD2               __size_of_EXT_INT_Initialize 003E  
                             i1sprintf@ap 00B2                               i1sprintf@cp 00AE  
                             i1sprintf@sp 0023          __end_of_INT2_SetInterruptHandler 2056  
             __end_of_EUSART1_Receive_ISR 0A96             ?_INT2_DefaultInterruptHandler 0001  
                        ?_TMR0_StartTimer 0001                 __end_of_SYSTEM_Initialize 1E1A  
                  __size_of_DelayFor18TCY 0014                              sprintf@width 014A  
                              __pbssBANK0 0060                                __pbssBANK1 0100  
                               ?_BusyXLCD 0001                   __end_ofi1_EUSART1_Write 2042  
                              _getKBInput 18BE                           __CFG_PLLCFG$OFF 000000  
                 _TMR2_LoadPeriodRegister 206A                           WriteCmdXLCD@cmd 012A  
                   _INT0_InterruptHandler 00D6                                ??_INT0_ISR 0001  
                              ??_INT1_ISR 0001                                ??_INT2_ISR 0001  
                              __pnvCOMRAM 0045                                 ?_OpenXLCD 0001  
                   ?_I2C1_BusCollisionISR 0001                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0017                         WriteDataXLCD@data 012A  
        __end_of_TMR0_SetInterruptHandler 204C                                   ?___wmul 012A  
                              ??_TMR0_ISR 0005                        __CFG_CCP3MX$PORTB5 000000  
                         _I2C1_Initialize 1CDE                                   _CCP1CON 000FBD  
                         ??_WriteDataXLCD 012A                                   _ECCP1AS 000FB6  
                                 _ADC_ISR 0D9C                                 ?___awtoft 001F  
                               ?___ftpack 0017                                 ?___lbtoft 001F  
                 __size_of_ADC_Initialize 0018                                ??i1___wmul 001B  
              ??_INT1_SetInterruptHandler 012C                             _defTempAlarme 115E  
                                 _OSCCON2 000FD2                                 _I2C1_Stop 2072  
                                 _OSCTUNE 000F9B                                   _PWM1CON 000FB7  
                                 _SPBRGH1 000FB0                                   _SSP1ADD 000FC8  
                                 _SSP1BUF 000FC9                   __size_of_TMR2_StopTimer 0004  
                        ?_TMR2_StartTimer 0001                                ??_BusyXLCD 012A  
             __end_of_EPWM1_LoadDutyValue 1D3E                            i1sprintf@width 00B8  
       __size_of_INT0_SetInterruptHandler 000A                 ?_INT0_SetInterruptHandler 012A  
                              ??_OpenXLCD 012B                           __CFG_PWRTEN$OFF 000000  
                  ?_I2C1_FunctionComplete 0001                                   __Hparam 0000  
                                 __Lparam 0000                        _p_i2c1_trb_current 0030  
                         __size_of___ftge 0090                             _DelayFor18TCY 1FBE  
                                 ___ftadd 0A96                           __size_of___wmul 0028  
                                 ___ftmul 125A                                   ___ftsub 1B74  
                                 ___fttol 1350                                 ?_putsXLCD 012B  
                                 ___lwdiv 197A                                   ___lwmod 1A66  
               ??_ADC_GetConversionResult 0019                                   __pcinit 17FE  
                              ??___awtoft 0022                                ??___ftpack 001C  
                              ??___lbtoft 0022                                   __ramtop 0600  
                                 __ptext0 1BB6                                   __ptext1 0EE4  
                                 __ptext2 1860                                   __ptext3 0C42  
                                 __ptext4 151E                                   __ptext5 201A  
                                 __ptext6 115E                                   __ptext7 00E0  
                                 __ptext8 1E8C                                   __ptext9 1E1A  
                               _T0CONbits 000FD5                            ?_defTempAlarme 0001  
                                 _dpowers 7EC9                         i1___lwdiv@divisor 0019  
                   _OSCILLATOR_Initialize 2028                                 _T2CONbits 000FBA  
                                 _isdigit 1E8C                         i1___lwdiv@counter 001B  
                      _EUSART1_Initialize 1F74                  ??_PIN_MANAGER_Initialize 012A  
                              ?_I2C1_Stop 0001                                   _tmpTemp 002D  
               ??_TMR2_LoadPeriodRegister 0001                __size_of_SYSTEM_Initialize 002A  
                                 _sprintf 00E0                      I2C1_ISR@pi2c_buf_ptr 0067  
                          __pintcode_body 1444                      end_of_initialization 1852  
                _INT2_SetInterruptHandler 204C                       ?_EUSART1_Initialize 0001  
          ??_INT2_DefaultInterruptHandler 0001                               ?_getKBInput 0001  
                        ?i1_EUSART1_Write 0001                             __Lmediumconst 7EC8  
                                 int_func 1444                                _tempAlarme 0048  
                  ??_I2C1_BusCollisionISR 0001                      escreveLinhaLCD@linha 012F  
                 __end_of_I2C1_Initialize 1D0E                      escreveLinhaLCD@texto 012D  
                         _escreveLinhaLCD 1D3E                            ?_DelayFor18TCY 0001  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE                    __size_of_feedbackUSART 00D4  
                           ?_testeTeclado 0001                                ??_putsXLCD 012D  
                    ??_EUSART1_Initialize 012A                     i1___wmul@multiplicand 0019  
                _TMR0_SetInterruptHandler 2042                                 _PORTAbits 000F80  
                   _INT1_InterruptHandler 00DA                                 _PORTBbits 000F81  
            EUSART1_Receive_ISR@tmpAlarme 0020                         __size_of_I2C1_ISR 0230  
                               _TRISDbits 000F95                       _ADC_StartConversion 2086  
                               i1___lwdiv 19CE                                 i1___lwmod 1B32  
                     EUSART1_Write@txData 012A         I2C1_ISR@i2c_10bit_address_restart 0032  
                               i1_isdigit 1F56                                 _DelayXLCD 1FF8  
                       __size_of_INT0_ISR 002C                         __size_of_INT1_ISR 002C  
                       __size_of_INT2_ISR 002C                               ___ftmul@exp 00AA  
                    ?_ADC_StartConversion 0001                                 i1_sprintf 03C4  
                          ??_testeTeclado 014D              __end_of_INTERRUPT_Initialize 1FF8  
    __end_of_INT0_DefaultInterruptHandler 2096     __size_of_INT0_DefaultInterruptHandler 0002  
            _INT0_DefaultInterruptHandler 2094                            __end_of___ftge 17FE  
                          __end_of___wmul 1E42                   I2C1_MasterWrite@trBlock 009E  
                           __pidataCOMRAM 208A                           ??_defTempAlarme 014D  
                       __size_of_TMR0_ISR 0138                  I2C1_Stop@completion_code 0001  
                          _ADC_Initialize 1F8E                         i1___lwmod@divisor 0020  
                  ?_OSCILLATOR_Initialize 0001                       __size_of_getKBInput 005E  
                       i1___lwmod@counter 0022          TMR2_LoadPeriodRegister@periodVal 0001  
                   __end_of_INT0_CallBack 1F36                       start_initialization 17FE  
                       __size_ofi1___wmul 0026                 __size_of_EPWM1_Initialize 0020  
                             ??_I2C1_Stop 0001                  __size_of_TMR0_Initialize 003A  
         __size_of_PIN_MANAGER_Initialize 0046                     __end_of_INT1_CallBack 1F14  
                          _TMR2_StopTimer 207E                             _feedbackUSART 151E  
                              ?i1___lwdiv 0017                                ?i1___lwmod 001E  
                   __end_of_INT2_CallBack 1EF2              EPWM1_LoadDutyValue@dutyValue 0001  
                   __end_of_EUSART1_Write 2028                   __end_of_escreveLinhaLCD 1D6C  
                       __size_of_BusyXLCD 003A                                ?i1_isdigit 0001  
                              ?_DelayXLCD 0001                              i1sprintf@len 00B4  
                            i1sprintf@val 00B6                          ?_I2C1_Initialize 0001  
                         ??_DelayFor18TCY 012A                     ??_ADC_StartConversion 0001  
                       __size_of_OpenXLCD 00CE                                ?i1_sprintf 0023  
                                ??___ftge 001D                                  ??___wmul 012E  
                           ?_WriteCmdXLCD 0001                    __end_of_ADC_Initialize 1FA6  
                             __pdataBANK0 00DC                                  ?_ADC_ISR 0001  
              __end_of_EXT_INT_Initialize 1C32                    __size_of_monitorizacao 015A  
           ?_INT0_DefaultInterruptHandler 0001                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lbtoft 0024  
                  __end_of_TMR2_StopTimer 2082                               __pbssCOMRAM 002D  
        __end_of_INT0_SetInterruptHandler 206A                             __pcstackBANK0 00AA  
                           __pcstackBANK1 012A                  __size_of_TMR2_Initialize 0010  
                          ?_feedbackUSART 0001                             _i2c1_tr_queue 00A4  
                            _isdigit$2577 012B                   ??_I2C1_FunctionComplete 0001  
            __size_of_EUSART1_Receive_ISR 01C2                               ADC_ISR@var1 00BC  
                             ADC_ISR@var2 00BB                               sprintf@flag 0143  
                   _INT2_InterruptHandler 00D8                               sprintf@prec 0142  
                   _TMR0_InterruptHandler 00D4                                 __pnvBANK0 00D4  
                __size_of_TMR0_StartTimer 0004                            putsXLCD@buffer 012B  
                        ___lwdiv@dividend 012A                    _PIN_MANAGER_Initialize 1A20  
                               __pintcode 0008                             __pmediumconst 7EC8  
                          ??_WriteCmdXLCD 012A                                  ?___ftadd 001F  
                                ?___ftmul 0023                                  ?___ftsub 00AA  
                                ?___fttol 0017                                  ?___lwdiv 012A  
                       testeTeclado@input 014D                                  ?___lwmod 0131  
                         ?_ADC_Initialize 0001                              _eusart_Tx_En 0037  
                             __pintcodelo 0018                              _eusart_Tx_On 0036  
                                _I2C1_ISR 06A4                          __CFG_PRICLKEN$ON 000000  
                       __size_of_putsXLCD 005E                     __end_of_WriteDataXLCD 1AEE  
              ??_INT2_SetInterruptHandler 012C                                  _BAUDCON1 000FB8  
                                ?_isdigit 0001                           ?_TMR2_StopTimer 0001  
                        ___lwdiv@quotient 012F                               ??i1___lwdiv 001B  
                             ??i1___lwmod 0022                                  ?_sprintf 0136  
                    __end_of_testeTeclado 18BE                      _INTERRUPT_Initialize 1FE6  
                          i1_isdigit$2577 0018                             _monitorizacao 0C42  
                            ??_getKBInput 012A                    I2C1_MasterRead@trBlock 0098  
                       ??_TMR0_Initialize 012C                          ?_escreveLinhaLCD 012D  
                                _INT0_ISR 1DC4                                  _INT1_ISR 1D98  
                                _INT2_ISR 1D6C                            ___wmul@product 012E  
                                _LATBbits 000F8A                                  _LATDbits 000F8C  
       __size_of_INT1_SetInterruptHandler 000A                               ??i1_isdigit 0017  
               ?_INT1_SetInterruptHandler 012A                               ??_DelayXLCD 012A  
                                _IPR1bits 000F9F                                  _IPR2bits 000FA2  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                           ?_DelayPORXLCD 0001                  __size_of_TMR2_StartTimer 0004  
                                i1u503_20 0922                                  i1u522_20 0A62  
                               _tempAtual 0047                                  i1u516_20 09FE  
                                i1u630_20 0B04                                  i1u710_20 0600  
                                i1u518_20 0A12                                  i1u640_20 0BB4  
                                i1u712_20 067E                                  i1u633_20 0B42  
                                i1u713_20 0696                                  i1u705_20 0594  
                                i1u650_20 1B4C                                  i1u627_20 0ADA  
                                i1u637_20 0B80                                  i1u709_20 05E2  
                                i1u717_20 0EE0                ??_TMR0_SetInterruptHandler 012C  
                                i1u575_20 16D0                                  i1u647_20 19F0  
                                _PIR1bits 000F9E                           OpenXLCD@lcdtype 0001  
                                i1u579_20 174E                                  _PIR2bits 000FA1  
                                i2u371_48 1F00                                  i2u460_40 1090  
                                i2u452_40 105C                                  i2u451_48 103E  
                                i2u451_49 1052                                  i1u693_20 141C  
                                i2u453_40 105E                                  i2u373_48 1EDE  
                                i2u470_40 10D4                                  i2u471_40 10D6  
                                i2u455_40 1074                                  i2u375_48 1F22  
                                i2u464_40 10AE                                  i2u456_40 1076  
                                i1u689_20 139A                                  i2u465_40 10B0  
                                i1u689_25 1392                                  i2u459_40 108E  
                                i2u477_40 1100              __size_of_EPWM1_LoadDutyValue 0030  
                                i2u478_40 1102                               ??i1_sprintf 00AA  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                                _SSP1CON1 000FC6                                  _SSP1CON3 000FCB  
                                _TMR0_ISR 1026                                  _PSTR1CON 000FB9  
                                _SSP1STAT 000FC7                          __size_of_ADC_ISR 0148  
                              _ADCON0bits 000FC2                         ___wmul@multiplier 012A  
                                i1___wmul 1E42                        __end_of_getKBInput 191C  
                         ??_feedbackUSART 0130                          _EPWM1_Initialize 1F36  
          ??_INT0_DefaultInterruptHandler 0001                               _INTCON2bits 000FF1  
                             _INTCON3bits 000FF0                     ?_INTERRUPT_Initialize 0001  
                          ?_monitorizacao 0001                  _INT0_SetInterruptHandler 2060  
                                _BusyXLCD 1C6C                         ??_TMR2_Initialize 012A  
                          ??_DelayPORXLCD 012A                                  _TeclaTMP 0042  
                                _OpenXLCD 15F2                                  __Hrparam 0000  
           __size_of_I2C1_BusCollisionISR 0002                                  __Lrparam 0000  
                ?_ADC_GetConversionResult 0017                  __size_ofi1_EUSART1_Write 000C  
                      __CFG_BOREN$SBORDIS 000000                    I2C1_ISR@i2c_bytes_left 0033  
                       __CFG_P2BMX$PORTD2 000000                   ??_OSCILLATOR_Initialize 012A  
                       ??_TMR0_StartTimer 012A                          __size_of___ftadd 01AC  
                        __size_of___ftmul 00F6                          __size_of___ftsub 0042  
                        __size_of___fttol 00F4               __size_of_EUSART1_Initialize 001A  
                        __size_of___lwdiv 0054                          __size_of___lwmod 0044  
                                ___awtoft 1CA6                                  ___ftpack 16C0  
                                ___lbtoft 1E68                                  _clk1_2Hz 003C  
                                _clk1_4Hz 003B                                  _clk1_8Hz 003A  
                              sprintf@len 0146                                sprintf@val 0148  
                ?_TMR2_LoadPeriodRegister 0001           ??_INTERRUPT_InterruptManagerLow 00BF  
                        __size_of_isdigit 0022                           ___lwdiv@divisor 012C  
                     I2C1_ISR@i2c_address 0043                           ___lwdiv@counter 012E  
                                __ptext10 1A66                                  __ptext11 197A  
                                __ptext20 2042                                  __ptext12 18BE  
                                __ptext21 1A20                                  __ptext13 1D3E  
                                __ptext30 1F36                                  __ptext22 2028  
                                __ptext14 191C                                  __ptext31 1F8E  
                                __ptext23 1FE6                                  __ptext15 1AAA  
                                __ptext40 0D9C                                  __ptext32 15F2  
                                __ptext24 1CDE                                  __ptext16 1DF0  
                                __ptext41 03C4                                  __ptext33 1AEE  
                                __ptext25 1BF4                                  __ptext17 200A  
                                __ptext50 0A96                                  __ptext42 1F56  
                                __ptext34 1FF8                                  __ptext26 204C  
                                __ptext18 1C32                                  __ptext51 125A  
                                __ptext43 1E42                                  __ptext35 1EAE  
                                __ptext27 2056                                  __ptext19 207A  
                                __ptext60 206A                                  __ptext52 176E  
                                __ptext44 1B32                                  __ptext36 1C6C  
                                __ptext28 2060                                  __ptext61 208E  
                                __ptext53 1CA6                                  __ptext45 19CE  
                                __ptext37 1FBE                                  __ptext29 1F74  
                                __ptext70 1DC4                                  __ptext62 1D0E  
                                __ptext54 16C0                                  __ptext46 2036  
                                __ptext71 1F14                                  __ptext63 2086  
                                __ptext55 1FD2                                  __ptext47 1E68  
                                __ptext39 08D4                                  __ptext72 2094  
                                __ptext64 1D6C                                  __ptext48 1350  
                                __ptext73 06A4                                  __ptext65 1ED0  
                                __ptext57 1026                                  __ptext49 1B74  
                                __ptext74 2072                                  __ptext66 2090  
                                __ptext58 207E                                  __ptext75 1FA6  
                                __ptext67 1D98                                  __ptext59 2082  
                                __ptext76 2096                                  __ptext68 1EF2  
                                __ptext77 0000                                  __ptext69 2092  
                            _SSP1CON1bits 000FC6                              _SSP1CON2bits 000FC5  
                    __end_of_WriteCmdXLCD 1B32                          __size_of_sprintf 02E4  
                      i1___lwdiv@dividend 0017                                  _lastMenu 006D  
                           __size_of_main 003E                   defTempAlarme@tmp_Alarme 014F  
                           __size_of_menu 0142                                  _menu_tmp 00DC  
    __end_of_TMR0_DefaultInterruptHandler 2090     __size_of_TMR0_DefaultInterruptHandler 0002  
            _TMR0_DefaultInterruptHandler 208E                                  _strUSART 006E  
                                int$flags 0049                                  _putsXLCD 191C  
                       ??_TMR2_StartTimer 0001                       _EUSART1_Receive_ISR 08D4  
    __end_of_INT1_DefaultInterruptHandler 2094     __size_of_INT1_DefaultInterruptHandler 0002  
            _INT1_DefaultInterruptHandler 2092                        i1___lwdiv@quotient 001C  
                   __end_of_defTempAlarme 125A                     __size_of_testeTeclado 005E  
                              _INTCONbits 000FF2                                  isdigit@c 012C  
                         ??_monitorizacao 014D                    ??_INTERRUPT_Initialize 012A  
                      _EXT_INT_Initialize 1BF4                                  intlevel1 0000  
                                intlevel2 0000                                 sprintf@ap 0144  
                               sprintf@cp 0140                                 sprintf@sp 0136  
                    ?_EUSART1_Receive_ISR 0001               __end_of_ADC_StartConversion 208A  
                        ___lwmod@dividend 0131                   ?_PIN_MANAGER_Initialize 0001  
         __end_of_ADC_GetConversionResult 1FE6            __size_of_I2C1_FunctionComplete 0018  
                     ?_EXT_INT_Initialize 0001                                _RCSTA1bits 000FAB  
           __end_of_I2C1_FunctionComplete 1FBE                          ??_ADC_Initialize 012A  
                  __size_of_INT0_CallBack 0022             ?_TMR0_DefaultInterruptHandler 0001  
                   __end_of_DelayFor18TCY 1FD2                    __size_of_INT1_CallBack 0022  
                            _testeTeclado 1860                          ??_TMR2_StopTimer 0001  
         __end_of_TMR2_LoadPeriodRegister 2072                    __size_of_INT2_CallBack 0022  
                __size_of_I2C1_Initialize 0030                    __size_of_EUSART1_Write 000E  
                       ??i1_EUSART1_Write 0017    __end_of_INTERRUPT_InterruptManagerHigh 151E  
 __size_of_INTERRUPT_InterruptManagerHigh 1516            _INTERRUPT_InterruptManagerHigh 0008  
                         defTempAlarme@c1 0150                           defTempAlarme@c2 0151  
                    ??_EXT_INT_Initialize 012C                                  sprintf@c 014C  
                                sprintf@f 0138             ?_INT1_DefaultInterruptHandler 0001  
                    __end_of_DelayPORXLCD 1ED0                           ___lwmod@divisor 0133  
                         _TMR0_Initialize 1C32                           ___lwmod@counter 0135  
        __end_of_INT1_SetInterruptHandler 2060                         __CFG_T3CMX$PORTC0 000000  
                     _EPWM1_LoadDutyValue 1D0E                     i1EUSART1_Write@txData 0017  
   __end_of_INTERRUPT_InterruptManagerLow 00DC    __size_of_INTERRUPT_InterruptManagerLow 00C4  
           _INTERRUPT_InterruptManagerLow 0018                     ??_EUSART1_Receive_ISR 0017  
          __end_of_PIN_MANAGER_Initialize 1A66                        __size_of_I2C1_Stop 0008  
                __end_of_EPWM1_Initialize 1F56                      ?_EPWM1_LoadDutyValue 0001  
