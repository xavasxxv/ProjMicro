

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Dec 25 03:20:42 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101  0000                     
   102                           ; Version 1.44
   103                           ; Generated 14/09/2017 GMT
   104                           ; 
   105                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   106                           ; All rights reserved.
   107                           ; 
   108                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   109                           ; 
   110                           ; Redistribution and use in source and binary forms, with or without modification, are
   111                           ; permitted provided that the following conditions are met:
   112                           ; 
   113                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   114                           ;        conditions and the following disclaimer.
   115                           ; 
   116                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   117                           ;        of conditions and the following disclaimer in the documentation and/or other
   118                           ;        materials provided with the distribution.
   119                           ; 
   120                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   121                           ;        software without specific prior written permission.
   122                           ; 
   123                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   124                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   125                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   126                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   127                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   128                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   129                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   130                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   131                           ; 
   132                           ; 
   133                           ; Code-generator required, PIC18F45K22 Definitions
   134                           ; 
   135                           ; SFR Addresses
   136  0000                     
   137                           	psect	idataCOMRAM
   138  00205A                     __pidataCOMRAM:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _tempAtual
   142  00205A  19                 	db	25
   143                           
   144                           ;initializer for _tempAlarme
   145  00205B  19                 	db	25
   146                           
   147                           	psect	idataBANK0
   148  00205C                     __pidataBANK0:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _menu_tmp
   152  00205C  01                 	db	1
   153                           
   154                           ;initializer for _update
   155  00205D  01                 	db	1
   156                           
   157                           	psect	mediumconst
   158  007EF4                     __pmediumconst:
   159                           	opt stack 0
   160  007EF4  00                 	db	0
   161  007EF5                     _dpowers:
   162                           	opt stack 0
   163  007EF5  0001               	dw	1
   164  007EF7  000A               	dw	10
   165  007EF9  0064               	dw	100
   166  007EFB  03E8               	dw	1000
   167  007EFD  2710               	dw	10000
   168  007EFF                     __end_of_dpowers:
   169                           	opt stack 0
   170  007EFF                     STR_1:
   171  007EFF  0C                 	db	12
   172  007F00  54                 	db	84	;'T'
   173  007F01  4D                 	db	77	;'M'
   174  007F02  3D                 	db	61	;'='
   175  007F03  25                 	db	37
   176  007F04  32                 	db	50	;'2'
   177  007F05  64                 	db	100	;'d'
   178  007F06  5F                 	db	95	;'_'
   179  007F07  54                 	db	84	;'T'
   180  007F08  41                 	db	65	;'A'
   181  007F09  3D                 	db	61	;'='
   182  007F0A  25                 	db	37
   183  007F0B  32                 	db	50	;'2'
   184  007F0C  64                 	db	100	;'d'
   185  007F0D  5F                 	db	95	;'_'
   186  007F0E  41                 	db	65	;'A'
   187  007F0F  41                 	db	65	;'A'
   188  007F10  3D                 	db	61	;'='
   189  007F11  25                 	db	37
   190  007F12  31                 	db	49	;'1'
   191  007F13  64                 	db	100	;'d'
   192  007F14  0D                 	db	13
   193  007F15  00                 	db	0
   194  007F16                     STR_4:
   195  007F16  4D                 	db	77	;'M'
   196  007F17  6F                 	db	111	;'o'
   197  007F18  6E                 	db	110	;'n'
   198  007F19  69                 	db	105	;'i'
   199  007F1A  74                 	db	116	;'t'
   200  007F1B  6F                 	db	111	;'o'
   201  007F1C  72                 	db	114	;'r'
   202  007F1D  69                 	db	105	;'i'
   203  007F1E  7A                 	db	122	;'z'
   204  007F1F  61                 	db	97	;'a'
   205  007F20  63                 	db	99	;'c'
   206  007F21  61                 	db	97	;'a'
   207  007F22  6F                 	db	111	;'o'
   208  007F23  20                 	db	32
   209  007F24  20                 	db	32
   210  007F25  20                 	db	32
   211  007F26  20                 	db	32
   212  007F27  20                 	db	32
   213  007F28  20                 	db	32
   214  007F29  20                 	db	32
   215  007F2A  20                 	db	32
   216  007F2B  00                 	db	0
   217  007F2C                     STR_5:
   218  007F2C  54                 	db	84	;'T'
   219  007F2D  65                 	db	101	;'e'
   220  007F2E  6D                 	db	109	;'m'
   221  007F2F  70                 	db	112	;'p'
   222  007F30  2E                 	db	46
   223  007F31  20                 	db	32
   224  007F32  64                 	db	100	;'d'
   225  007F33  65                 	db	101	;'e'
   226  007F34  20                 	db	32
   227  007F35  61                 	db	97	;'a'
   228  007F36  6C                 	db	108	;'l'
   229  007F37  61                 	db	97	;'a'
   230  007F38  72                 	db	114	;'r'
   231  007F39  6D                 	db	109	;'m'
   232  007F3A  65                 	db	101	;'e'
   233  007F3B  20                 	db	32
   234  007F3C  20                 	db	32
   235  007F3D  20                 	db	32
   236  007F3E  20                 	db	32
   237  007F3F  20                 	db	32
   238  007F40  20                 	db	32
   239  007F41  00                 	db	0
   240  007F42                     STR_7:
   241  007F42  54                 	db	84	;'T'
   242  007F43  65                 	db	101	;'e'
   243  007F44  6D                 	db	109	;'m'
   244  007F45  70                 	db	112	;'p'
   245  007F46  2E                 	db	46
   246  007F47  20                 	db	32
   247  007F48  41                 	db	65	;'A'
   248  007F49  74                 	db	116	;'t'
   249  007F4A  75                 	db	117	;'u'
   250  007F4B  61                 	db	97	;'a'
   251  007F4C  6C                 	db	108	;'l'
   252  007F4D  3A                 	db	58	;':'
   253  007F4E  20                 	db	32
   254  007F4F  20                 	db	32
   255  007F50  25                 	db	37
   256  007F51  32                 	db	50	;'2'
   257  007F52  64                 	db	100	;'d'
   258  007F53  20                 	db	32
   259  007F54  6F                 	db	111	;'o'
   260  007F55  43                 	db	67	;'C'
   261  007F56  20                 	db	32
   262  007F57  00                 	db	0
   263  007F58                     STR_8:
   264  007F58  54                 	db	84	;'T'
   265  007F59  65                 	db	101	;'e'
   266  007F5A  6D                 	db	109	;'m'
   267  007F5B  70                 	db	112	;'p'
   268  007F5C  2E                 	db	46
   269  007F5D  20                 	db	32
   270  007F5E  41                 	db	65	;'A'
   271  007F5F  6C                 	db	108	;'l'
   272  007F60  61                 	db	97	;'a'
   273  007F61  72                 	db	114	;'r'
   274  007F62  6D                 	db	109	;'m'
   275  007F63  65                 	db	101	;'e'
   276  007F64  3A                 	db	58	;':'
   277  007F65  20                 	db	32
   278  007F66  25                 	db	37
   279  007F67  32                 	db	50	;'2'
   280  007F68  64                 	db	100	;'d'
   281  007F69  20                 	db	32
   282  007F6A  6F                 	db	111	;'o'
   283  007F6B  43                 	db	67	;'C'
   284  007F6C  20                 	db	32
   285  007F6D  00                 	db	0
   286  007F6E                     STR_15:
   287  007F6E  4E                 	db	78	;'N'
   288  007F6F  75                 	db	117	;'u'
   289  007F70  6D                 	db	109	;'m'
   290  007F71  65                 	db	101	;'e'
   291  007F72  72                 	db	114	;'r'
   292  007F73  6F                 	db	111	;'o'
   293  007F74  3A                 	db	58	;':'
   294  007F75  20                 	db	32
   295  007F76  20                 	db	32
   296  007F77  20                 	db	32
   297  007F78  20                 	db	32
   298  007F79  20                 	db	32
   299  007F7A  20                 	db	32
   300  007F7B  20                 	db	32
   301  007F7C  20                 	db	32
   302  007F7D  20                 	db	32
   303  007F7E  20                 	db	32
   304  007F7F  20                 	db	32
   305  007F80  20                 	db	32
   306  007F81  20                 	db	32
   307  007F82  00                 	db	0
   308  007F83                     STR_18:
   309  007F83  54                 	db	84	;'T'
   310  007F84  65                 	db	101	;'e'
   311  007F85  6D                 	db	109	;'m'
   312  007F86  70                 	db	112	;'p'
   313  007F87  3A                 	db	58	;':'
   314  007F88  20                 	db	32
   315  007F89  20                 	db	32
   316  007F8A  20                 	db	32
   317  007F8B  20                 	db	32
   318  007F8C  6F                 	db	111	;'o'
   319  007F8D  43                 	db	67	;'C'
   320  007F8E  20                 	db	32
   321  007F8F  20                 	db	32
   322  007F90  20                 	db	32
   323  007F91  20                 	db	32
   324  007F92  20                 	db	32
   325  007F93  20                 	db	32
   326  007F94  20                 	db	32
   327  007F95  20                 	db	32
   328  007F96  20                 	db	32
   329  007F97  00                 	db	0
   330  007F98                     STR_14:
   331  007F98  54                 	db	84	;'T'
   332  007F99  65                 	db	101	;'e'
   333  007F9A  73                 	db	115	;'s'
   334  007F9B  74                 	db	116	;'t'
   335  007F9C  65                 	db	101	;'e'
   336  007F9D  20                 	db	32
   337  007F9E  54                 	db	84	;'T'
   338  007F9F  65                 	db	101	;'e'
   339  007FA0  63                 	db	99	;'c'
   340  007FA1  6C                 	db	108	;'l'
   341  007FA2  61                 	db	97	;'a'
   342  007FA3  64                 	db	100	;'d'
   343  007FA4  6F                 	db	111	;'o'
   344  007FA5  20                 	db	32
   345  007FA6  20                 	db	32
   346  007FA7  20                 	db	32
   347  007FA8  20                 	db	32
   348  007FA9  20                 	db	32
   349  007FAA  20                 	db	32
   350  007FAB  20                 	db	32
   351  007FAC  00                 	db	0
   352  007FAD                     STR_17:
   353  007FAD  49                 	db	73	;'I'
   354  007FAE  6E                 	db	110	;'n'
   355  007FAF  74                 	db	116	;'t'
   356  007FB0  72                 	db	114	;'r'
   357  007FB1  6F                 	db	111	;'o'
   358  007FB2  64                 	db	100	;'d'
   359  007FB3  75                 	db	117	;'u'
   360  007FB4  7A                 	db	122	;'z'
   361  007FB5  61                 	db	97	;'a'
   362  007FB6  20                 	db	32
   363  007FB7  6F                 	db	111	;'o'
   364  007FB8  20                 	db	32
   365  007FB9  61                 	db	97	;'a'
   366  007FBA  6C                 	db	108	;'l'
   367  007FBB  61                 	db	97	;'a'
   368  007FBC  72                 	db	114	;'r'
   369  007FBD  6D                 	db	109	;'m'
   370  007FBE  65                 	db	101	;'e'
   371  007FBF  20                 	db	32
   372  007FC0  20                 	db	32
   373  007FC1  00                 	db	0
   374  007FC2                     STR_2:
   375  007FC2  4D                 	db	77	;'M'
   376  007FC3  65                 	db	101	;'e'
   377  007FC4  6E                 	db	110	;'n'
   378  007FC5  75                 	db	117	;'u'
   379  007FC6  20                 	db	32
   380  007FC7  20                 	db	32
   381  007FC8  20                 	db	32
   382  007FC9  20                 	db	32
   383  007FCA  20                 	db	32
   384  007FCB  20                 	db	32
   385  007FCC  20                 	db	32
   386  007FCD  20                 	db	32
   387  007FCE  20                 	db	32
   388  007FCF  4F                 	db	79	;'O'
   389  007FD0  70                 	db	112	;'p'
   390  007FD1  63                 	db	99	;'c'
   391  007FD2  61                 	db	97	;'a'
   392  007FD3  6F                 	db	111	;'o'
   393  007FD4  3A                 	db	58	;':'
   394  007FD5  00                 	db	0
   395  007FD6                     STR_10:
   396  007FD6  54                 	db	84	;'T'
   397  007FD7  65                 	db	101	;'e'
   398  007FD8  6D                 	db	109	;'m'
   399  007FD9  70                 	db	112	;'p'
   400  007FDA  2E                 	db	46
   401  007FDB  20                 	db	32
   402  007FDC  41                 	db	65	;'A'
   403  007FDD  6C                 	db	108	;'l'
   404  007FDE  61                 	db	97	;'a'
   405  007FDF  72                 	db	114	;'r'
   406  007FE0  6D                 	db	109	;'m'
   407  007FE1  65                 	db	101	;'e'
   408  007FE2  3A                 	db	58	;':'
   409  007FE3  20                 	db	32
   410  007FE4  00                 	db	0
   411  007FE5                     STR_9:
   412  007FE5  21                 	db	33
   413  007FE6  41                 	db	65	;'A'
   414  007FE7  4C                 	db	76	;'L'
   415  007FE8  41                 	db	65	;'A'
   416  007FE9  52                 	db	82	;'R'
   417  007FEA  4D                 	db	77	;'M'
   418  007FEB  45                 	db	69	;'E'
   419  007FEC  21                 	db	33
   420  007FED  20                 	db	32
   421  007FEE  54                 	db	84	;'T'
   422  007FEF  45                 	db	69	;'E'
   423  007FF0  4D                 	db	77	;'M'
   424  007FF1  50                 	db	80	;'P'
   425  007FF2  3E                 	db	62	;'>'
   426  007FF3  00                 	db	0
   427  007FF4                     STR_12:
   428  007FF4  25                 	db	37
   429  007FF5  32                 	db	50	;'2'
   430  007FF6  64                 	db	100	;'d'
   431  007FF7  00                 	db	0
   432  007FF8                     STR_16:
   433  007FF8  25                 	db	37
   434  007FF9  63                 	db	99	;'c'
   435  007FFA  00                 	db	0
   436  007FFB                     STR_3:
   437  007FFB  25                 	db	37
   438  007FFC  64                 	db	100	;'d'
   439  007FFD  00                 	db	0
   440  0000                     
   441                           ; #config settings
   442  007FFE  00                 	db	0	; dummy byte at the end
   443  0000                     
   444                           	psect	nvCOMRAM
   445  000045                     __pnvCOMRAM:
   446                           	opt stack 0
   447  000045                     _timer0ReloadVal:
   448                           	opt stack 0
   449  000045                     	ds	2
   450                           
   451                           	psect	nvBANK0
   452  0000D4                     __pnvBANK0:
   453                           	opt stack 0
   454  0000D4                     _TMR0_InterruptHandler:
   455                           	opt stack 0
   456  0000D4                     	ds	2
   457  0000D6                     _INT0_InterruptHandler:
   458                           	opt stack 0
   459  0000D6                     	ds	2
   460  0000D8                     _INT2_InterruptHandler:
   461                           	opt stack 0
   462  0000D8                     	ds	2
   463  0000DA                     _INT1_InterruptHandler:
   464                           	opt stack 0
   465  0000DA                     	ds	2
   466  0000                     _CCPTMRS0bits	set	3913
   467  0000                     _ANSELA	set	3896
   468  0000                     _ANSELE	set	3900
   469  0000                     _ANSELD	set	3899
   470  0000                     _ANSELB	set	3897
   471  0000                     _ANSELC	set	3898
   472  0000                     _PORTAbits	set	3968
   473  0000                     _LATDbits	set	3980
   474  0000                     _TRISDbits	set	3989
   475  0000                     _PORTD	set	3971
   476  0000                     _SSP1BUF	set	4041
   477  0000                     _SSP1CON2bits	set	4037
   478  0000                     _SSP1CON1bits	set	4038
   479  0000                     _SSP1ADD	set	4040
   480  0000                     _SSP1CON3	set	4043
   481  0000                     _SSP1CON1	set	4038
   482  0000                     _SSP1STAT	set	4039
   483  0000                     _RCREG1	set	4014
   484  0000                     _RCSTA1bits	set	4011
   485  0000                     _TXREG1	set	4013
   486  0000                     _SPBRGH1	set	4016
   487  0000                     _SPBRG1	set	4015
   488  0000                     _TXSTA1	set	4012
   489  0000                     _RCSTA1	set	4011
   490  0000                     _BAUDCON1	set	4024
   491  0000                     _ADCON0bits	set	4034
   492  0000                     _ADRESH	set	4036
   493  0000                     _ADRESL	set	4035
   494  0000                     _ADCON2	set	4032
   495  0000                     _ADCON1	set	4033
   496  0000                     _ADCON0	set	4034
   497  0000                     _CCPR1H	set	4031
   498  0000                     _CCPR1L	set	4030
   499  0000                     _PSTR1CON	set	4025
   500  0000                     _PWM1CON	set	4023
   501  0000                     _ECCP1AS	set	4022
   502  0000                     _CCP1CON	set	4029
   503  0000                     _T2CONbits	set	4026
   504  0000                     _TMR2	set	4028
   505  0000                     _PR2	set	4027
   506  0000                     _T2CON	set	4026
   507  0000                     _LATBbits	set	3978
   508  0000                     _T0CONbits	set	4053
   509  0000                     _TMR0L	set	4054
   510  0000                     _TMR0H	set	4055
   511  0000                     _T0CON	set	4053
   512  0000                     _PORTBbits	set	3969
   513  0000                     _PIR2bits	set	4001
   514  0000                     _PIE2bits	set	4000
   515  0000                     _PIR1bits	set	3998
   516  0000                     _PIE1bits	set	3997
   517  0000                     _INTCONbits	set	4082
   518  0000                     _IPR2bits	set	4002
   519  0000                     _IPR1bits	set	3999
   520  0000                     _INTCON3bits	set	4080
   521  0000                     _RCONbits	set	4048
   522  0000                     _OSCTUNE	set	3995
   523  0000                     _OSCCON2	set	4050
   524  0000                     _OSCCON	set	4051
   525  0000                     _INTCON2bits	set	4081
   526  0000                     _WPUB	set	3937
   527  0000                     _TRISD	set	3989
   528  0000                     _TRISC	set	3988
   529  0000                     _TRISB	set	3987
   530  0000                     _TRISA	set	3986
   531  0000                     _TRISE	set	3990
   532  0000                     _LATC	set	3979
   533  0000                     _LATB	set	3978
   534  0000                     _LATA	set	3977
   535  0000                     _LATD	set	3980
   536  0000                     _LATE	set	3981
   537                           
   538                           	psect	cinit
   539  0017CE                     __pcinit:
   540                           	opt stack 0
   541  0017CE                     start_initialization:
   542                           	opt stack 0
   543  0017CE                     __initialization:
   544                           	opt stack 0
   545                           
   546                           ; Initialize objects allocated to BANK0 (2 bytes)
   547                           ; load TBLPTR registers with __pidataBANK0
   548  0017CE  0E5C               	movlw	low __pidataBANK0
   549  0017D0  6EF6               	movwf	tblptrl,c
   550  0017D2  0E20               	movlw	high __pidataBANK0
   551  0017D4  6EF7               	movwf	tblptrh,c
   552  0017D6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   553  0017D8  6EF8               	movwf	tblptru,c
   554  0017DA  0009               	tblrd		*+	;fetch initializer
   555  0017DC  CFF5 F0DC          	movff	tablat,__pdataBANK0
   556  0017E0  0009               	tblrd		*+	;fetch initializer
   557  0017E2  CFF5 F0DD          	movff	tablat,__pdataBANK0+1
   558                           
   559                           ; Initialize objects allocated to COMRAM (2 bytes)
   560                           ; load TBLPTR registers with __pidataCOMRAM
   561  0017E6  0E5A               	movlw	low __pidataCOMRAM
   562  0017E8  6EF6               	movwf	tblptrl,c
   563  0017EA  0E20               	movlw	high __pidataCOMRAM
   564  0017EC  6EF7               	movwf	tblptrh,c
   565  0017EE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   566  0017F0  6EF8               	movwf	tblptru,c
   567  0017F2  0009               	tblrd		*+	;fetch initializer
   568  0017F4  CFF5 F047          	movff	tablat,__pdataCOMRAM
   569  0017F8  0009               	tblrd		*+	;fetch initializer
   570  0017FA  CFF5 F048          	movff	tablat,__pdataCOMRAM+1
   571                           
   572                           ; Clear objects allocated to BANK1 (42 bytes)
   573  0017FE  EE01  F000         	lfsr	0,__pbssBANK1
   574  001802  0E2A               	movlw	42
   575  001804                     clear_0:
   576  001804  6AEE               	clrf	postinc0,c
   577  001806  06E8               	decf	wreg,f,c
   578  001808  E1FD               	bnz	clear_0
   579                           
   580                           ; Clear objects allocated to BANK0 (74 bytes)
   581  00180A  EE00  F060         	lfsr	0,__pbssBANK0
   582  00180E  0E4A               	movlw	74
   583  001810                     clear_1:
   584  001810  6AEE               	clrf	postinc0,c
   585  001812  06E8               	decf	wreg,f,c
   586  001814  E1FD               	bnz	clear_1
   587                           
   588                           ; Clear objects allocated to COMRAM (24 bytes)
   589  001816  EE00  F02D         	lfsr	0,__pbssCOMRAM
   590  00181A  0E18               	movlw	24
   591  00181C                     clear_2:
   592  00181C  6AEE               	clrf	postinc0,c
   593  00181E  06E8               	decf	wreg,f,c
   594  001820  E1FD               	bnz	clear_2
   595  001822                     end_of_initialization:
   596                           	opt stack 0
   597  001822                     __end_of__initialization:
   598                           	opt stack 0
   599  001822  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   600  001824  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   601  001826  0E00               	movlw	low (__Lmediumconst shr (0+16))
   602  001828  6EF8               	movwf	tblptru,c
   603  00182A  0100               	movlb	0
   604  00182C  EFC3  F00D         	goto	_main	;jump to C main() function
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           
   612                           	psect	bssCOMRAM
   613  00002D                     __pbssCOMRAM:
   614                           	opt stack 0
   615  00002D                     _tmpTemp:
   616                           	opt stack 0
   617  00002D                     	ds	3
   618  000030                     _p_i2c1_trb_current:
   619                           	opt stack 0
   620  000030                     	ds	2
   621  000032                     I2C1_ISR@i2c_10bit_address_restart:
   622                           	opt stack 0
   623  000032                     	ds	1
   624  000033                     I2C1_ISR@i2c_bytes_left:
   625                           	opt stack 0
   626  000033                     	ds	1
   627  000034                     _i2c1_trb_count:
   628                           	opt stack 0
   629  000034                     	ds	1
   630  000035                     _i2c1_state:
   631                           	opt stack 0
   632  000035                     	ds	1
   633  000036                     _eusart_Tx_On:
   634                           	opt stack 0
   635  000036                     	ds	1
   636  000037                     _eusart_Tx_En:
   637                           	opt stack 0
   638  000037                     	ds	1
   639  000038                     _WrEnFl:
   640                           	opt stack 0
   641  000038                     	ds	1
   642  000039                     _alarme:
   643                           	opt stack 0
   644  000039                     	ds	1
   645  00003A                     _clk1_8Hz:
   646                           	opt stack 0
   647  00003A                     	ds	1
   648  00003B                     _clk1_4Hz:
   649                           	opt stack 0
   650  00003B                     	ds	1
   651  00003C                     _clk1_2Hz:
   652                           	opt stack 0
   653  00003C                     	ds	1
   654  00003D                     _clk1Hz:
   655                           	opt stack 0
   656  00003D                     	ds	1
   657  00003E                     _clk2Hz:
   658                           	opt stack 0
   659  00003E                     	ds	1
   660  00003F                     _clk4Hz:
   661                           	opt stack 0
   662  00003F                     	ds	1
   663  000040                     _j:
   664                           	opt stack 0
   665  000040                     	ds	1
   666  000041                     _i:
   667                           	opt stack 0
   668  000041                     	ds	1
   669  000042                     _TeclaTMP:
   670                           	opt stack 0
   671  000042                     	ds	1
   672  000043                     I2C1_ISR@i2c_address:
   673                           	opt stack 0
   674  000043                     	ds	2
   675                           tblptru	equ	0xFF8
   676                           tblptrh	equ	0xFF7
   677                           tblptrl	equ	0xFF6
   678                           tablat	equ	0xFF5
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           
   682                           	psect	dataCOMRAM
   683  000047                     __pdataCOMRAM:
   684                           	opt stack 0
   685  000047                     _tempAtual:
   686                           	opt stack 0
   687  000047                     	ds	1
   688  000048                     _tempAlarme:
   689                           	opt stack 0
   690  000048                     	ds	1
   691                           tblptru	equ	0xFF8
   692                           tblptrh	equ	0xFF7
   693                           tblptrl	equ	0xFF6
   694                           tablat	equ	0xFF5
   695                           postinc0	equ	0xFEE
   696                           wreg	equ	0xFE8
   697                           
   698                           	psect	bssBANK0
   699  000060                     __pbssBANK0:
   700                           	opt stack 0
   701  000060                     _i2c1_object:
   702                           	opt stack 0
   703  000060                     	ds	7
   704  000067                     I2C1_ISR@pi2c_buf_ptr:
   705                           	opt stack 0
   706  000067                     	ds	2
   707  000069                     _p_i2c1_current:
   708                           	opt stack 0
   709  000069                     	ds	2
   710  00006B                     _binADC:
   711                           	opt stack 0
   712  00006B                     	ds	2
   713  00006D                     _lastMenu:
   714                           	opt stack 0
   715  00006D                     	ds	1
   716  00006E                     _strUSART:
   717                           	opt stack 0
   718  00006E                     	ds	42
   719  000098                     I2C1_MasterRead@trBlock:
   720                           	opt stack 0
   721  000098                     	ds	6
   722  00009E                     I2C1_MasterWrite@trBlock:
   723                           	opt stack 0
   724  00009E                     	ds	6
   725  0000A4                     _i2c1_tr_queue:
   726                           	opt stack 0
   727  0000A4                     	ds	6
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           
   735                           	psect	dataBANK0
   736  0000DC                     __pdataBANK0:
   737                           	opt stack 0
   738  0000DC                     _menu_tmp:
   739                           	opt stack 0
   740  0000DC                     	ds	1
   741  0000DD                     _update:
   742                           	opt stack 0
   743  0000DD                     	ds	1
   744                           tblptru	equ	0xFF8
   745                           tblptrh	equ	0xFF7
   746                           tblptrl	equ	0xFF6
   747                           tablat	equ	0xFF5
   748                           postinc0	equ	0xFEE
   749                           wreg	equ	0xFE8
   750                           
   751                           	psect	bssBANK1
   752  000100                     __pbssBANK1:
   753                           	opt stack 0
   754  000100                     _strLCD:
   755                           	opt stack 0
   756  000100                     	ds	42
   757                           tblptru	equ	0xFF8
   758                           tblptrh	equ	0xFF7
   759                           tblptrl	equ	0xFF6
   760                           tablat	equ	0xFF5
   761                           postinc0	equ	0xFEE
   762                           wreg	equ	0xFE8
   763                           
   764                           	psect	cstackBANK1
   765  00012A                     __pcstackBANK1:
   766                           	opt stack 0
   767  00012A                     ??_isdigit:
   768  00012A                     ??_DelayPORXLCD:
   769  00012A                     ??_DelayXLCD:
   770  00012A                     ?___wmul:
   771                           	opt stack 0
   772  00012A                     ?___lwdiv:
   773                           	opt stack 0
   774  00012A                     EUSART1_Write@txData:
   775                           	opt stack 0
   776  00012A                     WriteCmdXLCD@cmd:
   777                           	opt stack 0
   778  00012A                     WriteDataXLCD@data:
   779                           	opt stack 0
   780  00012A                     INT1_SetInterruptHandler@InterruptHandler:
   781                           	opt stack 0
   782  00012A                     INT2_SetInterruptHandler@InterruptHandler:
   783                           	opt stack 0
   784  00012A                     INT0_SetInterruptHandler@InterruptHandler:
   785                           	opt stack 0
   786  00012A                     TMR0_SetInterruptHandler@InterruptHandler:
   787                           	opt stack 0
   788  00012A                     ___wmul@multiplier:
   789                           	opt stack 0
   790  00012A                     ___lwdiv@dividend:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x0
   794  00012A                     	ds	1
   795  00012B                     _isdigit$2575:
   796                           	opt stack 0
   797  00012B                     putsXLCD@buffer:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x1
   801  00012B                     	ds	1
   802  00012C                     ??_TMR0_Initialize:
   803  00012C                     isdigit@c:
   804                           	opt stack 0
   805  00012C                     ___wmul@multiplicand:
   806                           	opt stack 0
   807  00012C                     ___lwdiv@divisor:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x2
   811  00012C                     	ds	1
   812  00012D                     escreveLinhaLCD@texto:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x3
   816  00012D                     	ds	1
   817  00012E                     ___lwdiv@counter:
   818                           	opt stack 0
   819  00012E                     ___wmul@product:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x4
   823  00012E                     	ds	1
   824  00012F                     escreveLinhaLCD@linha:
   825                           	opt stack 0
   826  00012F                     ___lwdiv@quotient:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x5
   830  00012F                     	ds	1
   831  000130                     
   832                           ; 1 bytes @ 0x6
   833  000130                     	ds	1
   834  000131                     ?___lwmod:
   835                           	opt stack 0
   836  000131                     ___lwmod@dividend:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x7
   840  000131                     	ds	2
   841  000133                     ___lwmod@divisor:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x9
   845  000133                     	ds	2
   846  000135                     ___lwmod@counter:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0xB
   850  000135                     	ds	1
   851  000136                     ?_sprintf:
   852                           	opt stack 0
   853  000136                     sprintf@sp:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0xC
   857  000136                     	ds	2
   858  000138                     sprintf@f:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0xE
   862  000138                     	ds	4
   863  00013C                     ??_sprintf:
   864                           
   865                           ; 1 bytes @ 0x12
   866  00013C                     	ds	4
   867  000140                     sprintf@cp:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x16
   871  000140                     	ds	2
   872  000142                     sprintf@prec:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x18
   876  000142                     	ds	1
   877  000143                     sprintf@flag:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x19
   881  000143                     	ds	1
   882  000144                     sprintf@ap:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x1A
   886  000144                     	ds	2
   887  000146                     sprintf@len:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x1C
   891  000146                     	ds	2
   892  000148                     sprintf@val:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x1E
   896  000148                     	ds	2
   897  00014A                     sprintf@width:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x20
   901  00014A                     	ds	2
   902  00014C                     sprintf@c:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x22
   906  00014C                     	ds	1
   907  00014D                     ??_defTempAlarme:
   908  00014D                     testeTeclado@input:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x23
   912  00014D                     	ds	2
   913  00014F                     defTempAlarme@tmp_Alarme:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x25
   917  00014F                     	ds	1
   918  000150                     defTempAlarme@c1:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x26
   922  000150                     	ds	1
   923  000151                     defTempAlarme@c2:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x27
   927  000151                     	ds	1
   928  000152                     tblptru	equ	0xFF8
   929                           tblptrh	equ	0xFF7
   930                           tblptrl	equ	0xFF6
   931                           tablat	equ	0xFF5
   932                           postinc0	equ	0xFEE
   933                           wreg	equ	0xFE8
   934                           
   935                           ; 1 bytes @ 0x28
   936                           
   937                           	psect	cstackBANK0
   938  0000AA                     __pcstackBANK0:
   939                           	opt stack 0
   940  0000AA                     ??i1_sprintf:
   941  0000AA                     ?___ftsub:
   942                           	opt stack 0
   943  0000AA                     ___ftmul@exp:
   944                           	opt stack 0
   945  0000AA                     ___ftsub@f1:
   946                           	opt stack 0
   947                           
   948                           ; 3 bytes @ 0x0
   949  0000AA                     	ds	1
   950  0000AB                     ___ftmul@f3_as_product:
   951                           	opt stack 0
   952                           
   953                           ; 3 bytes @ 0x1
   954  0000AB                     	ds	2
   955  0000AD                     ___ftsub@f2:
   956                           	opt stack 0
   957                           
   958                           ; 3 bytes @ 0x3
   959  0000AD                     	ds	1
   960  0000AE                     ___ftmul@cntr:
   961                           	opt stack 0
   962  0000AE                     i1sprintf@cp:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x4
   966  0000AE                     	ds	1
   967  0000AF                     ___ftmul@sign:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x5
   971  0000AF                     	ds	1
   972  0000B0                     i1sprintf@prec:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x6
   976  0000B0                     	ds	1
   977  0000B1                     i1sprintf@flag:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x7
   981  0000B1                     	ds	1
   982  0000B2                     i1sprintf@ap:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x8
   986  0000B2                     	ds	2
   987  0000B4                     i1sprintf@len:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0xA
   991  0000B4                     	ds	2
   992  0000B6                     i1sprintf@val:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0xC
   996  0000B6                     	ds	2
   997  0000B8                     i1sprintf@width:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0xE
  1001  0000B8                     	ds	2
  1002  0000BA                     i1sprintf@c:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x10
  1006  0000BA                     	ds	1
  1007  0000BB                     ADC_ISR@var2:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x11
  1011  0000BB                     	ds	1
  1012  0000BC                     ADC_ISR@var1:
  1013                           	opt stack 0
  1014                           
  1015                           ; 3 bytes @ 0x12
  1016  0000BC                     	ds	3
  1017  0000BF                     ??_INTERRUPT_InterruptManagerLow:
  1018                           
  1019                           ; 1 bytes @ 0x15
  1020  0000BF                     	ds	21
  1021                           tblptru	equ	0xFF8
  1022                           tblptrh	equ	0xFF7
  1023                           tblptrl	equ	0xFF6
  1024                           tablat	equ	0xFF5
  1025                           postinc0	equ	0xFEE
  1026                           wreg	equ	0xFE8
  1027                           
  1028                           	psect	cstackCOMRAM
  1029  000001                     __pcstackCOMRAM:
  1030                           	opt stack 0
  1031  000001                     ??_I2C1_ISR:
  1032  000001                     TMR2_LoadPeriodRegister@periodVal:
  1033                           	opt stack 0
  1034  000001                     EPWM1_LoadDutyValue@dutyValue:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x0
  1038  000001                     	ds	2
  1039  000003                     ??_EPWM1_LoadDutyValue:
  1040                           
  1041                           ; 1 bytes @ 0x2
  1042  000003                     	ds	2
  1043  000005                     ??_INTERRUPT_InterruptManagerHigh:
  1044                           
  1045                           ; 1 bytes @ 0x4
  1046  000005                     	ds	18
  1047  000017                     ??_EUSART1_Receive_ISR:
  1048  000017                     ??i1_isdigit:
  1049  000017                     ?_ADC_GetConversionResult:
  1050                           	opt stack 0
  1051  000017                     ?i1___wmul:
  1052                           	opt stack 0
  1053  000017                     ?i1___lwdiv:
  1054                           	opt stack 0
  1055  000017                     ?___ftpack:
  1056                           	opt stack 0
  1057  000017                     ?___fttol:
  1058                           	opt stack 0
  1059  000017                     i1EUSART1_Write@txData:
  1060                           	opt stack 0
  1061  000017                     i1___wmul@multiplier:
  1062                           	opt stack 0
  1063  000017                     i1___lwdiv@dividend:
  1064                           	opt stack 0
  1065  000017                     ___ftpack@arg:
  1066                           	opt stack 0
  1067  000017                     ___ftge@ff1:
  1068                           	opt stack 0
  1069  000017                     ___fttol@f1:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x16
  1073  000017                     	ds	1
  1074  000018                     i1_isdigit$2575:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x17
  1078  000018                     	ds	1
  1079  000019                     ??_ADC_GetConversionResult:
  1080  000019                     i1isdigit@c:
  1081                           	opt stack 0
  1082  000019                     i1___wmul@multiplicand:
  1083                           	opt stack 0
  1084  000019                     i1___lwdiv@divisor:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x18
  1088  000019                     	ds	1
  1089  00001A                     ___ftpack@exp:
  1090                           	opt stack 0
  1091  00001A                     ___ftge@ff2:
  1092                           	opt stack 0
  1093                           
  1094                           ; 3 bytes @ 0x19
  1095  00001A                     	ds	1
  1096  00001B                     ??___fttol:
  1097  00001B                     ___ftpack@sign:
  1098                           	opt stack 0
  1099  00001B                     i1___lwdiv@counter:
  1100                           	opt stack 0
  1101  00001B                     i1___wmul@product:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x1A
  1105  00001B                     	ds	1
  1106  00001C                     ??___ftpack:
  1107  00001C                     EUSART1_Receive_ISR@i1:
  1108                           	opt stack 0
  1109  00001C                     i1___lwdiv@quotient:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x1B
  1113  00001C                     	ds	1
  1114  00001D                     ??___ftge:
  1115                           
  1116                           ; 1 bytes @ 0x1C
  1117  00001D                     	ds	1
  1118  00001E                     ?i1___lwmod:
  1119                           	opt stack 0
  1120  00001E                     EUSART1_Receive_ISR@i2:
  1121                           	opt stack 0
  1122  00001E                     i1___lwmod@dividend:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x1D
  1126  00001E                     	ds	1
  1127  00001F                     ?___ftadd:
  1128                           	opt stack 0
  1129  00001F                     ?___awtoft:
  1130                           	opt stack 0
  1131  00001F                     ?___lbtoft:
  1132                           	opt stack 0
  1133  00001F                     ___awtoft@c:
  1134                           	opt stack 0
  1135  00001F                     ___ftadd@f1:
  1136                           	opt stack 0
  1137                           
  1138                           ; 3 bytes @ 0x1E
  1139  00001F                     	ds	1
  1140  000020                     EUSART1_Receive_ISR@tmpAlarme:
  1141                           	opt stack 0
  1142  000020                     ___fttol@sign1:
  1143                           	opt stack 0
  1144  000020                     i1___lwmod@divisor:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x1F
  1148  000020                     	ds	1
  1149  000021                     ___fttol@lval:
  1150                           	opt stack 0
  1151                           
  1152                           ; 4 bytes @ 0x20
  1153  000021                     	ds	1
  1154  000022                     ___awtoft@sign:
  1155                           	opt stack 0
  1156  000022                     ___lbtoft@c:
  1157                           	opt stack 0
  1158  000022                     i1___lwmod@counter:
  1159                           	opt stack 0
  1160  000022                     ___ftadd@f2:
  1161                           	opt stack 0
  1162                           
  1163                           ; 3 bytes @ 0x21
  1164  000022                     	ds	1
  1165  000023                     ?i1_sprintf:
  1166                           	opt stack 0
  1167  000023                     ?___ftmul:
  1168                           	opt stack 0
  1169  000023                     i1sprintf@sp:
  1170                           	opt stack 0
  1171  000023                     ___ftmul@f1:
  1172                           	opt stack 0
  1173                           
  1174                           ; 3 bytes @ 0x22
  1175  000023                     	ds	2
  1176  000025                     ??___ftadd:
  1177  000025                     ___fttol@exp1:
  1178                           	opt stack 0
  1179  000025                     i1sprintf@f:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x24
  1183  000025                     	ds	1
  1184  000026                     ___ftmul@f2:
  1185                           	opt stack 0
  1186                           
  1187                           ; 3 bytes @ 0x25
  1188  000026                     	ds	2
  1189  000028                     ___ftadd@sign:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x27
  1193  000028                     	ds	1
  1194  000029                     ??___ftmul:
  1195  000029                     ___ftadd@exp2:
  1196                           	opt stack 0
  1197                           
  1198                           ; 1 bytes @ 0x28
  1199  000029                     	ds	1
  1200  00002A                     ___ftadd@exp1:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x29
  1204  00002A                     	ds	1
  1205  00002B                     
  1206                           ; 1 bytes @ 0x2A
  1207  00002B                     	ds	2
  1208  00002D                     tblptru	equ	0xFF8
  1209                           tblptrh	equ	0xFF7
  1210                           tblptrl	equ	0xFF6
  1211                           tablat	equ	0xFF5
  1212                           postinc0	equ	0xFEE
  1213                           wreg	equ	0xFE8
  1214                           
  1215                           ; 1 bytes @ 0x2C
  1216 ;;
  1217 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1218 ;;
  1219 ;; *************** function _main *****************
  1220 ;; Defined at:
  1221 ;;		line 52 in file "main.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;		None
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;		None
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  1    wreg      void 
  1228 ;; Registers used:
  1229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1235 ;;      Params:         0       0       0       0       0       0       0
  1236 ;;      Locals:         0       0       0       0       0       0       0
  1237 ;;      Temps:          0       0       0       0       0       0       0
  1238 ;;      Totals:         0       0       0       0       0       0       0
  1239 ;;Total ram usage:        0 bytes
  1240 ;; Hardware stack levels required when called:   15
  1241 ;; This function calls:
  1242 ;;		_BusyXLCD
  1243 ;;		_OpenXLCD
  1244 ;;		_SYSTEM_Initialize
  1245 ;;		_WriteCmdXLCD
  1246 ;;		_menu
  1247 ;; This function is called by:
  1248 ;;		Startup code after reset
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           	psect	text0
  1253  001B86                     __ptext0:
  1254                           	opt stack 0
  1255  001B86                     _main:
  1256                           	opt stack 16
  1257                           
  1258                           ;main.c: 54: SYSTEM_Initialize();
  1259                           
  1260                           ;incstack = 0
  1261  001B86  ECE0  F00E         	call	_SYSTEM_Initialize	;wreg free
  1262                           
  1263                           ;main.c: 63: (INTCONbits.GIEH = 1);
  1264  001B8A  8EF2               	bsf	intcon,7,c	;volatile
  1265                           
  1266                           ;main.c: 66: (INTCONbits.GIEL = 1);
  1267  001B8C  8CF2               	bsf	intcon,6,c	;volatile
  1268  001B8E  EC1E  F00E         	call	_BusyXLCD	;wreg free
  1269  001B92  0900               	iorlw	0
  1270  001B94  A4D8               	btfss	status,2,c
  1271  001B96  D7FB               	goto	l926
  1272                           
  1273                           ;main.c: 89: OpenXLCD(0b00101111 & 0b00111011);
  1274  001B98  0E2B               	movlw	43
  1275  001B9A  ECE1  F00A         	call	_OpenXLCD
  1276  001B9E  EC1E  F00E         	call	_BusyXLCD	;wreg free
  1277  001BA2  0900               	iorlw	0
  1278  001BA4  A4D8               	btfss	status,2,c
  1279  001BA6  D7FB               	goto	l929
  1280                           
  1281                           ;main.c: 92: WriteCmdXLCD(0b00001111 & 0b00001101 & 0b00001110);
  1282  001BA8  0E0C               	movlw	12
  1283  001BAA  EC5F  F00D         	call	_WriteCmdXLCD
  1284  001BAE  EC1E  F00E         	call	_BusyXLCD	;wreg free
  1285  001BB2  0900               	iorlw	0
  1286  001BB4  A4D8               	btfss	status,2,c
  1287  001BB6  D7FB               	goto	l932
  1288                           
  1289                           ;main.c: 95: WriteCmdXLCD(0b00010111);
  1290  001BB8  0E17               	movlw	23
  1291  001BBA  EC5F  F00D         	call	_WriteCmdXLCD
  1292  001BBE                     
  1293                           ;main.c: 99: menu();
  1294  001BBE  EC0E  F008         	call	_menu	;wreg free
  1295  001BC2  D7FD               	goto	l934
  1296  001BC4                     __end_of_main:
  1297                           	opt stack 0
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           intcon	equ	0xFF2
  1303                           postinc0	equ	0xFEE
  1304                           wreg	equ	0xFE8
  1305                           status	equ	0xFD8
  1306                           
  1307 ;; *************** function _menu *****************
  1308 ;; Defined at:
  1309 ;;		line 113 in file "main.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;		None
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;		None
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  1    wreg      void 
  1316 ;; Registers used:
  1317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1323 ;;      Params:         0       0       0       0       0       0       0
  1324 ;;      Locals:         0       0       0       0       0       0       0
  1325 ;;      Temps:          0       0       0       0       0       0       0
  1326 ;;      Totals:         0       0       0       0       0       0       0
  1327 ;;Total ram usage:        0 bytes
  1328 ;; Hardware stack levels used:    1
  1329 ;; Hardware stack levels required when called:   14
  1330 ;; This function calls:
  1331 ;;		_defTempAlarme
  1332 ;;		_escreveLinhaLCD
  1333 ;;		_feedbackUSART
  1334 ;;		_monitorizacao
  1335 ;;		_sprintf
  1336 ;;		_testeTeclado
  1337 ;; This function is called by:
  1338 ;;		_main
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text1
  1343  00101C                     __ptext1:
  1344                           	opt stack 0
  1345  00101C                     _menu:
  1346                           	opt stack 16
  1347                           
  1348                           ;main.c: 115: escreveLinhaLCD(128, "Menu         Opcao:");
  1349                           
  1350                           ;incstack = 0
  1351  00101C  0EC2               	movlw	low STR_2
  1352  00101E  0101               	movlb	1	; () banked
  1353  001020  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1354  001022  0E7F               	movlw	high STR_2
  1355  001024  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1356  001026  0E80               	movlw	128
  1357  001028  EC87  F00E         	call	_escreveLinhaLCD
  1358  00102C                     
  1359                           ;main.c: 119: if (PORTAbits.RA0 == 0) {
  1360  00102C  B080               	btfsc	3968,0,c	;volatile
  1361  00102E  D004               	goto	u7250
  1362                           
  1363                           ;main.c: 120: menu_tmp++;
  1364  001030  0100               	movlb	0	; () banked
  1365  001032  2BDC               	incf	_menu_tmp& (0+255),f,b	;volatile
  1366  001034                     
  1367                           ; BSR set to: 0
  1368  001034  A080               	btfss	3968,0,c	;volatile
  1369  001036  D7FE               	goto	l952
  1370  001038                     u7250:
  1371                           
  1372                           ;main.c: 122: }
  1373                           ;main.c: 124: if (PORTAbits.RA2 == 0) {
  1374  001038  B480               	btfsc	3968,2,c	;volatile
  1375  00103A  D004               	goto	u7270
  1376                           
  1377                           ;main.c: 125: menu_tmp--;
  1378  00103C  0100               	movlb	0	; () banked
  1379  00103E  07DC               	decf	_menu_tmp& (0+255),f,b	;volatile
  1380  001040                     
  1381                           ; BSR set to: 0
  1382  001040  A480               	btfss	3968,2,c	;volatile
  1383  001042  D7FE               	goto	l956
  1384  001044                     u7270:
  1385                           
  1386                           ;main.c: 127: }
  1387                           ;main.c: 129: if (menu_tmp > 2)
  1388  001044  0E02               	movlw	2
  1389  001046  0100               	movlb	0	; () banked
  1390  001048  65DC               	cpfsgt	_menu_tmp& (0+255),b	;volatile
  1391  00104A  D002               	goto	l958
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;main.c: 130: menu_tmp = 1;
  1395  00104C  0E01               	movlw	1
  1396  00104E  6FDC               	movwf	_menu_tmp& (0+255),b	;volatile
  1397  001050                     l958:
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;main.c: 131: if (menu_tmp < 1)
  1401  001050  51DC               	movf	_menu_tmp& (0+255),w,b	;volatile
  1402  001052  A4D8               	btfss	status,2,c
  1403  001054  D002               	goto	l959
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;main.c: 132: menu_tmp = 2;
  1407  001056  0E02               	movlw	2
  1408  001058  6FDC               	movwf	_menu_tmp& (0+255),b	;volatile
  1409  00105A                     l959:
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;main.c: 134: if (lastMenu != menu_tmp) {
  1413                           
  1414                           ; BSR set to: 0
  1415  00105A  51DC               	movf	_menu_tmp& (0+255),w,b	;volatile
  1416  00105C  196D               	xorwf	_lastMenu& (0+255),w,b	;volatile
  1417  00105E  B4D8               	btfsc	status,2,c
  1418  001060  D004               	goto	l960
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;main.c: 135: update = 1;
  1422  001062  0E01               	movlw	1
  1423  001064  6FDD               	movwf	_update& (0+255),b	;volatile
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;main.c: 136: lastMenu = menu_tmp;
  1427  001066  C0DC  F06D         	movff	_menu_tmp,_lastMenu	;volatile
  1428  00106A                     l960:
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;main.c: 137: }
  1432                           ;main.c: 139: if (update) {
  1433  00106A  51DD               	movf	_update& (0+255),w,b	;volatile
  1434  00106C  B4D8               	btfsc	status,2,c
  1435  00106E  D034               	goto	l961
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;main.c: 140: sprintf(strLCD, "%d", menu_tmp);
  1439  001070  0E00               	movlw	low _strLCD
  1440  001072  0101               	movlb	1	; () banked
  1441  001074  6F36               	movwf	sprintf@sp& (0+255),b
  1442  001076  0E01               	movlw	high _strLCD
  1443  001078  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1444  00107A  0EFB               	movlw	low STR_3
  1445  00107C  6F38               	movwf	sprintf@f& (0+255),b
  1446  00107E  0E7F               	movlw	high STR_3
  1447  001080  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1448  001082  C0DC  F13A         	movff	_menu_tmp,?_sprintf+4	;volatile
  1449  001086  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1450  001088  EC70  F000         	call	_sprintf	;wreg free
  1451                           
  1452                           ;main.c: 141: escreveLinhaLCD(128 + 19, strLCD);
  1453  00108C  0E00               	movlw	low _strLCD
  1454  00108E  0101               	movlb	1	; () banked
  1455  001090  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1456  001092  0E01               	movlw	high _strLCD
  1457  001094  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1458  001096  0E93               	movlw	147
  1459  001098  EC87  F00E         	call	_escreveLinhaLCD
  1460                           
  1461                           ;main.c: 142: switch (menu_tmp) {
  1462  00109C  D012               	goto	l962
  1463  00109E                     
  1464                           ;main.c: 144: escreveLinhaLCD(192, "Monitorizacao        ");
  1465  00109E  0E16               	movlw	low STR_4
  1466  0010A0  0101               	movlb	1	; () banked
  1467  0010A2  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1468  0010A4  0E7F               	movlw	high STR_4
  1469  0010A6  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1470  0010A8  0EC0               	movlw	192
  1471  0010AA  EC87  F00E         	call	_escreveLinhaLCD
  1472                           
  1473                           ;main.c: 145: break;
  1474  0010AE  D011               	goto	l964
  1475  0010B0                     
  1476                           ;main.c: 147: escreveLinhaLCD(192, "Temp. de alarme      ");
  1477  0010B0  0E2C               	movlw	low STR_5
  1478  0010B2  0101               	movlb	1	; () banked
  1479  0010B4  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1480  0010B6  0E7F               	movlw	high STR_5
  1481  0010B8  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1482  0010BA  0EC0               	movlw	192
  1483  0010BC  EC87  F00E         	call	_escreveLinhaLCD
  1484                           
  1485                           ;main.c: 149: }
  1486                           
  1487                           ;main.c: 148: break;
  1488  0010C0  D008               	goto	l964
  1489  0010C2                     l962:
  1490  0010C2  0100               	movlb	0	; () banked
  1491  0010C4  51DC               	movf	_menu_tmp& (0+255),w,b	;volatile
  1492                           
  1493                           ; Switch size 1, requested type "space"
  1494                           ; Number of cases is 2, Range of values is 1 to 2
  1495                           ; switch strategies available:
  1496                           ; Name         Instructions Cycles
  1497                           ; simple_byte            7     4 (average)
  1498                           ;	Chosen strategy is simple_byte
  1499  0010C6  0A01               	xorlw	1	; case 1
  1500  0010C8  B4D8               	btfsc	status,2,c
  1501  0010CA  D7E9               	goto	l963
  1502  0010CC  0A03               	xorlw	3	; case 2
  1503  0010CE  B4D8               	btfsc	status,2,c
  1504  0010D0  D7EF               	goto	l965
  1505  0010D2                     l964:
  1506                           
  1507                           ;main.c: 150: update = 0;
  1508                           
  1509                           ; BSR set to: 0
  1510  0010D2  0E00               	movlw	0
  1511  0010D4  0100               	movlb	0	; () banked
  1512  0010D6  6FDD               	movwf	_update& (0+255),b	;volatile
  1513  0010D8                     l961:
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;main.c: 151: }
  1517                           ;main.c: 153: if (PORTAbits.RA1 == 0) {
  1518                           
  1519                           ; BSR set to: 0
  1520  0010D8  B280               	btfsc	3968,1,c	;volatile
  1521  0010DA  D7A8               	goto	l949
  1522  0010DC                     u7320:
  1523                           
  1524                           ; BSR set to: 0
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;main.c: 154: while (PORTAbits.RA1 == 0);
  1528  0010DC  B280               	btfsc	3968,1,c	;volatile
  1529  0010DE  D00D               	goto	l970
  1530  0010E0  D7FD               	goto	u7320
  1531  0010E2                     
  1532                           ;main.c: 157: monitorizacao();
  1533  0010E2  EC21  F006         	call	_monitorizacao	;wreg free
  1534                           
  1535                           ;main.c: 158: break;
  1536  0010E6  D017               	goto	l972
  1537  0010E8                     
  1538                           ;main.c: 160: defTempAlarme();
  1539  0010E8  EC97  F008         	call	_defTempAlarme	;wreg free
  1540                           
  1541                           ;main.c: 161: break;
  1542  0010EC  D014               	goto	l972
  1543  0010EE                     
  1544                           ;main.c: 163: testeTeclado();
  1545  0010EE  EC18  F00C         	call	_testeTeclado	;wreg free
  1546                           
  1547                           ;main.c: 164: break;
  1548  0010F2  D011               	goto	l972
  1549  0010F4                     
  1550                           ;main.c: 166: feedbackUSART();
  1551  0010F4  EC77  F00A         	call	_feedbackUSART	;wreg free
  1552                           
  1553                           ;main.c: 168: }
  1554                           
  1555                           ;main.c: 167: break;
  1556  0010F8  D00E               	goto	l972
  1557  0010FA                     l970:
  1558  0010FA  0100               	movlb	0	; () banked
  1559  0010FC  51DC               	movf	_menu_tmp& (0+255),w,b	;volatile
  1560                           
  1561                           ; Switch size 1, requested type "space"
  1562                           ; Number of cases is 4, Range of values is 1 to 4
  1563                           ; switch strategies available:
  1564                           ; Name         Instructions Cycles
  1565                           ; simple_byte           13     7 (average)
  1566                           ;	Chosen strategy is simple_byte
  1567  0010FE  0A01               	xorlw	1	; case 1
  1568  001100  B4D8               	btfsc	status,2,c
  1569  001102  D7EF               	goto	l971
  1570  001104  0A03               	xorlw	3	; case 2
  1571  001106  B4D8               	btfsc	status,2,c
  1572  001108  D7EF               	goto	l973
  1573  00110A  0A01               	xorlw	1	; case 3
  1574  00110C  B4D8               	btfsc	status,2,c
  1575  00110E  D7EF               	goto	l974
  1576  001110  0A07               	xorlw	7	; case 4
  1577  001112  B4D8               	btfsc	status,2,c
  1578  001114  D7EF               	goto	l975
  1579  001116                     l972:
  1580                           
  1581                           ;main.c: 169: update = 1;
  1582                           
  1583                           ; BSR set to: 0
  1584  001116  0E01               	movlw	1
  1585  001118  0100               	movlb	0	; () banked
  1586  00111A  6FDD               	movwf	_update& (0+255),b	;volatile
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 170: escreveLinhaLCD(128, "Menu         Opcao:");
  1590  00111C  0EC2               	movlw	low STR_2
  1591  00111E  0101               	movlb	1	; () banked
  1592  001120  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1593  001122  0E7F               	movlw	high STR_2
  1594  001124  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1595  001126  0E80               	movlw	128
  1596  001128  EC87  F00E         	call	_escreveLinhaLCD
  1597  00112C  D77F               	goto	l949
  1598  00112E                     __end_of_menu:
  1599                           	opt stack 0
  1600                           tblptru	equ	0xFF8
  1601                           tblptrh	equ	0xFF7
  1602                           tblptrl	equ	0xFF6
  1603                           tablat	equ	0xFF5
  1604                           intcon	equ	0xFF2
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           status	equ	0xFD8
  1608                           
  1609 ;; *************** function _testeTeclado *****************
  1610 ;; Defined at:
  1611 ;;		line 216 in file "main.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  input           1   35[BANK1 ] unsigned char 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1625 ;;      Params:         0       0       0       0       0       0       0
  1626 ;;      Locals:         0       0       1       0       0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0
  1628 ;;      Totals:         0       0       1       0       0       0       0
  1629 ;;Total ram usage:        1 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:   13
  1632 ;; This function calls:
  1633 ;;		_escreveLinhaLCD
  1634 ;;		_getKBInput
  1635 ;;		_sprintf
  1636 ;; This function is called by:
  1637 ;;		_menu
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           	psect	text2
  1642  001830                     __ptext2:
  1643                           	opt stack 0
  1644  001830                     _testeTeclado:
  1645                           	opt stack 16
  1646                           
  1647                           ;main.c: 218: char input;
  1648                           ;main.c: 220: escreveLinhaLCD(128, "Teste Teclado       ");
  1649                           
  1650                           ;incstack = 0
  1651  001830  0E98               	movlw	low STR_14
  1652  001832  0101               	movlb	1	; () banked
  1653  001834  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1654  001836  0E7F               	movlw	high STR_14
  1655  001838  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1656  00183A  0E80               	movlw	128
  1657  00183C  EC87  F00E         	call	_escreveLinhaLCD
  1658                           
  1659                           ;main.c: 221: escreveLinhaLCD(192, "Numero:             ");
  1660  001840  0E6E               	movlw	low STR_15
  1661  001842  0101               	movlb	1	; () banked
  1662  001844  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1663  001846  0E7F               	movlw	high STR_15
  1664  001848  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1665  00184A  0EC0               	movlw	192
  1666  00184C  EC87  F00E         	call	_escreveLinhaLCD
  1667                           
  1668                           ;main.c: 224: while (PORTAbits.RA1 != 0) {
  1669  001850  D019               	goto	l1002
  1670  001852                     
  1671                           ;main.c: 225: input = getKBInput();
  1672  001852  EC47  F00C         	call	_getKBInput	;wreg free
  1673  001856  0101               	movlb	1	; () banked
  1674  001858  6F4D               	movwf	testeTeclado@input& (0+255),b
  1675                           
  1676                           ; BSR set to: 1
  1677                           ;main.c: 226: sprintf(strLCD, "%c", input);
  1678  00185A  0E00               	movlw	low _strLCD
  1679  00185C  6F36               	movwf	sprintf@sp& (0+255),b
  1680  00185E  0E01               	movlw	high _strLCD
  1681  001860  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1682  001862  0EF8               	movlw	low STR_16
  1683  001864  6F38               	movwf	sprintf@f& (0+255),b
  1684  001866  0E7F               	movlw	high STR_16
  1685  001868  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1686  00186A  C14D  F13A         	movff	testeTeclado@input,?_sprintf+4
  1687  00186E  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1688  001870  EC70  F000         	call	_sprintf	;wreg free
  1689                           
  1690                           ;main.c: 227: escreveLinhaLCD(192 + 8, strLCD);
  1691  001874  0E00               	movlw	low _strLCD
  1692  001876  0101               	movlb	1	; () banked
  1693  001878  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1694  00187A  0E01               	movlw	high _strLCD
  1695  00187C  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1696  00187E  0EC8               	movlw	200
  1697  001880  EC87  F00E         	call	_escreveLinhaLCD
  1698  001884                     l1002:
  1699  001884  B280               	btfsc	3968,1,c	;volatile
  1700  001886  D7E5               	goto	l1003
  1701  001888                     u6660:
  1702                           
  1703                           ;main.c: 228: }
  1704                           ;main.c: 230: while (PORTAbits.RA1 == 0);
  1705  001888  B280               	btfsc	3968,1,c	;volatile
  1706  00188A  0012               	return	
  1707  00188C  D7FD               	goto	u6660
  1708  00188E                     __end_of_testeTeclado:
  1709                           	opt stack 0
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           intcon	equ	0xFF2
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           status	equ	0xFD8
  1718                           
  1719 ;; *************** function _monitorizacao *****************
  1720 ;; Defined at:
  1721 ;;		line 176 in file "main.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;		None
  1724 ;; Auto vars:     Size  Location     Type
  1725 ;;		None
  1726 ;; Return value:  Size  Location     Type
  1727 ;;                  1    wreg      void 
  1728 ;; Registers used:
  1729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1730 ;; Tracked objects:
  1731 ;;		On entry : 0/0
  1732 ;;		On exit  : 0/0
  1733 ;;		Unchanged: 0/0
  1734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1735 ;;      Params:         0       0       0       0       0       0       0
  1736 ;;      Locals:         0       0       0       0       0       0       0
  1737 ;;      Temps:          0       0       0       0       0       0       0
  1738 ;;      Totals:         0       0       0       0       0       0       0
  1739 ;;Total ram usage:        0 bytes
  1740 ;; Hardware stack levels used:    1
  1741 ;; Hardware stack levels required when called:   13
  1742 ;; This function calls:
  1743 ;;		_escreveLinhaLCD
  1744 ;;		_sprintf
  1745 ;; This function is called by:
  1746 ;;		_menu
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text3
  1751  000C42                     __ptext3:
  1752                           	opt stack 0
  1753  000C42                     _monitorizacao:
  1754                           	opt stack 16
  1755                           
  1756                           ;main.c: 178: sprintf(strLCD, "Temp. Atual:  %2d oC ", tempAtual);
  1757                           
  1758                           ;incstack = 0
  1759  000C42  0E00               	movlw	low _strLCD
  1760  000C44  0101               	movlb	1	; () banked
  1761  000C46  6F36               	movwf	sprintf@sp& (0+255),b
  1762  000C48  0E01               	movlw	high _strLCD
  1763  000C4A  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1764  000C4C  0E42               	movlw	low STR_7
  1765  000C4E  6F38               	movwf	sprintf@f& (0+255),b
  1766  000C50  0E7F               	movlw	high STR_7
  1767  000C52  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1768  000C54  C047  F13A         	movff	_tempAtual,?_sprintf+4	;volatile
  1769  000C58  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1770  000C5A  EC70  F000         	call	_sprintf	;wreg free
  1771                           
  1772                           ;main.c: 179: escreveLinhaLCD(128, strLCD);
  1773  000C5E  0E00               	movlw	low _strLCD
  1774  000C60  0101               	movlb	1	; () banked
  1775  000C62  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1776  000C64  0E01               	movlw	high _strLCD
  1777  000C66  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1778  000C68  0E80               	movlw	128
  1779  000C6A  EC87  F00E         	call	_escreveLinhaLCD
  1780                           
  1781                           ;main.c: 180: sprintf(strLCD, "Temp. Alarme: %2d oC ", tempAlarme);
  1782  000C6E  0E00               	movlw	low _strLCD
  1783  000C70  0101               	movlb	1	; () banked
  1784  000C72  6F36               	movwf	sprintf@sp& (0+255),b
  1785  000C74  0E01               	movlw	high _strLCD
  1786  000C76  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1787  000C78  0E58               	movlw	low STR_8
  1788  000C7A  6F38               	movwf	sprintf@f& (0+255),b
  1789  000C7C  0E7F               	movlw	high STR_8
  1790  000C7E  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1791  000C80  C048  F13A         	movff	_tempAlarme,?_sprintf+4	;volatile
  1792  000C84  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1793  000C86  EC70  F000         	call	_sprintf	;wreg free
  1794                           
  1795                           ;main.c: 181: escreveLinhaLCD(192, strLCD);
  1796  000C8A  0E00               	movlw	low _strLCD
  1797  000C8C  0101               	movlb	1	; () banked
  1798  000C8E  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1799  000C90  0E01               	movlw	high _strLCD
  1800  000C92  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1801  000C94  0EC0               	movlw	192
  1802  000C96  EC87  F00E         	call	_escreveLinhaLCD
  1803                           
  1804                           ;main.c: 184: while (clk4Hz) {
  1805                           
  1806                           ;main.c: 183: do {
  1807  000C9A  D078               	goto	u6540
  1808  000C9C                     
  1809                           ;main.c: 186: if (alarme) {
  1810  000C9C  5039               	movf	_alarme,w,c	;volatile
  1811  000C9E  A4D8               	btfss	status,2,c
  1812  000CA0  D01C               	goto	l985
  1813  000CA2  D02B               	goto	l984
  1814  000CA4                     
  1815                           ;main.c: 189: sprintf(strLCD, "!ALARME! TEMP>");
  1816  000CA4  0E00               	movlw	low _strLCD
  1817  000CA6  0101               	movlb	1	; () banked
  1818  000CA8  6F36               	movwf	sprintf@sp& (0+255),b
  1819  000CAA  0E01               	movlw	high _strLCD
  1820  000CAC  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1821  000CAE  0EE5               	movlw	low STR_9
  1822  000CB0  6F38               	movwf	sprintf@f& (0+255),b
  1823  000CB2  0E7F               	movlw	high STR_9
  1824  000CB4  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1825  000CB6  EC70  F000         	call	_sprintf	;wreg free
  1826                           
  1827                           ;main.c: 190: update = 1;
  1828  000CBA  0E01               	movlw	1
  1829  000CBC  0100               	movlb	0	; () banked
  1830  000CBE  6FDD               	movwf	_update& (0+255),b	;volatile
  1831                           
  1832                           ;main.c: 191: break;
  1833  000CC0  D013               	goto	l987
  1834  000CC2                     
  1835                           ;main.c: 193: sprintf(strLCD, "Temp. Alarme: ");
  1836                           
  1837                           ; BSR set to: 0
  1838  000CC2  0E00               	movlw	low _strLCD
  1839  000CC4  0101               	movlb	1	; () banked
  1840  000CC6  6F36               	movwf	sprintf@sp& (0+255),b
  1841  000CC8  0E01               	movlw	high _strLCD
  1842  000CCA  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1843  000CCC  0ED6               	movlw	low STR_10
  1844  000CCE  6F38               	movwf	sprintf@f& (0+255),b
  1845  000CD0  0E7F               	movlw	high STR_10
  1846  000CD2  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1847  000CD4  EC70  F000         	call	_sprintf	;wreg free
  1848                           
  1849                           ;main.c: 195: }
  1850                           
  1851                           ;main.c: 194: break;
  1852  000CD8  D007               	goto	l987
  1853  000CDA                     l985:
  1854  000CDA  503C               	movf	_clk1_2Hz,w,c	;volatile
  1855                           
  1856                           ; Switch size 1, requested type "space"
  1857                           ; Number of cases is 2, Range of values is 0 to 1
  1858                           ; switch strategies available:
  1859                           ; Name         Instructions Cycles
  1860                           ; simple_byte            7     4 (average)
  1861                           ;	Chosen strategy is simple_byte
  1862  000CDC  0A00               	xorlw	0	; case 0
  1863  000CDE  B4D8               	btfsc	status,2,c
  1864  000CE0  D7F0               	goto	l988
  1865  000CE2  0A01               	xorlw	1	; case 1
  1866  000CE4  B4D8               	btfsc	status,2,c
  1867  000CE6  D7DE               	goto	l986
  1868  000CE8                     l987:
  1869                           
  1870                           ;main.c: 196: escreveLinhaLCD(192, strLCD);
  1871  000CE8  0E00               	movlw	low _strLCD
  1872  000CEA  0101               	movlb	1	; () banked
  1873  000CEC  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1874  000CEE  0E01               	movlw	high _strLCD
  1875  000CF0  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1876  000CF2  0EC0               	movlw	192
  1877  000CF4  EC87  F00E         	call	_escreveLinhaLCD
  1878                           
  1879                           ;main.c: 197: } else if (update) {
  1880  000CF8  D01A               	goto	l990
  1881  000CFA                     l984:
  1882  000CFA  0100               	movlb	0	; () banked
  1883  000CFC  51DD               	movf	_update& (0+255),w,b	;volatile
  1884  000CFE  B4D8               	btfsc	status,2,c
  1885  000D00  D016               	goto	l990
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 198: sprintf(strLCD, "Temp. Alarme: ");
  1889  000D02  0E00               	movlw	low _strLCD
  1890  000D04  0101               	movlb	1	; () banked
  1891  000D06  6F36               	movwf	sprintf@sp& (0+255),b
  1892  000D08  0E01               	movlw	high _strLCD
  1893  000D0A  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1894  000D0C  0ED6               	movlw	low STR_10
  1895  000D0E  6F38               	movwf	sprintf@f& (0+255),b
  1896  000D10  0E7F               	movlw	high STR_10
  1897  000D12  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1898  000D14  EC70  F000         	call	_sprintf	;wreg free
  1899                           
  1900                           ;main.c: 199: escreveLinhaLCD(192, strLCD);
  1901  000D18  0E00               	movlw	low _strLCD
  1902  000D1A  0101               	movlb	1	; () banked
  1903  000D1C  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1904  000D1E  0E01               	movlw	high _strLCD
  1905  000D20  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1906  000D22  0EC0               	movlw	192
  1907  000D24  EC87  F00E         	call	_escreveLinhaLCD
  1908                           
  1909                           ;main.c: 200: update = 0;
  1910  000D28  0E00               	movlw	0
  1911  000D2A  0100               	movlb	0	; () banked
  1912  000D2C  6FDD               	movwf	_update& (0+255),b	;volatile
  1913  000D2E                     l990:
  1914                           
  1915                           ;main.c: 201: }
  1916                           ;main.c: 203: sprintf(strLCD, "%2d", tempAtual);
  1917                           
  1918                           ; BSR set to: 0
  1919                           
  1920                           ; BSR set to: 0
  1921  000D2E  0E00               	movlw	low _strLCD
  1922  000D30  0101               	movlb	1	; () banked
  1923  000D32  6F36               	movwf	sprintf@sp& (0+255),b
  1924  000D34  0E01               	movlw	high _strLCD
  1925  000D36  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1926  000D38  0EF4               	movlw	low STR_12
  1927  000D3A  6F38               	movwf	sprintf@f& (0+255),b
  1928  000D3C  0E7F               	movlw	high STR_12
  1929  000D3E  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1930  000D40  C047  F13A         	movff	_tempAtual,?_sprintf+4	;volatile
  1931  000D44  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1932  000D46  EC70  F000         	call	_sprintf	;wreg free
  1933                           
  1934                           ;main.c: 204: escreveLinhaLCD(128 + 14, strLCD);
  1935  000D4A  0E00               	movlw	low _strLCD
  1936  000D4C  0101               	movlb	1	; () banked
  1937  000D4E  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1938  000D50  0E01               	movlw	high _strLCD
  1939  000D52  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1940  000D54  0E8E               	movlw	142
  1941  000D56  EC87  F00E         	call	_escreveLinhaLCD
  1942                           
  1943                           ;main.c: 205: sprintf(strLCD, "%2d", tempAlarme);
  1944  000D5A  0E00               	movlw	low _strLCD
  1945  000D5C  0101               	movlb	1	; () banked
  1946  000D5E  6F36               	movwf	sprintf@sp& (0+255),b
  1947  000D60  0E01               	movlw	high _strLCD
  1948  000D62  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  1949  000D64  0EF4               	movlw	low STR_12
  1950  000D66  6F38               	movwf	sprintf@f& (0+255),b
  1951  000D68  0E7F               	movlw	high STR_12
  1952  000D6A  6F39               	movwf	(sprintf@f+1)& (0+255),b
  1953  000D6C  C048  F13A         	movff	_tempAlarme,?_sprintf+4	;volatile
  1954  000D70  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  1955  000D72  EC70  F000         	call	_sprintf	;wreg free
  1956                           
  1957                           ;main.c: 206: escreveLinhaLCD(192 + 14, strLCD);
  1958  000D76  0E00               	movlw	low _strLCD
  1959  000D78  0101               	movlb	1	; () banked
  1960  000D7A  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  1961  000D7C  0E01               	movlw	high _strLCD
  1962  000D7E  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  1963  000D80  0ECE               	movlw	206
  1964  000D82  EC87  F00E         	call	_escreveLinhaLCD
  1965  000D86  503F               	movf	_clk4Hz,w,c	;volatile
  1966  000D88  A4D8               	btfss	status,2,c
  1967  000D8A  D7FD               	goto	l992
  1968  000D8C                     u6540:
  1969  000D8C  503F               	movf	_clk4Hz,w,c	;volatile
  1970  000D8E  A4D8               	btfss	status,2,c
  1971  000D90  D785               	goto	l983
  1972                           
  1973                           ;main.c: 209: }
  1974                           ;main.c: 210: } while (PORTAbits.RA1 != 0);
  1975  000D92  B280               	btfsc	3968,1,c	;volatile
  1976  000D94  D7FB               	goto	u6540
  1977  000D96                     u6560:
  1978                           
  1979                           ;main.c: 212: while (PORTAbits.RA1 == 0);
  1980  000D96  B280               	btfsc	3968,1,c	;volatile
  1981  000D98  0012               	return	
  1982  000D9A  D7FD               	goto	u6560
  1983  000D9C                     __end_of_monitorizacao:
  1984                           	opt stack 0
  1985                           tblptru	equ	0xFF8
  1986                           tblptrh	equ	0xFF7
  1987                           tblptrl	equ	0xFF6
  1988                           tablat	equ	0xFF5
  1989                           intcon	equ	0xFF2
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _feedbackUSART *****************
  1995 ;; Defined at:
  1996 ;;		line 318 in file "main.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2010 ;;      Params:         0       0       0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0
  2012 ;;      Temps:          0       0       0       0       0       0       0
  2013 ;;      Totals:         0       0       0       0       0       0       0
  2014 ;;Total ram usage:        0 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:   13
  2017 ;; This function calls:
  2018 ;;		_BusyXLCD
  2019 ;;		_EUSART1_Write
  2020 ;;		_WriteCmdXLCD
  2021 ;;		_escreveLinhaLCD
  2022 ;; This function is called by:
  2023 ;;		_menu
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text4
  2028  0014EE                     __ptext4:
  2029                           	opt stack 0
  2030  0014EE                     _feedbackUSART:
  2031                           	opt stack 16
  2032                           
  2033                           ;main.c: 320: while (BusyXLCD());
  2034                           
  2035                           ;incstack = 0
  2036  0014EE  EC1E  F00E         	call	_BusyXLCD	;wreg free
  2037  0014F2  0900               	iorlw	0
  2038  0014F4  A4D8               	btfss	status,2,c
  2039  0014F6  D7FB               	goto	_feedbackUSART
  2040                           
  2041                           ;main.c: 321: WriteCmdXLCD(1);
  2042  0014F8  0E01               	movlw	1
  2043  0014FA  EC5F  F00D         	call	_WriteCmdXLCD
  2044                           
  2045                           ;main.c: 323: while (PORTAbits.RA1 != 0) {
  2046  0014FE  D058               	goto	l1055
  2047  001500                     
  2048                           ;main.c: 325: eusart_Tx_On = 1;
  2049  001500  0E01               	movlw	1
  2050  001502  6E36               	movwf	_eusart_Tx_On,c	;volatile
  2051                           
  2052                           ;main.c: 326: eusart_Tx_En = 1;
  2053  001504  0E01               	movlw	1
  2054  001506  6E37               	movwf	_eusart_Tx_En,c	;volatile
  2055  001508  0436               	decf	_eusart_Tx_On,w,c	;volatile
  2056  00150A  B4D8               	btfsc	status,2,c
  2057  00150C  D7FD               	goto	l1058
  2058                           
  2059                           ;main.c: 330: for (i = 0; i < 42 - 1; i++) {
  2060  00150E  0E00               	movlw	0
  2061  001510  6E41               	movwf	_i,c	;volatile
  2062  001512                     l5966:
  2063  001512  0E28               	movlw	40
  2064  001514  6441               	cpfsgt	_i,c	;volatile
  2065  001516  D001               	goto	l1060
  2066  001518  D014               	goto	u6710
  2067  00151A                     l1060:
  2068                           
  2069                           ;main.c: 331: strLCD[i] = strUSART[i];
  2070  00151A  5041               	movf	_i,w,c	;volatile
  2071  00151C  0D01               	mullw	1
  2072  00151E  0E6E               	movlw	low _strUSART
  2073  001520  24F3               	addwf	prodl,w,c
  2074  001522  6ED9               	movwf	fsr2l,c
  2075  001524  0E00               	movlw	high _strUSART
  2076  001526  20F4               	addwfc	prodh,w,c
  2077  001528  6EDA               	movwf	fsr2h,c
  2078  00152A  5041               	movf	_i,w,c	;volatile
  2079  00152C  0D01               	mullw	1
  2080  00152E  0E00               	movlw	low _strLCD
  2081  001530  24F3               	addwf	prodl,w,c
  2082  001532  6EE1               	movwf	fsr1l,c
  2083  001534  0E01               	movlw	high _strLCD
  2084  001536  20F4               	addwfc	prodh,w,c
  2085  001538  6EE2               	movwf	fsr1h,c
  2086  00153A  CFDF FFE7          	movff	indf2,indf1
  2087  00153E  2A41               	incf	_i,f,c	;volatile
  2088  001540  D7E8               	goto	l5966
  2089  001542                     u6710:
  2090                           
  2091                           ;main.c: 332: }
  2092                           ;main.c: 335: for (i = 0; strUSART[i] != '\0'; i++) {
  2093  001542  0E00               	movlw	0
  2094  001544  6E41               	movwf	_i,c	;volatile
  2095  001546  D016               	goto	l1062
  2096  001548                     
  2097                           ;main.c: 336: EUSART1_Write(strUSART[i]);
  2098  001548  5041               	movf	_i,w,c	;volatile
  2099  00154A  0D01               	mullw	1
  2100  00154C  0E6E               	movlw	low _strUSART
  2101  00154E  24F3               	addwf	prodl,w,c
  2102  001550  6ED9               	movwf	fsr2l,c
  2103  001552  0E00               	movlw	high _strUSART
  2104  001554  20F4               	addwfc	prodh,w,c
  2105  001556  6EDA               	movwf	fsr2h,c
  2106  001558  50DF               	movf	indf2,w,c
  2107  00155A  ECF5  F00F         	call	_EUSART1_Write
  2108                           
  2109                           ;main.c: 337: strUSART[i] = '\0';
  2110  00155E  5041               	movf	_i,w,c	;volatile
  2111  001560  0D01               	mullw	1
  2112  001562  0E6E               	movlw	low _strUSART
  2113  001564  24F3               	addwf	prodl,w,c
  2114  001566  6ED9               	movwf	fsr2l,c
  2115  001568  0E00               	movlw	high _strUSART
  2116  00156A  20F4               	addwfc	prodh,w,c
  2117  00156C  6EDA               	movwf	fsr2h,c
  2118  00156E  0E00               	movlw	0
  2119  001570  6EDF               	movwf	indf2,c
  2120  001572  2A41               	incf	_i,f,c	;volatile
  2121  001574                     l1062:
  2122  001574  5041               	movf	_i,w,c	;volatile
  2123  001576  0D01               	mullw	1
  2124  001578  0E6E               	movlw	low _strUSART
  2125  00157A  24F3               	addwf	prodl,w,c
  2126  00157C  6ED9               	movwf	fsr2l,c
  2127  00157E  0E00               	movlw	high _strUSART
  2128  001580  20F4               	addwfc	prodh,w,c
  2129  001582  6EDA               	movwf	fsr2h,c
  2130  001584  50DF               	movf	indf2,w,c
  2131  001586  A4D8               	btfss	status,2,c
  2132  001588  D7DF               	goto	l1063
  2133                           
  2134                           ;main.c: 338: }
  2135                           ;main.c: 341: EUSART1_Write('\r');
  2136  00158A  0E0D               	movlw	13
  2137  00158C  ECF5  F00F         	call	_EUSART1_Write
  2138  001590  EC1E  F00E         	call	_BusyXLCD	;wreg free
  2139  001594  0900               	iorlw	0
  2140  001596  A4D8               	btfss	status,2,c
  2141  001598  D7FB               	goto	l1066
  2142                           
  2143                           ;main.c: 344: WriteCmdXLCD(1);
  2144  00159A  0E01               	movlw	1
  2145  00159C  EC5F  F00D         	call	_WriteCmdXLCD
  2146                           
  2147                           ;main.c: 345: escreveLinhaLCD(128, strLCD);
  2148  0015A0  0E00               	movlw	low _strLCD
  2149  0015A2  0101               	movlb	1	; () banked
  2150  0015A4  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2151  0015A6  0E01               	movlw	high _strLCD
  2152  0015A8  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2153  0015AA  0E80               	movlw	128
  2154  0015AC  EC87  F00E         	call	_escreveLinhaLCD
  2155  0015B0                     l1055:
  2156  0015B0  B280               	btfsc	3968,1,c	;volatile
  2157  0015B2  D7A6               	goto	l1056
  2158  0015B4                     u6740:
  2159                           
  2160                           ;main.c: 347: }
  2161                           ;main.c: 349: while (PORTAbits.RA1 == 0);
  2162  0015B4  A280               	btfss	3968,1,c	;volatile
  2163  0015B6  D7FE               	goto	u6740
  2164                           
  2165                           ;main.c: 351: eusart_Tx_On = 0;
  2166  0015B8  0E00               	movlw	0
  2167  0015BA  6E36               	movwf	_eusart_Tx_On,c	;volatile
  2168                           
  2169                           ;main.c: 352: eusart_Tx_En = 0;
  2170  0015BC  0E00               	movlw	0
  2171  0015BE  6E37               	movwf	_eusart_Tx_En,c	;volatile
  2172  0015C0  0012               	return		;funcret
  2173  0015C2                     __end_of_feedbackUSART:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           intcon	equ	0xFF2
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           indf1	equ	0xFE7
  2185                           fsr1h	equ	0xFE2
  2186                           fsr1l	equ	0xFE1
  2187                           indf2	equ	0xFDF
  2188                           fsr2h	equ	0xFDA
  2189                           fsr2l	equ	0xFD9
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _EUSART1_Write *****************
  2193 ;; Defined at:
  2194 ;;		line 103 in file "mcc_generated_files/eusart1.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  txData          1    wreg     unsigned char 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  txData          1    0[BANK1 ] unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2208 ;;      Params:         0       0       0       0       0       0       0
  2209 ;;      Locals:         0       0       1       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0
  2211 ;;      Totals:         0       0       1       0       0       0       0
  2212 ;;Total ram usage:        1 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    9
  2215 ;; This function calls:
  2216 ;;		Nothing
  2217 ;; This function is called by:
  2218 ;;		_feedbackUSART
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text5
  2223  001FEA                     __ptext5:
  2224                           	opt stack 0
  2225  001FEA                     _EUSART1_Write:
  2226                           	opt stack 19
  2227                           
  2228                           ;incstack = 0
  2229                           ;EUSART1_Write@txData stored from wreg
  2230  001FEA  0101               	movlb	1	; () banked
  2231  001FEC  6F2A               	movwf	EUSART1_Write@txData& (0+255),b
  2232  001FEE                     
  2233                           ;eusart1.c: 104: while (!PIR1bits.TX1IF);
  2234  001FEE  A89E               	btfss	3998,4,c	;volatile
  2235  001FF0  D7FE               	goto	l5606
  2236                           
  2237                           ;eusart1.c: 105: TXREG1 = txData;
  2238  001FF2  C12A  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2239  001FF6  0012               	return		;funcret
  2240  001FF8                     __end_of_EUSART1_Write:
  2241                           	opt stack 0
  2242                           tblptru	equ	0xFF8
  2243                           tblptrh	equ	0xFF7
  2244                           tblptrl	equ	0xFF6
  2245                           tablat	equ	0xFF5
  2246                           prodh	equ	0xFF4
  2247                           prodl	equ	0xFF3
  2248                           intcon	equ	0xFF2
  2249                           postinc0	equ	0xFEE
  2250                           wreg	equ	0xFE8
  2251                           indf1	equ	0xFE7
  2252                           fsr1h	equ	0xFE2
  2253                           fsr1l	equ	0xFE1
  2254                           indf2	equ	0xFDF
  2255                           fsr2h	equ	0xFDA
  2256                           fsr2l	equ	0xFD9
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _defTempAlarme *****************
  2260 ;; Defined at:
  2261 ;;		line 234 in file "main.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  c2              1   39[BANK1 ] unsigned char 
  2266 ;;  c1              1   38[BANK1 ] unsigned char 
  2267 ;;  tmp_Alarme      1   37[BANK1 ] unsigned char 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2277 ;;      Params:         0       0       0       0       0       0       0
  2278 ;;      Locals:         0       0       3       0       0       0       0
  2279 ;;      Temps:          0       0       2       0       0       0       0
  2280 ;;      Totals:         0       0       5       0       0       0       0
  2281 ;;Total ram usage:        5 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:   13
  2284 ;; This function calls:
  2285 ;;		_escreveLinhaLCD
  2286 ;;		_getKBInput
  2287 ;;		_sprintf
  2288 ;; This function is called by:
  2289 ;;		_menu
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           	psect	text6
  2294  00112E                     __ptext6:
  2295                           	opt stack 0
  2296  00112E                     _defTempAlarme:
  2297                           	opt stack 16
  2298                           
  2299                           ;main.c: 236: char c1, c2;
  2300                           ;main.c: 237: char tmp_Alarme = 0;
  2301                           
  2302                           ;incstack = 0
  2303  00112E  0E00               	movlw	0
  2304  001130  0101               	movlb	1	; () banked
  2305  001132  6F4F               	movwf	defTempAlarme@tmp_Alarme& (0+255),b
  2306  001134                     
  2307                           ; BSR set to: 1
  2308                           ;main.c: 257: escreveLinhaLCD(128, "Introduza o alarme  ");
  2309                           
  2310                           ; BSR set to: 1
  2311  001134  0EAD               	movlw	low STR_17
  2312  001136  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2313  001138  0E7F               	movlw	high STR_17
  2314  00113A  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2315  00113C  0E80               	movlw	128
  2316  00113E  EC87  F00E         	call	_escreveLinhaLCD
  2317                           
  2318                           ;main.c: 258: escreveLinhaLCD(192, "Temp:    oC         ");
  2319  001142  0E83               	movlw	low STR_18
  2320  001144  0101               	movlb	1	; () banked
  2321  001146  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2322  001148  0E7F               	movlw	high STR_18
  2323  00114A  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2324  00114C  0EC0               	movlw	192
  2325  00114E  EC87  F00E         	call	_escreveLinhaLCD
  2326                           
  2327                           ;main.c: 260: c1 = getKBInput();
  2328  001152  EC47  F00C         	call	_getKBInput	;wreg free
  2329  001156  0101               	movlb	1	; () banked
  2330  001158  6F50               	movwf	defTempAlarme@c1& (0+255),b
  2331                           
  2332                           ; BSR set to: 1
  2333                           ;main.c: 261: sprintf(strLCD, "%c", c1);
  2334  00115A  0E00               	movlw	low _strLCD
  2335  00115C  6F36               	movwf	sprintf@sp& (0+255),b
  2336  00115E  0E01               	movlw	high _strLCD
  2337  001160  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  2338  001162  0EF8               	movlw	low STR_16
  2339  001164  6F38               	movwf	sprintf@f& (0+255),b
  2340  001166  0E7F               	movlw	high STR_16
  2341  001168  6F39               	movwf	(sprintf@f+1)& (0+255),b
  2342  00116A  C150  F13A         	movff	defTempAlarme@c1,?_sprintf+4
  2343  00116E  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  2344  001170  EC70  F000         	call	_sprintf	;wreg free
  2345                           
  2346                           ;main.c: 262: escreveLinhaLCD(192 + 6, strLCD);
  2347  001174  0E00               	movlw	low _strLCD
  2348  001176  0101               	movlb	1	; () banked
  2349  001178  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2350  00117A  0E01               	movlw	high _strLCD
  2351  00117C  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2352  00117E  0EC6               	movlw	198
  2353  001180  EC87  F00E         	call	_escreveLinhaLCD
  2354                           
  2355                           ;main.c: 263: c2 = getKBInput();
  2356  001184  EC47  F00C         	call	_getKBInput	;wreg free
  2357  001188  0101               	movlb	1	; () banked
  2358  00118A  6F51               	movwf	defTempAlarme@c2& (0+255),b
  2359                           
  2360                           ; BSR set to: 1
  2361                           ;main.c: 264: sprintf(strLCD, "%c", c2);
  2362  00118C  0E00               	movlw	low _strLCD
  2363  00118E  6F36               	movwf	sprintf@sp& (0+255),b
  2364  001190  0E01               	movlw	high _strLCD
  2365  001192  6F37               	movwf	(sprintf@sp+1)& (0+255),b
  2366  001194  0EF8               	movlw	low STR_16
  2367  001196  6F38               	movwf	sprintf@f& (0+255),b
  2368  001198  0E7F               	movlw	high STR_16
  2369  00119A  6F39               	movwf	(sprintf@f+1)& (0+255),b
  2370  00119C  C151  F13A         	movff	defTempAlarme@c2,?_sprintf+4
  2371  0011A0  6B3B               	clrf	(?_sprintf+5)& (0+255),b
  2372  0011A2  EC70  F000         	call	_sprintf	;wreg free
  2373                           
  2374                           ;main.c: 265: escreveLinhaLCD(192 + 7, strLCD);
  2375  0011A6  0E00               	movlw	low _strLCD
  2376  0011A8  0101               	movlb	1	; () banked
  2377  0011AA  6F2D               	movwf	escreveLinhaLCD@texto& (0+255),b
  2378  0011AC  0E01               	movlw	high _strLCD
  2379  0011AE  6F2E               	movwf	(escreveLinhaLCD@texto+1)& (0+255),b
  2380  0011B0  0EC7               	movlw	199
  2381  0011B2  EC87  F00E         	call	_escreveLinhaLCD
  2382                           
  2383                           ;main.c: 267: if (c1 == '*' || c1 == '#' || c2 == '*' || c2 == '#' || c1 == (0) || c2 ==
      +                           (0))
  2384  0011B6  0E2A               	movlw	42
  2385  0011B8  0101               	movlb	1	; () banked
  2386  0011BA  1950               	xorwf	defTempAlarme@c1& (0+255),w,b
  2387  0011BC  B4D8               	btfsc	status,2,c
  2388  0011BE  D012               	goto	u6630
  2389                           
  2390                           ; BSR set to: 1
  2391  0011C0  0E23               	movlw	35
  2392  0011C2  1950               	xorwf	defTempAlarme@c1& (0+255),w,b
  2393  0011C4  B4D8               	btfsc	status,2,c
  2394  0011C6  D00E               	goto	u6630
  2395                           
  2396                           ; BSR set to: 1
  2397  0011C8  0E2A               	movlw	42
  2398  0011CA  1951               	xorwf	defTempAlarme@c2& (0+255),w,b
  2399  0011CC  B4D8               	btfsc	status,2,c
  2400  0011CE  D00A               	goto	u6630
  2401                           
  2402                           ; BSR set to: 1
  2403  0011D0  0E23               	movlw	35
  2404  0011D2  1951               	xorwf	defTempAlarme@c2& (0+255),w,b
  2405  0011D4  B4D8               	btfsc	status,2,c
  2406  0011D6  D006               	goto	u6630
  2407                           
  2408                           ; BSR set to: 1
  2409  0011D8  5150               	movf	defTempAlarme@c1& (0+255),w,b
  2410  0011DA  B4D8               	btfsc	status,2,c
  2411  0011DC  D003               	goto	u6630
  2412                           
  2413                           ; BSR set to: 1
  2414  0011DE  5151               	movf	defTempAlarme@c2& (0+255),w,b
  2415  0011E0  A4D8               	btfss	status,2,c
  2416  0011E2  D002               	goto	l1012
  2417  0011E4                     u6630:
  2418                           
  2419                           ; BSR set to: 1
  2420                           ;main.c: 268: tmp_Alarme = 0;
  2421                           
  2422                           ; BSR set to: 1
  2423  0011E4  0E00               	movlw	0
  2424  0011E6  6F4F               	movwf	defTempAlarme@tmp_Alarme& (0+255),b
  2425  0011E8                     l1012:
  2426                           
  2427                           ; BSR set to: 1
  2428                           ;main.c: 270: c1 = c1 - '0';
  2429                           
  2430                           ; BSR set to: 1
  2431  0011E8  5150               	movf	defTempAlarme@c1& (0+255),w,b
  2432  0011EA  0FD0               	addlw	208
  2433  0011EC  6F50               	movwf	defTempAlarme@c1& (0+255),b
  2434                           
  2435                           ; BSR set to: 1
  2436                           ;main.c: 271: c2 = c2 - '0';
  2437  0011EE  5151               	movf	defTempAlarme@c2& (0+255),w,b
  2438  0011F0  0FD0               	addlw	208
  2439  0011F2  6F51               	movwf	defTempAlarme@c2& (0+255),b
  2440                           
  2441                           ; BSR set to: 1
  2442                           ;main.c: 272: tmp_Alarme = 10 * c1 + c2;
  2443  0011F4  5150               	movf	defTempAlarme@c1& (0+255),w,b
  2444  0011F6  0D0A               	mullw	10
  2445  0011F8  50F3               	movf	prodl,w,c
  2446  0011FA  2551               	addwf	defTempAlarme@c2& (0+255),w,b
  2447  0011FC  6F4F               	movwf	defTempAlarme@tmp_Alarme& (0+255),b
  2448                           
  2449                           ; BSR set to: 1
  2450                           ;main.c: 274: } while (tmp_Alarme < 10 || tmp_Alarme > 40);
  2451  0011FE  0E09               	movlw	9
  2452  001200  654F               	cpfsgt	defTempAlarme@tmp_Alarme& (0+255),b
  2453  001202  D798               	goto	l1011
  2454                           
  2455                           ; BSR set to: 1
  2456  001204  0E29               	movlw	41
  2457  001206  614F               	cpfslt	defTempAlarme@tmp_Alarme& (0+255),b
  2458  001208  D795               	goto	l1011
  2459                           
  2460                           ; BSR set to: 1
  2461                           ;main.c: 276: tempAlarme = tmp_Alarme;
  2462  00120A  C14F  F048         	movff	defTempAlarme@tmp_Alarme,_tempAlarme	;volatile
  2463                           
  2464                           ; BSR set to: 1
  2465                           ;main.c: 278: _delay((unsigned long)((500)*(6000000/4000.0)));
  2466  00120E  0E04               	movlw	4
  2467  001210  0101               	movlb	1	; () banked
  2468  001212  6F4E               	movwf	(??_defTempAlarme+1)& (0+255),b
  2469  001214  0ECF               	movlw	207
  2470  001216  6F4D               	movwf	??_defTempAlarme& (0+255),b
  2471  001218  0E01               	movlw	1
  2472  00121A                     u7437:
  2473  00121A  2EE8               	decfsz	wreg,f,c
  2474  00121C  D7FE               	bra	u7437
  2475  00121E  2F4D               	decfsz	??_defTempAlarme& (0+255),f,b
  2476  001220  D7FC               	bra	u7437
  2477  001222  2F4E               	decfsz	(??_defTempAlarme+1)& (0+255),f,b
  2478  001224  D7FA               	bra	u7437
  2479  001226  D000               	nop2	
  2480  001228  0012               	return		;funcret
  2481  00122A                     __end_of_defTempAlarme:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           prodh	equ	0xFF4
  2488                           prodl	equ	0xFF3
  2489                           intcon	equ	0xFF2
  2490                           postinc0	equ	0xFEE
  2491                           wreg	equ	0xFE8
  2492                           indf1	equ	0xFE7
  2493                           fsr1h	equ	0xFE2
  2494                           fsr1l	equ	0xFE1
  2495                           indf2	equ	0xFDF
  2496                           fsr2h	equ	0xFDA
  2497                           fsr2l	equ	0xFD9
  2498                           status	equ	0xFD8
  2499                           
  2500 ;; *************** function _sprintf *****************
  2501 ;; Defined at:
  2502 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;  sp              2   12[BANK1 ] PTR unsigned char 
  2505 ;;		 -> strLCD(42), strUSART(42), 
  2506 ;;  f               2   14[BANK1 ] PTR const unsigned char 
  2507 ;;		 -> STR_20(3), STR_19(3), STR_16(3), STR_13(4), 
  2508 ;;		 -> STR_12(4), STR_11(15), STR_10(15), STR_9(15), 
  2509 ;;		 -> STR_8(22), STR_7(22), STR_3(3), STR_1(23), 
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;  tmpval          4    0        struct .
  2512 ;;  width           2   32[BANK1 ] int 
  2513 ;;  val             2   30[BANK1 ] unsigned int 
  2514 ;;  len             2   28[BANK1 ] unsigned int 
  2515 ;;  ap              2   26[BANK1 ] PTR void [1]
  2516 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  2517 ;;  cp              2   22[BANK1 ] PTR const unsigned char 
  2518 ;;		 -> sprintf@c(1), 
  2519 ;;  c               1   34[BANK1 ] char 
  2520 ;;  flag            1   25[BANK1 ] unsigned char 
  2521 ;;  prec            1   24[BANK1 ] char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  2   12[BANK1 ] int 
  2524 ;; Registers used:
  2525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2531 ;;      Params:         0       0       6       0       0       0       0
  2532 ;;      Locals:         0       0      13       0       0       0       0
  2533 ;;      Temps:          0       0       4       0       0       0       0
  2534 ;;      Totals:         0       0      23       0       0       0       0
  2535 ;;Total ram usage:       23 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:   10
  2538 ;; This function calls:
  2539 ;;		___lwdiv
  2540 ;;		___lwmod
  2541 ;;		___wmul
  2542 ;;		_isdigit
  2543 ;; This function is called by:
  2544 ;;		_menu
  2545 ;;		_monitorizacao
  2546 ;;		_testeTeclado
  2547 ;;		_defTempAlarme
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text7
  2552  0000E0                     __ptext7:
  2553                           	opt stack 0
  2554  0000E0                     _sprintf:
  2555                           	opt stack 18
  2556                           
  2557                           ;doprnt.c: 494: va_list ap;
  2558                           ;doprnt.c: 499: signed char c;
  2559                           ;doprnt.c: 501: int width;
  2560                           ;doprnt.c: 506: signed char prec;
  2561                           ;doprnt.c: 508: unsigned char flag;
  2562                           ;doprnt.c: 523: union {
  2563                           ;doprnt.c: 524: unsigned long vd;
  2564                           ;doprnt.c: 525: double integ;
  2565                           ;doprnt.c: 526: } tmpval;
  2566                           ;doprnt.c: 528: unsigned int val;
  2567                           ;doprnt.c: 529: unsigned len;
  2568                           ;doprnt.c: 530: const char * cp;
  2569                           ;doprnt.c: 533: *ap = __va_start();
  2570                           
  2571                           ;incstack = 0
  2572  0000E0  0E3A               	movlw	low (?_sprintf+4)
  2573  0000E2  0101               	movlb	1	; () banked
  2574  0000E4  6F44               	movwf	sprintf@ap& (0+255),b
  2575  0000E6  0E01               	movlw	high (?_sprintf+4)
  2576  0000E8  6F45               	movwf	(sprintf@ap+1)& (0+255),b
  2577                           
  2578                           ;doprnt.c: 536: while(c = *f++) {
  2579  0000EA  D159               	goto	u6040
  2580  0000EC                     
  2581                           ; BSR set to: 1
  2582                           ;doprnt.c: 538: if(c != '%')
  2583                           
  2584                           ; BSR set to: 1
  2585  0000EC  0E25               	movlw	37
  2586  0000EE  194C               	xorwf	sprintf@c& (0+255),w,b
  2587  0000F0  B4D8               	btfsc	status,2,c
  2588  0000F2  D009               	goto	l1085
  2589                           
  2590                           ; BSR set to: 1
  2591                           ;doprnt.c: 540: {
  2592                           ;doprnt.c: 541: ((*sp++ = (c)));
  2593  0000F4  C136  FFD9         	movff	sprintf@sp,fsr2l
  2594  0000F8  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  2595  0000FC  C14C  FFDF         	movff	sprintf@c,indf2
  2596                           
  2597                           ; BSR set to: 1
  2598  000100  4B36               	infsnz	sprintf@sp& (0+255),f,b
  2599  000102  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  2600                           
  2601                           ;doprnt.c: 542: continue;
  2602  000104  D14C               	goto	u6040
  2603  000106                     l1085:
  2604                           
  2605                           ; BSR set to: 1
  2606                           ;doprnt.c: 543: }
  2607                           ;doprnt.c: 546: width = 0;
  2608                           
  2609                           ; BSR set to: 1
  2610  000106  0E00               	movlw	0
  2611  000108  6F4B               	movwf	(sprintf@width+1)& (0+255),b
  2612  00010A  0E00               	movlw	0
  2613  00010C  6F4A               	movwf	sprintf@width& (0+255),b
  2614                           
  2615                           ;doprnt.c: 548: flag = 0;
  2616  00010E  0E00               	movlw	0
  2617  000110  6F43               	movwf	sprintf@flag& (0+255),b
  2618                           
  2619                           ; BSR set to: 1
  2620                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2621  000112  C138  FFF6         	movff	sprintf@f,tblptrl
  2622  000116  C139  FFF7         	movff	sprintf@f+1,tblptrh
  2623  00011A                     	if	0	;tblptru may be non-zero
  2624  00011A                     	endif
  2625  00011A                     	if	0	;tblptru may be non-zero
  2626  00011A                     	endif
  2627  00011A  0008               	tblrd		*
  2628  00011C  50F5               	movf	tablat,w,c
  2629  00011E  EC2E  F00F         	call	_isdigit
  2630  000122  A0D8               	btfss	status,0,c
  2631  000124  D082               	goto	l1089
  2632                           
  2633                           ;doprnt.c: 598: width = 0;
  2634  000126  0E00               	movlw	0
  2635  000128  0101               	movlb	1	; () banked
  2636  00012A  6F4B               	movwf	(sprintf@width+1)& (0+255),b
  2637  00012C  0E00               	movlw	0
  2638  00012E  6F4A               	movwf	sprintf@width& (0+255),b
  2639  000130                     
  2640                           ;doprnt.c: 600: width *= 10;
  2641                           
  2642                           ; BSR set to: 1
  2643  000130  C14A  F12A         	movff	sprintf@width,___wmul@multiplier
  2644  000134  C14B  F12B         	movff	sprintf@width+1,___wmul@multiplier+1
  2645  000138  0E00               	movlw	0
  2646  00013A  0101               	movlb	1	; () banked
  2647  00013C  6F2D               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2648  00013E  0E0A               	movlw	10
  2649  000140  6F2C               	movwf	___wmul@multiplicand& (0+255),b
  2650  000142  ECF5  F00E         	call	___wmul	;wreg free
  2651  000146  C12A  F14A         	movff	?___wmul,sprintf@width
  2652  00014A  C12B  F14B         	movff	?___wmul+1,sprintf@width+1
  2653                           
  2654                           ;doprnt.c: 601: width += *f++ - '0';
  2655  00014E  0ED0               	movlw	208
  2656  000150  0101               	movlb	1	; () banked
  2657  000152  6F3C               	movwf	??_sprintf& (0+255),b
  2658  000154  0EFF               	movlw	255
  2659  000156  6F3D               	movwf	(??_sprintf+1)& (0+255),b
  2660  000158  C138  FFF6         	movff	sprintf@f,tblptrl
  2661  00015C  C139  FFF7         	movff	sprintf@f+1,tblptrh
  2662  000160                     	if	0	;tblptru may be non-zero
  2663  000160                     	endif
  2664  000160                     	if	0	;tblptru may be non-zero
  2665  000160                     	endif
  2666  000160  0008               	tblrd		*
  2667  000162  50F5               	movf	tablat,w,c
  2668  000164  6F3E               	movwf	(??_sprintf+2)& (0+255),b
  2669  000166  6B3F               	clrf	(??_sprintf+3)& (0+255),b
  2670  000168  513C               	movf	??_sprintf& (0+255),w,b
  2671  00016A  273E               	addwf	(??_sprintf+2)& (0+255),f,b
  2672  00016C  513D               	movf	(??_sprintf+1)& (0+255),w,b
  2673  00016E  233F               	addwfc	(??_sprintf+3)& (0+255),f,b
  2674  000170  513E               	movf	(??_sprintf+2)& (0+255),w,b
  2675  000172  274A               	addwf	sprintf@width& (0+255),f,b
  2676  000174  513F               	movf	(??_sprintf+3)& (0+255),w,b
  2677  000176  234B               	addwfc	(sprintf@width+1)& (0+255),f,b
  2678                           
  2679                           ; BSR set to: 1
  2680  000178  4B38               	infsnz	sprintf@f& (0+255),f,b
  2681  00017A  2B39               	incf	(sprintf@f+1)& (0+255),f,b
  2682                           
  2683                           ; BSR set to: 1
  2684                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2685  00017C  C138  FFF6         	movff	sprintf@f,tblptrl
  2686  000180  C139  FFF7         	movff	sprintf@f+1,tblptrh
  2687  000184                     	if	0	;tblptru may be non-zero
  2688  000184                     	endif
  2689  000184                     	if	0	;tblptru may be non-zero
  2690  000184                     	endif
  2691  000184  0008               	tblrd		*
  2692  000186  50F5               	movf	tablat,w,c
  2693  000188  EC2E  F00F         	call	_isdigit
  2694  00018C  A0D8               	btfss	status,0,c
  2695  00018E  D04D               	goto	l1089
  2696  000190  D7CF               	goto	l1087
  2697  000192                     
  2698                           ;doprnt.c: 757: if(width > len)
  2699  000192  0101               	movlb	1	; () banked
  2700  000194  514A               	movf	sprintf@width& (0+255),w,b
  2701  000196  5D46               	subwf	sprintf@len& (0+255),w,b
  2702  000198  514B               	movf	(sprintf@width+1)& (0+255),w,b
  2703  00019A  5947               	subwfb	(sprintf@len+1)& (0+255),w,b
  2704  00019C  B0D8               	btfsc	status,0,c
  2705  00019E  D005               	goto	l1096
  2706                           
  2707                           ; BSR set to: 1
  2708                           ;doprnt.c: 758: width -= len;
  2709  0001A0  5146               	movf	sprintf@len& (0+255),w,b
  2710  0001A2  5F4A               	subwf	sprintf@width& (0+255),f,b
  2711  0001A4  5147               	movf	(sprintf@len+1)& (0+255),w,b
  2712  0001A6  5B4B               	subwfb	(sprintf@width+1)& (0+255),f,b
  2713  0001A8  D00D               	goto	l1098
  2714  0001AA                     l1096:
  2715                           
  2716                           ; BSR set to: 1
  2717                           ;doprnt.c: 759: else
  2718                           ;doprnt.c: 760: width = 0;
  2719                           
  2720                           ; BSR set to: 1
  2721  0001AA  0E00               	movlw	0
  2722  0001AC  6F4B               	movwf	(sprintf@width+1)& (0+255),b
  2723  0001AE  0E00               	movlw	0
  2724  0001B0  6F4A               	movwf	sprintf@width& (0+255),b
  2725                           
  2726                           ; BSR set to: 1
  2727                           ;doprnt.c: 764: while(width--)
  2728  0001B2  D008               	goto	l1098
  2729  0001B4                     l5514:
  2730                           
  2731                           ; BSR set to: 1
  2732                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2733  0001B4  C136  FFD9         	movff	sprintf@sp,fsr2l
  2734  0001B8  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  2735  0001BC  0E20               	movlw	32
  2736  0001BE  6EDF               	movwf	indf2,c
  2737                           
  2738                           ; BSR set to: 1
  2739  0001C0  4B36               	infsnz	sprintf@sp& (0+255),f,b
  2740  0001C2  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  2741  0001C4                     l1098:
  2742                           
  2743                           ; BSR set to: 1
  2744                           
  2745                           ; BSR set to: 1
  2746  0001C4  074A               	decf	sprintf@width& (0+255),f,b
  2747  0001C6  A0D8               	btfss	status,0,c
  2748  0001C8  074B               	decf	(sprintf@width+1)& (0+255),f,b
  2749  0001CA  294A               	incf	sprintf@width& (0+255),w,b
  2750  0001CC  E1F3               	bnz	l5514
  2751  0001CE  294B               	incf	(sprintf@width+1)& (0+255),w,b
  2752  0001D0  B4D8               	btfsc	status,2,c
  2753  0001D2  D00F               	goto	l1101
  2754  0001D4  D7EF               	goto	l1099
  2755  0001D6                     l5520:
  2756                           
  2757                           ; BSR set to: 1
  2758                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2759  0001D6  C140  FFD9         	movff	sprintf@cp,fsr2l
  2760  0001DA  C141  FFDA         	movff	sprintf@cp+1,fsr2h
  2761  0001DE  C136  FFE1         	movff	sprintf@sp,fsr1l
  2762  0001E2  C137  FFE2         	movff	sprintf@sp+1,fsr1h
  2763  0001E6  CFDF FFE7          	movff	indf2,indf1
  2764                           
  2765                           ; BSR set to: 1
  2766  0001EA  4B40               	infsnz	sprintf@cp& (0+255),f,b
  2767  0001EC  2B41               	incf	(sprintf@cp+1)& (0+255),f,b
  2768                           
  2769                           ; BSR set to: 1
  2770  0001EE  4B36               	infsnz	sprintf@sp& (0+255),f,b
  2771  0001F0  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  2772  0001F2                     l1101:
  2773                           
  2774                           ; BSR set to: 1
  2775                           
  2776                           ; BSR set to: 1
  2777  0001F2  0746               	decf	sprintf@len& (0+255),f,b
  2778  0001F4  A0D8               	btfss	status,0,c
  2779  0001F6  0747               	decf	(sprintf@len+1)& (0+255),f,b
  2780  0001F8  2946               	incf	sprintf@len& (0+255),w,b
  2781  0001FA  E1ED               	bnz	l5520
  2782  0001FC  2947               	incf	(sprintf@len+1)& (0+255),w,b
  2783  0001FE  B4D8               	btfsc	status,2,c
  2784  000200  D0CE               	goto	u6040
  2785  000202  D7E9               	goto	l1102
  2786  000204                     
  2787                           ; BSR set to: 1
  2788                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2789                           
  2790                           ; BSR set to: 1
  2791  000204  C144  FFD9         	movff	sprintf@ap,fsr2l
  2792  000208  C145  FFDA         	movff	sprintf@ap+1,fsr2h
  2793  00020C  50DF               	movf	indf2,w,c
  2794  00020E  6F4C               	movwf	sprintf@c& (0+255),b
  2795                           
  2796                           ; BSR set to: 1
  2797  000210  0E02               	movlw	2
  2798  000212  2744               	addwf	sprintf@ap& (0+255),f,b
  2799  000214  0E00               	movlw	0
  2800  000216  2345               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2801  000218                     
  2802                           ; BSR set to: 1
  2803                           ;doprnt.c: 805: cp = (char *)&c;
  2804                           
  2805                           ; BSR set to: 1
  2806  000218  0E4C               	movlw	low sprintf@c
  2807  00021A  6F40               	movwf	sprintf@cp& (0+255),b
  2808  00021C  0E01               	movlw	high sprintf@c
  2809  00021E  6F41               	movwf	(sprintf@cp+1)& (0+255),b
  2810                           
  2811                           ; BSR set to: 1
  2812                           ;doprnt.c: 806: len = 1;
  2813  000220  0E00               	movlw	0
  2814  000222  6F47               	movwf	(sprintf@len+1)& (0+255),b
  2815  000224  0E01               	movlw	1
  2816  000226  6F46               	movwf	sprintf@len& (0+255),b
  2817                           
  2818                           ;doprnt.c: 807: goto dostring;
  2819  000228  D7B4               	goto	l1095
  2820  00022A                     l1089:
  2821                           
  2822                           ; BSR set to: 1
  2823  00022A  C138  FFF6         	movff	sprintf@f,tblptrl
  2824  00022E  C139  FFF7         	movff	sprintf@f+1,tblptrh
  2825  000232  0101               	movlb	1	; () banked
  2826  000234  4B38               	infsnz	sprintf@f& (0+255),f,b
  2827  000236  2B39               	incf	(sprintf@f+1)& (0+255),f,b
  2828  000238                     	if	0	;tblptru may be non-zero
  2829  000238                     	endif
  2830  000238                     	if	0	;tblptru may be non-zero
  2831  000238                     	endif
  2832  000238  0008               	tblrd		*
  2833  00023A  CFF5 F14C          	movff	tablat,sprintf@c
  2834  00023E  514C               	movf	sprintf@c& (0+255),w,b
  2835                           
  2836                           ; Switch size 1, requested type "space"
  2837                           ; Number of cases is 4, Range of values is 0 to 105
  2838                           ; switch strategies available:
  2839                           ; Name         Instructions Cycles
  2840                           ; simple_byte           13     7 (average)
  2841                           ;	Chosen strategy is simple_byte
  2842  000240  0A00               	xorlw	0	; case 0
  2843  000242  B4D8               	btfsc	status,2,c
  2844  000244  D0B8               	goto	u6050
  2845  000246  0A63               	xorlw	99	; case 99
  2846  000248  B4D8               	btfsc	status,2,c
  2847  00024A  D7DC               	goto	l1104
  2848  00024C  0A07               	xorlw	7	; case 100
  2849  00024E  B4D8               	btfsc	status,2,c
  2850  000250  D003               	goto	l1094
  2851  000252  0A0D               	xorlw	13	; case 105
  2852  000254  A4D8               	btfss	status,2,c
  2853  000256  D7E0               	goto	l1105
  2854  000258                     l1094:
  2855                           
  2856                           ;doprnt.c: 1253: {
  2857                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2858                           
  2859                           ; BSR set to: 1
  2860  000258  C144  FFD9         	movff	sprintf@ap,fsr2l
  2861  00025C  C145  FFDA         	movff	sprintf@ap+1,fsr2h
  2862  000260  CFDE F148          	movff	postinc2,sprintf@val
  2863  000264  CFDD F149          	movff	postdec2,sprintf@val+1
  2864  000268  0E02               	movlw	2
  2865  00026A  0101               	movlb	1	; () banked
  2866  00026C  2744               	addwf	sprintf@ap& (0+255),f,b
  2867  00026E  0E00               	movlw	0
  2868  000270  2345               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2869                           
  2870                           ; BSR set to: 1
  2871                           ;doprnt.c: 1261: if((int)val < 0) {
  2872  000272  AF49               	btfss	(sprintf@val+1)& (0+255),7,b
  2873  000274  D006               	goto	l1106
  2874                           
  2875                           ; BSR set to: 1
  2876                           ;doprnt.c: 1262: flag |= 0x03;
  2877  000276  0E03               	movlw	3
  2878  000278  1343               	iorwf	sprintf@flag& (0+255),f,b
  2879                           
  2880                           ; BSR set to: 1
  2881                           ;doprnt.c: 1263: val = -val;
  2882  00027A  6D48               	negf	sprintf@val& (0+255),b
  2883  00027C  1F49               	comf	(sprintf@val+1)& (0+255),f,b
  2884  00027E  B0D8               	btfsc	status,0,c
  2885  000280  2B49               	incf	(sprintf@val+1)& (0+255),f,b
  2886  000282                     l1106:
  2887                           
  2888                           ; BSR set to: 1
  2889                           ;doprnt.c: 1264: }
  2890                           ;doprnt.c: 1266: }
  2891                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2892                           
  2893                           ; BSR set to: 1
  2894  000282  0E01               	movlw	1
  2895  000284  6F4C               	movwf	sprintf@c& (0+255),b
  2896  000286                     l5552:
  2897                           
  2898                           ; BSR set to: 1
  2899  000286  0E05               	movlw	5
  2900  000288  194C               	xorwf	sprintf@c& (0+255),w,b
  2901  00028A  B4D8               	btfsc	status,2,c
  2902  00028C  D012               	goto	u5970
  2903                           
  2904                           ; BSR set to: 1
  2905                           ;doprnt.c: 1306: if(val < dpowers[c])
  2906                           
  2907                           ; BSR set to: 1
  2908                           
  2909                           ; BSR set to: 1
  2910  00028E  514C               	movf	sprintf@c& (0+255),w,b
  2911  000290  0D02               	mullw	2
  2912  000292  0EF5               	movlw	low _dpowers
  2913  000294  24F3               	addwf	prodl,w,c
  2914  000296  6EF6               	movwf	tblptrl,c
  2915  000298  0E7E               	movlw	high _dpowers
  2916  00029A  20F4               	addwfc	prodh,w,c
  2917  00029C  6EF7               	movwf	tblptrh,c
  2918  00029E                     	if	0	;There are less than 3 active tblptr bytes
  2919  00029E                     	endif
  2920  00029E  0009               	tblrd		*+
  2921  0002A0  50F5               	movf	tablat,w,c
  2922  0002A2  5D48               	subwf	sprintf@val& (0+255),w,b
  2923  0002A4  0009               	tblrd		*+
  2924  0002A6  50F5               	movf	tablat,w,c
  2925  0002A8  5949               	subwfb	(sprintf@val+1)& (0+255),w,b
  2926  0002AA  A0D8               	btfss	status,0,c
  2927  0002AC  D002               	goto	u5970
  2928                           
  2929                           ; BSR set to: 1
  2930                           
  2931                           ; BSR set to: 1
  2932                           
  2933                           ; BSR set to: 1
  2934                           ;doprnt.c: 1307: break;
  2935  0002AE  2B4C               	incf	sprintf@c& (0+255),f,b
  2936  0002B0  D7EA               	goto	l5552
  2937  0002B2                     u5970:
  2938                           
  2939                           ; BSR set to: 1
  2940                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2941                           
  2942                           ; BSR set to: 1
  2943  0002B2  514A               	movf	sprintf@width& (0+255),w,b
  2944  0002B4  114B               	iorwf	(sprintf@width+1)& (0+255),w,b
  2945  0002B6  B4D8               	btfsc	status,2,c
  2946  0002B8  D009               	goto	l1110
  2947                           
  2948                           ; BSR set to: 1
  2949  0002BA  C143  F13C         	movff	sprintf@flag,??_sprintf
  2950  0002BE  0E03               	movlw	3
  2951  0002C0  173C               	andwf	??_sprintf& (0+255),f,b
  2952  0002C2  B4D8               	btfsc	status,2,c
  2953  0002C4  D003               	goto	l1110
  2954                           
  2955                           ; BSR set to: 1
  2956                           ;doprnt.c: 1346: width--;
  2957  0002C6  074A               	decf	sprintf@width& (0+255),f,b
  2958  0002C8  A0D8               	btfss	status,0,c
  2959  0002CA  074B               	decf	(sprintf@width+1)& (0+255),f,b
  2960  0002CC                     l1110:
  2961                           
  2962                           ; BSR set to: 1
  2963                           ;doprnt.c: 1381: if(width > c)
  2964                           
  2965                           ; BSR set to: 1
  2966  0002CC  0E80               	movlw	128
  2967  0002CE  BF4C               	btfsc	sprintf@c& (0+255),7,b
  2968  0002D0  0E7F               	movlw	127
  2969  0002D2  6F3C               	movwf	??_sprintf& (0+255),b
  2970  0002D4  514A               	movf	sprintf@width& (0+255),w,b
  2971  0002D6  5D4C               	subwf	sprintf@c& (0+255),w,b
  2972  0002D8  514B               	movf	(sprintf@width+1)& (0+255),w,b
  2973  0002DA  0A80               	xorlw	128
  2974  0002DC  593C               	subwfb	??_sprintf& (0+255),w,b
  2975  0002DE  B0D8               	btfsc	status,0,c
  2976  0002E0  D007               	goto	l1111
  2977                           
  2978                           ; BSR set to: 1
  2979                           ;doprnt.c: 1382: width -= c;
  2980  0002E2  514C               	movf	sprintf@c& (0+255),w,b
  2981  0002E4  5F4A               	subwf	sprintf@width& (0+255),f,b
  2982  0002E6  0E00               	movlw	0
  2983  0002E8  BF4C               	btfsc	sprintf@c& (0+255),7,b
  2984  0002EA  0EFF               	movlw	255
  2985  0002EC  5B4B               	subwfb	(sprintf@width+1)& (0+255),f,b
  2986  0002EE  D004               	goto	l1112
  2987  0002F0                     l1111:
  2988                           
  2989                           ; BSR set to: 1
  2990                           ;doprnt.c: 1383: else
  2991                           ;doprnt.c: 1384: width = 0;
  2992                           
  2993                           ; BSR set to: 1
  2994  0002F0  0E00               	movlw	0
  2995  0002F2  6F4B               	movwf	(sprintf@width+1)& (0+255),b
  2996  0002F4  0E00               	movlw	0
  2997  0002F6  6F4A               	movwf	sprintf@width& (0+255),b
  2998  0002F8                     l1112:
  2999                           
  3000                           ; BSR set to: 1
  3001                           ;doprnt.c: 1422: {
  3002                           ;doprnt.c: 1424: if(width
  3003                           ;doprnt.c: 1428: )
  3004                           
  3005                           ; BSR set to: 1
  3006  0002F8  514A               	movf	sprintf@width& (0+255),w,b
  3007  0002FA  114B               	iorwf	(sprintf@width+1)& (0+255),w,b
  3008  0002FC  B4D8               	btfsc	status,2,c
  3009  0002FE  D00F               	goto	u6020
  3010  000300                     u6010:
  3011                           
  3012                           ; BSR set to: 1
  3013                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3014                           
  3015                           ; BSR set to: 1
  3016                           
  3017                           ;doprnt.c: 1429: do
  3018  000300  C136  FFD9         	movff	sprintf@sp,fsr2l
  3019  000304  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  3020  000308  0E20               	movlw	32
  3021  00030A  6EDF               	movwf	indf2,c
  3022                           
  3023                           ; BSR set to: 1
  3024  00030C  4B36               	infsnz	sprintf@sp& (0+255),f,b
  3025  00030E  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  3026                           
  3027                           ; BSR set to: 1
  3028                           ;doprnt.c: 1431: while(--width);
  3029  000310  074A               	decf	sprintf@width& (0+255),f,b
  3030  000312  A0D8               	btfss	status,0,c
  3031  000314  074B               	decf	(sprintf@width+1)& (0+255),f,b
  3032  000316  514A               	movf	sprintf@width& (0+255),w,b
  3033  000318  114B               	iorwf	(sprintf@width+1)& (0+255),w,b
  3034  00031A  A4D8               	btfss	status,2,c
  3035  00031C  D7F1               	goto	u6010
  3036  00031E                     u6020:
  3037                           
  3038                           ; BSR set to: 1
  3039                           ;doprnt.c: 1438: if(flag & 0x03)
  3040                           
  3041                           ; BSR set to: 1
  3042                           
  3043                           ; BSR set to: 1
  3044  00031E  C143  F13C         	movff	sprintf@flag,??_sprintf
  3045  000322  0E03               	movlw	3
  3046  000324  173C               	andwf	??_sprintf& (0+255),f,b
  3047  000326  B4D8               	btfsc	status,2,c
  3048  000328  D008               	goto	l1116
  3049                           
  3050                           ; BSR set to: 1
  3051                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3052  00032A  C136  FFD9         	movff	sprintf@sp,fsr2l
  3053  00032E  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  3054  000332  0E2D               	movlw	45
  3055  000334  6EDF               	movwf	indf2,c
  3056                           
  3057                           ; BSR set to: 1
  3058  000336  4B36               	infsnz	sprintf@sp& (0+255),f,b
  3059  000338  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  3060  00033A                     l1116:
  3061                           
  3062                           ; BSR set to: 1
  3063                           ;doprnt.c: 1469: }
  3064                           ;doprnt.c: 1472: prec = c;
  3065                           
  3066                           ; BSR set to: 1
  3067  00033A  C14C  F142         	movff	sprintf@c,sprintf@prec
  3068                           
  3069                           ;doprnt.c: 1474: while(prec--) {
  3070  00033E  D02B               	goto	l1117
  3071  000340                     
  3072                           ; BSR set to: 1
  3073                           ;doprnt.c: 1478: {
  3074                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3075                           
  3076                           ; BSR set to: 1
  3077  000340  5142               	movf	sprintf@prec& (0+255),w,b
  3078  000342  0D02               	mullw	2
  3079  000344  0EF5               	movlw	low _dpowers
  3080  000346  24F3               	addwf	prodl,w,c
  3081  000348  6EF6               	movwf	tblptrl,c
  3082  00034A  0E7E               	movlw	high _dpowers
  3083  00034C  20F4               	addwfc	prodh,w,c
  3084  00034E  6EF7               	movwf	tblptrh,c
  3085  000350                     	if	0	;There are less than 3 active tblptr bytes
  3086  000350                     	endif
  3087  000350  0009               	tblrd		*+
  3088  000352  CFF5 F12C          	movff	tablat,___lwdiv@divisor
  3089  000356  000A               	tblrd		*-
  3090  000358  CFF5 F12D          	movff	tablat,___lwdiv@divisor+1
  3091  00035C  C148  F12A         	movff	sprintf@val,___lwdiv@dividend
  3092  000360  C149  F12B         	movff	sprintf@val+1,___lwdiv@dividend+1
  3093  000364  ECA5  F00C         	call	___lwdiv	;wreg free
  3094  000368  C12A  F131         	movff	?___lwdiv,___lwmod@dividend
  3095  00036C  C12B  F132         	movff	?___lwdiv+1,___lwmod@dividend+1
  3096  000370  0E00               	movlw	0
  3097  000372  0101               	movlb	1	; () banked
  3098  000374  6F34               	movwf	(___lwmod@divisor+1)& (0+255),b
  3099  000376  0E0A               	movlw	10
  3100  000378  6F33               	movwf	___lwmod@divisor& (0+255),b
  3101  00037A  EC1B  F00D         	call	___lwmod	;wreg free
  3102  00037E  0101               	movlb	1	; () banked
  3103  000380  5131               	movf	?___lwmod& (0+255),w,b
  3104  000382  0F30               	addlw	48
  3105  000384  6F4C               	movwf	sprintf@c& (0+255),b
  3106                           
  3107                           ; BSR set to: 1
  3108                           ;doprnt.c: 1523: }
  3109                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3110  000386  C136  FFD9         	movff	sprintf@sp,fsr2l
  3111  00038A  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  3112  00038E  C14C  FFDF         	movff	sprintf@c,indf2
  3113                           
  3114                           ; BSR set to: 1
  3115  000392  4B36               	infsnz	sprintf@sp& (0+255),f,b
  3116  000394  2B37               	incf	(sprintf@sp+1)& (0+255),f,b
  3117  000396                     l1117:
  3118                           
  3119                           ; BSR set to: 1
  3120                           
  3121                           ; BSR set to: 1
  3122  000396  0742               	decf	sprintf@prec& (0+255),f,b
  3123  000398  2942               	incf	sprintf@prec& (0+255),w,b
  3124  00039A  A4D8               	btfss	status,2,c
  3125  00039C  D7D1               	goto	l1118
  3126  00039E                     u6040:
  3127                           
  3128                           ; BSR set to: 1
  3129                           
  3130                           ; BSR set to: 1
  3131                           
  3132                           ; BSR set to: 1
  3133  00039E  C138  FFF6         	movff	sprintf@f,tblptrl
  3134  0003A2  C139  FFF7         	movff	sprintf@f+1,tblptrh
  3135  0003A6  4B38               	infsnz	sprintf@f& (0+255),f,b
  3136  0003A8  2B39               	incf	(sprintf@f+1)& (0+255),f,b
  3137  0003AA                     	if	0	;tblptru may be non-zero
  3138  0003AA                     	endif
  3139  0003AA                     	if	0	;tblptru may be non-zero
  3140  0003AA                     	endif
  3141  0003AA  0008               	tblrd		*
  3142  0003AC  CFF5 F14C          	movff	tablat,sprintf@c
  3143  0003B0  514C               	movf	sprintf@c& (0+255),w,b
  3144  0003B2  A4D8               	btfss	status,2,c
  3145  0003B4  D69B               	goto	l1084
  3146  0003B6                     u6050:
  3147                           
  3148                           ;doprnt.c: 1538: *sp = 0;
  3149                           
  3150                           ; BSR set to: 1
  3151                           
  3152                           ;doprnt.c: 1525: }
  3153                           ;doprnt.c: 1533: }
  3154                           ;doprnt.c: 1535: alldone:
  3155                           
  3156                           ; BSR set to: 1
  3157  0003B6  C136  FFD9         	movff	sprintf@sp,fsr2l
  3158  0003BA  C137  FFDA         	movff	sprintf@sp+1,fsr2h
  3159  0003BE  0E00               	movlw	0
  3160  0003C0  6EDF               	movwf	indf2,c
  3161  0003C2  0012               	return	
  3162  0003C4                     __end_of_sprintf:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           intcon	equ	0xFF2
  3171                           postinc0	equ	0xFEE
  3172                           wreg	equ	0xFE8
  3173                           indf1	equ	0xFE7
  3174                           fsr1h	equ	0xFE2
  3175                           fsr1l	equ	0xFE1
  3176                           indf2	equ	0xFDF
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _isdigit *****************
  3184 ;; Defined at:
  3185 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  c               1    wreg     unsigned char 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  c               1    2[BANK1 ] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;		None               void
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3199 ;;      Params:         0       0       0       0       0       0       0
  3200 ;;      Locals:         0       0       2       0       0       0       0
  3201 ;;      Temps:          0       0       1       0       0       0       0
  3202 ;;      Totals:         0       0       3       0       0       0       0
  3203 ;;Total ram usage:        3 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    9
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_sprintf
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text8
  3214  001E5C                     __ptext8:
  3215                           	opt stack 0
  3216  001E5C                     _isdigit:
  3217                           	opt stack 18
  3218                           
  3219                           ;incstack = 0
  3220                           ;isdigit@c stored from wreg
  3221  001E5C  0101               	movlb	1	; () banked
  3222  001E5E  6F2C               	movwf	isdigit@c& (0+255),b
  3223  001E60  0E00               	movlw	0
  3224  001E62  0101               	movlb	1	; () banked
  3225  001E64  6F2B               	movwf	_isdigit$2575& (0+255),b
  3226                           
  3227                           ; BSR set to: 1
  3228  001E66  0E3A               	movlw	58
  3229  001E68  612C               	cpfslt	isdigit@c& (0+255),b
  3230  001E6A  D005               	goto	l1451
  3231                           
  3232                           ; BSR set to: 1
  3233  001E6C  0E2F               	movlw	47
  3234  001E6E  652C               	cpfsgt	isdigit@c& (0+255),b
  3235  001E70  D002               	goto	l1451
  3236                           
  3237                           ; BSR set to: 1
  3238  001E72  0E01               	movlw	1
  3239  001E74  6F2B               	movwf	_isdigit$2575& (0+255),b
  3240  001E76                     l1451:
  3241                           
  3242                           ; BSR set to: 1
  3243                           
  3244                           ; BSR set to: 1
  3245  001E76  C12B  F12A         	movff	_isdigit$2575,??_isdigit
  3246  001E7A  312A               	rrcf	??_isdigit& (0+255),w,b
  3247  001E7C  0012               	return	
  3248  001E7E                     __end_of_isdigit:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           indf1	equ	0xFE7
  3260                           fsr1h	equ	0xFE2
  3261                           fsr1l	equ	0xFE1
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           postdec2	equ	0xFDD
  3265                           fsr2h	equ	0xFDA
  3266                           fsr2l	equ	0xFD9
  3267                           status	equ	0xFD8
  3268                           
  3269 ;; *************** function ___wmul *****************
  3270 ;; Defined at:
  3271 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  multiplier      2    0[BANK1 ] unsigned int 
  3274 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  product         2    4[BANK1 ] unsigned int 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  2    0[BANK1 ] unsigned int 
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0, prodl, prodh
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3286 ;;      Params:         0       0       4       0       0       0       0
  3287 ;;      Locals:         0       0       2       0       0       0       0
  3288 ;;      Temps:          0       0       0       0       0       0       0
  3289 ;;      Totals:         0       0       6       0       0       0       0
  3290 ;;Total ram usage:        6 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    9
  3293 ;; This function calls:
  3294 ;;		Nothing
  3295 ;; This function is called by:
  3296 ;;		_sprintf
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text9
  3301  001DEA                     __ptext9:
  3302                           	opt stack 0
  3303  001DEA                     ___wmul:
  3304                           	opt stack 18
  3305                           
  3306                           ; BSR set to: 1
  3307                           ;incstack = 0
  3308  001DEA  0101               	movlb	1	; () banked
  3309  001DEC  512A               	movf	___wmul@multiplier& (0+255),w,b
  3310  001DEE  032C               	mulwf	___wmul@multiplicand& (0+255),b
  3311  001DF0  CFF3 F12E          	movff	prodl,___wmul@product
  3312  001DF4  CFF4 F12F          	movff	prodh,___wmul@product+1
  3313  001DF8  512A               	movf	___wmul@multiplier& (0+255),w,b
  3314  001DFA  032D               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3315  001DFC  50F3               	movf	prodl,w,c
  3316  001DFE  272F               	addwf	(___wmul@product+1)& (0+255),f,b
  3317  001E00  512B               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3318  001E02  032C               	mulwf	___wmul@multiplicand& (0+255),b
  3319  001E04  50F3               	movf	prodl,w,c
  3320  001E06  272F               	addwf	(___wmul@product+1)& (0+255),f,b
  3321                           
  3322                           ; BSR set to: 1
  3323  001E08  C12E  F12A         	movff	___wmul@product,?___wmul
  3324  001E0C  C12F  F12B         	movff	___wmul@product+1,?___wmul+1
  3325  001E10  0012               	return	
  3326  001E12                     __end_of___wmul:
  3327                           	opt stack 0
  3328                           tblptru	equ	0xFF8
  3329                           tblptrh	equ	0xFF7
  3330                           tblptrl	equ	0xFF6
  3331                           tablat	equ	0xFF5
  3332                           prodh	equ	0xFF4
  3333                           prodl	equ	0xFF3
  3334                           intcon	equ	0xFF2
  3335                           postinc0	equ	0xFEE
  3336                           wreg	equ	0xFE8
  3337                           indf1	equ	0xFE7
  3338                           fsr1h	equ	0xFE2
  3339                           fsr1l	equ	0xFE1
  3340                           indf2	equ	0xFDF
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           fsr2h	equ	0xFDA
  3344                           fsr2l	equ	0xFD9
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function ___lwmod *****************
  3348 ;; Defined at:
  3349 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  dividend        2    7[BANK1 ] unsigned int 
  3352 ;;  divisor         2    9[BANK1 ] unsigned int 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;  counter         1   11[BANK1 ] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  2    7[BANK1 ] unsigned int 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3364 ;;      Params:         0       0       4       0       0       0       0
  3365 ;;      Locals:         0       0       1       0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0
  3367 ;;      Totals:         0       0       5       0       0       0       0
  3368 ;;Total ram usage:        5 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    9
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_sprintf
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text10
  3379  001A36                     __ptext10:
  3380                           	opt stack 0
  3381  001A36                     ___lwmod:
  3382                           	opt stack 18
  3383                           
  3384                           ; BSR set to: 1
  3385                           ;incstack = 0
  3386  001A36  0101               	movlb	1	; () banked
  3387  001A38  5133               	movf	___lwmod@divisor& (0+255),w,b
  3388  001A3A  1134               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3389  001A3C  B4D8               	btfsc	status,2,c
  3390  001A3E  D018               	goto	l1545
  3391                           
  3392                           ; BSR set to: 1
  3393  001A40  0E01               	movlw	1
  3394  001A42  6F35               	movwf	___lwmod@counter& (0+255),b
  3395  001A44  D004               	goto	l1540
  3396  001A46                     
  3397                           ; BSR set to: 1
  3398                           
  3399                           ; BSR set to: 1
  3400  001A46  90D8               	bcf	status,0,c
  3401  001A48  3733               	rlcf	___lwmod@divisor& (0+255),f,b
  3402  001A4A  3734               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3403  001A4C  2B35               	incf	___lwmod@counter& (0+255),f,b
  3404  001A4E                     l1540:
  3405                           
  3406                           ; BSR set to: 1
  3407                           
  3408                           ; BSR set to: 1
  3409  001A4E  AF34               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3410  001A50  D7FA               	goto	l1541
  3411  001A52                     u5860:
  3412                           
  3413                           ; BSR set to: 1
  3414                           
  3415                           ; BSR set to: 1
  3416                           
  3417                           ; BSR set to: 1
  3418  001A52  5133               	movf	___lwmod@divisor& (0+255),w,b
  3419  001A54  5D31               	subwf	___lwmod@dividend& (0+255),w,b
  3420  001A56  5134               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3421  001A58  5932               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3422  001A5A  A0D8               	btfss	status,0,c
  3423  001A5C  D004               	goto	l1544
  3424                           
  3425                           ; BSR set to: 1
  3426  001A5E  5133               	movf	___lwmod@divisor& (0+255),w,b
  3427  001A60  5F31               	subwf	___lwmod@dividend& (0+255),f,b
  3428  001A62  5134               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3429  001A64  5B32               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3430  001A66                     l1544:
  3431                           
  3432                           ; BSR set to: 1
  3433                           
  3434                           ; BSR set to: 1
  3435  001A66  90D8               	bcf	status,0,c
  3436  001A68  3334               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3437  001A6A  3333               	rrcf	___lwmod@divisor& (0+255),f,b
  3438                           
  3439                           ; BSR set to: 1
  3440  001A6C  2F35               	decfsz	___lwmod@counter& (0+255),f,b
  3441  001A6E  D7F1               	goto	u5860
  3442  001A70                     l1545:
  3443                           
  3444                           ; BSR set to: 1
  3445                           
  3446                           ; BSR set to: 1
  3447  001A70  C131  F131         	movff	___lwmod@dividend,?___lwmod
  3448  001A74  C132  F132         	movff	___lwmod@dividend+1,?___lwmod+1
  3449                           
  3450                           ; BSR set to: 1
  3451  001A78  0012               	return		;funcret
  3452  001A7A                     __end_of___lwmod:
  3453                           	opt stack 0
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           intcon	equ	0xFF2
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           indf1	equ	0xFE7
  3464                           fsr1h	equ	0xFE2
  3465                           fsr1l	equ	0xFE1
  3466                           indf2	equ	0xFDF
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function ___lwdiv *****************
  3474 ;; Defined at:
  3475 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  dividend        2    0[BANK1 ] unsigned int 
  3478 ;;  divisor         2    2[BANK1 ] unsigned int 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  quotient        2    5[BANK1 ] unsigned int 
  3481 ;;  counter         1    4[BANK1 ] unsigned char 
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  2    0[BANK1 ] unsigned int 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3491 ;;      Params:         0       0       4       0       0       0       0
  3492 ;;      Locals:         0       0       3       0       0       0       0
  3493 ;;      Temps:          0       0       0       0       0       0       0
  3494 ;;      Totals:         0       0       7       0       0       0       0
  3495 ;;Total ram usage:        7 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    9
  3498 ;; This function calls:
  3499 ;;		Nothing
  3500 ;; This function is called by:
  3501 ;;		_sprintf
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text11
  3506  00194A                     __ptext11:
  3507                           	opt stack 0
  3508  00194A                     ___lwdiv:
  3509                           	opt stack 18
  3510                           
  3511                           ; BSR set to: 1
  3512                           ;incstack = 0
  3513  00194A  0E00               	movlw	0
  3514  00194C  0101               	movlb	1	; () banked
  3515  00194E  6F30               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3516  001950  0E00               	movlw	0
  3517  001952  6F2F               	movwf	___lwdiv@quotient& (0+255),b
  3518                           
  3519                           ; BSR set to: 1
  3520  001954  512C               	movf	___lwdiv@divisor& (0+255),w,b
  3521  001956  112D               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3522  001958  B4D8               	btfsc	status,2,c
  3523  00195A  D01C               	goto	l1535
  3524                           
  3525                           ; BSR set to: 1
  3526  00195C  0E01               	movlw	1
  3527  00195E  6F2E               	movwf	___lwdiv@counter& (0+255),b
  3528  001960  D004               	goto	l1530
  3529  001962                     
  3530                           ; BSR set to: 1
  3531                           
  3532                           ; BSR set to: 1
  3533  001962  90D8               	bcf	status,0,c
  3534  001964  372C               	rlcf	___lwdiv@divisor& (0+255),f,b
  3535  001966  372D               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3536  001968  2B2E               	incf	___lwdiv@counter& (0+255),f,b
  3537  00196A                     l1530:
  3538                           
  3539                           ; BSR set to: 1
  3540                           
  3541                           ; BSR set to: 1
  3542  00196A  AF2D               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3543  00196C  D7FA               	goto	l1531
  3544  00196E                     u5830:
  3545                           
  3546                           ; BSR set to: 1
  3547                           
  3548                           ; BSR set to: 1
  3549                           
  3550                           ; BSR set to: 1
  3551  00196E  90D8               	bcf	status,0,c
  3552  001970  372F               	rlcf	___lwdiv@quotient& (0+255),f,b
  3553  001972  3730               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3554                           
  3555                           ; BSR set to: 1
  3556  001974  512C               	movf	___lwdiv@divisor& (0+255),w,b
  3557  001976  5D2A               	subwf	___lwdiv@dividend& (0+255),w,b
  3558  001978  512D               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3559  00197A  592B               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3560  00197C  A0D8               	btfss	status,0,c
  3561  00197E  D005               	goto	l1534
  3562                           
  3563                           ; BSR set to: 1
  3564  001980  512C               	movf	___lwdiv@divisor& (0+255),w,b
  3565  001982  5F2A               	subwf	___lwdiv@dividend& (0+255),f,b
  3566  001984  512D               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3567  001986  5B2B               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3568                           
  3569                           ; BSR set to: 1
  3570  001988  812F               	bsf	___lwdiv@quotient& (0+255),0,b
  3571  00198A                     l1534:
  3572                           
  3573                           ; BSR set to: 1
  3574                           
  3575                           ; BSR set to: 1
  3576  00198A  90D8               	bcf	status,0,c
  3577  00198C  332D               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3578  00198E  332C               	rrcf	___lwdiv@divisor& (0+255),f,b
  3579                           
  3580                           ; BSR set to: 1
  3581  001990  2F2E               	decfsz	___lwdiv@counter& (0+255),f,b
  3582  001992  D7ED               	goto	u5830
  3583  001994                     l1535:
  3584                           
  3585                           ; BSR set to: 1
  3586                           
  3587                           ; BSR set to: 1
  3588  001994  C12F  F12A         	movff	___lwdiv@quotient,?___lwdiv
  3589  001998  C130  F12B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3590                           
  3591                           ; BSR set to: 1
  3592  00199C  0012               	return		;funcret
  3593  00199E                     __end_of___lwdiv:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           indf1	equ	0xFE7
  3605                           fsr1h	equ	0xFE2
  3606                           fsr1l	equ	0xFE1
  3607                           indf2	equ	0xFDF
  3608                           postinc2	equ	0xFDE
  3609                           postdec2	equ	0xFDD
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           status	equ	0xFD8
  3613                           
  3614 ;; *************** function _getKBInput *****************
  3615 ;; Defined at:
  3616 ;;		line 282 in file "main.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;		None
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      unsigned char 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3630 ;;      Params:         0       0       0       0       0       0       0
  3631 ;;      Locals:         0       0       0       0       0       0       0
  3632 ;;      Temps:          0       0       0       0       0       0       0
  3633 ;;      Totals:         0       0       0       0       0       0       0
  3634 ;;Total ram usage:        0 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    9
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_testeTeclado
  3641 ;;		_defTempAlarme
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text12
  3646  00188E                     __ptext12:
  3647                           	opt stack 0
  3648  00188E                     _getKBInput:
  3649                           	opt stack 19
  3650                           
  3651                           ; BSR set to: 1
  3652                           ;incstack = 0
  3653                           ;main.c: 284: do { LATBbits.LATB3 = 1; } while(0);
  3654  00188E  868A               	bsf	3978,3,c	;volatile
  3655  001890                     
  3656                           ;main.c: 288: if (LATBbits.LATB3 == 1 && WrEnFl == 0) {
  3657                           
  3658                           ;main.c: 286: do {
  3659  001890  A68A               	btfss	3978,3,c	;volatile
  3660  001892  D005               	goto	l1026
  3661  001894  5038               	movf	_WrEnFl,w,c	;volatile
  3662  001896  A4D8               	btfss	status,2,c
  3663  001898  D002               	goto	l1026
  3664                           
  3665                           ;main.c: 289: do { LATBbits.LATB3 = 0; } while(0);
  3666  00189A  968A               	bcf	3978,3,c	;volatile
  3667                           
  3668                           ;main.c: 290: do { LATBbits.LATB4 = 1; } while(0);
  3669  00189C  888A               	bsf	3978,4,c	;volatile
  3670  00189E                     l1026:
  3671                           
  3672                           ;main.c: 291: }
  3673                           ;main.c: 292: if (LATBbits.LATB4 == 1 && WrEnFl == 0) {
  3674  00189E  A88A               	btfss	3978,4,c	;volatile
  3675  0018A0  D005               	goto	l1031
  3676  0018A2  5038               	movf	_WrEnFl,w,c	;volatile
  3677  0018A4  A4D8               	btfss	status,2,c
  3678  0018A6  D002               	goto	l1031
  3679                           
  3680                           ;main.c: 293: do { LATBbits.LATB4 = 0; } while(0);
  3681  0018A8  988A               	bcf	3978,4,c	;volatile
  3682                           
  3683                           ;main.c: 294: do { LATBbits.LATB5 = 1; } while(0);
  3684  0018AA  8A8A               	bsf	3978,5,c	;volatile
  3685  0018AC                     l1031:
  3686                           
  3687                           ;main.c: 295: }
  3688                           ;main.c: 296: if (LATBbits.LATB5 == 1 && WrEnFl == 0) {
  3689  0018AC  AA8A               	btfss	3978,5,c	;volatile
  3690  0018AE  D005               	goto	l1036
  3691  0018B0  5038               	movf	_WrEnFl,w,c	;volatile
  3692  0018B2  A4D8               	btfss	status,2,c
  3693  0018B4  D002               	goto	l1036
  3694                           
  3695                           ;main.c: 297: do { LATBbits.LATB5 = 0; } while(0);
  3696  0018B6  9A8A               	bcf	3978,5,c	;volatile
  3697                           
  3698                           ;main.c: 298: do { LATBbits.LATB6 = 1; } while(0);
  3699  0018B8  8C8A               	bsf	3978,6,c	;volatile
  3700  0018BA                     l1036:
  3701                           
  3702                           ;main.c: 299: }
  3703                           ;main.c: 300: if (LATBbits.LATB6 == 1 && WrEnFl == 0) {
  3704  0018BA  AC8A               	btfss	3978,6,c	;volatile
  3705  0018BC  D005               	goto	l1041
  3706  0018BE  5038               	movf	_WrEnFl,w,c	;volatile
  3707  0018C0  A4D8               	btfss	status,2,c
  3708  0018C2  D002               	goto	l1041
  3709                           
  3710                           ;main.c: 301: do { LATBbits.LATB6 = 0; } while(0);
  3711  0018C4  9C8A               	bcf	3978,6,c	;volatile
  3712                           
  3713                           ;main.c: 302: do { LATBbits.LATB3 = 1; } while(0);
  3714  0018C6  868A               	bsf	3978,3,c	;volatile
  3715  0018C8                     l1041:
  3716                           
  3717                           ;main.c: 303: }
  3718                           ;main.c: 305: } while (WrEnFl == 0 && PORTAbits.RA1 != 0);
  3719  0018C8  5038               	movf	_WrEnFl,w,c	;volatile
  3720  0018CA  A4D8               	btfss	status,2,c
  3721  0018CC  D002               	goto	u6180
  3722  0018CE  B280               	btfsc	3968,1,c	;volatile
  3723  0018D0  D7DF               	goto	l1020
  3724  0018D2                     u6180:
  3725                           
  3726                           ;main.c: 306: WrEnFl = 0;
  3727  0018D2  0E00               	movlw	0
  3728  0018D4  6E38               	movwf	_WrEnFl,c	;volatile
  3729  0018D6  A081               	btfss	3969,0,c	;volatile
  3730  0018D8  B281               	btfsc	3969,1,c	;volatile
  3731  0018DA  D7FD               	goto	l1046
  3732  0018DC  B481               	btfsc	3969,2,c	;volatile
  3733  0018DE  D7FB               	goto	l1046
  3734                           
  3735                           ;main.c: 310: if (PORTAbits.RA1 == 0) {
  3736  0018E0  B280               	btfsc	3968,1,c	;volatile
  3737  0018E2  D002               	goto	l1048
  3738                           
  3739                           ;main.c: 311: return (0);
  3740  0018E4  0E00               	movlw	0
  3741  0018E6  0012               	return	
  3742  0018E8                     l1048:
  3743                           
  3744                           ;main.c: 312: }
  3745                           ;main.c: 314: return TeclaTMP;
  3746  0018E8  5042               	movf	_TeclaTMP,w,c	;volatile
  3747  0018EA  0012               	return	
  3748  0018EC                     __end_of_getKBInput:
  3749                           	opt stack 0
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           prodh	equ	0xFF4
  3755                           prodl	equ	0xFF3
  3756                           intcon	equ	0xFF2
  3757                           postinc0	equ	0xFEE
  3758                           wreg	equ	0xFE8
  3759                           indf1	equ	0xFE7
  3760                           fsr1h	equ	0xFE2
  3761                           fsr1l	equ	0xFE1
  3762                           indf2	equ	0xFDF
  3763                           postinc2	equ	0xFDE
  3764                           postdec2	equ	0xFDD
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _escreveLinhaLCD *****************
  3770 ;; Defined at:
  3771 ;;		line 104 in file "main.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;  linha           1    wreg     unsigned char 
  3774 ;;  texto           2    3[BANK1 ] PTR unsigned char 
  3775 ;;		 -> STR_18(21), STR_17(21), STR_15(21), STR_14(21), 
  3776 ;;		 -> STR_6(20), STR_5(22), STR_4(22), strLCD(42), 
  3777 ;;		 -> STR_2(20), 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  linha           1    5[BANK1 ] unsigned char 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3789 ;;      Params:         0       0       2       0       0       0       0
  3790 ;;      Locals:         0       0       1       0       0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0
  3792 ;;      Totals:         0       0       3       0       0       0       0
  3793 ;;Total ram usage:        3 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:   12
  3796 ;; This function calls:
  3797 ;;		_BusyXLCD
  3798 ;;		_WriteCmdXLCD
  3799 ;;		_putsXLCD
  3800 ;; This function is called by:
  3801 ;;		_menu
  3802 ;;		_monitorizacao
  3803 ;;		_testeTeclado
  3804 ;;		_defTempAlarme
  3805 ;;		_feedbackUSART
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text13
  3810  001D0E                     __ptext13:
  3811                           	opt stack 0
  3812  001D0E                     _escreveLinhaLCD:
  3813                           	opt stack 16
  3814                           
  3815                           ;incstack = 0
  3816                           ;escreveLinhaLCD@linha stored from wreg
  3817  001D0E  0101               	movlb	1	; () banked
  3818  001D10  6F2F               	movwf	escreveLinhaLCD@linha& (0+255),b
  3819  001D12                     
  3820                           ;main.c: 106: while (BusyXLCD());
  3821  001D12  EC1E  F00E         	call	_BusyXLCD	;wreg free
  3822  001D16  0900               	iorlw	0
  3823  001D18  A4D8               	btfss	status,2,c
  3824  001D1A  D7FB               	goto	l5610
  3825                           
  3826                           ;main.c: 107: WriteCmdXLCD(linha);
  3827  001D1C  0101               	movlb	1	; () banked
  3828  001D1E  512F               	movf	escreveLinhaLCD@linha& (0+255),w,b
  3829  001D20  EC5F  F00D         	call	_WriteCmdXLCD
  3830  001D24  EC1E  F00E         	call	_BusyXLCD	;wreg free
  3831  001D28  0900               	iorlw	0
  3832  001D2A  A4D8               	btfss	status,2,c
  3833  001D2C  D7FB               	goto	l944
  3834                           
  3835                           ;main.c: 109: putsXLCD(texto);
  3836  001D2E  C12D  F12B         	movff	escreveLinhaLCD@texto,putsXLCD@buffer
  3837  001D32  C12E  F12C         	movff	escreveLinhaLCD@texto+1,putsXLCD@buffer+1
  3838  001D36  EC76  F00C         	call	_putsXLCD	;wreg free
  3839  001D3A  0012               	return		;funcret
  3840  001D3C                     __end_of_escreveLinhaLCD:
  3841                           	opt stack 0
  3842                           tblptru	equ	0xFF8
  3843                           tblptrh	equ	0xFF7
  3844                           tblptrl	equ	0xFF6
  3845                           tablat	equ	0xFF5
  3846                           prodh	equ	0xFF4
  3847                           prodl	equ	0xFF3
  3848                           intcon	equ	0xFF2
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           indf1	equ	0xFE7
  3852                           fsr1h	equ	0xFE2
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _putsXLCD *****************
  3862 ;; Defined at:
  3863 ;;		line 302 in file "xlcd.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  buffer          2    1[BANK1 ] PTR unsigned char 
  3866 ;;		 -> STR_18(21), STR_17(21), STR_15(21), STR_14(21), 
  3867 ;;		 -> STR_6(20), STR_5(22), STR_4(22), strLCD(42), 
  3868 ;;		 -> STR_2(20), 
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;		None
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3880 ;;      Params:         0       0       2       0       0       0       0
  3881 ;;      Locals:         0       0       0       0       0       0       0
  3882 ;;      Temps:          0       0       0       0       0       0       0
  3883 ;;      Totals:         0       0       2       0       0       0       0
  3884 ;;Total ram usage:        2 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:   11
  3887 ;; This function calls:
  3888 ;;		_BusyXLCD
  3889 ;;		_WriteDataXLCD
  3890 ;; This function is called by:
  3891 ;;		_escreveLinhaLCD
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text14
  3896  0018EC                     __ptext14:
  3897                           	opt stack 0
  3898  0018EC                     _putsXLCD:
  3899                           	opt stack 16
  3900                           
  3901                           ;xlcd.c: 303: while (*buffer)
  3902                           
  3903                           ;incstack = 0
  3904  0018EC  D01A               	goto	l816
  3905  0018EE                     
  3906                           ;xlcd.c: 304: {
  3907                           ;xlcd.c: 305: while (BusyXLCD());
  3908  0018EE  EC1E  F00E         	call	_BusyXLCD	;wreg free
  3909  0018F2  0900               	iorlw	0
  3910  0018F4  A4D8               	btfss	status,2,c
  3911  0018F6  D7FB               	goto	l817
  3912                           
  3913                           ;xlcd.c: 306: WriteDataXLCD(*buffer);
  3914  0018F8  C12B  FFF6         	movff	putsXLCD@buffer,tblptrl
  3915  0018FC  C12C  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  3916  001900  6AF8               	clrf	tblptru,c
  3917  001902  0E05               	movlw	(high __ramtop+-1)
  3918  001904  64F7               	cpfsgt	tblptrh,c
  3919  001906  D003               	bra	u5697
  3920  001908  0008               	tblrd		*
  3921  00190A  50F5               	movf	tablat,w,c
  3922  00190C  D005               	bra	u5690
  3923  00190E                     u5697:
  3924  00190E  CFF6 FFE9          	movff	tblptrl,fsr0l
  3925  001912  CFF7 FFEA          	movff	tblptrh,fsr0h
  3926  001916  50EF               	movf	indf0,w,c
  3927  001918                     u5690:
  3928  001918  EC3D  F00D         	call	_WriteDataXLCD
  3929                           
  3930                           ;xlcd.c: 307: buffer++;
  3931  00191C  0101               	movlb	1	; () banked
  3932  00191E  4B2B               	infsnz	putsXLCD@buffer& (0+255),f,b
  3933  001920  2B2C               	incf	(putsXLCD@buffer+1)& (0+255),f,b
  3934  001922                     l816:
  3935                           
  3936                           ; BSR set to: 1
  3937  001922  C12B  FFF6         	movff	putsXLCD@buffer,tblptrl
  3938  001926  C12C  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  3939  00192A  6AF8               	clrf	tblptru,c
  3940  00192C  0E05               	movlw	(high __ramtop+-1)
  3941  00192E  64F7               	cpfsgt	tblptrh,c
  3942  001930  D003               	bra	u5707
  3943  001932  0008               	tblrd		*
  3944  001934  50F5               	movf	tablat,w,c
  3945  001936  D005               	bra	u5700
  3946  001938                     u5707:
  3947  001938  CFF6 FFE9          	movff	tblptrl,fsr0l
  3948  00193C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3949  001940  50EF               	movf	indf0,w,c
  3950  001942                     u5700:
  3951  001942  0900               	iorlw	0
  3952  001944  B4D8               	btfsc	status,2,c
  3953  001946  0012               	return	
  3954  001948  D7D2               	goto	l817
  3955  00194A                     __end_of_putsXLCD:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           indf0	equ	0xFEF
  3965                           postinc0	equ	0xFEE
  3966                           fsr0h	equ	0xFEA
  3967                           fsr0l	equ	0xFE9
  3968                           wreg	equ	0xFE8
  3969                           indf1	equ	0xFE7
  3970                           fsr1h	equ	0xFE2
  3971                           fsr1l	equ	0xFE1
  3972                           indf2	equ	0xFDF
  3973                           postinc2	equ	0xFDE
  3974                           postdec2	equ	0xFDD
  3975                           fsr2h	equ	0xFDA
  3976                           fsr2l	equ	0xFD9
  3977                           status	equ	0xFD8
  3978                           
  3979 ;; *************** function _WriteDataXLCD *****************
  3980 ;; Defined at:
  3981 ;;		line 598 in file "xlcd.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  data            1    wreg     unsigned char 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  data            1    0[BANK1 ] unsigned char 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      void 
  3988 ;; Registers used:
  3989 ;;		wreg, status,2, status,0, cstack
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3995 ;;      Params:         0       0       0       0       0       0       0
  3996 ;;      Locals:         0       0       1       0       0       0       0
  3997 ;;      Temps:          0       0       0       0       0       0       0
  3998 ;;      Totals:         0       0       1       0       0       0       0
  3999 ;;Total ram usage:        1 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:   10
  4002 ;; This function calls:
  4003 ;;		_DelayFor18TCY
  4004 ;; This function is called by:
  4005 ;;		_putsXLCD
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text15
  4010  001A7A                     __ptext15:
  4011                           	opt stack 0
  4012  001A7A                     _WriteDataXLCD:
  4013                           	opt stack 16
  4014                           
  4015                           ;incstack = 0
  4016                           ;WriteDataXLCD@data stored from wreg
  4017  001A7A  0101               	movlb	1	; () banked
  4018  001A7C  6F2A               	movwf	WriteDataXLCD@data& (0+255),b
  4019                           
  4020                           ;xlcd.c: 616: TRISD &= 0xf0;
  4021  001A7E  0EF0               	movlw	240
  4022  001A80  1695               	andwf	3989,f,c	;volatile
  4023                           
  4024                           ;xlcd.c: 617: PORTD &= 0xf0;
  4025  001A82  0EF0               	movlw	240
  4026  001A84  1683               	andwf	3971,f,c	;volatile
  4027                           
  4028                           ;xlcd.c: 618: PORTD |= ((data >> 4)&0x0f);
  4029  001A86  0101               	movlb	1	; () banked
  4030  001A88  392A               	swapf	WriteDataXLCD@data& (0+255),w,b
  4031  001A8A  0B0F               	andlw	15
  4032  001A8C  0B0F               	andlw	15
  4033  001A8E  1283               	iorwf	3971,f,c	;volatile
  4034                           
  4035                           ; BSR set to: 1
  4036                           ;xlcd.c: 620: LATDbits.LATD4 = 1;
  4037  001A90  888C               	bsf	3980,4,c	;volatile
  4038                           
  4039                           ; BSR set to: 1
  4040                           ;xlcd.c: 621: LATDbits.LATD5 = 0;
  4041  001A92  9A8C               	bcf	3980,5,c	;volatile
  4042                           
  4043                           ; BSR set to: 1
  4044                           ;xlcd.c: 622: DelayFor18TCY();
  4045  001A94  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  4046                           
  4047                           ;xlcd.c: 623: LATDbits.LATD6 = 1;
  4048  001A98  8C8C               	bsf	3980,6,c	;volatile
  4049                           
  4050                           ;xlcd.c: 624: DelayFor18TCY();
  4051  001A9A  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  4052                           
  4053                           ;xlcd.c: 625: LATDbits.LATD6 = 0;
  4054  001A9E  9C8C               	bcf	3980,6,c	;volatile
  4055                           
  4056                           ;xlcd.c: 630: PORTD &= 0xf0;
  4057  001AA0  0EF0               	movlw	240
  4058  001AA2  1683               	andwf	3971,f,c	;volatile
  4059                           
  4060                           ;xlcd.c: 631: PORTD |= (data & 0x0f);
  4061  001AA4  0101               	movlb	1	; () banked
  4062  001AA6  512A               	movf	WriteDataXLCD@data& (0+255),w,b
  4063  001AA8  0B0F               	andlw	15
  4064  001AAA  1283               	iorwf	3971,f,c	;volatile
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;xlcd.c: 633: DelayFor18TCY();
  4068  001AAC  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  4069                           
  4070                           ;xlcd.c: 634: LATDbits.LATD6 = 1;
  4071  001AB0  8C8C               	bsf	3980,6,c	;volatile
  4072                           
  4073                           ;xlcd.c: 635: DelayFor18TCY();
  4074  001AB2  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  4075                           
  4076                           ;xlcd.c: 636: LATDbits.LATD6 = 0;
  4077  001AB6  9C8C               	bcf	3980,6,c	;volatile
  4078                           
  4079                           ;xlcd.c: 640: TRISD |= 0x0f;
  4080  001AB8  0E0F               	movlw	15
  4081  001ABA  1295               	iorwf	3989,f,c	;volatile
  4082  001ABC  0012               	return	
  4083  001ABE                     __end_of_WriteDataXLCD:
  4084                           	opt stack 0
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           intcon	equ	0xFF2
  4092                           indf0	equ	0xFEF
  4093                           postinc0	equ	0xFEE
  4094                           fsr0h	equ	0xFEA
  4095                           fsr0l	equ	0xFE9
  4096                           wreg	equ	0xFE8
  4097                           indf1	equ	0xFE7
  4098                           fsr1h	equ	0xFE2
  4099                           fsr1l	equ	0xFE1
  4100                           indf2	equ	0xFDF
  4101                           postinc2	equ	0xFDE
  4102                           postdec2	equ	0xFDD
  4103                           fsr2h	equ	0xFDA
  4104                           fsr2l	equ	0xFD9
  4105                           status	equ	0xFD8
  4106                           
  4107 ;; *************** function _SYSTEM_Initialize *****************
  4108 ;; Defined at:
  4109 ;;		line 111 in file "mcc_generated_files/mcc.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;		None
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;		None
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  1    wreg      void 
  4116 ;; Registers used:
  4117 ;;		wreg, status,2, status,0, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4123 ;;      Params:         0       0       0       0       0       0       0
  4124 ;;      Locals:         0       0       0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0
  4126 ;;      Totals:         0       0       0       0       0       0       0
  4127 ;;Total ram usage:        0 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:   11
  4130 ;; This function calls:
  4131 ;;		_ADC_Initialize
  4132 ;;		_EPWM1_Initialize
  4133 ;;		_EUSART1_Initialize
  4134 ;;		_EXT_INT_Initialize
  4135 ;;		_I2C1_Initialize
  4136 ;;		_INTERRUPT_Initialize
  4137 ;;		_OSCILLATOR_Initialize
  4138 ;;		_PIN_MANAGER_Initialize
  4139 ;;		_TMR0_Initialize
  4140 ;;		_TMR2_Initialize
  4141 ;; This function is called by:
  4142 ;;		_main
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	text16
  4147  001DC0                     __ptext16:
  4148                           	opt stack 0
  4149  001DC0                     _SYSTEM_Initialize:
  4150                           	opt stack 19
  4151                           
  4152                           ;mcc.c: 114: INTERRUPT_Initialize();
  4153                           
  4154                           ;incstack = 0
  4155  001DC0  ECDB  F00F         	call	_INTERRUPT_Initialize	;wreg free
  4156                           
  4157                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4158  001DC4  ECF8  F00C         	call	_PIN_MANAGER_Initialize	;wreg free
  4159                           
  4160                           ;mcc.c: 116: OSCILLATOR_Initialize();
  4161  001DC8  ECFC  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  4162                           
  4163                           ;mcc.c: 117: I2C1_Initialize();
  4164  001DCC  EC57  F00E         	call	_I2C1_Initialize	;wreg free
  4165                           
  4166                           ;mcc.c: 118: ADC_Initialize();
  4167  001DD0  ECAF  F00F         	call	_ADC_Initialize	;wreg free
  4168                           
  4169                           ;mcc.c: 119: EPWM1_Initialize();
  4170  001DD4  EC83  F00F         	call	_EPWM1_Initialize	;wreg free
  4171                           
  4172                           ;mcc.c: 120: TMR2_Initialize();
  4173  001DD8  ECED  F00F         	call	_TMR2_Initialize	;wreg free
  4174                           
  4175                           ;mcc.c: 121: EXT_INT_Initialize();
  4176  001DDC  ECE2  F00D         	call	_EXT_INT_Initialize	;wreg free
  4177                           
  4178                           ;mcc.c: 122: TMR0_Initialize();
  4179  001DE0  EC01  F00E         	call	_TMR0_Initialize	;wreg free
  4180                           
  4181                           ;mcc.c: 123: EUSART1_Initialize();
  4182  001DE4  ECA2  F00F         	call	_EUSART1_Initialize	;wreg free
  4183  001DE8  0012               	return		;funcret
  4184  001DEA                     __end_of_SYSTEM_Initialize:
  4185                           	opt stack 0
  4186                           tblptru	equ	0xFF8
  4187                           tblptrh	equ	0xFF7
  4188                           tblptrl	equ	0xFF6
  4189                           tablat	equ	0xFF5
  4190                           prodh	equ	0xFF4
  4191                           prodl	equ	0xFF3
  4192                           intcon	equ	0xFF2
  4193                           indf0	equ	0xFEF
  4194                           postinc0	equ	0xFEE
  4195                           fsr0h	equ	0xFEA
  4196                           fsr0l	equ	0xFE9
  4197                           wreg	equ	0xFE8
  4198                           indf1	equ	0xFE7
  4199                           fsr1h	equ	0xFE2
  4200                           fsr1l	equ	0xFE1
  4201                           indf2	equ	0xFDF
  4202                           postinc2	equ	0xFDE
  4203                           postdec2	equ	0xFDD
  4204                           fsr2h	equ	0xFDA
  4205                           fsr2l	equ	0xFD9
  4206                           status	equ	0xFD8
  4207                           
  4208 ;; *************** function _TMR2_Initialize *****************
  4209 ;; Defined at:
  4210 ;;		line 61 in file "mcc_generated_files/tmr2.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;		None
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg, status,2
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4224 ;;      Params:         0       0       0       0       0       0       0
  4225 ;;      Locals:         0       0       0       0       0       0       0
  4226 ;;      Temps:          0       0       0       0       0       0       0
  4227 ;;      Totals:         0       0       0       0       0       0       0
  4228 ;;Total ram usage:        0 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    9
  4231 ;; This function calls:
  4232 ;;		Nothing
  4233 ;; This function is called by:
  4234 ;;		_SYSTEM_Initialize
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text17
  4239  001FDA                     __ptext17:
  4240                           	opt stack 0
  4241  001FDA                     _TMR2_Initialize:
  4242                           	opt stack 20
  4243                           
  4244                           ;tmr2.c: 66: T2CON = 0x02;
  4245                           
  4246                           ;incstack = 0
  4247  001FDA  0E02               	movlw	2
  4248  001FDC  6EBA               	movwf	4026,c	;volatile
  4249                           
  4250                           ;tmr2.c: 69: PR2 = 0x95;
  4251  001FDE  0E95               	movlw	149
  4252  001FE0  6EBB               	movwf	4027,c	;volatile
  4253                           
  4254                           ;tmr2.c: 72: TMR2 = 0x00;
  4255  001FE2  0E00               	movlw	0
  4256  001FE4  6EBC               	movwf	4028,c	;volatile
  4257                           
  4258                           ;tmr2.c: 75: PIR1bits.TMR2IF = 0;
  4259  001FE6  929E               	bcf	3998,1,c	;volatile
  4260  001FE8  0012               	return		;funcret
  4261  001FEA                     __end_of_TMR2_Initialize:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           prodh	equ	0xFF4
  4268                           prodl	equ	0xFF3
  4269                           intcon	equ	0xFF2
  4270                           indf0	equ	0xFEF
  4271                           postinc0	equ	0xFEE
  4272                           fsr0h	equ	0xFEA
  4273                           fsr0l	equ	0xFE9
  4274                           wreg	equ	0xFE8
  4275                           indf1	equ	0xFE7
  4276                           fsr1h	equ	0xFE2
  4277                           fsr1l	equ	0xFE1
  4278                           indf2	equ	0xFDF
  4279                           postinc2	equ	0xFDE
  4280                           postdec2	equ	0xFDD
  4281                           fsr2h	equ	0xFDA
  4282                           fsr2l	equ	0xFD9
  4283                           status	equ	0xFD8
  4284                           
  4285 ;; *************** function _TMR0_Initialize *****************
  4286 ;; Defined at:
  4287 ;;		line 71 in file "mcc_generated_files/tmr0.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;		None
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;		None
  4292 ;; Return value:  Size  Location     Type
  4293 ;;                  1    wreg      void 
  4294 ;; Registers used:
  4295 ;;		wreg, status,2, status,0, cstack
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4301 ;;      Params:         0       0       0       0       0       0       0
  4302 ;;      Locals:         0       0       0       0       0       0       0
  4303 ;;      Temps:          0       0       2       0       0       0       0
  4304 ;;      Totals:         0       0       2       0       0       0       0
  4305 ;;Total ram usage:        2 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; Hardware stack levels required when called:   10
  4308 ;; This function calls:
  4309 ;;		_TMR0_SetInterruptHandler
  4310 ;;		_TMR0_StartTimer
  4311 ;; This function is called by:
  4312 ;;		_SYSTEM_Initialize
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text18
  4317  001C02                     __ptext18:
  4318                           	opt stack 0
  4319  001C02                     _TMR0_Initialize:
  4320                           	opt stack 19
  4321                           
  4322                           ;tmr0.c: 75: T0CON = 0x11;
  4323                           
  4324                           ;incstack = 0
  4325  001C02  0E11               	movlw	17
  4326  001C04  6ED5               	movwf	4053,c	;volatile
  4327                           
  4328                           ;tmr0.c: 78: TMR0H = 0x48;
  4329  001C06  0E48               	movlw	72
  4330  001C08  6ED7               	movwf	4055,c	;volatile
  4331                           
  4332                           ;tmr0.c: 81: TMR0L = 0xE4;
  4333  001C0A  0EE4               	movlw	228
  4334  001C0C  6ED6               	movwf	4054,c	;volatile
  4335                           
  4336                           ;tmr0.c: 84: timer0ReloadVal = ( TMR0H << 8 ) | TMR0L;
  4337  001C0E  50D6               	movf	4054,w,c	;volatile
  4338  001C10  CFD7 F12C          	movff	4055,??_TMR0_Initialize	;volatile
  4339  001C14  0101               	movlb	1	; () banked
  4340  001C16  6B2D               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  4341  001C18  C12C  F12D         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  4342  001C1C  6B2C               	clrf	??_TMR0_Initialize& (0+255),b
  4343  001C1E  112C               	iorwf	??_TMR0_Initialize& (0+255),w,b
  4344  001C20  6E45               	movwf	_timer0ReloadVal,c	;volatile
  4345  001C22  512D               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  4346  001C24  6E46               	movwf	_timer0ReloadVal+1,c	;volatile
  4347                           
  4348                           ; BSR set to: 1
  4349                           ;tmr0.c: 87: INTCONbits.TMR0IF = 0;
  4350  001C26  94F2               	bcf	intcon,2,c	;volatile
  4351                           
  4352                           ; BSR set to: 1
  4353                           ;tmr0.c: 90: INTCONbits.TMR0IE = 1;
  4354  001C28  8AF2               	bsf	intcon,5,c	;volatile
  4355                           
  4356                           ; BSR set to: 1
  4357                           ;tmr0.c: 93: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  4358  001C2A  0E5E               	movlw	low _TMR0_DefaultInterruptHandler
  4359  001C2C  6F2A               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  4360  001C2E  0E20               	movlw	high _TMR0_DefaultInterruptHandler
  4361  001C30  6F2B               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4362  001C32  EC09  F010         	call	_TMR0_SetInterruptHandler	;wreg free
  4363                           
  4364                           ;tmr0.c: 96: TMR0_StartTimer();
  4365  001C36  EC25  F010         	call	_TMR0_StartTimer	;wreg free
  4366  001C3A  0012               	return		;funcret
  4367  001C3C                     __end_of_TMR0_Initialize:
  4368                           	opt stack 0
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           intcon	equ	0xFF2
  4376                           indf0	equ	0xFEF
  4377                           postinc0	equ	0xFEE
  4378                           fsr0h	equ	0xFEA
  4379                           fsr0l	equ	0xFE9
  4380                           wreg	equ	0xFE8
  4381                           indf1	equ	0xFE7
  4382                           fsr1h	equ	0xFE2
  4383                           fsr1l	equ	0xFE1
  4384                           indf2	equ	0xFDF
  4385                           postinc2	equ	0xFDE
  4386                           postdec2	equ	0xFDD
  4387                           fsr2h	equ	0xFDA
  4388                           fsr2l	equ	0xFD9
  4389                           status	equ	0xFD8
  4390                           
  4391 ;; *************** function _TMR0_StartTimer *****************
  4392 ;; Defined at:
  4393 ;;		line 99 in file "mcc_generated_files/tmr0.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;		None
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		None
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4407 ;;      Params:         0       0       0       0       0       0       0
  4408 ;;      Locals:         0       0       0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0
  4410 ;;      Totals:         0       0       0       0       0       0       0
  4411 ;;Total ram usage:        0 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    9
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_TMR0_Initialize
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text19
  4422  00204A                     __ptext19:
  4423                           	opt stack 0
  4424  00204A                     _TMR0_StartTimer:
  4425                           	opt stack 19
  4426                           
  4427                           ;tmr0.c: 101: T0CONbits.TMR0ON = 1;
  4428                           
  4429                           ;incstack = 0
  4430  00204A  8ED5               	bsf	4053,7,c	;volatile
  4431  00204C  0012               	return		;funcret
  4432  00204E                     __end_of_TMR0_StartTimer:
  4433                           	opt stack 0
  4434                           tblptru	equ	0xFF8
  4435                           tblptrh	equ	0xFF7
  4436                           tblptrl	equ	0xFF6
  4437                           tablat	equ	0xFF5
  4438                           prodh	equ	0xFF4
  4439                           prodl	equ	0xFF3
  4440                           intcon	equ	0xFF2
  4441                           indf0	equ	0xFEF
  4442                           postinc0	equ	0xFEE
  4443                           fsr0h	equ	0xFEA
  4444                           fsr0l	equ	0xFE9
  4445                           wreg	equ	0xFE8
  4446                           indf1	equ	0xFE7
  4447                           fsr1h	equ	0xFE2
  4448                           fsr1l	equ	0xFE1
  4449                           indf2	equ	0xFDF
  4450                           postinc2	equ	0xFDE
  4451                           postdec2	equ	0xFDD
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function _TMR0_SetInterruptHandler *****************
  4457 ;; Defined at:
  4458 ;;		line 188 in file "mcc_generated_files/tmr0.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4461 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;		None
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      void 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4473 ;;      Params:         0       0       2       0       0       0       0
  4474 ;;      Locals:         0       0       0       0       0       0       0
  4475 ;;      Temps:          0       0       0       0       0       0       0
  4476 ;;      Totals:         0       0       2       0       0       0       0
  4477 ;;Total ram usage:        2 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    9
  4480 ;; This function calls:
  4481 ;;		Nothing
  4482 ;; This function is called by:
  4483 ;;		_TMR0_Initialize
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text20
  4488  002012                     __ptext20:
  4489                           	opt stack 0
  4490  002012                     _TMR0_SetInterruptHandler:
  4491                           	opt stack 19
  4492                           
  4493                           ;tmr0.c: 189: TMR0_InterruptHandler = InterruptHandler;
  4494                           
  4495                           ;incstack = 0
  4496  002012  C12A  F0D4         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  4497  002016  C12B  F0D5         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  4498  00201A  0012               	return		;funcret
  4499  00201C                     __end_of_TMR0_SetInterruptHandler:
  4500                           	opt stack 0
  4501                           tblptru	equ	0xFF8
  4502                           tblptrh	equ	0xFF7
  4503                           tblptrl	equ	0xFF6
  4504                           tablat	equ	0xFF5
  4505                           prodh	equ	0xFF4
  4506                           prodl	equ	0xFF3
  4507                           intcon	equ	0xFF2
  4508                           indf0	equ	0xFEF
  4509                           postinc0	equ	0xFEE
  4510                           fsr0h	equ	0xFEA
  4511                           fsr0l	equ	0xFE9
  4512                           wreg	equ	0xFE8
  4513                           indf1	equ	0xFE7
  4514                           fsr1h	equ	0xFE2
  4515                           fsr1l	equ	0xFE1
  4516                           indf2	equ	0xFDF
  4517                           postinc2	equ	0xFDE
  4518                           postdec2	equ	0xFDD
  4519                           fsr2h	equ	0xFDA
  4520                           fsr2l	equ	0xFD9
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function _PIN_MANAGER_Initialize *****************
  4524 ;; Defined at:
  4525 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;		None
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      void 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         0       0       0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0
  4542 ;;      Totals:         0       0       0       0       0       0       0
  4543 ;;Total ram usage:        0 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    9
  4546 ;; This function calls:
  4547 ;;		Nothing
  4548 ;; This function is called by:
  4549 ;;		_SYSTEM_Initialize
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text21
  4554  0019F0                     __ptext21:
  4555                           	opt stack 0
  4556  0019F0                     _PIN_MANAGER_Initialize:
  4557                           	opt stack 20
  4558                           
  4559                           ;pin_manager.c: 57: LATE = 0x00;
  4560                           
  4561                           ;incstack = 0
  4562  0019F0  0E00               	movlw	0
  4563  0019F2  6E8D               	movwf	3981,c	;volatile
  4564                           
  4565                           ;pin_manager.c: 58: LATD = 0x00;
  4566  0019F4  0E00               	movlw	0
  4567  0019F6  6E8C               	movwf	3980,c	;volatile
  4568                           
  4569                           ;pin_manager.c: 59: LATA = 0x00;
  4570  0019F8  0E00               	movlw	0
  4571  0019FA  6E89               	movwf	3977,c	;volatile
  4572                           
  4573                           ;pin_manager.c: 60: LATB = 0x00;
  4574  0019FC  0E00               	movlw	0
  4575  0019FE  6E8A               	movwf	3978,c	;volatile
  4576                           
  4577                           ;pin_manager.c: 61: LATC = 0x00;
  4578  001A00  0E00               	movlw	0
  4579  001A02  6E8B               	movwf	3979,c	;volatile
  4580                           
  4581                           ;pin_manager.c: 66: TRISE = 0x07;
  4582  001A04  0E07               	movlw	7
  4583  001A06  6E96               	movwf	3990,c	;volatile
  4584                           
  4585                           ;pin_manager.c: 67: TRISA = 0xBF;
  4586  001A08  0EBF               	movlw	191
  4587  001A0A  6E92               	movwf	3986,c	;volatile
  4588                           
  4589                           ;pin_manager.c: 68: TRISB = 0x07;
  4590  001A0C  0E07               	movlw	7
  4591  001A0E  6E93               	movwf	3987,c	;volatile
  4592                           
  4593                           ;pin_manager.c: 69: TRISC = 0xBB;
  4594  001A10  0EBB               	movlw	187
  4595  001A12  6E94               	movwf	3988,c	;volatile
  4596                           
  4597                           ;pin_manager.c: 70: TRISD = 0x00;
  4598  001A14  0E00               	movlw	0
  4599  001A16  6E95               	movwf	3989,c	;volatile
  4600                           
  4601                           ;pin_manager.c: 75: ANSELC = 0x20;
  4602  001A18  0E20               	movlw	32
  4603  001A1A  010F               	movlb	15	; () banked
  4604  001A1C  6F3A               	movwf	58,b	;volatile
  4605                           
  4606                           ;pin_manager.c: 76: ANSELB = 0x00;
  4607  001A1E  0E00               	movlw	0
  4608  001A20  6F39               	movwf	57,b	;volatile
  4609                           
  4610                           ;pin_manager.c: 77: ANSELD = 0x00;
  4611  001A22  0E00               	movlw	0
  4612  001A24  6F3B               	movwf	59,b	;volatile
  4613                           
  4614                           ;pin_manager.c: 78: ANSELE = 0x07;
  4615  001A26  0E07               	movlw	7
  4616  001A28  6F3C               	movwf	60,b	;volatile
  4617                           
  4618                           ;pin_manager.c: 79: ANSELA = 0x28;
  4619  001A2A  0E28               	movlw	40
  4620  001A2C  6F38               	movwf	56,b	;volatile
  4621                           
  4622                           ;pin_manager.c: 84: WPUB = 0x00;
  4623  001A2E  0E00               	movlw	0
  4624  001A30  6E61               	movwf	3937,c	;volatile
  4625                           
  4626                           ; BSR set to: 15
  4627                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  4628  001A32  9EF1               	bcf	intcon2,7,c	;volatile
  4629                           
  4630                           ; BSR set to: 15
  4631  001A34  0012               	return		;funcret
  4632  001A36                     __end_of_PIN_MANAGER_Initialize:
  4633                           	opt stack 0
  4634                           tblptru	equ	0xFF8
  4635                           tblptrh	equ	0xFF7
  4636                           tblptrl	equ	0xFF6
  4637                           tablat	equ	0xFF5
  4638                           prodh	equ	0xFF4
  4639                           prodl	equ	0xFF3
  4640                           intcon	equ	0xFF2
  4641                           intcon2	equ	0xFF1
  4642                           indf0	equ	0xFEF
  4643                           postinc0	equ	0xFEE
  4644                           fsr0h	equ	0xFEA
  4645                           fsr0l	equ	0xFE9
  4646                           wreg	equ	0xFE8
  4647                           indf1	equ	0xFE7
  4648                           fsr1h	equ	0xFE2
  4649                           fsr1l	equ	0xFE1
  4650                           indf2	equ	0xFDF
  4651                           postinc2	equ	0xFDE
  4652                           postdec2	equ	0xFDD
  4653                           fsr2h	equ	0xFDA
  4654                           fsr2l	equ	0xFD9
  4655                           status	equ	0xFD8
  4656                           
  4657 ;; *************** function _OSCILLATOR_Initialize *****************
  4658 ;; Defined at:
  4659 ;;		line 126 in file "mcc_generated_files/mcc.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4673 ;;      Params:         0       0       0       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0
  4676 ;;      Totals:         0       0       0       0       0       0       0
  4677 ;;Total ram usage:        0 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    9
  4680 ;; This function calls:
  4681 ;;		Nothing
  4682 ;; This function is called by:
  4683 ;;		_SYSTEM_Initialize
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text22
  4688  001FF8                     __ptext22:
  4689                           	opt stack 0
  4690  001FF8                     _OSCILLATOR_Initialize:
  4691                           	opt stack 20
  4692                           
  4693                           ;mcc.c: 129: OSCCON = 0x50;
  4694                           
  4695                           ; BSR set to: 15
  4696                           ;incstack = 0
  4697  001FF8  0E50               	movlw	80
  4698  001FFA  6ED3               	movwf	4051,c	;volatile
  4699                           
  4700                           ;mcc.c: 131: OSCCON2 = 0x04;
  4701  001FFC  0E04               	movlw	4
  4702  001FFE  6ED2               	movwf	4050,c	;volatile
  4703                           
  4704                           ;mcc.c: 133: OSCTUNE = 0x00;
  4705  002000  0E00               	movlw	0
  4706  002002  6E9B               	movwf	3995,c	;volatile
  4707  002004  0012               	return		;funcret
  4708  002006                     __end_of_OSCILLATOR_Initialize:
  4709                           	opt stack 0
  4710                           tblptru	equ	0xFF8
  4711                           tblptrh	equ	0xFF7
  4712                           tblptrl	equ	0xFF6
  4713                           tablat	equ	0xFF5
  4714                           prodh	equ	0xFF4
  4715                           prodl	equ	0xFF3
  4716                           intcon	equ	0xFF2
  4717                           intcon2	equ	0xFF1
  4718                           indf0	equ	0xFEF
  4719                           postinc0	equ	0xFEE
  4720                           fsr0h	equ	0xFEA
  4721                           fsr0l	equ	0xFE9
  4722                           wreg	equ	0xFE8
  4723                           indf1	equ	0xFE7
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           postinc2	equ	0xFDE
  4728                           postdec2	equ	0xFDD
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _INTERRUPT_Initialize *****************
  4734 ;; Defined at:
  4735 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		None
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4749 ;;      Params:         0       0       0       0       0       0       0
  4750 ;;      Locals:         0       0       0       0       0       0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0
  4752 ;;      Totals:         0       0       0       0       0       0       0
  4753 ;;Total ram usage:        0 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    9
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_SYSTEM_Initialize
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text23
  4764  001FB6                     __ptext23:
  4765                           	opt stack 0
  4766  001FB6                     _INTERRUPT_Initialize:
  4767                           	opt stack 20
  4768                           
  4769                           ;interrupt_manager.c: 54: RCONbits.IPEN = 1;
  4770                           
  4771                           ;incstack = 0
  4772  001FB6  8ED0               	bsf	4048,7,c	;volatile
  4773                           
  4774                           ;interrupt_manager.c: 61: INTCON3bits.INT1IP = 1;
  4775  001FB8  8CF0               	bsf	intcon3,6,c	;volatile
  4776                           
  4777                           ;interrupt_manager.c: 64: INTCON3bits.INT2IP = 1;
  4778  001FBA  8EF0               	bsf	intcon3,7,c	;volatile
  4779                           
  4780                           ;interrupt_manager.c: 67: INTCON2bits.TMR0IP = 1;
  4781  001FBC  84F1               	bsf	intcon2,2,c	;volatile
  4782                           
  4783                           ;interrupt_manager.c: 70: IPR1bits.SSP1IP = 1;
  4784  001FBE  869F               	bsf	3999,3,c	;volatile
  4785                           
  4786                           ;interrupt_manager.c: 73: IPR2bits.BCL1IP = 1;
  4787  001FC0  86A2               	bsf	4002,3,c	;volatile
  4788                           
  4789                           ;interrupt_manager.c: 77: IPR1bits.ADIP = 0;
  4790  001FC2  9C9F               	bcf	3999,6,c	;volatile
  4791                           
  4792                           ;interrupt_manager.c: 80: IPR1bits.RC1IP = 0;
  4793  001FC4  9A9F               	bcf	3999,5,c	;volatile
  4794  001FC6  0012               	return		;funcret
  4795  001FC8                     __end_of_INTERRUPT_Initialize:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           intcon2	equ	0xFF1
  4805                           intcon3	equ	0xFF0
  4806                           indf0	equ	0xFEF
  4807                           postinc0	equ	0xFEE
  4808                           fsr0h	equ	0xFEA
  4809                           fsr0l	equ	0xFE9
  4810                           wreg	equ	0xFE8
  4811                           indf1	equ	0xFE7
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           indf2	equ	0xFDF
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           fsr2h	equ	0xFDA
  4818                           fsr2l	equ	0xFD9
  4819                           status	equ	0xFD8
  4820                           
  4821 ;; *************** function _I2C1_Initialize *****************
  4822 ;; Defined at:
  4823 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;		None
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, status,2, status,0
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4837 ;;      Params:         0       0       0       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0       0       0
  4840 ;;      Totals:         0       0       0       0       0       0       0
  4841 ;;Total ram usage:        0 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    9
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_SYSTEM_Initialize
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           	psect	text24
  4852  001CAE                     __ptext24:
  4853                           	opt stack 0
  4854  001CAE                     _I2C1_Initialize:
  4855                           	opt stack 20
  4856                           
  4857                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  4858                           
  4859                           ;incstack = 0
  4860  001CAE  0EA4               	movlw	low _i2c1_tr_queue
  4861  001CB0  0100               	movlb	0	; () banked
  4862  001CB2  6F62               	movwf	(_i2c1_object+2)& (0+255),b
  4863  001CB4  0E00               	movlw	high _i2c1_tr_queue
  4864  001CB6  6F63               	movwf	(_i2c1_object+3)& (0+255),b
  4865                           
  4866                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  4867  001CB8  0EA4               	movlw	low _i2c1_tr_queue
  4868  001CBA  6F60               	movwf	_i2c1_object& (0+255),b
  4869  001CBC  0E00               	movlw	high _i2c1_tr_queue
  4870  001CBE  6F61               	movwf	(_i2c1_object+1)& (0+255),b
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  4874  001CC0  8364               	bsf	(_i2c1_object+4)& (0+255),1,b
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  4878  001CC2  9164               	bcf	(_i2c1_object+4)& (0+255),0,b
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  4882  001CC4  0E00               	movlw	0
  4883  001CC6  6F66               	movwf	(_i2c1_object+6)& (0+255),b
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;i2c1.c: 208: SSP1STAT = 0x00;
  4887  001CC8  0E00               	movlw	0
  4888  001CCA  6EC7               	movwf	4039,c	;volatile
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  4892  001CCC  0E28               	movlw	40
  4893  001CCE  6EC6               	movwf	4038,c	;volatile
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  4897  001CD0  0E00               	movlw	0
  4898  001CD2  6ECB               	movwf	4043,c	;volatile
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;i2c1.c: 214: SSP1ADD = 0x03;
  4902  001CD4  0E03               	movlw	3
  4903  001CD6  6EC8               	movwf	4040,c	;volatile
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;i2c1.c: 218: PIR1bits.SSP1IF = 0;
  4907  001CD8  969E               	bcf	3998,3,c	;volatile
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;i2c1.c: 220: PIE1bits.SSP1IE = 1;
  4911  001CDA  869D               	bsf	3997,3,c	;volatile
  4912                           
  4913                           ; BSR set to: 0
  4914  001CDC  0012               	return		;funcret
  4915  001CDE                     __end_of_I2C1_Initialize:
  4916                           	opt stack 0
  4917                           tblptru	equ	0xFF8
  4918                           tblptrh	equ	0xFF7
  4919                           tblptrl	equ	0xFF6
  4920                           tablat	equ	0xFF5
  4921                           prodh	equ	0xFF4
  4922                           prodl	equ	0xFF3
  4923                           intcon	equ	0xFF2
  4924                           intcon2	equ	0xFF1
  4925                           intcon3	equ	0xFF0
  4926                           indf0	equ	0xFEF
  4927                           postinc0	equ	0xFEE
  4928                           fsr0h	equ	0xFEA
  4929                           fsr0l	equ	0xFE9
  4930                           wreg	equ	0xFE8
  4931                           indf1	equ	0xFE7
  4932                           fsr1h	equ	0xFE2
  4933                           fsr1l	equ	0xFE1
  4934                           indf2	equ	0xFDF
  4935                           postinc2	equ	0xFDE
  4936                           postdec2	equ	0xFDD
  4937                           fsr2h	equ	0xFDA
  4938                           fsr2l	equ	0xFD9
  4939                           status	equ	0xFD8
  4940                           
  4941 ;; *************** function _EXT_INT_Initialize *****************
  4942 ;; Defined at:
  4943 ;;		line 213 in file "mcc_generated_files/ext_int.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;		None
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;		None
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		wreg, status,2, status,0, cstack
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4957 ;;      Params:         0       0       0       0       0       0       0
  4958 ;;      Locals:         0       0       0       0       0       0       0
  4959 ;;      Temps:          0       0       0       0       0       0       0
  4960 ;;      Totals:         0       0       0       0       0       0       0
  4961 ;;Total ram usage:        0 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:   10
  4964 ;; This function calls:
  4965 ;;		_INT0_SetInterruptHandler
  4966 ;;		_INT1_SetInterruptHandler
  4967 ;;		_INT2_SetInterruptHandler
  4968 ;; This function is called by:
  4969 ;;		_SYSTEM_Initialize
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           	psect	text25
  4974  001BC4                     __ptext25:
  4975                           	opt stack 0
  4976  001BC4                     _EXT_INT_Initialize:
  4977                           	opt stack 19
  4978                           
  4979                           ;ext_int.c: 221: (INTCON3bits.INT1IF = 0);
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;incstack = 0
  4983  001BC4  90F0               	bcf	intcon3,0,c	;volatile
  4984                           
  4985                           ;ext_int.c: 222: (INTCON2bits.INTEDG1 = 1);
  4986  001BC6  8AF1               	bsf	intcon2,5,c	;volatile
  4987                           
  4988                           ;ext_int.c: 224: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  4989  001BC8  0E62               	movlw	low _INT1_DefaultInterruptHandler
  4990  001BCA  0101               	movlb	1	; () banked
  4991  001BCC  6F2A               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  4992  001BCE  0E20               	movlw	high _INT1_DefaultInterruptHandler
  4993  001BD0  6F2B               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4994  001BD2  EC13  F010         	call	_INT1_SetInterruptHandler	;wreg free
  4995                           
  4996                           ;ext_int.c: 225: (INTCON3bits.INT1IE = 1);
  4997  001BD6  86F0               	bsf	intcon3,3,c	;volatile
  4998                           
  4999                           ;ext_int.c: 234: (INTCON3bits.INT2IF = 0);
  5000  001BD8  92F0               	bcf	intcon3,1,c	;volatile
  5001                           
  5002                           ;ext_int.c: 235: (INTCON2bits.INTEDG2 = 1);
  5003  001BDA  88F1               	bsf	intcon2,4,c	;volatile
  5004                           
  5005                           ;ext_int.c: 237: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5006  001BDC  0E60               	movlw	low _INT2_DefaultInterruptHandler
  5007  001BDE  0101               	movlb	1	; () banked
  5008  001BE0  6F2A               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5009  001BE2  0E20               	movlw	high _INT2_DefaultInterruptHandler
  5010  001BE4  6F2B               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5011  001BE6  EC0E  F010         	call	_INT2_SetInterruptHandler	;wreg free
  5012                           
  5013                           ;ext_int.c: 238: (INTCON3bits.INT2IE = 1);
  5014  001BEA  88F0               	bsf	intcon3,4,c	;volatile
  5015                           
  5016                           ;ext_int.c: 247: (INTCONbits.INT0IF = 0);
  5017  001BEC  92F2               	bcf	intcon,1,c	;volatile
  5018                           
  5019                           ;ext_int.c: 248: (INTCON2bits.INTEDG0 = 1);
  5020  001BEE  8CF1               	bsf	intcon2,6,c	;volatile
  5021                           
  5022                           ;ext_int.c: 250: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  5023  001BF0  0E64               	movlw	low _INT0_DefaultInterruptHandler
  5024  001BF2  0101               	movlb	1	; () banked
  5025  001BF4  6F2A               	movwf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  5026  001BF6  0E20               	movlw	high _INT0_DefaultInterruptHandler
  5027  001BF8  6F2B               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5028  001BFA  EC18  F010         	call	_INT0_SetInterruptHandler	;wreg free
  5029                           
  5030                           ;ext_int.c: 251: (INTCONbits.INT0IE = 1);
  5031  001BFE  88F2               	bsf	intcon,4,c	;volatile
  5032  001C00  0012               	return		;funcret
  5033  001C02                     __end_of_EXT_INT_Initialize:
  5034                           	opt stack 0
  5035                           tblptru	equ	0xFF8
  5036                           tblptrh	equ	0xFF7
  5037                           tblptrl	equ	0xFF6
  5038                           tablat	equ	0xFF5
  5039                           prodh	equ	0xFF4
  5040                           prodl	equ	0xFF3
  5041                           intcon	equ	0xFF2
  5042                           intcon2	equ	0xFF1
  5043                           intcon3	equ	0xFF0
  5044                           indf0	equ	0xFEF
  5045                           postinc0	equ	0xFEE
  5046                           fsr0h	equ	0xFEA
  5047                           fsr0l	equ	0xFE9
  5048                           wreg	equ	0xFE8
  5049                           indf1	equ	0xFE7
  5050                           fsr1h	equ	0xFE2
  5051                           fsr1l	equ	0xFE1
  5052                           indf2	equ	0xFDF
  5053                           postinc2	equ	0xFDE
  5054                           postdec2	equ	0xFDD
  5055                           fsr2h	equ	0xFDA
  5056                           fsr2l	equ	0xFD9
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function _INT2_SetInterruptHandler *****************
  5060 ;; Defined at:
  5061 ;;		line 137 in file "mcc_generated_files/ext_int.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5064 ;;		 -> INT2_DefaultInterruptHandler(1), 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;		None
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      void 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5076 ;;      Params:         0       0       2       0       0       0       0
  5077 ;;      Locals:         0       0       0       0       0       0       0
  5078 ;;      Temps:          0       0       0       0       0       0       0
  5079 ;;      Totals:         0       0       2       0       0       0       0
  5080 ;;Total ram usage:        2 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    9
  5083 ;; This function calls:
  5084 ;;		Nothing
  5085 ;; This function is called by:
  5086 ;;		_EXT_INT_Initialize
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text26
  5091  00201C                     __ptext26:
  5092                           	opt stack 0
  5093  00201C                     _INT2_SetInterruptHandler:
  5094                           	opt stack 19
  5095                           
  5096                           ;ext_int.c: 138: INT2_InterruptHandler = InterruptHandler;
  5097                           
  5098                           ;incstack = 0
  5099  00201C  C12A  F0D8         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5100  002020  C12B  F0D9         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5101  002024  0012               	return		;funcret
  5102  002026                     __end_of_INT2_SetInterruptHandler:
  5103                           	opt stack 0
  5104                           tblptru	equ	0xFF8
  5105                           tblptrh	equ	0xFF7
  5106                           tblptrl	equ	0xFF6
  5107                           tablat	equ	0xFF5
  5108                           prodh	equ	0xFF4
  5109                           prodl	equ	0xFF3
  5110                           intcon	equ	0xFF2
  5111                           intcon2	equ	0xFF1
  5112                           intcon3	equ	0xFF0
  5113                           indf0	equ	0xFEF
  5114                           postinc0	equ	0xFEE
  5115                           fsr0h	equ	0xFEA
  5116                           fsr0l	equ	0xFE9
  5117                           wreg	equ	0xFE8
  5118                           indf1	equ	0xFE7
  5119                           fsr1h	equ	0xFE2
  5120                           fsr1l	equ	0xFE1
  5121                           indf2	equ	0xFDF
  5122                           postinc2	equ	0xFDE
  5123                           postdec2	equ	0xFDD
  5124                           fsr2h	equ	0xFDA
  5125                           fsr2l	equ	0xFD9
  5126                           status	equ	0xFD8
  5127                           
  5128 ;; *************** function _INT1_SetInterruptHandler *****************
  5129 ;; Defined at:
  5130 ;;		line 84 in file "mcc_generated_files/ext_int.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5133 ;;		 -> INT1_DefaultInterruptHandler(1), 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;		None
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      void 
  5138 ;; Registers used:
  5139 ;;		wreg, status,2, status,0
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5145 ;;      Params:         0       0       2       0       0       0       0
  5146 ;;      Locals:         0       0       0       0       0       0       0
  5147 ;;      Temps:          0       0       0       0       0       0       0
  5148 ;;      Totals:         0       0       2       0       0       0       0
  5149 ;;Total ram usage:        2 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:    9
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		_EXT_INT_Initialize
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           	psect	text27
  5160  002026                     __ptext27:
  5161                           	opt stack 0
  5162  002026                     _INT1_SetInterruptHandler:
  5163                           	opt stack 19
  5164                           
  5165                           ;ext_int.c: 85: INT1_InterruptHandler = InterruptHandler;
  5166                           
  5167                           ;incstack = 0
  5168  002026  C12A  F0DA         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5169  00202A  C12B  F0DB         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5170  00202E  0012               	return		;funcret
  5171  002030                     __end_of_INT1_SetInterruptHandler:
  5172                           	opt stack 0
  5173                           tblptru	equ	0xFF8
  5174                           tblptrh	equ	0xFF7
  5175                           tblptrl	equ	0xFF6
  5176                           tablat	equ	0xFF5
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           intcon	equ	0xFF2
  5180                           intcon2	equ	0xFF1
  5181                           intcon3	equ	0xFF0
  5182                           indf0	equ	0xFEF
  5183                           postinc0	equ	0xFEE
  5184                           fsr0h	equ	0xFEA
  5185                           fsr0l	equ	0xFE9
  5186                           wreg	equ	0xFE8
  5187                           indf1	equ	0xFE7
  5188                           fsr1h	equ	0xFE2
  5189                           fsr1l	equ	0xFE1
  5190                           indf2	equ	0xFDF
  5191                           postinc2	equ	0xFDE
  5192                           postdec2	equ	0xFDD
  5193                           fsr2h	equ	0xFDA
  5194                           fsr2l	equ	0xFD9
  5195                           status	equ	0xFD8
  5196                           
  5197 ;; *************** function _INT0_SetInterruptHandler *****************
  5198 ;; Defined at:
  5199 ;;		line 190 in file "mcc_generated_files/ext_int.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5202 ;;		 -> INT0_DefaultInterruptHandler(1), 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;		None
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, status,2, status,0
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5214 ;;      Params:         0       0       2       0       0       0       0
  5215 ;;      Locals:         0       0       0       0       0       0       0
  5216 ;;      Temps:          0       0       0       0       0       0       0
  5217 ;;      Totals:         0       0       2       0       0       0       0
  5218 ;;Total ram usage:        2 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    9
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		_EXT_INT_Initialize
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           	psect	text28
  5229  002030                     __ptext28:
  5230                           	opt stack 0
  5231  002030                     _INT0_SetInterruptHandler:
  5232                           	opt stack 19
  5233                           
  5234                           ;ext_int.c: 191: INT0_InterruptHandler = InterruptHandler;
  5235                           
  5236                           ;incstack = 0
  5237  002030  C12A  F0D6         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  5238  002034  C12B  F0D7         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  5239  002038  0012               	return		;funcret
  5240  00203A                     __end_of_INT0_SetInterruptHandler:
  5241                           	opt stack 0
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           prodh	equ	0xFF4
  5247                           prodl	equ	0xFF3
  5248                           intcon	equ	0xFF2
  5249                           intcon2	equ	0xFF1
  5250                           intcon3	equ	0xFF0
  5251                           indf0	equ	0xFEF
  5252                           postinc0	equ	0xFEE
  5253                           fsr0h	equ	0xFEA
  5254                           fsr0l	equ	0xFE9
  5255                           wreg	equ	0xFE8
  5256                           indf1	equ	0xFE7
  5257                           fsr1h	equ	0xFE2
  5258                           fsr1l	equ	0xFE1
  5259                           indf2	equ	0xFDF
  5260                           postinc2	equ	0xFDE
  5261                           postdec2	equ	0xFDD
  5262                           fsr2h	equ	0xFDA
  5263                           fsr2l	equ	0xFD9
  5264                           status	equ	0xFD8
  5265                           
  5266 ;; *************** function _EUSART1_Initialize *****************
  5267 ;; Defined at:
  5268 ;;		line 64 in file "mcc_generated_files/eusart1.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  1    wreg      void 
  5275 ;; Registers used:
  5276 ;;		wreg, status,2
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5282 ;;      Params:         0       0       0       0       0       0       0
  5283 ;;      Locals:         0       0       0       0       0       0       0
  5284 ;;      Temps:          0       0       0       0       0       0       0
  5285 ;;      Totals:         0       0       0       0       0       0       0
  5286 ;;Total ram usage:        0 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    9
  5289 ;; This function calls:
  5290 ;;		Nothing
  5291 ;; This function is called by:
  5292 ;;		_SYSTEM_Initialize
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           	psect	text29
  5297  001F44                     __ptext29:
  5298                           	opt stack 0
  5299  001F44                     _EUSART1_Initialize:
  5300                           	opt stack 20
  5301                           
  5302                           ;eusart1.c: 66: PIE1bits.RC1IE = 0;
  5303                           
  5304                           ;incstack = 0
  5305  001F44  9A9D               	bcf	3997,5,c	;volatile
  5306                           
  5307                           ;eusart1.c: 71: BAUDCON1 = 0x08;
  5308  001F46  0E08               	movlw	8
  5309  001F48  6EB8               	movwf	4024,c	;volatile
  5310                           
  5311                           ;eusart1.c: 74: RCSTA1 = 0x90;
  5312  001F4A  0E90               	movlw	144
  5313  001F4C  6EAB               	movwf	4011,c	;volatile
  5314                           
  5315                           ;eusart1.c: 77: TXSTA1 = 0x24;
  5316  001F4E  0E24               	movlw	36
  5317  001F50  6EAC               	movwf	4012,c	;volatile
  5318                           
  5319                           ;eusart1.c: 80: SPBRG1 = 0x9B;
  5320  001F52  0E9B               	movlw	155
  5321  001F54  6EAF               	movwf	4015,c	;volatile
  5322                           
  5323                           ;eusart1.c: 83: SPBRGH1 = 0x00;
  5324  001F56  0E00               	movlw	0
  5325  001F58  6EB0               	movwf	4016,c	;volatile
  5326                           
  5327                           ;eusart1.c: 86: PIE1bits.RC1IE = 1;
  5328  001F5A  8A9D               	bsf	3997,5,c	;volatile
  5329  001F5C  0012               	return		;funcret
  5330  001F5E                     __end_of_EUSART1_Initialize:
  5331                           	opt stack 0
  5332                           tblptru	equ	0xFF8
  5333                           tblptrh	equ	0xFF7
  5334                           tblptrl	equ	0xFF6
  5335                           tablat	equ	0xFF5
  5336                           prodh	equ	0xFF4
  5337                           prodl	equ	0xFF3
  5338                           intcon	equ	0xFF2
  5339                           intcon2	equ	0xFF1
  5340                           intcon3	equ	0xFF0
  5341                           indf0	equ	0xFEF
  5342                           postinc0	equ	0xFEE
  5343                           fsr0h	equ	0xFEA
  5344                           fsr0l	equ	0xFE9
  5345                           wreg	equ	0xFE8
  5346                           indf1	equ	0xFE7
  5347                           fsr1h	equ	0xFE2
  5348                           fsr1l	equ	0xFE1
  5349                           indf2	equ	0xFDF
  5350                           postinc2	equ	0xFDE
  5351                           postdec2	equ	0xFDD
  5352                           fsr2h	equ	0xFDA
  5353                           fsr2l	equ	0xFD9
  5354                           status	equ	0xFD8
  5355                           
  5356 ;; *************** function _EPWM1_Initialize *****************
  5357 ;; Defined at:
  5358 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;		None
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  1    wreg      void 
  5365 ;; Registers used:
  5366 ;;		wreg, status,2
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5372 ;;      Params:         0       0       0       0       0       0       0
  5373 ;;      Locals:         0       0       0       0       0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0
  5375 ;;      Totals:         0       0       0       0       0       0       0
  5376 ;;Total ram usage:        0 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    9
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_SYSTEM_Initialize
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text30
  5387  001F06                     __ptext30:
  5388                           	opt stack 0
  5389  001F06                     _EPWM1_Initialize:
  5390                           	opt stack 20
  5391                           
  5392                           ;epwm1.c: 68: CCP1CON = 0x2C;
  5393                           
  5394                           ;incstack = 0
  5395  001F06  0E2C               	movlw	44
  5396  001F08  6EBD               	movwf	4029,c	;volatile
  5397                           
  5398                           ;epwm1.c: 71: ECCP1AS = 0x00;
  5399  001F0A  0E00               	movlw	0
  5400  001F0C  6EB6               	movwf	4022,c	;volatile
  5401                           
  5402                           ;epwm1.c: 74: PWM1CON = 0x80;
  5403  001F0E  0E80               	movlw	128
  5404  001F10  6EB7               	movwf	4023,c	;volatile
  5405                           
  5406                           ;epwm1.c: 77: PSTR1CON = 0x01;
  5407  001F12  0E01               	movlw	1
  5408  001F14  6EB9               	movwf	4025,c	;volatile
  5409                           
  5410                           ;epwm1.c: 80: CCPR1L = 0x12;
  5411  001F16  0E12               	movlw	18
  5412  001F18  6EBE               	movwf	4030,c	;volatile
  5413                           
  5414                           ;epwm1.c: 83: CCPR1H = 0x00;
  5415  001F1A  0E00               	movlw	0
  5416  001F1C  6EBF               	movwf	4031,c	;volatile
  5417                           
  5418                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x0;
  5419  001F1E  0EFC               	movlw	-4
  5420  001F20  010F               	movlb	15	; () banked
  5421  001F22  1749               	andwf	73,f,b	;volatile
  5422                           
  5423                           ; BSR set to: 15
  5424  001F24  0012               	return		;funcret
  5425  001F26                     __end_of_EPWM1_Initialize:
  5426                           	opt stack 0
  5427                           tblptru	equ	0xFF8
  5428                           tblptrh	equ	0xFF7
  5429                           tblptrl	equ	0xFF6
  5430                           tablat	equ	0xFF5
  5431                           prodh	equ	0xFF4
  5432                           prodl	equ	0xFF3
  5433                           intcon	equ	0xFF2
  5434                           intcon2	equ	0xFF1
  5435                           intcon3	equ	0xFF0
  5436                           indf0	equ	0xFEF
  5437                           postinc0	equ	0xFEE
  5438                           fsr0h	equ	0xFEA
  5439                           fsr0l	equ	0xFE9
  5440                           wreg	equ	0xFE8
  5441                           indf1	equ	0xFE7
  5442                           fsr1h	equ	0xFE2
  5443                           fsr1l	equ	0xFE1
  5444                           indf2	equ	0xFDF
  5445                           postinc2	equ	0xFDE
  5446                           postdec2	equ	0xFDD
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function _ADC_Initialize *****************
  5452 ;; Defined at:
  5453 ;;		line 59 in file "mcc_generated_files/adc.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;		None
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;		None
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, status,2
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5467 ;;      Params:         0       0       0       0       0       0       0
  5468 ;;      Locals:         0       0       0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0       0
  5470 ;;      Totals:         0       0       0       0       0       0       0
  5471 ;;Total ram usage:        0 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    9
  5474 ;; This function calls:
  5475 ;;		Nothing
  5476 ;; This function is called by:
  5477 ;;		_SYSTEM_Initialize
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text31
  5482  001F5E                     __ptext31:
  5483                           	opt stack 0
  5484  001F5E                     _ADC_Initialize:
  5485                           	opt stack 20
  5486                           
  5487                           ;adc.c: 63: ADCON0 = 0x0D;
  5488                           
  5489                           ; BSR set to: 15
  5490                           ;incstack = 0
  5491  001F5E  0E0D               	movlw	13
  5492  001F60  6EC2               	movwf	4034,c	;volatile
  5493                           
  5494                           ;adc.c: 66: ADCON1 = 0x00;
  5495  001F62  0E00               	movlw	0
  5496  001F64  6EC1               	movwf	4033,c	;volatile
  5497                           
  5498                           ;adc.c: 69: ADCON2 = 0x89;
  5499  001F66  0E89               	movlw	137
  5500  001F68  6EC0               	movwf	4032,c	;volatile
  5501                           
  5502                           ;adc.c: 72: ADRESL = 0x00;
  5503  001F6A  0E00               	movlw	0
  5504  001F6C  6EC3               	movwf	4035,c	;volatile
  5505                           
  5506                           ;adc.c: 75: ADRESH = 0x00;
  5507  001F6E  0E00               	movlw	0
  5508  001F70  6EC4               	movwf	4036,c	;volatile
  5509                           
  5510                           ;adc.c: 78: PIE1bits.ADIE = 1;
  5511  001F72  8C9D               	bsf	3997,6,c	;volatile
  5512  001F74  0012               	return		;funcret
  5513  001F76                     __end_of_ADC_Initialize:
  5514                           	opt stack 0
  5515                           tblptru	equ	0xFF8
  5516                           tblptrh	equ	0xFF7
  5517                           tblptrl	equ	0xFF6
  5518                           tablat	equ	0xFF5
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           intcon	equ	0xFF2
  5522                           intcon2	equ	0xFF1
  5523                           intcon3	equ	0xFF0
  5524                           indf0	equ	0xFEF
  5525                           postinc0	equ	0xFEE
  5526                           fsr0h	equ	0xFEA
  5527                           fsr0l	equ	0xFE9
  5528                           wreg	equ	0xFE8
  5529                           indf1	equ	0xFE7
  5530                           fsr1h	equ	0xFE2
  5531                           fsr1l	equ	0xFE1
  5532                           indf2	equ	0xFDF
  5533                           postinc2	equ	0xFDE
  5534                           postdec2	equ	0xFDD
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function _OpenXLCD *****************
  5540 ;; Defined at:
  5541 ;;		line 56 in file "xlcd.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  lcdtype         1    wreg     unsigned char 
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;  lcdtype         1    0[COMRAM] unsigned char 
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5555 ;;      Params:         0       0       0       0       0       0       0
  5556 ;;      Locals:         0       0       0       0       0       0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0
  5558 ;;      Totals:         0       0       0       0       0       0       0
  5559 ;;Total ram usage:        0 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:   11
  5562 ;; This function calls:
  5563 ;;		_BusyXLCD
  5564 ;;		_DelayFor18TCY
  5565 ;;		_DelayPORXLCD
  5566 ;;		_DelayXLCD
  5567 ;;		_WriteCmdXLCD
  5568 ;; This function is called by:
  5569 ;;		_main
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text32
  5574  0015C2                     __ptext32:
  5575                           	opt stack 0
  5576  0015C2                     _OpenXLCD:
  5577                           	opt stack 19
  5578                           
  5579                           ;xlcd.c: 60: DelayPORXLCD();
  5580                           
  5581                           ;incstack = 0
  5582  0015C2  EC3F  F00F         	call	_DelayPORXLCD	;wreg free
  5583                           
  5584                           ;xlcd.c: 72: PORTD &= 0xf0;
  5585  0015C6  0EF0               	movlw	240
  5586  0015C8  1683               	andwf	3971,f,c	;volatile
  5587                           
  5588                           ;xlcd.c: 73: TRISD |= 0x0f;
  5589  0015CA  0E0F               	movlw	15
  5590  0015CC  1295               	iorwf	3989,f,c	;volatile
  5591                           
  5592                           ;xlcd.c: 76: TRISDbits.TRISD5 = 0;
  5593  0015CE  9A95               	bcf	3989,5,c	;volatile
  5594                           
  5595                           ;xlcd.c: 77: TRISDbits.TRISD4 = 0;
  5596  0015D0  9895               	bcf	3989,4,c	;volatile
  5597                           
  5598                           ;xlcd.c: 78: TRISDbits.TRISD6 = 0;
  5599  0015D2  9C95               	bcf	3989,6,c	;volatile
  5600                           
  5601                           ;xlcd.c: 79: LATDbits.LATD5 = 0;
  5602  0015D4  9A8C               	bcf	3980,5,c	;volatile
  5603                           
  5604                           ;xlcd.c: 80: LATDbits.LATD4 = 0;
  5605  0015D6  988C               	bcf	3980,4,c	;volatile
  5606                           
  5607                           ;xlcd.c: 81: LATDbits.LATD6 = 0;
  5608  0015D8  9C8C               	bcf	3980,6,c	;volatile
  5609                           
  5610                           ;xlcd.c: 84: DelayPORXLCD();
  5611  0015DA  EC3F  F00F         	call	_DelayPORXLCD	;wreg free
  5612                           
  5613                           ;xlcd.c: 97: TRISD &= 0xf0;
  5614  0015DE  0EF0               	movlw	240
  5615  0015E0  1695               	andwf	3989,f,c	;volatile
  5616                           
  5617                           ;xlcd.c: 98: PORTD &= 0xf0;
  5618  0015E2  0EF0               	movlw	240
  5619  0015E4  1683               	andwf	3971,f,c	;volatile
  5620                           
  5621                           ;xlcd.c: 99: PORTD |= 0b00000011;
  5622  0015E6  0E03               	movlw	3
  5623  0015E8  1283               	iorwf	3971,f,c	;volatile
  5624                           
  5625                           ;xlcd.c: 102: LATDbits.LATD6 = 1;
  5626  0015EA  8C8C               	bsf	3980,6,c	;volatile
  5627                           
  5628                           ;xlcd.c: 103: DelayFor18TCY();
  5629  0015EC  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  5630                           
  5631                           ;xlcd.c: 104: LATDbits.LATD6 = 0;
  5632  0015F0  9C8C               	bcf	3980,6,c	;volatile
  5633                           
  5634                           ;xlcd.c: 107: DelayXLCD();
  5635  0015F2  ECE4  F00F         	call	_DelayXLCD	;wreg free
  5636                           
  5637                           ;xlcd.c: 118: TRISD &= 0xf0;
  5638  0015F6  0EF0               	movlw	240
  5639  0015F8  1695               	andwf	3989,f,c	;volatile
  5640                           
  5641                           ;xlcd.c: 119: PORTD &= 0xf0;
  5642  0015FA  0EF0               	movlw	240
  5643  0015FC  1683               	andwf	3971,f,c	;volatile
  5644                           
  5645                           ;xlcd.c: 120: PORTD |= 0b00000011;
  5646  0015FE  0E03               	movlw	3
  5647  001600  1283               	iorwf	3971,f,c	;volatile
  5648                           
  5649                           ;xlcd.c: 123: LATDbits.LATD6 = 1;
  5650  001602  8C8C               	bsf	3980,6,c	;volatile
  5651                           
  5652                           ;xlcd.c: 124: DelayFor18TCY();
  5653  001604  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  5654                           
  5655                           ;xlcd.c: 125: LATDbits.LATD6 = 0;
  5656  001608  9C8C               	bcf	3980,6,c	;volatile
  5657                           
  5658                           ;xlcd.c: 128: DelayXLCD();
  5659  00160A  ECE4  F00F         	call	_DelayXLCD	;wreg free
  5660                           
  5661                           ;xlcd.c: 138: PORTD &= 0xf0;
  5662  00160E  0EF0               	movlw	240
  5663  001610  1683               	andwf	3971,f,c	;volatile
  5664                           
  5665                           ;xlcd.c: 139: PORTD |= 0b00000011;
  5666  001612  0E03               	movlw	3
  5667  001614  1283               	iorwf	3971,f,c	;volatile
  5668                           
  5669                           ;xlcd.c: 142: LATDbits.LATD6 = 1;
  5670  001616  8C8C               	bsf	3980,6,c	;volatile
  5671                           
  5672                           ;xlcd.c: 143: DelayFor18TCY();
  5673  001618  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  5674                           
  5675                           ;xlcd.c: 144: LATDbits.LATD6 = 0;
  5676  00161C  9C8C               	bcf	3980,6,c	;volatile
  5677                           
  5678                           ;xlcd.c: 147: DelayXLCD();
  5679  00161E  ECE4  F00F         	call	_DelayXLCD	;wreg free
  5680                           
  5681                           ;xlcd.c: 159: PORTD &= 0xf0;
  5682  001622  0EF0               	movlw	240
  5683  001624  1683               	andwf	3971,f,c	;volatile
  5684                           
  5685                           ;xlcd.c: 160: PORTD |= 0b00000010;
  5686  001626  8283               	bsf	3971,1,c	;volatile
  5687                           
  5688                           ;xlcd.c: 163: LATDbits.LATD6 = 1;
  5689  001628  8C8C               	bsf	3980,6,c	;volatile
  5690                           
  5691                           ;xlcd.c: 164: DelayFor18TCY();
  5692  00162A  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  5693                           
  5694                           ;xlcd.c: 165: LATDbits.LATD6 = 0;
  5695  00162E  9C8C               	bcf	3980,6,c	;volatile
  5696                           
  5697                           ;xlcd.c: 174: TRISD |= 0x0f;
  5698  001630  0E0F               	movlw	15
  5699  001632  1295               	iorwf	3989,f,c	;volatile
  5700  001634  EC1E  F00E         	call	_BusyXLCD	;wreg free
  5701  001638  0900               	iorlw	0
  5702  00163A  A4D8               	btfss	status,2,c
  5703  00163C  D7FB               	goto	l791
  5704                           
  5705                           ;xlcd.c: 182: WriteCmdXLCD(0x28);
  5706  00163E  0E28               	movlw	40
  5707  001640  EC5F  F00D         	call	_WriteCmdXLCD
  5708  001644  EC1E  F00E         	call	_BusyXLCD	;wreg free
  5709  001648  0900               	iorlw	0
  5710  00164A  A4D8               	btfss	status,2,c
  5711  00164C  D7FB               	goto	l794
  5712                           
  5713                           ;xlcd.c: 188: WriteCmdXLCD(0x0D);
  5714  00164E  0E0D               	movlw	13
  5715  001650  EC5F  F00D         	call	_WriteCmdXLCD
  5716  001654  EC1E  F00E         	call	_BusyXLCD	;wreg free
  5717  001658  0900               	iorlw	0
  5718  00165A  A4D8               	btfss	status,2,c
  5719  00165C  D7FB               	goto	l797
  5720  00165E                     u7200:
  5721                           
  5722                           ;xlcd.c: 195: while (BusyXLCD());
  5723  00165E  EC1E  F00E         	call	_BusyXLCD	;wreg free
  5724  001662  0900               	iorlw	0
  5725  001664  A4D8               	btfss	status,2,c
  5726  001666  D7FB               	goto	u7200
  5727                           
  5728                           ;xlcd.c: 196: WriteCmdXLCD(0x01);
  5729  001668  0E01               	movlw	1
  5730  00166A  EC5F  F00D         	call	_WriteCmdXLCD
  5731  00166E  EC1E  F00E         	call	_BusyXLCD	;wreg free
  5732  001672  0900               	iorlw	0
  5733  001674  A4D8               	btfss	status,2,c
  5734  001676  D7FB               	goto	l803
  5735                           
  5736                           ;xlcd.c: 201: WriteCmdXLCD(0x06);
  5737  001678  0E06               	movlw	6
  5738  00167A  EC5F  F00D         	call	_WriteCmdXLCD
  5739  00167E  EC1E  F00E         	call	_BusyXLCD	;wreg free
  5740  001682  0900               	iorlw	0
  5741  001684  A4D8               	btfss	status,2,c
  5742  001686  D7FB               	goto	l806
  5743                           
  5744                           ;xlcd.c: 207: WriteCmdXLCD(0x80);
  5745  001688  0E80               	movlw	128
  5746  00168A  EC5F  F00D         	call	_WriteCmdXLCD
  5747  00168E  0012               	return	
  5748  001690                     __end_of_OpenXLCD:
  5749                           	opt stack 0
  5750                           tblptru	equ	0xFF8
  5751                           tblptrh	equ	0xFF7
  5752                           tblptrl	equ	0xFF6
  5753                           tablat	equ	0xFF5
  5754                           prodh	equ	0xFF4
  5755                           prodl	equ	0xFF3
  5756                           intcon	equ	0xFF2
  5757                           intcon2	equ	0xFF1
  5758                           intcon3	equ	0xFF0
  5759                           indf0	equ	0xFEF
  5760                           postinc0	equ	0xFEE
  5761                           fsr0h	equ	0xFEA
  5762                           fsr0l	equ	0xFE9
  5763                           wreg	equ	0xFE8
  5764                           indf1	equ	0xFE7
  5765                           fsr1h	equ	0xFE2
  5766                           fsr1l	equ	0xFE1
  5767                           indf2	equ	0xFDF
  5768                           postinc2	equ	0xFDE
  5769                           postdec2	equ	0xFDD
  5770                           fsr2h	equ	0xFDA
  5771                           fsr2l	equ	0xFD9
  5772                           status	equ	0xFD8
  5773                           
  5774 ;; *************** function _WriteCmdXLCD *****************
  5775 ;; Defined at:
  5776 ;;		line 538 in file "xlcd.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  cmd             1    wreg     unsigned char 
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;  cmd             1    0[BANK1 ] unsigned char 
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  1    wreg      void 
  5783 ;; Registers used:
  5784 ;;		wreg, status,2, status,0, cstack
  5785 ;; Tracked objects:
  5786 ;;		On entry : 0/0
  5787 ;;		On exit  : 0/0
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5790 ;;      Params:         0       0       0       0       0       0       0
  5791 ;;      Locals:         0       0       1       0       0       0       0
  5792 ;;      Temps:          0       0       0       0       0       0       0
  5793 ;;      Totals:         0       0       1       0       0       0       0
  5794 ;;Total ram usage:        1 bytes
  5795 ;; Hardware stack levels used:    1
  5796 ;; Hardware stack levels required when called:   10
  5797 ;; This function calls:
  5798 ;;		_DelayFor18TCY
  5799 ;; This function is called by:
  5800 ;;		_OpenXLCD
  5801 ;;		_main
  5802 ;;		_escreveLinhaLCD
  5803 ;;		_feedbackUSART
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text33
  5808  001ABE                     __ptext33:
  5809                           	opt stack 0
  5810  001ABE                     _WriteCmdXLCD:
  5811                           	opt stack 17
  5812                           
  5813                           ;incstack = 0
  5814                           ;WriteCmdXLCD@cmd stored from wreg
  5815  001ABE  0101               	movlb	1	; () banked
  5816  001AC0  6F2A               	movwf	WriteCmdXLCD@cmd& (0+255),b
  5817                           
  5818                           ;xlcd.c: 556: TRISD &= 0xf0;
  5819  001AC2  0EF0               	movlw	240
  5820  001AC4  1695               	andwf	3989,f,c	;volatile
  5821                           
  5822                           ;xlcd.c: 557: PORTD &= 0xf0;
  5823  001AC6  0EF0               	movlw	240
  5824  001AC8  1683               	andwf	3971,f,c	;volatile
  5825                           
  5826                           ;xlcd.c: 558: PORTD |= (cmd >> 4)&0x0f;
  5827  001ACA  0101               	movlb	1	; () banked
  5828  001ACC  392A               	swapf	WriteCmdXLCD@cmd& (0+255),w,b
  5829  001ACE  0B0F               	andlw	15
  5830  001AD0  0B0F               	andlw	15
  5831  001AD2  1283               	iorwf	3971,f,c	;volatile
  5832                           
  5833                           ; BSR set to: 1
  5834                           ;xlcd.c: 560: LATDbits.LATD5 = 0;
  5835  001AD4  9A8C               	bcf	3980,5,c	;volatile
  5836                           
  5837                           ; BSR set to: 1
  5838                           ;xlcd.c: 561: LATDbits.LATD4 = 0;
  5839  001AD6  988C               	bcf	3980,4,c	;volatile
  5840                           
  5841                           ; BSR set to: 1
  5842                           ;xlcd.c: 562: DelayFor18TCY();
  5843  001AD8  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  5844                           
  5845                           ;xlcd.c: 563: LATDbits.LATD6 = 1;
  5846  001ADC  8C8C               	bsf	3980,6,c	;volatile
  5847                           
  5848                           ;xlcd.c: 564: DelayFor18TCY();
  5849  001ADE  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  5850                           
  5851                           ;xlcd.c: 565: LATDbits.LATD6 = 0;
  5852  001AE2  9C8C               	bcf	3980,6,c	;volatile
  5853                           
  5854                           ;xlcd.c: 570: PORTD &= 0xf0;
  5855  001AE4  0EF0               	movlw	240
  5856  001AE6  1683               	andwf	3971,f,c	;volatile
  5857                           
  5858                           ;xlcd.c: 571: PORTD |= cmd & 0x0f;
  5859  001AE8  0101               	movlb	1	; () banked
  5860  001AEA  512A               	movf	WriteCmdXLCD@cmd& (0+255),w,b
  5861  001AEC  0B0F               	andlw	15
  5862  001AEE  1283               	iorwf	3971,f,c	;volatile
  5863                           
  5864                           ; BSR set to: 1
  5865                           ;xlcd.c: 573: DelayFor18TCY();
  5866  001AF0  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  5867                           
  5868                           ;xlcd.c: 574: LATDbits.LATD6 = 1;
  5869  001AF4  8C8C               	bsf	3980,6,c	;volatile
  5870                           
  5871                           ;xlcd.c: 575: DelayFor18TCY();
  5872  001AF6  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  5873                           
  5874                           ;xlcd.c: 576: LATDbits.LATD6 = 0;
  5875  001AFA  9C8C               	bcf	3980,6,c	;volatile
  5876                           
  5877                           ;xlcd.c: 580: TRISD |= 0x0f;
  5878  001AFC  0E0F               	movlw	15
  5879  001AFE  1295               	iorwf	3989,f,c	;volatile
  5880  001B00  0012               	return	
  5881  001B02                     __end_of_WriteCmdXLCD:
  5882                           	opt stack 0
  5883                           tblptru	equ	0xFF8
  5884                           tblptrh	equ	0xFF7
  5885                           tblptrl	equ	0xFF6
  5886                           tablat	equ	0xFF5
  5887                           prodh	equ	0xFF4
  5888                           prodl	equ	0xFF3
  5889                           intcon	equ	0xFF2
  5890                           intcon2	equ	0xFF1
  5891                           intcon3	equ	0xFF0
  5892                           indf0	equ	0xFEF
  5893                           postinc0	equ	0xFEE
  5894                           fsr0h	equ	0xFEA
  5895                           fsr0l	equ	0xFE9
  5896                           wreg	equ	0xFE8
  5897                           indf1	equ	0xFE7
  5898                           fsr1h	equ	0xFE2
  5899                           fsr1l	equ	0xFE1
  5900                           indf2	equ	0xFDF
  5901                           postinc2	equ	0xFDE
  5902                           postdec2	equ	0xFDD
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function _DelayXLCD *****************
  5908 ;; Defined at:
  5909 ;;		line 33 in file "xlcd.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;		None
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;		None
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  1    wreg      void 
  5916 ;; Registers used:
  5917 ;;		wreg
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5923 ;;      Params:         0       0       0       0       0       0       0
  5924 ;;      Locals:         0       0       0       0       0       0       0
  5925 ;;      Temps:          0       0       1       0       0       0       0
  5926 ;;      Totals:         0       0       1       0       0       0       0
  5927 ;;Total ram usage:        1 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    9
  5930 ;; This function calls:
  5931 ;;		Nothing
  5932 ;; This function is called by:
  5933 ;;		_OpenXLCD
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text34
  5938  001FC8                     __ptext34:
  5939                           	opt stack 0
  5940  001FC8                     _DelayXLCD:
  5941                           	opt stack 20
  5942                           
  5943                           ;xlcd.c: 36: _delay((unsigned long)((15)*(6000000/4000.0)));
  5944                           
  5945                           ;incstack = 0
  5946  001FC8  0E1E               	movlw	30
  5947  001FCA  0101               	movlb	1	; () banked
  5948  001FCC  6F2A               	movwf	??_DelayXLCD& (0+255),b
  5949  001FCE  0E37               	movlw	55
  5950  001FD0                     u7447:
  5951  001FD0  2EE8               	decfsz	wreg,f,c
  5952  001FD2  D7FE               	bra	u7447
  5953  001FD4  2F2A               	decfsz	??_DelayXLCD& (0+255),f,b
  5954  001FD6  D7FC               	bra	u7447
  5955  001FD8  0012               	return	
  5956  001FDA                     __end_of_DelayXLCD:
  5957                           	opt stack 0
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           prodh	equ	0xFF4
  5963                           prodl	equ	0xFF3
  5964                           intcon	equ	0xFF2
  5965                           intcon2	equ	0xFF1
  5966                           intcon3	equ	0xFF0
  5967                           indf0	equ	0xFEF
  5968                           postinc0	equ	0xFEE
  5969                           fsr0h	equ	0xFEA
  5970                           fsr0l	equ	0xFE9
  5971                           wreg	equ	0xFE8
  5972                           indf1	equ	0xFE7
  5973                           fsr1h	equ	0xFE2
  5974                           fsr1l	equ	0xFE1
  5975                           indf2	equ	0xFDF
  5976                           postinc2	equ	0xFDE
  5977                           postdec2	equ	0xFDD
  5978                           fsr2h	equ	0xFDA
  5979                           fsr2l	equ	0xFD9
  5980                           status	equ	0xFD8
  5981                           
  5982 ;; *************** function _DelayPORXLCD *****************
  5983 ;; Defined at:
  5984 ;;		line 25 in file "xlcd.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;		None
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;		None
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      void 
  5991 ;; Registers used:
  5992 ;;		wreg
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5998 ;;      Params:         0       0       0       0       0       0       0
  5999 ;;      Locals:         0       0       0       0       0       0       0
  6000 ;;      Temps:          0       0       1       0       0       0       0
  6001 ;;      Totals:         0       0       1       0       0       0       0
  6002 ;;Total ram usage:        1 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    9
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_OpenXLCD
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text35
  6013  001E7E                     __ptext35:
  6014                           	opt stack 0
  6015  001E7E                     _DelayPORXLCD:
  6016                           	opt stack 20
  6017                           
  6018                           ;xlcd.c: 28: _delay((unsigned long)((15)*(6000000/4000.0)));
  6019                           
  6020                           ;incstack = 0
  6021  001E7E  0E1E               	movlw	30
  6022  001E80  0101               	movlb	1	; () banked
  6023  001E82  6F2A               	movwf	??_DelayPORXLCD& (0+255),b
  6024  001E84  0E37               	movlw	55
  6025  001E86                     u7457:
  6026  001E86  2EE8               	decfsz	wreg,f,c
  6027  001E88  D7FE               	bra	u7457
  6028  001E8A  2F2A               	decfsz	??_DelayPORXLCD& (0+255),f,b
  6029  001E8C  D7FC               	bra	u7457
  6030                           
  6031                           ;xlcd.c: 29: _delay((unsigned long)((15)*(6000000/4000.0)));
  6032  001E8E  0E1E               	movlw	30
  6033  001E90  0101               	movlb	1	; () banked
  6034  001E92  6F2A               	movwf	??_DelayPORXLCD& (0+255),b
  6035  001E94  0E37               	movlw	55
  6036  001E96                     u7467:
  6037  001E96  2EE8               	decfsz	wreg,f,c
  6038  001E98  D7FE               	bra	u7467
  6039  001E9A  2F2A               	decfsz	??_DelayPORXLCD& (0+255),f,b
  6040  001E9C  D7FC               	bra	u7467
  6041  001E9E  0012               	return	
  6042  001EA0                     __end_of_DelayPORXLCD:
  6043                           	opt stack 0
  6044                           tblptru	equ	0xFF8
  6045                           tblptrh	equ	0xFF7
  6046                           tblptrl	equ	0xFF6
  6047                           tablat	equ	0xFF5
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           intcon	equ	0xFF2
  6051                           intcon2	equ	0xFF1
  6052                           intcon3	equ	0xFF0
  6053                           indf0	equ	0xFEF
  6054                           postinc0	equ	0xFEE
  6055                           fsr0h	equ	0xFEA
  6056                           fsr0l	equ	0xFE9
  6057                           wreg	equ	0xFE8
  6058                           indf1	equ	0xFE7
  6059                           fsr1h	equ	0xFE2
  6060                           fsr1l	equ	0xFE1
  6061                           indf2	equ	0xFDF
  6062                           postinc2	equ	0xFDE
  6063                           postdec2	equ	0xFDD
  6064                           fsr2h	equ	0xFDA
  6065                           fsr2l	equ	0xFD9
  6066                           status	equ	0xFD8
  6067                           
  6068 ;; *************** function _BusyXLCD *****************
  6069 ;; Defined at:
  6070 ;;		line 218 in file "xlcd.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;		None
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;		None
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  1    wreg      unsigned char 
  6077 ;; Registers used:
  6078 ;;		wreg, cstack
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6084 ;;      Params:         0       0       0       0       0       0       0
  6085 ;;      Locals:         0       0       0       0       0       0       0
  6086 ;;      Temps:          0       0       0       0       0       0       0
  6087 ;;      Totals:         0       0       0       0       0       0       0
  6088 ;;Total ram usage:        0 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:   10
  6091 ;; This function calls:
  6092 ;;		_DelayFor18TCY
  6093 ;; This function is called by:
  6094 ;;		_OpenXLCD
  6095 ;;		_putsXLCD
  6096 ;;		_main
  6097 ;;		_escreveLinhaLCD
  6098 ;;		_feedbackUSART
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           	psect	text36
  6103  001C3C                     __ptext36:
  6104                           	opt stack 0
  6105  001C3C                     _BusyXLCD:
  6106                           	opt stack 16
  6107                           
  6108                           ;xlcd.c: 219: LATDbits.LATD5 = 1;
  6109                           
  6110                           ;incstack = 0
  6111  001C3C  8A8C               	bsf	3980,5,c	;volatile
  6112                           
  6113                           ;xlcd.c: 220: LATDbits.LATD4 = 0;
  6114  001C3E  988C               	bcf	3980,4,c	;volatile
  6115                           
  6116                           ;xlcd.c: 221: DelayFor18TCY();
  6117  001C40  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  6118                           
  6119                           ;xlcd.c: 222: LATDbits.LATD6 = 1;
  6120  001C44  8C8C               	bsf	3980,6,c	;volatile
  6121                           
  6122                           ;xlcd.c: 223: DelayFor18TCY();
  6123  001C46  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  6124                           
  6125                           ;xlcd.c: 240: if (PORTD & 0x08)
  6126  001C4A  A683               	btfss	3971,3,c	;volatile
  6127  001C4C  D00A               	goto	l811
  6128                           
  6129                           ;xlcd.c: 242: {
  6130                           ;xlcd.c: 243: LATDbits.LATD6 = 0;
  6131  001C4E  9C8C               	bcf	3980,6,c	;volatile
  6132                           
  6133                           ;xlcd.c: 244: DelayFor18TCY();
  6134  001C50  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  6135                           
  6136                           ;xlcd.c: 245: LATDbits.LATD6 = 1;
  6137  001C54  8C8C               	bsf	3980,6,c	;volatile
  6138                           
  6139                           ;xlcd.c: 246: DelayFor18TCY();
  6140  001C56  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  6141                           
  6142                           ;xlcd.c: 247: LATDbits.LATD6 = 0;
  6143  001C5A  9C8C               	bcf	3980,6,c	;volatile
  6144                           
  6145                           ;xlcd.c: 248: LATDbits.LATD5 = 0;
  6146  001C5C  9A8C               	bcf	3980,5,c	;volatile
  6147                           
  6148                           ;xlcd.c: 249: return 1;
  6149  001C5E  0E01               	movlw	1
  6150                           
  6151                           ;xlcd.c: 250: } else
  6152  001C60  0012               	return	
  6153  001C62                     l811:
  6154                           
  6155                           ;xlcd.c: 251: {
  6156                           ;xlcd.c: 252: LATDbits.LATD6 = 0;
  6157  001C62  9C8C               	bcf	3980,6,c	;volatile
  6158                           
  6159                           ;xlcd.c: 253: DelayFor18TCY();
  6160  001C64  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  6161                           
  6162                           ;xlcd.c: 254: LATDbits.LATD6 = 1;
  6163  001C68  8C8C               	bsf	3980,6,c	;volatile
  6164                           
  6165                           ;xlcd.c: 255: DelayFor18TCY();
  6166  001C6A  ECC7  F00F         	call	_DelayFor18TCY	;wreg free
  6167                           
  6168                           ;xlcd.c: 256: LATDbits.LATD6 = 0;
  6169  001C6E  9C8C               	bcf	3980,6,c	;volatile
  6170                           
  6171                           ;xlcd.c: 257: LATDbits.LATD5 = 0;
  6172  001C70  9A8C               	bcf	3980,5,c	;volatile
  6173                           
  6174                           ;xlcd.c: 258: return 0;
  6175  001C72  0E00               	movlw	0
  6176  001C74  0012               	return	
  6177  001C76                     __end_of_BusyXLCD:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           intcon	equ	0xFF2
  6186                           intcon2	equ	0xFF1
  6187                           intcon3	equ	0xFF0
  6188                           indf0	equ	0xFEF
  6189                           postinc0	equ	0xFEE
  6190                           fsr0h	equ	0xFEA
  6191                           fsr0l	equ	0xFE9
  6192                           wreg	equ	0xFE8
  6193                           indf1	equ	0xFE7
  6194                           fsr1h	equ	0xFE2
  6195                           fsr1l	equ	0xFE1
  6196                           indf2	equ	0xFDF
  6197                           postinc2	equ	0xFDE
  6198                           postdec2	equ	0xFDD
  6199                           fsr2h	equ	0xFDA
  6200                           fsr2l	equ	0xFD9
  6201                           status	equ	0xFD8
  6202                           
  6203 ;; *************** function _DelayFor18TCY *****************
  6204 ;; Defined at:
  6205 ;;		line 18 in file "xlcd.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;		None
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;		None
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      void 
  6212 ;; Registers used:
  6213 ;;		wreg
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6219 ;;      Params:         0       0       0       0       0       0       0
  6220 ;;      Locals:         0       0       0       0       0       0       0
  6221 ;;      Temps:          0       0       0       0       0       0       0
  6222 ;;      Totals:         0       0       0       0       0       0       0
  6223 ;;Total ram usage:        0 bytes
  6224 ;; Hardware stack levels used:    1
  6225 ;; Hardware stack levels required when called:    9
  6226 ;; This function calls:
  6227 ;;		Nothing
  6228 ;; This function is called by:
  6229 ;;		_OpenXLCD
  6230 ;;		_BusyXLCD
  6231 ;;		_WriteCmdXLCD
  6232 ;;		_WriteDataXLCD
  6233 ;;		_ReadAddrXLCD
  6234 ;;		_ReadDataXLCD
  6235 ;;		_SetCGRamAddr
  6236 ;;		_SetDDRamAddr
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text37
  6241  001F8E                     __ptext37:
  6242                           	opt stack 0
  6243  001F8E                     _DelayFor18TCY:
  6244                           	opt stack 16
  6245                           
  6246                           ;xlcd.c: 20: _delay((unsigned long)((18)*(6000000/4000000.0)));
  6247                           
  6248                           ;incstack = 0
  6249  001F8E  0E09               	movlw	9
  6250  001F90                     u7477:
  6251  001F90  2EE8               	decfsz	wreg,f,c
  6252  001F92  D7FE               	bra	u7477
  6253                           
  6254                           ;xlcd.c: 21: _delay((unsigned long)((1)*(6000000/4000.0)));
  6255  001F94  0ED6               	movlw	214
  6256  001F96                     u7487:
  6257  001F96  D000               	nop2	
  6258  001F98  D000               	nop2	
  6259  001F9A  2EE8               	decfsz	wreg,f,c
  6260  001F9C  D7FC               	bra	u7487
  6261  001F9E  D000               	nop2	
  6262  001FA0  0012               	return	
  6263  001FA2                     __end_of_DelayFor18TCY:
  6264                           	opt stack 0
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           intcon	equ	0xFF2
  6272                           intcon2	equ	0xFF1
  6273                           intcon3	equ	0xFF0
  6274                           indf0	equ	0xFEF
  6275                           postinc0	equ	0xFEE
  6276                           fsr0h	equ	0xFEA
  6277                           fsr0l	equ	0xFE9
  6278                           wreg	equ	0xFE8
  6279                           indf1	equ	0xFE7
  6280                           fsr1h	equ	0xFE2
  6281                           fsr1l	equ	0xFE1
  6282                           indf2	equ	0xFDF
  6283                           postinc2	equ	0xFDE
  6284                           postdec2	equ	0xFDD
  6285                           fsr2h	equ	0xFDA
  6286                           fsr2l	equ	0xFD9
  6287                           status	equ	0xFD8
  6288                           
  6289 ;; *************** function _INTERRUPT_InterruptManagerLow *****************
  6290 ;; Defined at:
  6291 ;;		line 117 in file "mcc_generated_files/interrupt_manager.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;		None
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;		None
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  1    wreg      void 
  6298 ;; Registers used:
  6299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6305 ;;      Params:         0       0       0       0       0       0       0
  6306 ;;      Locals:         0       0       0       0       0       0       0
  6307 ;;      Temps:          0      21       0       0       0       0       0
  6308 ;;      Totals:         0      21       0       0       0       0       0
  6309 ;;Total ram usage:       21 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:    8
  6312 ;; This function calls:
  6313 ;;		_ADC_ISR
  6314 ;;		_EUSART1_Receive_ISR
  6315 ;; This function is called by:
  6316 ;;		Interrupt level 1
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           	psect	intcodelo
  6321  000018                     __pintcodelo:
  6322                           	opt stack 0
  6323  000018                     _INTERRUPT_InterruptManagerLow:
  6324                           	opt stack 16
  6325                           
  6326                           ;incstack = 0
  6327  000018  8049               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6328  00001A  CFD8 F0BF          	movff	status,??_INTERRUPT_InterruptManagerLow
  6329  00001E  CFE8 F0C0          	movff	wreg,??_INTERRUPT_InterruptManagerLow+1
  6330  000022  CFE0 F0C1          	movff	bsr,??_INTERRUPT_InterruptManagerLow+2
  6331  000026  CFFA F0C2          	movff	pclath,??_INTERRUPT_InterruptManagerLow+3
  6332  00002A  CFFB F0C3          	movff	pclatu,??_INTERRUPT_InterruptManagerLow+4
  6333  00002E  CFE9 F0C4          	movff	fsr0l,??_INTERRUPT_InterruptManagerLow+5
  6334  000032  CFEA F0C5          	movff	fsr0h,??_INTERRUPT_InterruptManagerLow+6
  6335  000036  CFE1 F0C6          	movff	fsr1l,??_INTERRUPT_InterruptManagerLow+7
  6336  00003A  CFE2 F0C7          	movff	fsr1h,??_INTERRUPT_InterruptManagerLow+8
  6337  00003E  CFD9 F0C8          	movff	fsr2l,??_INTERRUPT_InterruptManagerLow+9
  6338  000042  CFDA F0C9          	movff	fsr2h,??_INTERRUPT_InterruptManagerLow+10
  6339  000046  CFF3 F0CA          	movff	prodl,??_INTERRUPT_InterruptManagerLow+11
  6340  00004A  CFF4 F0CB          	movff	prodh,??_INTERRUPT_InterruptManagerLow+12
  6341  00004E  CFF6 F0CC          	movff	tblptrl,??_INTERRUPT_InterruptManagerLow+13
  6342  000052  CFF7 F0CD          	movff	tblptrh,??_INTERRUPT_InterruptManagerLow+14
  6343  000056  CFF8 F0CE          	movff	tblptru,??_INTERRUPT_InterruptManagerLow+15
  6344  00005A  CFF5 F0CF          	movff	tablat,??_INTERRUPT_InterruptManagerLow+16
  6345  00005E  C049  F0D0         	movff	btemp,??_INTERRUPT_InterruptManagerLow+17
  6346  000062  C04A  F0D1         	movff	btemp+1,??_INTERRUPT_InterruptManagerLow+18
  6347  000066  C04B  F0D2         	movff	btemp+2,??_INTERRUPT_InterruptManagerLow+19
  6348  00006A  C04C  F0D3         	movff	btemp+3,??_INTERRUPT_InterruptManagerLow+20
  6349                           
  6350                           ;interrupt_manager.c: 120: if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  6351  00006E  BC9D               	btfsc	3997,6,c	;volatile
  6352  000070  AC9E               	btfss	3998,6,c	;volatile
  6353  000072  D003               	goto	i1l133
  6354                           
  6355                           ;interrupt_manager.c: 121: {
  6356                           ;interrupt_manager.c: 122: ADC_ISR();
  6357  000074  ECCE  F006         	call	_ADC_ISR	;wreg free
  6358                           
  6359                           ;interrupt_manager.c: 123: }
  6360  000078  D005               	goto	i1l135
  6361  00007A                     i1l133:
  6362                           
  6363                           ;interrupt_manager.c: 124: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6364  00007A  BA9D               	btfsc	3997,5,c	;volatile
  6365  00007C  AA9E               	btfss	3998,5,c	;volatile
  6366  00007E  D002               	goto	i1l135
  6367                           
  6368                           ;interrupt_manager.c: 125: {
  6369                           ;interrupt_manager.c: 126: EUSART1_Receive_ISR();
  6370  000080  EC6A  F004         	call	_EUSART1_Receive_ISR	;wreg free
  6371  000084                     i1l135:
  6372                           
  6373                           ;interrupt_manager.c: 128: else
  6374                           ;interrupt_manager.c: 129: {
  6375  000084  C0D3  F04C         	movff	??_INTERRUPT_InterruptManagerLow+20,btemp+3
  6376  000088  C0D2  F04B         	movff	??_INTERRUPT_InterruptManagerLow+19,btemp+2
  6377  00008C  C0D1  F04A         	movff	??_INTERRUPT_InterruptManagerLow+18,btemp+1
  6378  000090  C0D0  F049         	movff	??_INTERRUPT_InterruptManagerLow+17,btemp
  6379  000094  C0CF  FFF5         	movff	??_INTERRUPT_InterruptManagerLow+16,tablat
  6380  000098  C0CE  FFF8         	movff	??_INTERRUPT_InterruptManagerLow+15,tblptru
  6381  00009C  C0CD  FFF7         	movff	??_INTERRUPT_InterruptManagerLow+14,tblptrh
  6382  0000A0  C0CC  FFF6         	movff	??_INTERRUPT_InterruptManagerLow+13,tblptrl
  6383  0000A4  C0CB  FFF4         	movff	??_INTERRUPT_InterruptManagerLow+12,prodh
  6384  0000A8  C0CA  FFF3         	movff	??_INTERRUPT_InterruptManagerLow+11,prodl
  6385  0000AC  C0C9  FFDA         	movff	??_INTERRUPT_InterruptManagerLow+10,fsr2h
  6386  0000B0  C0C8  FFD9         	movff	??_INTERRUPT_InterruptManagerLow+9,fsr2l
  6387  0000B4  C0C7  FFE2         	movff	??_INTERRUPT_InterruptManagerLow+8,fsr1h
  6388  0000B8  C0C6  FFE1         	movff	??_INTERRUPT_InterruptManagerLow+7,fsr1l
  6389  0000BC  C0C5  FFEA         	movff	??_INTERRUPT_InterruptManagerLow+6,fsr0h
  6390  0000C0  C0C4  FFE9         	movff	??_INTERRUPT_InterruptManagerLow+5,fsr0l
  6391  0000C4  C0C3  FFFB         	movff	??_INTERRUPT_InterruptManagerLow+4,pclatu
  6392  0000C8  C0C2  FFFA         	movff	??_INTERRUPT_InterruptManagerLow+3,pclath
  6393  0000CC  C0C1  FFE0         	movff	??_INTERRUPT_InterruptManagerLow+2,bsr
  6394  0000D0  C0C0  FFE8         	movff	??_INTERRUPT_InterruptManagerLow+1,wreg
  6395  0000D4  C0BF  FFD8         	movff	??_INTERRUPT_InterruptManagerLow,status
  6396  0000D8  9049               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6397  0000DA  0010               	retfie	
  6398  0000DC                     __end_of_INTERRUPT_InterruptManagerLow:
  6399                           	opt stack 0
  6400                           pclatu	equ	0xFFB
  6401                           pclath	equ	0xFFA
  6402                           tblptru	equ	0xFF8
  6403                           tblptrh	equ	0xFF7
  6404                           tblptrl	equ	0xFF6
  6405                           tablat	equ	0xFF5
  6406                           prodh	equ	0xFF4
  6407                           prodl	equ	0xFF3
  6408                           intcon	equ	0xFF2
  6409                           intcon2	equ	0xFF1
  6410                           intcon3	equ	0xFF0
  6411                           indf0	equ	0xFEF
  6412                           postinc0	equ	0xFEE
  6413                           fsr0h	equ	0xFEA
  6414                           fsr0l	equ	0xFE9
  6415                           wreg	equ	0xFE8
  6416                           indf1	equ	0xFE7
  6417                           fsr1h	equ	0xFE2
  6418                           fsr1l	equ	0xFE1
  6419                           bsr	equ	0xFE0
  6420                           indf2	equ	0xFDF
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _EUSART1_Receive_ISR *****************
  6428 ;; Defined at:
  6429 ;;		line 108 in file "mcc_generated_files/eusart1.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;		None
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  tmpAlarme       1   31[COMRAM] unsigned char 
  6434 ;;  i2              2   29[COMRAM] int 
  6435 ;;  i1              2   27[COMRAM] int 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  1    wreg      void 
  6438 ;; Registers used:
  6439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6445 ;;      Params:         0       0       0       0       0       0       0
  6446 ;;      Locals:         5       0       0       0       0       0       0
  6447 ;;      Temps:          5       0       0       0       0       0       0
  6448 ;;      Totals:        10       0       0       0       0       0       0
  6449 ;;Total ram usage:       10 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:    4
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		_INTERRUPT_InterruptManagerLow
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text39
  6460  0008D4                     __ptext39:
  6461                           	opt stack 0
  6462  0008D4                     _EUSART1_Receive_ISR:
  6463                           	opt stack 19
  6464                           
  6465                           ;eusart1.c: 110: if (RCSTA1bits.OERR) {
  6466                           
  6467                           ;incstack = 0
  6468  0008D4  A2AB               	btfss	4011,1,c	;volatile
  6469  0008D6  D002               	goto	i1l597
  6470                           
  6471                           ;eusart1.c: 112: RCSTA1bits.CREN = 0;
  6472  0008D8  98AB               	bcf	4011,4,c	;volatile
  6473                           
  6474                           ;eusart1.c: 113: RCSTA1bits.CREN = 1;
  6475  0008DA  88AB               	bsf	4011,4,c	;volatile
  6476  0008DC                     i1l597:
  6477                           
  6478                           ;eusart1.c: 114: }
  6479                           ;eusart1.c: 116: if (j >= 0 && j < 42 - 1 && strUSART[j] != '\r') {
  6480  0008DC  BE40               	btfsc	_j,7,c	;volatile
  6481  0008DE  D062               	goto	i1l598
  6482  0008E0  5040               	movf	_j,w,c	;volatile
  6483  0008E2  0A80               	xorlw	128
  6484  0008E4  0F57               	addlw	-169
  6485  0008E6  B0D8               	btfsc	status,0,c
  6486  0008E8  D05D               	goto	i1l598
  6487  0008EA  5040               	movf	_j,w,c	;volatile
  6488  0008EC  0D01               	mullw	1
  6489  0008EE  0E6E               	movlw	low _strUSART
  6490  0008F0  24F3               	addwf	prodl,w,c
  6491  0008F2  6ED9               	movwf	fsr2l,c
  6492  0008F4  0E00               	movlw	high _strUSART
  6493  0008F6  20F4               	addwfc	prodh,w,c
  6494  0008F8  6EDA               	movwf	fsr2h,c
  6495  0008FA  0E0D               	movlw	13
  6496  0008FC  18DE               	xorwf	postinc2,w,c
  6497  0008FE  B4D8               	btfsc	status,2,c
  6498  000900  D051               	goto	i1l598
  6499                           
  6500                           ;eusart1.c: 118: eusart_Tx_On = 1;
  6501  000902  0E01               	movlw	1
  6502  000904  6E36               	movwf	_eusart_Tx_On,c	;volatile
  6503                           
  6504                           ;eusart1.c: 119: strUSART[j] = RCREG1;
  6505  000906  5040               	movf	_j,w,c	;volatile
  6506  000908  0D01               	mullw	1
  6507  00090A  0E6E               	movlw	low _strUSART
  6508  00090C  24F3               	addwf	prodl,w,c
  6509  00090E  6ED9               	movwf	fsr2l,c
  6510  000910  0E00               	movlw	high _strUSART
  6511  000912  20F4               	addwfc	prodh,w,c
  6512  000914  6EDA               	movwf	fsr2h,c
  6513  000916  CFAE FFDF          	movff	4014,indf2	;volatile
  6514                           
  6515                           ;eusart1.c: 122: if (j == 40) {
  6516  00091A  0E28               	movlw	40
  6517  00091C  1840               	xorwf	_j,w,c	;volatile
  6518  00091E  A4D8               	btfss	status,2,c
  6519  000920  D004               	goto	i1l599
  6520  000922                     i1u503_20:
  6521                           
  6522                           ;eusart1.c: 123: while (!PIR1bits.TX1IF);
  6523  000922  A89E               	btfss	3998,4,c	;volatile
  6524  000924  D7FE               	goto	i1u503_20
  6525                           
  6526                           ;eusart1.c: 124: TXREG1 = '\r';
  6527  000926  0E0D               	movlw	13
  6528  000928  D00B               	goto	L1
  6529  00092A                     i1l599:
  6530                           
  6531                           ;eusart1.c: 126: while (!PIR1bits.TX1IF);
  6532  00092A  A89E               	btfss	3998,4,c	;volatile
  6533  00092C  D7FE               	goto	i1l599
  6534                           
  6535                           ;eusart1.c: 127: TXREG1 = strUSART[j];
  6536  00092E  5040               	movf	_j,w,c	;volatile
  6537  000930  0D01               	mullw	1
  6538  000932  0E6E               	movlw	low _strUSART
  6539  000934  24F3               	addwf	prodl,w,c
  6540  000936  6ED9               	movwf	fsr2l,c
  6541  000938  0E00               	movlw	high _strUSART
  6542  00093A  20F4               	addwfc	prodh,w,c
  6543  00093C  6EDA               	movwf	fsr2h,c
  6544  00093E  50DF               	movf	indf2,w,c
  6545  000940                     L1:
  6546  000940  6EAD               	movwf	4013,c	;volatile
  6547                           
  6548                           ;eusart1.c: 128: }
  6549                           ;eusart1.c: 131: if (strUSART[j] != '\r' && strUSART[j] == 8) {
  6550  000942  5040               	movf	_j,w,c	;volatile
  6551  000944  0D01               	mullw	1
  6552  000946  0E6E               	movlw	low _strUSART
  6553  000948  24F3               	addwf	prodl,w,c
  6554  00094A  6ED9               	movwf	fsr2l,c
  6555  00094C  0E00               	movlw	high _strUSART
  6556  00094E  20F4               	addwfc	prodh,w,c
  6557  000950  6EDA               	movwf	fsr2h,c
  6558  000952  0E0D               	movlw	13
  6559  000954  18DE               	xorwf	postinc2,w,c
  6560  000956  B4D8               	btfsc	status,2,c
  6561  000958  D024               	goto	i1l608
  6562  00095A  5040               	movf	_j,w,c	;volatile
  6563  00095C  0D01               	mullw	1
  6564  00095E  0E6E               	movlw	low _strUSART
  6565  000960  24F3               	addwf	prodl,w,c
  6566  000962  6ED9               	movwf	fsr2l,c
  6567  000964  0E00               	movlw	high _strUSART
  6568  000966  20F4               	addwfc	prodh,w,c
  6569  000968  6EDA               	movwf	fsr2h,c
  6570  00096A  0E08               	movlw	8
  6571  00096C  18DE               	xorwf	postinc2,w,c
  6572  00096E  A4D8               	btfss	status,2,c
  6573  000970  D018               	goto	i1l608
  6574                           
  6575                           ;eusart1.c: 132: strUSART[j] = '\0';
  6576  000972  5040               	movf	_j,w,c	;volatile
  6577  000974  0D01               	mullw	1
  6578  000976  0E6E               	movlw	low _strUSART
  6579  000978  24F3               	addwf	prodl,w,c
  6580  00097A  6ED9               	movwf	fsr2l,c
  6581  00097C  0E00               	movlw	high _strUSART
  6582  00097E  20F4               	addwfc	prodh,w,c
  6583  000980  6EDA               	movwf	fsr2h,c
  6584  000982  0E00               	movlw	0
  6585  000984  6EDF               	movwf	indf2,c
  6586                           
  6587                           ;eusart1.c: 133: j--;
  6588  000986  0640               	decf	_j,f,c	;volatile
  6589                           
  6590                           ;eusart1.c: 134: if (j >= 0) {
  6591  000988  BE40               	btfsc	_j,7,c	;volatile
  6592  00098A  D00B               	goto	i1l608
  6593                           
  6594                           ;eusart1.c: 135: strUSART[j] = '\0';
  6595  00098C  5040               	movf	_j,w,c	;volatile
  6596  00098E  0D01               	mullw	1
  6597  000990  0E6E               	movlw	low _strUSART
  6598  000992  24F3               	addwf	prodl,w,c
  6599  000994  6ED9               	movwf	fsr2l,c
  6600  000996  0E00               	movlw	high _strUSART
  6601  000998  20F4               	addwfc	prodh,w,c
  6602  00099A  6EDA               	movwf	fsr2h,c
  6603  00099C  0E00               	movlw	0
  6604  00099E  6EDF               	movwf	indf2,c
  6605                           
  6606                           ;eusart1.c: 136: j--;
  6607  0009A0  0640               	decf	_j,f,c	;volatile
  6608  0009A2                     i1l608:
  6609                           
  6610                           ;eusart1.c: 137: }
  6611                           ;eusart1.c: 138: }
  6612                           ;eusart1.c: 139: j++;
  6613  0009A2  2A40               	incf	_j,f,c	;volatile
  6614  0009A4                     i1l598:
  6615                           
  6616                           ;eusart1.c: 140: }
  6617                           ;eusart1.c: 143: if (( ( strUSART[0] == 'S' ) && ( strUSART[1] == 'A' ) && ( strUSART[2]
      +                           == '=' ) && ( strUSART[3] != '\0' ) && ( strUSART[4] != '\0' ) && ( strUSART[5] == '\r'
      +                           ) )) {
  6618  0009A4  0E53               	movlw	83
  6619  0009A6  0100               	movlb	0	; () banked
  6620  0009A8  196E               	xorwf	_strUSART& (0+255),w,b	;volatile
  6621  0009AA  A4D8               	btfss	status,2,c
  6622  0009AC  D03F               	goto	i1l611
  6623                           
  6624                           ; BSR set to: 0
  6625  0009AE  0E41               	movlw	65
  6626  0009B0  196F               	xorwf	(_strUSART+1)& (0+255),w,b	;volatile
  6627  0009B2  A4D8               	btfss	status,2,c
  6628  0009B4  D03B               	goto	i1l611
  6629                           
  6630                           ; BSR set to: 0
  6631  0009B6  0E3D               	movlw	61
  6632  0009B8  1970               	xorwf	(_strUSART+2)& (0+255),w,b	;volatile
  6633  0009BA  A4D8               	btfss	status,2,c
  6634  0009BC  D037               	goto	i1l611
  6635                           
  6636                           ; BSR set to: 0
  6637  0009BE  5171               	movf	(_strUSART+3)& (0+255),w,b	;volatile
  6638  0009C0  B4D8               	btfsc	status,2,c
  6639  0009C2  D034               	goto	i1l611
  6640                           
  6641                           ; BSR set to: 0
  6642  0009C4  5172               	movf	(_strUSART+4)& (0+255),w,b	;volatile
  6643  0009C6  B4D8               	btfsc	status,2,c
  6644  0009C8  D031               	goto	i1l611
  6645                           
  6646                           ; BSR set to: 0
  6647  0009CA  0E0D               	movlw	13
  6648  0009CC  1973               	xorwf	(_strUSART+5)& (0+255),w,b	;volatile
  6649  0009CE  A4D8               	btfss	status,2,c
  6650  0009D0  D02D               	goto	i1l611
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;eusart1.c: 145: int i1, i2;
  6654                           ;eusart1.c: 147: i1 = strUSART[3] - '0';
  6655  0009D2  0ED0               	movlw	208
  6656  0009D4  2571               	addwf	(_strUSART+3)& (0+255),w,b	;volatile
  6657  0009D6  6E1C               	movwf	EUSART1_Receive_ISR@i1,c
  6658  0009D8  6A1D               	clrf	EUSART1_Receive_ISR@i1+1,c
  6659  0009DA  0EFF               	movlw	255
  6660  0009DC  221D               	addwfc	EUSART1_Receive_ISR@i1+1,f,c
  6661                           
  6662                           ;eusart1.c: 148: i2 = strUSART[4] - '0';
  6663  0009DE  0ED0               	movlw	208
  6664  0009E0  2572               	addwf	(_strUSART+4)& (0+255),w,b	;volatile
  6665  0009E2  6E1E               	movwf	EUSART1_Receive_ISR@i2,c
  6666  0009E4  6A1F               	clrf	EUSART1_Receive_ISR@i2+1,c
  6667  0009E6  0EFF               	movlw	255
  6668  0009E8  221F               	addwfc	EUSART1_Receive_ISR@i2+1,f,c
  6669                           
  6670                           ;eusart1.c: 150: if (i1 >= 0 && i1 <= 9 && i2 >= 0 && i2 <= 9) {
  6671  0009EA  BE1D               	btfsc	EUSART1_Receive_ISR@i1+1,7,c
  6672  0009EC  D01F               	goto	i1l611
  6673                           
  6674                           ; BSR set to: 0
  6675  0009EE  BE1D               	btfsc	EUSART1_Receive_ISR@i1+1,7,c
  6676  0009F0  D006               	goto	i1u516_20
  6677  0009F2  501D               	movf	EUSART1_Receive_ISR@i1+1,w,c
  6678  0009F4  E11B               	bnz	i1l4930
  6679  0009F6  0E0A               	movlw	10
  6680  0009F8  5C1C               	subwf	EUSART1_Receive_ISR@i1,w,c
  6681  0009FA  B0D8               	btfsc	status,0,c
  6682  0009FC  D017               	goto	i1l611
  6683  0009FE                     i1u516_20:
  6684                           
  6685                           ; BSR set to: 0
  6686  0009FE  BE1F               	btfsc	EUSART1_Receive_ISR@i2+1,7,c
  6687  000A00  D015               	goto	i1l611
  6688                           
  6689                           ; BSR set to: 0
  6690  000A02  BE1F               	btfsc	EUSART1_Receive_ISR@i2+1,7,c
  6691  000A04  D006               	goto	i1u518_20
  6692  000A06  501F               	movf	EUSART1_Receive_ISR@i2+1,w,c
  6693  000A08  E111               	bnz	i1l4930
  6694  000A0A  0E0A               	movlw	10
  6695  000A0C  5C1E               	subwf	EUSART1_Receive_ISR@i2,w,c
  6696  000A0E  B0D8               	btfsc	status,0,c
  6697  000A10  D00D               	goto	i1l611
  6698  000A12                     i1u518_20:
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;eusart1.c: 152: char tmpAlarme = 10 * i1 + i2;
  6702  000A12  501C               	movf	EUSART1_Receive_ISR@i1,w,c
  6703  000A14  0D0A               	mullw	10
  6704  000A16  50F3               	movf	prodl,w,c
  6705  000A18  241E               	addwf	EUSART1_Receive_ISR@i2,w,c
  6706  000A1A  6E20               	movwf	EUSART1_Receive_ISR@tmpAlarme,c
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;eusart1.c: 154: if (tmpAlarme >= 10 && tmpAlarme <= 40)
  6710  000A1C  0E09               	movlw	9
  6711  000A1E  6420               	cpfsgt	EUSART1_Receive_ISR@tmpAlarme,c
  6712  000A20  D005               	goto	i1l611
  6713                           
  6714                           ; BSR set to: 0
  6715  000A22  0E29               	movlw	41
  6716  000A24  6020               	cpfslt	EUSART1_Receive_ISR@tmpAlarme,c
  6717  000A26  D002               	goto	i1l611
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;eusart1.c: 155: tempAlarme = tmpAlarme;
  6721  000A28  C020  F048         	movff	EUSART1_Receive_ISR@tmpAlarme,_tempAlarme	;volatile
  6722  000A2C                     i1l611:
  6723  000A2C                     i1l4930:
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;eusart1.c: 156: }
  6727                           ;eusart1.c: 158: }
  6728                           ;eusart1.c: 160: if (j == 42 - 1 || strUSART[( j - 1 )] == '\r') {
  6729  000A2C  0E29               	movlw	41
  6730  000A2E  1840               	xorwf	_j,w,c	;volatile
  6731  000A30  B4D8               	btfsc	status,2,c
  6732  000A32  D017               	goto	i1u522_20
  6733                           
  6734                           ; BSR set to: 0
  6735  000A34  0EFF               	movlw	255
  6736  000A36  6E17               	movwf	??_EUSART1_Receive_ISR& (0+255),c
  6737  000A38  0EFF               	movlw	255
  6738  000A3A  6E18               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
  6739  000A3C  C040  F019         	movff	_j,??_EUSART1_Receive_ISR+2	;volatile
  6740  000A40  6A1A               	clrf	(??_EUSART1_Receive_ISR+3)& (0+255),c
  6741  000A42  BE19               	btfsc	(??_EUSART1_Receive_ISR+2)& (0+255),7,c
  6742  000A44  061A               	decf	(??_EUSART1_Receive_ISR+3)& (0+255),f,c
  6743  000A46  5017               	movf	??_EUSART1_Receive_ISR,w,c
  6744  000A48  2619               	addwf	??_EUSART1_Receive_ISR+2,f,c
  6745  000A4A  5018               	movf	??_EUSART1_Receive_ISR+1,w,c
  6746  000A4C  221A               	addwfc	??_EUSART1_Receive_ISR+3,f,c
  6747  000A4E  0E6E               	movlw	low _strUSART
  6748  000A50  2419               	addwf	??_EUSART1_Receive_ISR+2,w,c
  6749  000A52  6ED9               	movwf	fsr2l,c
  6750  000A54  0E00               	movlw	high _strUSART
  6751  000A56  201A               	addwfc	??_EUSART1_Receive_ISR+3,w,c
  6752  000A58  6EDA               	movwf	fsr2h,c
  6753  000A5A  0E0D               	movlw	13
  6754  000A5C  18DE               	xorwf	postinc2,w,c
  6755  000A5E  A4D8               	btfss	status,2,c
  6756  000A60  0012               	return	
  6757  000A62                     i1u522_20:
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;eusart1.c: 161: strUSART[j - 1] = '\0';
  6761                           
  6762                           ; BSR set to: 0
  6763  000A62  0EFF               	movlw	255
  6764  000A64  6E17               	movwf	??_EUSART1_Receive_ISR& (0+255),c
  6765  000A66  0EFF               	movlw	255
  6766  000A68  6E18               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
  6767  000A6A  C040  F019         	movff	_j,??_EUSART1_Receive_ISR+2	;volatile
  6768  000A6E  6A1A               	clrf	(??_EUSART1_Receive_ISR+3)& (0+255),c
  6769  000A70  BE19               	btfsc	(??_EUSART1_Receive_ISR+2)& (0+255),7,c
  6770  000A72  061A               	decf	(??_EUSART1_Receive_ISR+3)& (0+255),f,c
  6771  000A74  5017               	movf	??_EUSART1_Receive_ISR,w,c
  6772  000A76  2619               	addwf	??_EUSART1_Receive_ISR+2,f,c
  6773  000A78  5018               	movf	??_EUSART1_Receive_ISR+1,w,c
  6774  000A7A  221A               	addwfc	??_EUSART1_Receive_ISR+3,f,c
  6775  000A7C  0E6E               	movlw	low _strUSART
  6776  000A7E  2419               	addwf	??_EUSART1_Receive_ISR+2,w,c
  6777  000A80  6ED9               	movwf	fsr2l,c
  6778  000A82  0E00               	movlw	high _strUSART
  6779  000A84  201A               	addwfc	??_EUSART1_Receive_ISR+3,w,c
  6780  000A86  6EDA               	movwf	fsr2h,c
  6781  000A88  0E00               	movlw	0
  6782  000A8A  6EDF               	movwf	indf2,c
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;eusart1.c: 162: j = 0;
  6786  000A8C  0E00               	movlw	0
  6787  000A8E  6E40               	movwf	_j,c	;volatile
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;eusart1.c: 163: eusart_Tx_On = 0;
  6791  000A90  0E00               	movlw	0
  6792  000A92  6E36               	movwf	_eusart_Tx_On,c	;volatile
  6793  000A94  0012               	return	
  6794  000A96                     __end_of_EUSART1_Receive_ISR:
  6795                           	opt stack 0
  6796                           pclatu	equ	0xFFB
  6797                           pclath	equ	0xFFA
  6798                           tblptru	equ	0xFF8
  6799                           tblptrh	equ	0xFF7
  6800                           tblptrl	equ	0xFF6
  6801                           tablat	equ	0xFF5
  6802                           prodh	equ	0xFF4
  6803                           prodl	equ	0xFF3
  6804                           intcon	equ	0xFF2
  6805                           intcon2	equ	0xFF1
  6806                           intcon3	equ	0xFF0
  6807                           indf0	equ	0xFEF
  6808                           postinc0	equ	0xFEE
  6809                           fsr0h	equ	0xFEA
  6810                           fsr0l	equ	0xFE9
  6811                           wreg	equ	0xFE8
  6812                           indf1	equ	0xFE7
  6813                           fsr1h	equ	0xFE2
  6814                           fsr1l	equ	0xFE1
  6815                           bsr	equ	0xFE0
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           
  6823 ;; *************** function _ADC_ISR *****************
  6824 ;; Defined at:
  6825 ;;		line 121 in file "mcc_generated_files/adc.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;		None
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;  var1            3   18[BANK0 ] void 
  6830 ;;  var2            1   17[BANK0 ] unsigned char 
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      void 
  6833 ;; Registers used:
  6834 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6840 ;;      Params:         0       0       0       0       0       0       0
  6841 ;;      Locals:         0       4       0       0       0       0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0
  6843 ;;      Totals:         0       4       0       0       0       0       0
  6844 ;;Total ram usage:        4 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    7
  6847 ;; This function calls:
  6848 ;;		_ADC_GetConversionResult
  6849 ;;		___awtoft
  6850 ;;		___ftge
  6851 ;;		___ftmul
  6852 ;;		___ftsub
  6853 ;;		___fttol
  6854 ;;		___lbtoft
  6855 ;;		i1_EUSART1_Write
  6856 ;;		i1_sprintf
  6857 ;; This function is called by:
  6858 ;;		_INTERRUPT_InterruptManagerLow
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           	psect	text40
  6863  000D9C                     __ptext40:
  6864                           	opt stack 0
  6865  000D9C                     _ADC_ISR:
  6866                           	opt stack 16
  6867                           
  6868                           ;adc.c: 123: binADC = ADC_GetConversionResult();
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;incstack = 0
  6872  000D9C  ECD1  F00F         	call	_ADC_GetConversionResult	;wreg free
  6873  000DA0  C017  F06B         	movff	?_ADC_GetConversionResult,_binADC	;volatile
  6874  000DA4  C018  F06C         	movff	?_ADC_GetConversionResult+1,_binADC+1	;volatile
  6875                           
  6876                           ;adc.c: 126: tmpTemp = (binADC - 83) * (0.24841333435);
  6877  000DA8  0EAD               	movlw	173
  6878  000DAA  0100               	movlb	0	; () banked
  6879  000DAC  256B               	addwf	_binADC& (0+255),w,b	;volatile
  6880  000DAE  6E1F               	movwf	___awtoft@c,c
  6881  000DB0  0EFF               	movlw	255
  6882  000DB2  216C               	addwfc	(_binADC+1)& (0+255),w,b	;volatile
  6883  000DB4  6E20               	movwf	___awtoft@c+1,c
  6884  000DB6  EC3B  F00E         	call	___awtoft	;wreg free
  6885  000DBA  C01F  F023         	movff	?___awtoft,___ftmul@f1
  6886  000DBE  C020  F024         	movff	?___awtoft+1,___ftmul@f1+1
  6887  000DC2  C021  F025         	movff	?___awtoft+2,___ftmul@f1+2
  6888  000DC6  0E60               	movlw	96
  6889  000DC8  6E26               	movwf	___ftmul@f2,c
  6890  000DCA  0E7E               	movlw	126
  6891  000DCC  6E27               	movwf	___ftmul@f2+1,c
  6892  000DCE  0E3E               	movlw	62
  6893  000DD0  6E28               	movwf	___ftmul@f2+2,c
  6894  000DD2  EC15  F009         	call	___ftmul	;wreg free
  6895  000DD6  C023  F02D         	movff	?___ftmul,_tmpTemp	;volatile
  6896  000DDA  C024  F02E         	movff	?___ftmul+1,_tmpTemp+1	;volatile
  6897  000DDE  C025  F02F         	movff	?___ftmul+2,_tmpTemp+2	;volatile
  6898                           
  6899                           ;adc.c: 130: double var1 = tmpTemp;
  6900  000DE2  C02D  F0BC         	movff	_tmpTemp,ADC_ISR@var1	;volatile
  6901  000DE6  C02E  F0BD         	movff	_tmpTemp+1,ADC_ISR@var1+1	;volatile
  6902  000DEA  C02F  F0BE         	movff	_tmpTemp+2,ADC_ISR@var1+2	;volatile
  6903                           
  6904                           ;adc.c: 131: char var2 = (char) tmpTemp;
  6905  000DEE  C02D  F017         	movff	_tmpTemp,___fttol@f1	;volatile
  6906  000DF2  C02E  F018         	movff	_tmpTemp+1,___fttol@f1+1	;volatile
  6907  000DF6  C02F  F019         	movff	_tmpTemp+2,___fttol@f1+2	;volatile
  6908  000DFA  EC90  F009         	call	___fttol	;wreg free
  6909  000DFE  5017               	movf	?___fttol,w,c
  6910  000E00  0100               	movlb	0	; () banked
  6911  000E02  6FBB               	movwf	ADC_ISR@var2& (0+255),b
  6912                           
  6913                           ;adc.c: 132: var1 -= (double) var2;
  6914  000E04  C0BC  F0AA         	movff	ADC_ISR@var1,___ftsub@f1
  6915  000E08  C0BD  F0AB         	movff	ADC_ISR@var1+1,___ftsub@f1+1
  6916  000E0C  C0BE  F0AC         	movff	ADC_ISR@var1+2,___ftsub@f1+2
  6917  000E10  51BB               	movf	ADC_ISR@var2& (0+255),w,b
  6918  000E12  EC1C  F00F         	call	___lbtoft
  6919  000E16  C01F  F0AD         	movff	?___lbtoft,___ftsub@f2
  6920  000E1A  C020  F0AE         	movff	?___lbtoft+1,___ftsub@f2+1
  6921  000E1E  C021  F0AF         	movff	?___lbtoft+2,___ftsub@f2+2
  6922  000E22  ECA2  F00D         	call	___ftsub	;wreg free
  6923  000E26  C0AA  F0BC         	movff	?___ftsub,ADC_ISR@var1
  6924  000E2A  C0AB  F0BD         	movff	?___ftsub+1,ADC_ISR@var1+1
  6925  000E2E  C0AC  F0BE         	movff	?___ftsub+2,ADC_ISR@var1+2
  6926                           
  6927                           ;adc.c: 134: tempAtual = (char) tmpTemp;
  6928  000E32  C02D  F017         	movff	_tmpTemp,___fttol@f1	;volatile
  6929  000E36  C02E  F018         	movff	_tmpTemp+1,___fttol@f1+1	;volatile
  6930  000E3A  C02F  F019         	movff	_tmpTemp+2,___fttol@f1+2	;volatile
  6931  000E3E  EC90  F009         	call	___fttol	;wreg free
  6932  000E42  5017               	movf	?___fttol,w,c
  6933  000E44  6E47               	movwf	_tempAtual,c	;volatile
  6934                           
  6935                           ;adc.c: 136: if (var1 >= 0.5)
  6936  000E46  C0BC  F017         	movff	ADC_ISR@var1,___ftge@ff1
  6937  000E4A  C0BD  F018         	movff	ADC_ISR@var1+1,___ftge@ff1+1
  6938  000E4E  C0BE  F019         	movff	ADC_ISR@var1+2,___ftge@ff1+2
  6939  000E52  0E00               	movlw	0
  6940  000E54  6E1A               	movwf	___ftge@ff2,c
  6941  000E56  0E00               	movlw	0
  6942  000E58  6E1B               	movwf	___ftge@ff2+1,c
  6943  000E5A  0E3F               	movlw	63
  6944  000E5C  6E1C               	movwf	___ftge@ff2+2,c
  6945  000E5E  EC9F  F00B         	call	___ftge	;wreg free
  6946  000E62  B0D8               	btfsc	status,0,c
  6947                           
  6948                           ;adc.c: 137: tempAtual++;
  6949  000E64  2A47               	incf	_tempAtual,f,c	;volatile
  6950                           
  6951                           ;adc.c: 139: if (eusart_Tx_On == 0 && eusart_Tx_En == 0) {
  6952  000E66  5036               	movf	_eusart_Tx_On,w,c	;volatile
  6953  000E68  A4D8               	btfss	status,2,c
  6954  000E6A  D03A               	goto	i1u717_20
  6955  000E6C  5037               	movf	_eusart_Tx_En,w,c	;volatile
  6956  000E6E  A4D8               	btfss	status,2,c
  6957  000E70  D037               	goto	i1u717_20
  6958                           
  6959                           ;adc.c: 140: sprintf(strUSART, "\fTM=%2d_TA=%2d_AA=%1d\r", tempAtual, tempAlarme, alarme
      +                          );
  6960  000E72  0E6E               	movlw	low _strUSART
  6961  000E74  6E23               	movwf	i1sprintf@sp,c
  6962  000E76  0E00               	movlw	high _strUSART
  6963  000E78  6E24               	movwf	i1sprintf@sp+1,c
  6964  000E7A  0EFF               	movlw	low STR_1
  6965  000E7C  6E25               	movwf	i1sprintf@f,c
  6966  000E7E  0E7E               	movlw	high STR_1
  6967  000E80  6E26               	movwf	i1sprintf@f+1,c
  6968  000E82  C047  F027         	movff	_tempAtual,?i1_sprintf+4	;volatile
  6969  000E86  6A28               	clrf	?i1_sprintf+5,c
  6970  000E88  C048  F029         	movff	_tempAlarme,?i1_sprintf+6	;volatile
  6971  000E8C  6A2A               	clrf	?i1_sprintf+7,c
  6972  000E8E  C039  F02B         	movff	_alarme,?i1_sprintf+8	;volatile
  6973  000E92  6A2C               	clrf	?i1_sprintf+9,c
  6974  000E94  ECE2  F001         	call	i1_sprintf	;wreg free
  6975                           
  6976                           ;adc.c: 141: for (i = 0; strUSART[i] != '\0'; i++) {
  6977  000E98  0E00               	movlw	0
  6978  000E9A  6E41               	movwf	_i,c	;volatile
  6979  000E9C  D016               	goto	i1l518
  6980  000E9E                     
  6981                           ;adc.c: 142: EUSART1_Write(strUSART[i]);
  6982  000E9E  5041               	movf	_i,w,c	;volatile
  6983  000EA0  0D01               	mullw	1
  6984  000EA2  0E6E               	movlw	low _strUSART
  6985  000EA4  24F3               	addwf	prodl,w,c
  6986  000EA6  6ED9               	movwf	fsr2l,c
  6987  000EA8  0E00               	movlw	high _strUSART
  6988  000EAA  20F4               	addwfc	prodh,w,c
  6989  000EAC  6EDA               	movwf	fsr2h,c
  6990  000EAE  50DF               	movf	indf2,w,c
  6991  000EB0  EC03  F010         	call	i1_EUSART1_Write
  6992                           
  6993                           ;adc.c: 143: strUSART[i] = '\0';
  6994  000EB4  5041               	movf	_i,w,c	;volatile
  6995  000EB6  0D01               	mullw	1
  6996  000EB8  0E6E               	movlw	low _strUSART
  6997  000EBA  24F3               	addwf	prodl,w,c
  6998  000EBC  6ED9               	movwf	fsr2l,c
  6999  000EBE  0E00               	movlw	high _strUSART
  7000  000EC0  20F4               	addwfc	prodh,w,c
  7001  000EC2  6EDA               	movwf	fsr2h,c
  7002  000EC4  0E00               	movlw	0
  7003  000EC6  6EDF               	movwf	indf2,c
  7004  000EC8  2A41               	incf	_i,f,c	;volatile
  7005  000ECA                     i1l518:
  7006  000ECA  5041               	movf	_i,w,c	;volatile
  7007  000ECC  0D01               	mullw	1
  7008  000ECE  0E6E               	movlw	low _strUSART
  7009  000ED0  24F3               	addwf	prodl,w,c
  7010  000ED2  6ED9               	movwf	fsr2l,c
  7011  000ED4  0E00               	movlw	high _strUSART
  7012  000ED6  20F4               	addwfc	prodh,w,c
  7013  000ED8  6EDA               	movwf	fsr2h,c
  7014  000EDA  50DF               	movf	indf2,w,c
  7015  000EDC  A4D8               	btfss	status,2,c
  7016  000EDE  D7DF               	goto	i1l519
  7017  000EE0                     i1u717_20:
  7018                           
  7019                           ;adc.c: 144: }
  7020                           ;adc.c: 145: }
  7021                           ;adc.c: 148: PIR1bits.ADIF = 0;
  7022  000EE0  9C9E               	bcf	3998,6,c	;volatile
  7023  000EE2  0012               	return		;funcret
  7024  000EE4                     __end_of_ADC_ISR:
  7025                           	opt stack 0
  7026                           pclatu	equ	0xFFB
  7027                           pclath	equ	0xFFA
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           intcon2	equ	0xFF1
  7036                           intcon3	equ	0xFF0
  7037                           indf0	equ	0xFEF
  7038                           postinc0	equ	0xFEE
  7039                           fsr0h	equ	0xFEA
  7040                           fsr0l	equ	0xFE9
  7041                           wreg	equ	0xFE8
  7042                           indf1	equ	0xFE7
  7043                           fsr1h	equ	0xFE2
  7044                           fsr1l	equ	0xFE1
  7045                           bsr	equ	0xFE0
  7046                           indf2	equ	0xFDF
  7047                           postinc2	equ	0xFDE
  7048                           postdec2	equ	0xFDD
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function i1_sprintf *****************
  7054 ;; Defined at:
  7055 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  sp              2   34[COMRAM] PTR unsigned char 
  7058 ;;		 -> strLCD(42), strUSART(42), 
  7059 ;;  f               2   36[COMRAM] PTR const unsigned char 
  7060 ;;		 -> STR_20(3), STR_19(3), STR_16(3), STR_13(4), 
  7061 ;;		 -> STR_12(4), STR_11(15), STR_10(15), STR_9(15), 
  7062 ;;		 -> STR_8(22), STR_7(22), STR_3(3), STR_1(23), 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;  sprintf         4    0        struct .
  7065 ;;  sprintf         2   14[BANK0 ] int 
  7066 ;;  sprintf         2   12[BANK0 ] unsigned int 
  7067 ;;  sprintf         2   10[BANK0 ] unsigned int 
  7068 ;;  sprintf         2    8[BANK0 ] PTR void [1]
  7069 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  7070 ;;  sprintf         2    4[BANK0 ] PTR const unsigned char 
  7071 ;;		 -> sprintf@c(1), 
  7072 ;;  sprintf         1   16[BANK0 ] char 
  7073 ;;  sprintf         1    7[BANK0 ] unsigned char 
  7074 ;;  sprintf         1    6[BANK0 ] char 
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  2   34[COMRAM] int 
  7077 ;; Registers used:
  7078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7084 ;;      Params:        10       0       0       0       0       0       0
  7085 ;;      Locals:         0      13       0       0       0       0       0
  7086 ;;      Temps:          0       4       0       0       0       0       0
  7087 ;;      Totals:        10      17       0       0       0       0       0
  7088 ;;Total ram usage:       27 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    5
  7091 ;; This function calls:
  7092 ;;		i1___lwdiv
  7093 ;;		i1___lwmod
  7094 ;;		i1___wmul
  7095 ;;		i1_isdigit
  7096 ;; This function is called by:
  7097 ;;		_ADC_ISR
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           	psect	text41
  7102  0003C4                     __ptext41:
  7103                           	opt stack 0
  7104  0003C4                     i1_sprintf:
  7105                           	opt stack 17
  7106                           
  7107                           ;doprnt.c: 494: va_list ap;
  7108                           ;doprnt.c: 499: signed char c;
  7109                           ;doprnt.c: 501: int width;
  7110                           ;doprnt.c: 506: signed char prec;
  7111                           ;doprnt.c: 508: unsigned char flag;
  7112                           ;doprnt.c: 523: union {
  7113                           ;doprnt.c: 524: unsigned long vd;
  7114                           ;doprnt.c: 525: double integ;
  7115                           ;doprnt.c: 526: } tmpval;
  7116                           ;doprnt.c: 528: unsigned int val;
  7117                           ;doprnt.c: 529: unsigned len;
  7118                           ;doprnt.c: 530: const char * cp;
  7119                           ;doprnt.c: 533: *ap = __va_start();
  7120                           
  7121                           ;incstack = 0
  7122  0003C4  0E27               	movlw	low (?i1_sprintf+4)
  7123  0003C6  0100               	movlb	0	; () banked
  7124  0003C8  6FB2               	movwf	i1sprintf@ap& (0+255),b
  7125  0003CA  0E00               	movlw	high (?i1_sprintf+4)
  7126  0003CC  6FB3               	movwf	(i1sprintf@ap+1)& (0+255),b
  7127                           
  7128                           ;doprnt.c: 536: while(c = *f++) {
  7129  0003CE  D157               	goto	i1u712_20
  7130  0003D0                     
  7131                           ; BSR set to: 0
  7132                           ;doprnt.c: 538: if(c != '%')
  7133                           
  7134                           ; BSR set to: 0
  7135  0003D0  0E25               	movlw	37
  7136  0003D2  19BA               	xorwf	i1sprintf@c& (0+255),w,b
  7137  0003D4  B4D8               	btfsc	status,2,c
  7138  0003D6  D009               	goto	i1l1085
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;doprnt.c: 540: {
  7142                           ;doprnt.c: 541: ((*sp++ = (c)));
  7143  0003D8  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7144  0003DC  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7145  0003E0  C0BA  FFDF         	movff	i1sprintf@c,indf2
  7146                           
  7147                           ; BSR set to: 0
  7148  0003E4  4A23               	infsnz	i1sprintf@sp,f,c
  7149  0003E6  2A24               	incf	i1sprintf@sp+1,f,c
  7150                           
  7151                           ;doprnt.c: 542: continue;
  7152  0003E8  D14A               	goto	i1u712_20
  7153  0003EA                     i1l1085:
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;doprnt.c: 543: }
  7157                           ;doprnt.c: 546: width = 0;
  7158                           
  7159                           ; BSR set to: 0
  7160  0003EA  0E00               	movlw	0
  7161  0003EC  6FB9               	movwf	(i1sprintf@width+1)& (0+255),b
  7162  0003EE  0E00               	movlw	0
  7163  0003F0  6FB8               	movwf	i1sprintf@width& (0+255),b
  7164                           
  7165                           ;doprnt.c: 548: flag = 0;
  7166  0003F2  0E00               	movlw	0
  7167  0003F4  6FB1               	movwf	i1sprintf@flag& (0+255),b
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7171  0003F6  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7172  0003FA  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7173  0003FE                     	if	0	;tblptru may be non-zero
  7174  0003FE                     	endif
  7175  0003FE                     	if	0	;tblptru may be non-zero
  7176  0003FE                     	endif
  7177  0003FE  0008               	tblrd		*
  7178  000400  50F5               	movf	tablat,w,c
  7179  000402  EC93  F00F         	call	i1_isdigit
  7180  000406  A0D8               	btfss	status,0,c
  7181  000408  D081               	goto	i1l1089
  7182                           
  7183                           ;doprnt.c: 598: width = 0;
  7184  00040A  0E00               	movlw	0
  7185  00040C  0100               	movlb	0	; () banked
  7186  00040E  6FB9               	movwf	(i1sprintf@width+1)& (0+255),b
  7187  000410  0E00               	movlw	0
  7188  000412  6FB8               	movwf	i1sprintf@width& (0+255),b
  7189  000414                     
  7190                           ;doprnt.c: 600: width *= 10;
  7191                           
  7192                           ; BSR set to: 0
  7193  000414  C0B8  F017         	movff	i1sprintf@width,i1___wmul@multiplier
  7194  000418  C0B9  F018         	movff	i1sprintf@width+1,i1___wmul@multiplier+1
  7195  00041C  0E00               	movlw	0
  7196  00041E  6E1A               	movwf	i1___wmul@multiplicand+1,c
  7197  000420  0E0A               	movlw	10
  7198  000422  6E19               	movwf	i1___wmul@multiplicand,c
  7199  000424  EC09  F00F         	call	i1___wmul	;wreg free
  7200  000428  C017  F0B8         	movff	?i1___wmul,i1sprintf@width
  7201  00042C  C018  F0B9         	movff	?i1___wmul+1,i1sprintf@width+1
  7202                           
  7203                           ;doprnt.c: 601: width += *f++ - '0';
  7204  000430  0ED0               	movlw	208
  7205  000432  0100               	movlb	0	; () banked
  7206  000434  6FAA               	movwf	??i1_sprintf& (0+255),b
  7207  000436  0EFF               	movlw	255
  7208  000438  6FAB               	movwf	(??i1_sprintf+1)& (0+255),b
  7209  00043A  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7210  00043E  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7211  000442                     	if	0	;tblptru may be non-zero
  7212  000442                     	endif
  7213  000442                     	if	0	;tblptru may be non-zero
  7214  000442                     	endif
  7215  000442  0008               	tblrd		*
  7216  000444  50F5               	movf	tablat,w,c
  7217  000446  6FAC               	movwf	(??i1_sprintf+2)& (0+255),b
  7218  000448  6BAD               	clrf	(??i1_sprintf+3)& (0+255),b
  7219  00044A  51AA               	movf	??i1_sprintf& (0+255),w,b
  7220  00044C  27AC               	addwf	(??i1_sprintf+2)& (0+255),f,b
  7221  00044E  51AB               	movf	(??i1_sprintf+1)& (0+255),w,b
  7222  000450  23AD               	addwfc	(??i1_sprintf+3)& (0+255),f,b
  7223  000452  51AC               	movf	(??i1_sprintf+2)& (0+255),w,b
  7224  000454  27B8               	addwf	i1sprintf@width& (0+255),f,b
  7225  000456  51AD               	movf	(??i1_sprintf+3)& (0+255),w,b
  7226  000458  23B9               	addwfc	(i1sprintf@width+1)& (0+255),f,b
  7227                           
  7228                           ; BSR set to: 0
  7229  00045A  4A25               	infsnz	i1sprintf@f,f,c
  7230  00045C  2A26               	incf	i1sprintf@f+1,f,c
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7234  00045E  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7235  000462  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7236  000466                     	if	0	;tblptru may be non-zero
  7237  000466                     	endif
  7238  000466                     	if	0	;tblptru may be non-zero
  7239  000466                     	endif
  7240  000466  0008               	tblrd		*
  7241  000468  50F5               	movf	tablat,w,c
  7242  00046A  EC93  F00F         	call	i1_isdigit
  7243  00046E  A0D8               	btfss	status,0,c
  7244  000470  D04D               	goto	i1l1089
  7245  000472  D7D0               	goto	i1l1087
  7246  000474                     
  7247                           ;doprnt.c: 757: if(width > len)
  7248  000474  0100               	movlb	0	; () banked
  7249  000476  51B8               	movf	i1sprintf@width& (0+255),w,b
  7250  000478  5DB4               	subwf	i1sprintf@len& (0+255),w,b
  7251  00047A  51B9               	movf	(i1sprintf@width+1)& (0+255),w,b
  7252  00047C  59B5               	subwfb	(i1sprintf@len+1)& (0+255),w,b
  7253  00047E  B0D8               	btfsc	status,0,c
  7254  000480  D005               	goto	i1l1096
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;doprnt.c: 758: width -= len;
  7258  000482  51B4               	movf	i1sprintf@len& (0+255),w,b
  7259  000484  5FB8               	subwf	i1sprintf@width& (0+255),f,b
  7260  000486  51B5               	movf	(i1sprintf@len+1)& (0+255),w,b
  7261  000488  5BB9               	subwfb	(i1sprintf@width+1)& (0+255),f,b
  7262  00048A  D00D               	goto	i1l1098
  7263  00048C                     i1l1096:
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;doprnt.c: 759: else
  7267                           ;doprnt.c: 760: width = 0;
  7268                           
  7269                           ; BSR set to: 0
  7270  00048C  0E00               	movlw	0
  7271  00048E  6FB9               	movwf	(i1sprintf@width+1)& (0+255),b
  7272  000490  0E00               	movlw	0
  7273  000492  6FB8               	movwf	i1sprintf@width& (0+255),b
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;doprnt.c: 764: while(width--)
  7277  000494  D008               	goto	i1l1098
  7278  000496                     i1l6166:
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;doprnt.c: 765: ((*sp++ = (' ')));
  7282  000496  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7283  00049A  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7284  00049E  0E20               	movlw	32
  7285  0004A0  6EDF               	movwf	indf2,c
  7286                           
  7287                           ; BSR set to: 0
  7288  0004A2  4A23               	infsnz	i1sprintf@sp,f,c
  7289  0004A4  2A24               	incf	i1sprintf@sp+1,f,c
  7290  0004A6                     i1l1098:
  7291                           
  7292                           ; BSR set to: 0
  7293                           
  7294                           ; BSR set to: 0
  7295  0004A6  07B8               	decf	i1sprintf@width& (0+255),f,b
  7296  0004A8  A0D8               	btfss	status,0,c
  7297  0004AA  07B9               	decf	(i1sprintf@width+1)& (0+255),f,b
  7298  0004AC  29B8               	incf	i1sprintf@width& (0+255),w,b
  7299  0004AE  E1F3               	bnz	i1l6166
  7300  0004B0  29B9               	incf	(i1sprintf@width+1)& (0+255),w,b
  7301  0004B2  B4D8               	btfsc	status,2,c
  7302  0004B4  D00F               	goto	i1l1101
  7303  0004B6  D7EF               	goto	i1l1099
  7304  0004B8                     i1l6172:
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  7308  0004B8  C0AE  FFD9         	movff	i1sprintf@cp,fsr2l
  7309  0004BC  C0AF  FFDA         	movff	i1sprintf@cp+1,fsr2h
  7310  0004C0  C023  FFE1         	movff	i1sprintf@sp,fsr1l
  7311  0004C4  C024  FFE2         	movff	i1sprintf@sp+1,fsr1h
  7312  0004C8  CFDF FFE7          	movff	indf2,indf1
  7313                           
  7314                           ; BSR set to: 0
  7315  0004CC  4BAE               	infsnz	i1sprintf@cp& (0+255),f,b
  7316  0004CE  2BAF               	incf	(i1sprintf@cp+1)& (0+255),f,b
  7317                           
  7318                           ; BSR set to: 0
  7319  0004D0  4A23               	infsnz	i1sprintf@sp,f,c
  7320  0004D2  2A24               	incf	i1sprintf@sp+1,f,c
  7321  0004D4                     i1l1101:
  7322                           
  7323                           ; BSR set to: 0
  7324                           
  7325                           ; BSR set to: 0
  7326  0004D4  07B4               	decf	i1sprintf@len& (0+255),f,b
  7327  0004D6  A0D8               	btfss	status,0,c
  7328  0004D8  07B5               	decf	(i1sprintf@len+1)& (0+255),f,b
  7329  0004DA  29B4               	incf	i1sprintf@len& (0+255),w,b
  7330  0004DC  E1ED               	bnz	i1l6172
  7331  0004DE  29B5               	incf	(i1sprintf@len+1)& (0+255),w,b
  7332  0004E0  B4D8               	btfsc	status,2,c
  7333  0004E2  D0CD               	goto	i1u712_20
  7334  0004E4  D7E9               	goto	i1l1102
  7335  0004E6                     
  7336                           ; BSR set to: 0
  7337                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7338                           
  7339                           ; BSR set to: 0
  7340  0004E6  C0B2  FFD9         	movff	i1sprintf@ap,fsr2l
  7341  0004EA  C0B3  FFDA         	movff	i1sprintf@ap+1,fsr2h
  7342  0004EE  50DF               	movf	indf2,w,c
  7343  0004F0  6FBA               	movwf	i1sprintf@c& (0+255),b
  7344                           
  7345                           ; BSR set to: 0
  7346  0004F2  0E02               	movlw	2
  7347  0004F4  27B2               	addwf	i1sprintf@ap& (0+255),f,b
  7348  0004F6  0E00               	movlw	0
  7349  0004F8  23B3               	addwfc	(i1sprintf@ap+1)& (0+255),f,b
  7350  0004FA                     
  7351                           ; BSR set to: 0
  7352                           ;doprnt.c: 805: cp = (char *)&c;
  7353                           
  7354                           ; BSR set to: 0
  7355  0004FA  0EBA               	movlw	low i1sprintf@c
  7356  0004FC  6FAE               	movwf	i1sprintf@cp& (0+255),b
  7357  0004FE  0E00               	movlw	high i1sprintf@c
  7358  000500  6FAF               	movwf	(i1sprintf@cp+1)& (0+255),b
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;doprnt.c: 806: len = 1;
  7362  000502  0E00               	movlw	0
  7363  000504  6FB5               	movwf	(i1sprintf@len+1)& (0+255),b
  7364  000506  0E01               	movlw	1
  7365  000508  6FB4               	movwf	i1sprintf@len& (0+255),b
  7366                           
  7367                           ;doprnt.c: 807: goto dostring;
  7368  00050A  D7B4               	goto	i1l1095
  7369  00050C                     i1l1089:
  7370                           
  7371                           ; BSR set to: 0
  7372  00050C  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7373  000510  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7374  000514  4A25               	infsnz	i1sprintf@f,f,c
  7375  000516  2A26               	incf	i1sprintf@f+1,f,c
  7376  000518                     	if	0	;tblptru may be non-zero
  7377  000518                     	endif
  7378  000518                     	if	0	;tblptru may be non-zero
  7379  000518                     	endif
  7380  000518  0008               	tblrd		*
  7381  00051A  CFF5 F0BA          	movff	tablat,i1sprintf@c
  7382  00051E  0100               	movlb	0	; () banked
  7383  000520  51BA               	movf	i1sprintf@c& (0+255),w,b
  7384                           
  7385                           ; Switch size 1, requested type "space"
  7386                           ; Number of cases is 4, Range of values is 0 to 105
  7387                           ; switch strategies available:
  7388                           ; Name         Instructions Cycles
  7389                           ; simple_byte           13     7 (average)
  7390                           ;	Chosen strategy is simple_byte
  7391  000522  0A00               	xorlw	0	; case 0
  7392  000524  B4D8               	btfsc	status,2,c
  7393  000526  D0B7               	goto	i1u713_20
  7394  000528  0A63               	xorlw	99	; case 99
  7395  00052A  B4D8               	btfsc	status,2,c
  7396  00052C  D7DC               	goto	i1l1104
  7397  00052E  0A07               	xorlw	7	; case 100
  7398  000530  B4D8               	btfsc	status,2,c
  7399  000532  D003               	goto	i1l1094
  7400  000534  0A0D               	xorlw	13	; case 105
  7401  000536  A4D8               	btfss	status,2,c
  7402  000538  D7E0               	goto	i1l1105
  7403  00053A                     i1l1094:
  7404                           
  7405                           ;doprnt.c: 1253: {
  7406                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7407                           
  7408                           ; BSR set to: 0
  7409  00053A  C0B2  FFD9         	movff	i1sprintf@ap,fsr2l
  7410  00053E  C0B3  FFDA         	movff	i1sprintf@ap+1,fsr2h
  7411  000542  CFDE F0B6          	movff	postinc2,i1sprintf@val
  7412  000546  CFDD F0B7          	movff	postdec2,i1sprintf@val+1
  7413  00054A  0E02               	movlw	2
  7414  00054C  0100               	movlb	0	; () banked
  7415  00054E  27B2               	addwf	i1sprintf@ap& (0+255),f,b
  7416  000550  0E00               	movlw	0
  7417  000552  23B3               	addwfc	(i1sprintf@ap+1)& (0+255),f,b
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;doprnt.c: 1261: if((int)val < 0) {
  7421  000554  AFB7               	btfss	(i1sprintf@val+1)& (0+255),7,b
  7422  000556  D006               	goto	i1l1106
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;doprnt.c: 1262: flag |= 0x03;
  7426  000558  0E03               	movlw	3
  7427  00055A  13B1               	iorwf	i1sprintf@flag& (0+255),f,b
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;doprnt.c: 1263: val = -val;
  7431  00055C  6DB6               	negf	i1sprintf@val& (0+255),b
  7432  00055E  1FB7               	comf	(i1sprintf@val+1)& (0+255),f,b
  7433  000560  B0D8               	btfsc	status,0,c
  7434  000562  2BB7               	incf	(i1sprintf@val+1)& (0+255),f,b
  7435  000564                     i1l1106:
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;doprnt.c: 1264: }
  7439                           ;doprnt.c: 1266: }
  7440                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7441                           
  7442                           ; BSR set to: 0
  7443  000564  0E01               	movlw	1
  7444  000566  6FBA               	movwf	i1sprintf@c& (0+255),b
  7445  000568                     i1l6204:
  7446                           
  7447                           ; BSR set to: 0
  7448  000568  0E05               	movlw	5
  7449  00056A  19BA               	xorwf	i1sprintf@c& (0+255),w,b
  7450  00056C  B4D8               	btfsc	status,2,c
  7451  00056E  D012               	goto	i1u705_20
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;doprnt.c: 1306: if(val < dpowers[c])
  7455                           
  7456                           ; BSR set to: 0
  7457                           
  7458                           ; BSR set to: 0
  7459  000570  51BA               	movf	i1sprintf@c& (0+255),w,b
  7460  000572  0D02               	mullw	2
  7461  000574  0EF5               	movlw	low _dpowers
  7462  000576  24F3               	addwf	prodl,w,c
  7463  000578  6EF6               	movwf	tblptrl,c
  7464  00057A  0E7E               	movlw	high _dpowers
  7465  00057C  20F4               	addwfc	prodh,w,c
  7466  00057E  6EF7               	movwf	tblptrh,c
  7467  000580                     	if	0	;There are less than 3 active tblptr bytes
  7468  000580                     	endif
  7469  000580  0009               	tblrd		*+
  7470  000582  50F5               	movf	tablat,w,c
  7471  000584  5DB6               	subwf	i1sprintf@val& (0+255),w,b
  7472  000586  0009               	tblrd		*+
  7473  000588  50F5               	movf	tablat,w,c
  7474  00058A  59B7               	subwfb	(i1sprintf@val+1)& (0+255),w,b
  7475  00058C  A0D8               	btfss	status,0,c
  7476  00058E  D002               	goto	i1u705_20
  7477                           
  7478                           ; BSR set to: 0
  7479                           
  7480                           ; BSR set to: 0
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;doprnt.c: 1307: break;
  7484  000590  2BBA               	incf	i1sprintf@c& (0+255),f,b
  7485  000592  D7EA               	goto	i1l6204
  7486  000594                     i1u705_20:
  7487                           
  7488                           ; BSR set to: 0
  7489                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7490                           
  7491                           ; BSR set to: 0
  7492  000594  51B8               	movf	i1sprintf@width& (0+255),w,b
  7493  000596  11B9               	iorwf	(i1sprintf@width+1)& (0+255),w,b
  7494  000598  B4D8               	btfsc	status,2,c
  7495  00059A  D009               	goto	i1l1110
  7496                           
  7497                           ; BSR set to: 0
  7498  00059C  C0B1  F0AA         	movff	i1sprintf@flag,??i1_sprintf
  7499  0005A0  0E03               	movlw	3
  7500  0005A2  17AA               	andwf	??i1_sprintf& (0+255),f,b
  7501  0005A4  B4D8               	btfsc	status,2,c
  7502  0005A6  D003               	goto	i1l1110
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;doprnt.c: 1346: width--;
  7506  0005A8  07B8               	decf	i1sprintf@width& (0+255),f,b
  7507  0005AA  A0D8               	btfss	status,0,c
  7508  0005AC  07B9               	decf	(i1sprintf@width+1)& (0+255),f,b
  7509  0005AE                     i1l1110:
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;doprnt.c: 1381: if(width > c)
  7513                           
  7514                           ; BSR set to: 0
  7515  0005AE  0E80               	movlw	128
  7516  0005B0  BFBA               	btfsc	i1sprintf@c& (0+255),7,b
  7517  0005B2  0E7F               	movlw	127
  7518  0005B4  6FAA               	movwf	??i1_sprintf& (0+255),b
  7519  0005B6  51B8               	movf	i1sprintf@width& (0+255),w,b
  7520  0005B8  5DBA               	subwf	i1sprintf@c& (0+255),w,b
  7521  0005BA  51B9               	movf	(i1sprintf@width+1)& (0+255),w,b
  7522  0005BC  0A80               	xorlw	128
  7523  0005BE  59AA               	subwfb	??i1_sprintf& (0+255),w,b
  7524  0005C0  B0D8               	btfsc	status,0,c
  7525  0005C2  D007               	goto	i1l1111
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;doprnt.c: 1382: width -= c;
  7529  0005C4  51BA               	movf	i1sprintf@c& (0+255),w,b
  7530  0005C6  5FB8               	subwf	i1sprintf@width& (0+255),f,b
  7531  0005C8  0E00               	movlw	0
  7532  0005CA  BFBA               	btfsc	i1sprintf@c& (0+255),7,b
  7533  0005CC  0EFF               	movlw	255
  7534  0005CE  5BB9               	subwfb	(i1sprintf@width+1)& (0+255),f,b
  7535  0005D0  D004               	goto	i1l1112
  7536  0005D2                     i1l1111:
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;doprnt.c: 1383: else
  7540                           ;doprnt.c: 1384: width = 0;
  7541                           
  7542                           ; BSR set to: 0
  7543  0005D2  0E00               	movlw	0
  7544  0005D4  6FB9               	movwf	(i1sprintf@width+1)& (0+255),b
  7545  0005D6  0E00               	movlw	0
  7546  0005D8  6FB8               	movwf	i1sprintf@width& (0+255),b
  7547  0005DA                     i1l1112:
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;doprnt.c: 1422: {
  7551                           ;doprnt.c: 1424: if(width
  7552                           ;doprnt.c: 1428: )
  7553                           
  7554                           ; BSR set to: 0
  7555  0005DA  51B8               	movf	i1sprintf@width& (0+255),w,b
  7556  0005DC  11B9               	iorwf	(i1sprintf@width+1)& (0+255),w,b
  7557  0005DE  B4D8               	btfsc	status,2,c
  7558  0005E0  D00F               	goto	i1u710_20
  7559  0005E2                     i1u709_20:
  7560                           
  7561                           ; BSR set to: 0
  7562                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7563                           
  7564                           ; BSR set to: 0
  7565                           
  7566                           ;doprnt.c: 1429: do
  7567  0005E2  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7568  0005E6  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7569  0005EA  0E20               	movlw	32
  7570  0005EC  6EDF               	movwf	indf2,c
  7571                           
  7572                           ; BSR set to: 0
  7573  0005EE  4A23               	infsnz	i1sprintf@sp,f,c
  7574  0005F0  2A24               	incf	i1sprintf@sp+1,f,c
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;doprnt.c: 1431: while(--width);
  7578  0005F2  07B8               	decf	i1sprintf@width& (0+255),f,b
  7579  0005F4  A0D8               	btfss	status,0,c
  7580  0005F6  07B9               	decf	(i1sprintf@width+1)& (0+255),f,b
  7581  0005F8  51B8               	movf	i1sprintf@width& (0+255),w,b
  7582  0005FA  11B9               	iorwf	(i1sprintf@width+1)& (0+255),w,b
  7583  0005FC  A4D8               	btfss	status,2,c
  7584  0005FE  D7F1               	goto	i1u709_20
  7585  000600                     i1u710_20:
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;doprnt.c: 1438: if(flag & 0x03)
  7589                           
  7590                           ; BSR set to: 0
  7591                           
  7592                           ; BSR set to: 0
  7593  000600  C0B1  F0AA         	movff	i1sprintf@flag,??i1_sprintf
  7594  000604  0E03               	movlw	3
  7595  000606  17AA               	andwf	??i1_sprintf& (0+255),f,b
  7596  000608  B4D8               	btfsc	status,2,c
  7597  00060A  D008               	goto	i1l1116
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7601  00060C  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7602  000610  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7603  000614  0E2D               	movlw	45
  7604  000616  6EDF               	movwf	indf2,c
  7605                           
  7606                           ; BSR set to: 0
  7607  000618  4A23               	infsnz	i1sprintf@sp,f,c
  7608  00061A  2A24               	incf	i1sprintf@sp+1,f,c
  7609  00061C                     i1l1116:
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;doprnt.c: 1469: }
  7613                           ;doprnt.c: 1472: prec = c;
  7614                           
  7615                           ; BSR set to: 0
  7616  00061C  C0BA  F0B0         	movff	i1sprintf@c,i1sprintf@prec
  7617                           
  7618                           ;doprnt.c: 1474: while(prec--) {
  7619  000620  D02A               	goto	i1l1117
  7620  000622                     
  7621                           ; BSR set to: 0
  7622                           ;doprnt.c: 1478: {
  7623                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7624                           
  7625                           ; BSR set to: 0
  7626  000622  51B0               	movf	i1sprintf@prec& (0+255),w,b
  7627  000624  0D02               	mullw	2
  7628  000626  0EF5               	movlw	low _dpowers
  7629  000628  24F3               	addwf	prodl,w,c
  7630  00062A  6EF6               	movwf	tblptrl,c
  7631  00062C  0E7E               	movlw	high _dpowers
  7632  00062E  20F4               	addwfc	prodh,w,c
  7633  000630  6EF7               	movwf	tblptrh,c
  7634  000632                     	if	0	;There are less than 3 active tblptr bytes
  7635  000632                     	endif
  7636  000632  0009               	tblrd		*+
  7637  000634  CFF5 F019          	movff	tablat,i1___lwdiv@divisor
  7638  000638  000A               	tblrd		*-
  7639  00063A  CFF5 F01A          	movff	tablat,i1___lwdiv@divisor+1
  7640  00063E  C0B6  F017         	movff	i1sprintf@val,i1___lwdiv@dividend
  7641  000642  C0B7  F018         	movff	i1sprintf@val+1,i1___lwdiv@dividend+1
  7642  000646  ECCF  F00C         	call	i1___lwdiv	;wreg free
  7643  00064A  C017  F01E         	movff	?i1___lwdiv,i1___lwmod@dividend
  7644  00064E  C018  F01F         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
  7645  000652  0E00               	movlw	0
  7646  000654  6E21               	movwf	i1___lwmod@divisor+1,c
  7647  000656  0E0A               	movlw	10
  7648  000658  6E20               	movwf	i1___lwmod@divisor,c
  7649  00065A  EC81  F00D         	call	i1___lwmod	;wreg free
  7650  00065E  501E               	movf	?i1___lwmod,w,c
  7651  000660  0F30               	addlw	48
  7652  000662  0100               	movlb	0	; () banked
  7653  000664  6FBA               	movwf	i1sprintf@c& (0+255),b
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;doprnt.c: 1523: }
  7657                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7658  000666  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7659  00066A  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7660  00066E  C0BA  FFDF         	movff	i1sprintf@c,indf2
  7661                           
  7662                           ; BSR set to: 0
  7663  000672  4A23               	infsnz	i1sprintf@sp,f,c
  7664  000674  2A24               	incf	i1sprintf@sp+1,f,c
  7665  000676                     i1l1117:
  7666                           
  7667                           ; BSR set to: 0
  7668                           
  7669                           ; BSR set to: 0
  7670  000676  07B0               	decf	i1sprintf@prec& (0+255),f,b
  7671  000678  29B0               	incf	i1sprintf@prec& (0+255),w,b
  7672  00067A  A4D8               	btfss	status,2,c
  7673  00067C  D7D2               	goto	i1l1118
  7674  00067E                     i1u712_20:
  7675                           
  7676                           ; BSR set to: 0
  7677                           
  7678                           ; BSR set to: 0
  7679                           
  7680                           ; BSR set to: 0
  7681  00067E  C025  FFF6         	movff	i1sprintf@f,tblptrl
  7682  000682  C026  FFF7         	movff	i1sprintf@f+1,tblptrh
  7683  000686  4A25               	infsnz	i1sprintf@f,f,c
  7684  000688  2A26               	incf	i1sprintf@f+1,f,c
  7685  00068A                     	if	0	;tblptru may be non-zero
  7686  00068A                     	endif
  7687  00068A                     	if	0	;tblptru may be non-zero
  7688  00068A                     	endif
  7689  00068A  0008               	tblrd		*
  7690  00068C  CFF5 F0BA          	movff	tablat,i1sprintf@c
  7691  000690  51BA               	movf	i1sprintf@c& (0+255),w,b
  7692  000692  A4D8               	btfss	status,2,c
  7693  000694  D69D               	goto	i1l1084
  7694  000696                     i1u713_20:
  7695                           
  7696                           ;doprnt.c: 1538: *sp = 0;
  7697                           
  7698                           ; BSR set to: 0
  7699                           
  7700                           ;doprnt.c: 1525: }
  7701                           ;doprnt.c: 1533: }
  7702                           ;doprnt.c: 1535: alldone:
  7703                           
  7704                           ; BSR set to: 0
  7705  000696  C023  FFD9         	movff	i1sprintf@sp,fsr2l
  7706  00069A  C024  FFDA         	movff	i1sprintf@sp+1,fsr2h
  7707  00069E  0E00               	movlw	0
  7708  0006A0  6EDF               	movwf	indf2,c
  7709  0006A2  0012               	return	
  7710  0006A4                     __end_ofi1_sprintf:
  7711                           	opt stack 0
  7712                           pclatu	equ	0xFFB
  7713                           pclath	equ	0xFFA
  7714                           tblptru	equ	0xFF8
  7715                           tblptrh	equ	0xFF7
  7716                           tblptrl	equ	0xFF6
  7717                           tablat	equ	0xFF5
  7718                           prodh	equ	0xFF4
  7719                           prodl	equ	0xFF3
  7720                           intcon	equ	0xFF2
  7721                           intcon2	equ	0xFF1
  7722                           intcon3	equ	0xFF0
  7723                           indf0	equ	0xFEF
  7724                           postinc0	equ	0xFEE
  7725                           fsr0h	equ	0xFEA
  7726                           fsr0l	equ	0xFE9
  7727                           wreg	equ	0xFE8
  7728                           indf1	equ	0xFE7
  7729                           fsr1h	equ	0xFE2
  7730                           fsr1l	equ	0xFE1
  7731                           bsr	equ	0xFE0
  7732                           indf2	equ	0xFDF
  7733                           postinc2	equ	0xFDE
  7734                           postdec2	equ	0xFDD
  7735                           fsr2h	equ	0xFDA
  7736                           fsr2l	equ	0xFD9
  7737                           status	equ	0xFD8
  7738                           
  7739 ;; *************** function i1_isdigit *****************
  7740 ;; Defined at:
  7741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;  c               1    wreg     unsigned char 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  c               1   24[COMRAM] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;		None               void
  7748 ;; Registers used:
  7749 ;;		wreg, status,2, status,0
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7755 ;;      Params:         0       0       0       0       0       0       0
  7756 ;;      Locals:         2       0       0       0       0       0       0
  7757 ;;      Temps:          1       0       0       0       0       0       0
  7758 ;;      Totals:         3       0       0       0       0       0       0
  7759 ;;Total ram usage:        3 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    4
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		i1_sprintf
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text42
  7770  001F26                     __ptext42:
  7771                           	opt stack 0
  7772  001F26                     i1_isdigit:
  7773                           	opt stack 17
  7774                           
  7775                           ;incstack = 0
  7776                           ;i1isdigit@c stored from wreg
  7777  001F26  6E19               	movwf	i1isdigit@c,c
  7778  001F28  0E00               	movlw	0
  7779  001F2A  6E18               	movwf	i1_isdigit$2575,c
  7780  001F2C  0E3A               	movlw	58
  7781  001F2E  6019               	cpfslt	i1isdigit@c,c
  7782  001F30  D005               	goto	i1l1451
  7783  001F32  0E2F               	movlw	47
  7784  001F34  6419               	cpfsgt	i1isdigit@c,c
  7785  001F36  D002               	goto	i1l1451
  7786  001F38  0E01               	movlw	1
  7787  001F3A  6E18               	movwf	i1_isdigit$2575,c
  7788  001F3C                     i1l1451:
  7789  001F3C  C018  F017         	movff	i1_isdigit$2575,??i1_isdigit
  7790  001F40  3017               	rrcf	??i1_isdigit,w,c
  7791  001F42  0012               	return	
  7792  001F44                     __end_ofi1_isdigit:
  7793                           	opt stack 0
  7794                           pclatu	equ	0xFFB
  7795                           pclath	equ	0xFFA
  7796                           tblptru	equ	0xFF8
  7797                           tblptrh	equ	0xFF7
  7798                           tblptrl	equ	0xFF6
  7799                           tablat	equ	0xFF5
  7800                           prodh	equ	0xFF4
  7801                           prodl	equ	0xFF3
  7802                           intcon	equ	0xFF2
  7803                           intcon2	equ	0xFF1
  7804                           intcon3	equ	0xFF0
  7805                           indf0	equ	0xFEF
  7806                           postinc0	equ	0xFEE
  7807                           fsr0h	equ	0xFEA
  7808                           fsr0l	equ	0xFE9
  7809                           wreg	equ	0xFE8
  7810                           indf1	equ	0xFE7
  7811                           fsr1h	equ	0xFE2
  7812                           fsr1l	equ	0xFE1
  7813                           bsr	equ	0xFE0
  7814                           indf2	equ	0xFDF
  7815                           postinc2	equ	0xFDE
  7816                           postdec2	equ	0xFDD
  7817                           fsr2h	equ	0xFDA
  7818                           fsr2l	equ	0xFD9
  7819                           status	equ	0xFD8
  7820                           
  7821 ;; *************** function i1___wmul *****************
  7822 ;; Defined at:
  7823 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  multiplier      2   22[COMRAM] unsigned int 
  7826 ;;  multiplicand    2   24[COMRAM] unsigned int 
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;  __wmul          2   26[COMRAM] unsigned int 
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  2   22[COMRAM] unsigned int 
  7831 ;; Registers used:
  7832 ;;		wreg, status,2, status,0, prodl, prodh
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7838 ;;      Params:         4       0       0       0       0       0       0
  7839 ;;      Locals:         2       0       0       0       0       0       0
  7840 ;;      Temps:          0       0       0       0       0       0       0
  7841 ;;      Totals:         6       0       0       0       0       0       0
  7842 ;;Total ram usage:        6 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    4
  7845 ;; This function calls:
  7846 ;;		Nothing
  7847 ;; This function is called by:
  7848 ;;		i1_sprintf
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           	psect	text43
  7853  001E12                     __ptext43:
  7854                           	opt stack 0
  7855  001E12                     i1___wmul:
  7856                           	opt stack 17
  7857                           
  7858                           ;incstack = 0
  7859  001E12  5017               	movf	i1___wmul@multiplier,w,c
  7860  001E14  0219               	mulwf	i1___wmul@multiplicand,c
  7861  001E16  CFF3 F01B          	movff	prodl,i1___wmul@product
  7862  001E1A  CFF4 F01C          	movff	prodh,i1___wmul@product+1
  7863  001E1E  5017               	movf	i1___wmul@multiplier,w,c
  7864  001E20  021A               	mulwf	i1___wmul@multiplicand+1,c
  7865  001E22  50F3               	movf	prodl,w,c
  7866  001E24  261C               	addwf	i1___wmul@product+1,f,c
  7867  001E26  5018               	movf	i1___wmul@multiplier+1,w,c
  7868  001E28  0219               	mulwf	i1___wmul@multiplicand,c
  7869  001E2A  50F3               	movf	prodl,w,c
  7870  001E2C  261C               	addwf	i1___wmul@product+1,f,c
  7871  001E2E  C01B  F017         	movff	i1___wmul@product,?i1___wmul
  7872  001E32  C01C  F018         	movff	i1___wmul@product+1,?i1___wmul+1
  7873  001E36  0012               	return	
  7874  001E38                     __end_ofi1___wmul:
  7875                           	opt stack 0
  7876                           pclatu	equ	0xFFB
  7877                           pclath	equ	0xFFA
  7878                           tblptru	equ	0xFF8
  7879                           tblptrh	equ	0xFF7
  7880                           tblptrl	equ	0xFF6
  7881                           tablat	equ	0xFF5
  7882                           prodh	equ	0xFF4
  7883                           prodl	equ	0xFF3
  7884                           intcon	equ	0xFF2
  7885                           intcon2	equ	0xFF1
  7886                           intcon3	equ	0xFF0
  7887                           indf0	equ	0xFEF
  7888                           postinc0	equ	0xFEE
  7889                           fsr0h	equ	0xFEA
  7890                           fsr0l	equ	0xFE9
  7891                           wreg	equ	0xFE8
  7892                           indf1	equ	0xFE7
  7893                           fsr1h	equ	0xFE2
  7894                           fsr1l	equ	0xFE1
  7895                           bsr	equ	0xFE0
  7896                           indf2	equ	0xFDF
  7897                           postinc2	equ	0xFDE
  7898                           postdec2	equ	0xFDD
  7899                           fsr2h	equ	0xFDA
  7900                           fsr2l	equ	0xFD9
  7901                           status	equ	0xFD8
  7902                           
  7903 ;; *************** function i1___lwmod *****************
  7904 ;; Defined at:
  7905 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  dividend        2   29[COMRAM] unsigned int 
  7908 ;;  divisor         2   31[COMRAM] unsigned int 
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;  __lwmod         1   33[COMRAM] unsigned char 
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  2   29[COMRAM] unsigned int 
  7913 ;; Registers used:
  7914 ;;		wreg, status,2, status,0
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7920 ;;      Params:         4       0       0       0       0       0       0
  7921 ;;      Locals:         1       0       0       0       0       0       0
  7922 ;;      Temps:          0       0       0       0       0       0       0
  7923 ;;      Totals:         5       0       0       0       0       0       0
  7924 ;;Total ram usage:        5 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    4
  7927 ;; This function calls:
  7928 ;;		Nothing
  7929 ;; This function is called by:
  7930 ;;		i1_sprintf
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           	psect	text44
  7935  001B02                     __ptext44:
  7936                           	opt stack 0
  7937  001B02                     i1___lwmod:
  7938                           	opt stack 17
  7939                           
  7940                           ;incstack = 0
  7941  001B02  5020               	movf	i1___lwmod@divisor,w,c
  7942  001B04  1021               	iorwf	i1___lwmod@divisor+1,w,c
  7943  001B06  B4D8               	btfsc	status,2,c
  7944  001B08  D018               	goto	i1l1545
  7945  001B0A  0E01               	movlw	1
  7946  001B0C  6E22               	movwf	i1___lwmod@counter,c
  7947  001B0E  D004               	goto	i1l1540
  7948  001B10  90D8               	bcf	status,0,c
  7949  001B12  3620               	rlcf	i1___lwmod@divisor,f,c
  7950  001B14  3621               	rlcf	i1___lwmod@divisor+1,f,c
  7951  001B16  2A22               	incf	i1___lwmod@counter,f,c
  7952  001B18                     i1l1540:
  7953  001B18  AE21               	btfss	i1___lwmod@divisor+1,7,c
  7954  001B1A  D7FA               	goto	i1l1541
  7955  001B1C                     i1u650_20:
  7956  001B1C  5020               	movf	i1___lwmod@divisor,w,c
  7957  001B1E  5C1E               	subwf	i1___lwmod@dividend,w,c
  7958  001B20  5021               	movf	i1___lwmod@divisor+1,w,c
  7959  001B22  581F               	subwfb	i1___lwmod@dividend+1,w,c
  7960  001B24  A0D8               	btfss	status,0,c
  7961  001B26  D004               	goto	i1l1544
  7962  001B28  5020               	movf	i1___lwmod@divisor,w,c
  7963  001B2A  5E1E               	subwf	i1___lwmod@dividend,f,c
  7964  001B2C  5021               	movf	i1___lwmod@divisor+1,w,c
  7965  001B2E  5A1F               	subwfb	i1___lwmod@dividend+1,f,c
  7966  001B30                     i1l1544:
  7967  001B30  90D8               	bcf	status,0,c
  7968  001B32  3221               	rrcf	i1___lwmod@divisor+1,f,c
  7969  001B34  3220               	rrcf	i1___lwmod@divisor,f,c
  7970  001B36  2E22               	decfsz	i1___lwmod@counter,f,c
  7971  001B38  D7F1               	goto	i1u650_20
  7972  001B3A                     i1l1545:
  7973  001B3A  C01E  F01E         	movff	i1___lwmod@dividend,?i1___lwmod
  7974  001B3E  C01F  F01F         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
  7975  001B42  0012               	return		;funcret
  7976  001B44                     __end_ofi1___lwmod:
  7977                           	opt stack 0
  7978                           pclatu	equ	0xFFB
  7979                           pclath	equ	0xFFA
  7980                           tblptru	equ	0xFF8
  7981                           tblptrh	equ	0xFF7
  7982                           tblptrl	equ	0xFF6
  7983                           tablat	equ	0xFF5
  7984                           prodh	equ	0xFF4
  7985                           prodl	equ	0xFF3
  7986                           intcon	equ	0xFF2
  7987                           intcon2	equ	0xFF1
  7988                           intcon3	equ	0xFF0
  7989                           indf0	equ	0xFEF
  7990                           postinc0	equ	0xFEE
  7991                           fsr0h	equ	0xFEA
  7992                           fsr0l	equ	0xFE9
  7993                           wreg	equ	0xFE8
  7994                           indf1	equ	0xFE7
  7995                           fsr1h	equ	0xFE2
  7996                           fsr1l	equ	0xFE1
  7997                           bsr	equ	0xFE0
  7998                           indf2	equ	0xFDF
  7999                           postinc2	equ	0xFDE
  8000                           postdec2	equ	0xFDD
  8001                           fsr2h	equ	0xFDA
  8002                           fsr2l	equ	0xFD9
  8003                           status	equ	0xFD8
  8004                           
  8005 ;; *************** function i1___lwdiv *****************
  8006 ;; Defined at:
  8007 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;  dividend        2   22[COMRAM] unsigned int 
  8010 ;;  divisor         2   24[COMRAM] unsigned int 
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;  __lwdiv         2   27[COMRAM] unsigned int 
  8013 ;;  __lwdiv         1   26[COMRAM] unsigned char 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  2   22[COMRAM] unsigned int 
  8016 ;; Registers used:
  8017 ;;		wreg, status,2, status,0
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8023 ;;      Params:         4       0       0       0       0       0       0
  8024 ;;      Locals:         3       0       0       0       0       0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0
  8026 ;;      Totals:         7       0       0       0       0       0       0
  8027 ;;Total ram usage:        7 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    4
  8030 ;; This function calls:
  8031 ;;		Nothing
  8032 ;; This function is called by:
  8033 ;;		i1_sprintf
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           	psect	text45
  8038  00199E                     __ptext45:
  8039                           	opt stack 0
  8040  00199E                     i1___lwdiv:
  8041                           	opt stack 17
  8042                           
  8043                           ;incstack = 0
  8044  00199E  0E00               	movlw	0
  8045  0019A0  6E1D               	movwf	i1___lwdiv@quotient+1,c
  8046  0019A2  0E00               	movlw	0
  8047  0019A4  6E1C               	movwf	i1___lwdiv@quotient,c
  8048  0019A6  5019               	movf	i1___lwdiv@divisor,w,c
  8049  0019A8  101A               	iorwf	i1___lwdiv@divisor+1,w,c
  8050  0019AA  B4D8               	btfsc	status,2,c
  8051  0019AC  D01C               	goto	i1l1535
  8052  0019AE  0E01               	movlw	1
  8053  0019B0  6E1B               	movwf	i1___lwdiv@counter,c
  8054  0019B2  D004               	goto	i1l1530
  8055  0019B4  90D8               	bcf	status,0,c
  8056  0019B6  3619               	rlcf	i1___lwdiv@divisor,f,c
  8057  0019B8  361A               	rlcf	i1___lwdiv@divisor+1,f,c
  8058  0019BA  2A1B               	incf	i1___lwdiv@counter,f,c
  8059  0019BC                     i1l1530:
  8060  0019BC  AE1A               	btfss	i1___lwdiv@divisor+1,7,c
  8061  0019BE  D7FA               	goto	i1l1531
  8062  0019C0                     i1u647_20:
  8063  0019C0  90D8               	bcf	status,0,c
  8064  0019C2  361C               	rlcf	i1___lwdiv@quotient,f,c
  8065  0019C4  361D               	rlcf	i1___lwdiv@quotient+1,f,c
  8066  0019C6  5019               	movf	i1___lwdiv@divisor,w,c
  8067  0019C8  5C17               	subwf	i1___lwdiv@dividend,w,c
  8068  0019CA  501A               	movf	i1___lwdiv@divisor+1,w,c
  8069  0019CC  5818               	subwfb	i1___lwdiv@dividend+1,w,c
  8070  0019CE  A0D8               	btfss	status,0,c
  8071  0019D0  D005               	goto	i1l1534
  8072  0019D2  5019               	movf	i1___lwdiv@divisor,w,c
  8073  0019D4  5E17               	subwf	i1___lwdiv@dividend,f,c
  8074  0019D6  501A               	movf	i1___lwdiv@divisor+1,w,c
  8075  0019D8  5A18               	subwfb	i1___lwdiv@dividend+1,f,c
  8076  0019DA  801C               	bsf	i1___lwdiv@quotient,0,c
  8077  0019DC                     i1l1534:
  8078  0019DC  90D8               	bcf	status,0,c
  8079  0019DE  321A               	rrcf	i1___lwdiv@divisor+1,f,c
  8080  0019E0  3219               	rrcf	i1___lwdiv@divisor,f,c
  8081  0019E2  2E1B               	decfsz	i1___lwdiv@counter,f,c
  8082  0019E4  D7ED               	goto	i1u647_20
  8083  0019E6                     i1l1535:
  8084  0019E6  C01C  F017         	movff	i1___lwdiv@quotient,?i1___lwdiv
  8085  0019EA  C01D  F018         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  8086  0019EE  0012               	return		;funcret
  8087  0019F0                     __end_ofi1___lwdiv:
  8088                           	opt stack 0
  8089                           pclatu	equ	0xFFB
  8090                           pclath	equ	0xFFA
  8091                           tblptru	equ	0xFF8
  8092                           tblptrh	equ	0xFF7
  8093                           tblptrl	equ	0xFF6
  8094                           tablat	equ	0xFF5
  8095                           prodh	equ	0xFF4
  8096                           prodl	equ	0xFF3
  8097                           intcon	equ	0xFF2
  8098                           intcon2	equ	0xFF1
  8099                           intcon3	equ	0xFF0
  8100                           indf0	equ	0xFEF
  8101                           postinc0	equ	0xFEE
  8102                           fsr0h	equ	0xFEA
  8103                           fsr0l	equ	0xFE9
  8104                           wreg	equ	0xFE8
  8105                           indf1	equ	0xFE7
  8106                           fsr1h	equ	0xFE2
  8107                           fsr1l	equ	0xFE1
  8108                           bsr	equ	0xFE0
  8109                           indf2	equ	0xFDF
  8110                           postinc2	equ	0xFDE
  8111                           postdec2	equ	0xFDD
  8112                           fsr2h	equ	0xFDA
  8113                           fsr2l	equ	0xFD9
  8114                           status	equ	0xFD8
  8115                           
  8116 ;; *************** function i1_EUSART1_Write *****************
  8117 ;; Defined at:
  8118 ;;		line 103 in file "mcc_generated_files/eusart1.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;  txData          1    wreg     unsigned char 
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  txData          1   22[COMRAM] unsigned char 
  8123 ;; Return value:  Size  Location     Type
  8124 ;;                  1    wreg      void 
  8125 ;; Registers used:
  8126 ;;		wreg
  8127 ;; Tracked objects:
  8128 ;;		On entry : 0/0
  8129 ;;		On exit  : 0/0
  8130 ;;		Unchanged: 0/0
  8131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8132 ;;      Params:         0       0       0       0       0       0       0
  8133 ;;      Locals:         1       0       0       0       0       0       0
  8134 ;;      Temps:          0       0       0       0       0       0       0
  8135 ;;      Totals:         1       0       0       0       0       0       0
  8136 ;;Total ram usage:        1 bytes
  8137 ;; Hardware stack levels used:    1
  8138 ;; Hardware stack levels required when called:    4
  8139 ;; This function calls:
  8140 ;;		Nothing
  8141 ;; This function is called by:
  8142 ;;		_ADC_ISR
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text46
  8147  002006                     __ptext46:
  8148                           	opt stack 0
  8149  002006                     i1_EUSART1_Write:
  8150                           	opt stack 18
  8151                           
  8152                           ;incstack = 0
  8153                           ;i1EUSART1_Write@txData stored from wreg
  8154  002006  6E17               	movwf	i1EUSART1_Write@txData,c
  8155  002008                     
  8156                           ;eusart1.c: 104: while (!PIR1bits.TX1IF);
  8157  002008  A89E               	btfss	3998,4,c	;volatile
  8158  00200A  D7FE               	goto	i1l6134
  8159                           
  8160                           ;eusart1.c: 105: TXREG1 = txData;
  8161  00200C  C017  FFAD         	movff	i1EUSART1_Write@txData,4013	;volatile
  8162  002010  0012               	return		;funcret
  8163  002012                     __end_ofi1_EUSART1_Write:
  8164                           	opt stack 0
  8165                           pclatu	equ	0xFFB
  8166                           pclath	equ	0xFFA
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           intcon2	equ	0xFF1
  8175                           intcon3	equ	0xFF0
  8176                           indf0	equ	0xFEF
  8177                           postinc0	equ	0xFEE
  8178                           fsr0h	equ	0xFEA
  8179                           fsr0l	equ	0xFE9
  8180                           wreg	equ	0xFE8
  8181                           indf1	equ	0xFE7
  8182                           fsr1h	equ	0xFE2
  8183                           fsr1l	equ	0xFE1
  8184                           bsr	equ	0xFE0
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192 ;; *************** function ___lbtoft *****************
  8193 ;; Defined at:
  8194 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;  c               1    wreg     unsigned char 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  c               1   33[COMRAM] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  3   30[COMRAM] float 
  8201 ;; Registers used:
  8202 ;;		wreg, status,2, status,0, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8208 ;;      Params:         3       0       0       0       0       0       0
  8209 ;;      Locals:         1       0       0       0       0       0       0
  8210 ;;      Temps:          0       0       0       0       0       0       0
  8211 ;;      Totals:         4       0       0       0       0       0       0
  8212 ;;Total ram usage:        4 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    5
  8215 ;; This function calls:
  8216 ;;		___ftpack
  8217 ;; This function is called by:
  8218 ;;		_ADC_ISR
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text47
  8223  001E38                     __ptext47:
  8224                           	opt stack 0
  8225  001E38                     ___lbtoft:
  8226                           	opt stack 17
  8227                           
  8228                           ;incstack = 0
  8229                           ;___lbtoft@c stored from wreg
  8230  001E38  6E22               	movwf	___lbtoft@c,c
  8231  001E3A  5022               	movf	___lbtoft@c,w,c
  8232  001E3C  6E17               	movwf	___ftpack@arg,c
  8233  001E3E  6A18               	clrf	___ftpack@arg+1,c
  8234  001E40  6A19               	clrf	___ftpack@arg+2,c
  8235  001E42  0E8E               	movlw	142
  8236  001E44  6E1A               	movwf	___ftpack@exp,c
  8237  001E46  0E00               	movlw	0
  8238  001E48  6E1B               	movwf	___ftpack@sign,c
  8239  001E4A  EC48  F00B         	call	___ftpack	;wreg free
  8240  001E4E  C017  F01F         	movff	?___ftpack,?___lbtoft
  8241  001E52  C018  F020         	movff	?___ftpack+1,?___lbtoft+1
  8242  001E56  C019  F021         	movff	?___ftpack+2,?___lbtoft+2
  8243  001E5A  0012               	return	
  8244  001E5C                     __end_of___lbtoft:
  8245                           	opt stack 0
  8246                           pclatu	equ	0xFFB
  8247                           pclath	equ	0xFFA
  8248                           tblptru	equ	0xFF8
  8249                           tblptrh	equ	0xFF7
  8250                           tblptrl	equ	0xFF6
  8251                           tablat	equ	0xFF5
  8252                           prodh	equ	0xFF4
  8253                           prodl	equ	0xFF3
  8254                           intcon	equ	0xFF2
  8255                           intcon2	equ	0xFF1
  8256                           intcon3	equ	0xFF0
  8257                           indf0	equ	0xFEF
  8258                           postinc0	equ	0xFEE
  8259                           fsr0h	equ	0xFEA
  8260                           fsr0l	equ	0xFE9
  8261                           wreg	equ	0xFE8
  8262                           indf1	equ	0xFE7
  8263                           fsr1h	equ	0xFE2
  8264                           fsr1l	equ	0xFE1
  8265                           bsr	equ	0xFE0
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273 ;; *************** function ___fttol *****************
  8274 ;; Defined at:
  8275 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;  f1              3   22[COMRAM] float 
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;  lval            4   32[COMRAM] unsigned long 
  8280 ;;  exp1            1   36[COMRAM] unsigned char 
  8281 ;;  sign1           1   31[COMRAM] unsigned char 
  8282 ;; Return value:  Size  Location     Type
  8283 ;;                  4   22[COMRAM] long 
  8284 ;; Registers used:
  8285 ;;		wreg, status,2, status,0
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8291 ;;      Params:         4       0       0       0       0       0       0
  8292 ;;      Locals:         6       0       0       0       0       0       0
  8293 ;;      Temps:          5       0       0       0       0       0       0
  8294 ;;      Totals:        15       0       0       0       0       0       0
  8295 ;;Total ram usage:       15 bytes
  8296 ;; Hardware stack levels used:    1
  8297 ;; Hardware stack levels required when called:    4
  8298 ;; This function calls:
  8299 ;;		Nothing
  8300 ;; This function is called by:
  8301 ;;		_ADC_ISR
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           	psect	text48
  8306  001320                     __ptext48:
  8307                           	opt stack 0
  8308  001320                     ___fttol:
  8309                           	opt stack 18
  8310                           
  8311                           ;incstack = 0
  8312  001320  C019  F01B         	movff	___fttol@f1+2,??___fttol
  8313  001324  6A1C               	clrf	(??___fttol+1)& (0+255),c
  8314  001326  6A1D               	clrf	(??___fttol+2)& (0+255),c
  8315  001328  3418               	rlcf	___fttol@f1+1,w,c
  8316  00132A  361B               	rlcf	??___fttol& (0+255),f,c
  8317  00132C  E301               	bnc	u687_21
  8318  00132E  801C               	bsf	(??___fttol+1)& (0+255),0,c
  8319  001330                     u687_21:
  8320  001330  501B               	movf	??___fttol,w,c
  8321  001332  6E25               	movwf	___fttol@exp1,c
  8322  001334  5025               	movf	___fttol@exp1,w,c
  8323  001336  A4D8               	btfss	status,2,c
  8324  001338  D009               	goto	i1l1436
  8325  00133A  0E00               	movlw	0
  8326  00133C  6E17               	movwf	?___fttol,c
  8327  00133E  0E00               	movlw	0
  8328  001340  6E18               	movwf	?___fttol+1,c
  8329  001342  0E00               	movlw	0
  8330  001344  6E19               	movwf	?___fttol+2,c
  8331  001346  0E00               	movlw	0
  8332  001348  6E1A               	movwf	?___fttol+3,c
  8333  00134A  0012               	return	
  8334  00134C                     i1l1436:
  8335  00134C  0E17               	movlw	23
  8336  00134E  6E1B               	movwf	??___fttol& (0+255),c
  8337  001350  C017  F01C         	movff	___fttol@f1,??___fttol+1
  8338  001354  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  8339  001358  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  8340  00135C  281B               	incf	??___fttol,w,c
  8341  00135E  6E1F               	movwf	(??___fttol+4)& (0+255),c
  8342  001360  D004               	goto	i1u689_20
  8343  001362                     i1u689_25:
  8344  001362  90D8               	bcf	status,0,c
  8345  001364  321E               	rrcf	??___fttol+3,f,c
  8346  001366  321D               	rrcf	??___fttol+2,f,c
  8347  001368  321C               	rrcf	??___fttol+1,f,c
  8348  00136A                     i1u689_20:
  8349  00136A  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  8350  00136C  D7FA               	goto	i1u689_25
  8351  00136E  501C               	movf	??___fttol+1,w,c
  8352  001370  6E20               	movwf	___fttol@sign1,c
  8353  001372  8E18               	bsf	___fttol@f1+1,7,c
  8354  001374  0EFF               	movlw	255
  8355  001376  1617               	andwf	___fttol@f1,f,c
  8356  001378  0EFF               	movlw	255
  8357  00137A  1618               	andwf	___fttol@f1+1,f,c
  8358  00137C  0E00               	movlw	0
  8359  00137E  1619               	andwf	___fttol@f1+2,f,c
  8360  001380  5017               	movf	___fttol@f1,w,c
  8361  001382  6E21               	movwf	___fttol@lval,c
  8362  001384  5018               	movf	___fttol@f1+1,w,c
  8363  001386  6E22               	movwf	___fttol@lval+1,c
  8364  001388  5019               	movf	___fttol@f1+2,w,c
  8365  00138A  6E23               	movwf	___fttol@lval+2,c
  8366  00138C  6A24               	clrf	___fttol@lval+3,c
  8367  00138E  0E8E               	movlw	142
  8368  001390  5E25               	subwf	___fttol@exp1,f,c
  8369  001392  AE25               	btfss	___fttol@exp1,7,c
  8370  001394  D016               	goto	i1l1438
  8371  001396  5025               	movf	___fttol@exp1,w,c
  8372  001398  0A80               	xorlw	128
  8373  00139A  0F8F               	addlw	143
  8374  00139C  B0D8               	btfsc	status,0,c
  8375  00139E  D009               	goto	i1l1439
  8376  0013A0  0E00               	movlw	0
  8377  0013A2  6E17               	movwf	?___fttol,c
  8378  0013A4  0E00               	movlw	0
  8379  0013A6  6E18               	movwf	?___fttol+1,c
  8380  0013A8  0E00               	movlw	0
  8381  0013AA  6E19               	movwf	?___fttol+2,c
  8382  0013AC  0E00               	movlw	0
  8383  0013AE  6E1A               	movwf	?___fttol+3,c
  8384  0013B0  0012               	return	
  8385  0013B2                     i1l1439:
  8386  0013B2  90D8               	bcf	status,0,c
  8387  0013B4  3224               	rrcf	___fttol@lval+3,f,c
  8388  0013B6  3223               	rrcf	___fttol@lval+2,f,c
  8389  0013B8  3222               	rrcf	___fttol@lval+1,f,c
  8390  0013BA  3221               	rrcf	___fttol@lval,f,c
  8391  0013BC  3E25               	incfsz	___fttol@exp1,f,c
  8392  0013BE  D7F9               	goto	i1l1439
  8393  0013C0  D015               	goto	i1u693_20
  8394  0013C2                     i1l1438:
  8395  0013C2  0E17               	movlw	23
  8396  0013C4  6425               	cpfsgt	___fttol@exp1,c
  8397  0013C6  D00F               	goto	i1l1444
  8398  0013C8  0E00               	movlw	0
  8399  0013CA  6E17               	movwf	?___fttol,c
  8400  0013CC  0E00               	movlw	0
  8401  0013CE  6E18               	movwf	?___fttol+1,c
  8402  0013D0  0E00               	movlw	0
  8403  0013D2  6E19               	movwf	?___fttol+2,c
  8404  0013D4  0E00               	movlw	0
  8405  0013D6  6E1A               	movwf	?___fttol+3,c
  8406  0013D8  0012               	return	
  8407  0013DA  90D8               	bcf	status,0,c
  8408  0013DC  3621               	rlcf	___fttol@lval,f,c
  8409  0013DE  3622               	rlcf	___fttol@lval+1,f,c
  8410  0013E0  3623               	rlcf	___fttol@lval+2,f,c
  8411  0013E2  3624               	rlcf	___fttol@lval+3,f,c
  8412  0013E4  0625               	decf	___fttol@exp1,f,c
  8413  0013E6                     i1l1444:
  8414  0013E6  5025               	movf	___fttol@exp1,w,c
  8415  0013E8  A4D8               	btfss	status,2,c
  8416  0013EA  D7F7               	goto	i1l1445
  8417  0013EC                     i1u693_20:
  8418  0013EC  5020               	movf	___fttol@sign1,w,c
  8419  0013EE  B4D8               	btfsc	status,2,c
  8420  0013F0  D008               	goto	i1l1447
  8421  0013F2  1E24               	comf	___fttol@lval+3,f,c
  8422  0013F4  1E23               	comf	___fttol@lval+2,f,c
  8423  0013F6  1E22               	comf	___fttol@lval+1,f,c
  8424  0013F8  6C21               	negf	___fttol@lval,c
  8425  0013FA  0E00               	movlw	0
  8426  0013FC  2222               	addwfc	___fttol@lval+1,f,c
  8427  0013FE  2223               	addwfc	___fttol@lval+2,f,c
  8428  001400  2224               	addwfc	___fttol@lval+3,f,c
  8429  001402                     i1l1447:
  8430  001402  C021  F017         	movff	___fttol@lval,?___fttol
  8431  001406  C022  F018         	movff	___fttol@lval+1,?___fttol+1
  8432  00140A  C023  F019         	movff	___fttol@lval+2,?___fttol+2
  8433  00140E  C024  F01A         	movff	___fttol@lval+3,?___fttol+3
  8434  001412  0012               	return	
  8435  001414                     __end_of___fttol:
  8436                           	opt stack 0
  8437                           pclatu	equ	0xFFB
  8438                           pclath	equ	0xFFA
  8439                           tblptru	equ	0xFF8
  8440                           tblptrh	equ	0xFF7
  8441                           tblptrl	equ	0xFF6
  8442                           tablat	equ	0xFF5
  8443                           prodh	equ	0xFF4
  8444                           prodl	equ	0xFF3
  8445                           intcon	equ	0xFF2
  8446                           intcon2	equ	0xFF1
  8447                           intcon3	equ	0xFF0
  8448                           indf0	equ	0xFEF
  8449                           postinc0	equ	0xFEE
  8450                           fsr0h	equ	0xFEA
  8451                           fsr0l	equ	0xFE9
  8452                           wreg	equ	0xFE8
  8453                           indf1	equ	0xFE7
  8454                           fsr1h	equ	0xFE2
  8455                           fsr1l	equ	0xFE1
  8456                           bsr	equ	0xFE0
  8457                           indf2	equ	0xFDF
  8458                           postinc2	equ	0xFDE
  8459                           postdec2	equ	0xFDD
  8460                           fsr2h	equ	0xFDA
  8461                           fsr2l	equ	0xFD9
  8462                           status	equ	0xFD8
  8463                           
  8464 ;; *************** function ___ftsub *****************
  8465 ;; Defined at:
  8466 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;  f1              3    0[BANK0 ] float 
  8469 ;;  f2              3    3[BANK0 ] float 
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;		None
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  3    0[BANK0 ] float 
  8474 ;; Registers used:
  8475 ;;		wreg, status,2, status,0, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8481 ;;      Params:         0       6       0       0       0       0       0
  8482 ;;      Locals:         0       0       0       0       0       0       0
  8483 ;;      Temps:          0       0       0       0       0       0       0
  8484 ;;      Totals:         0       6       0       0       0       0       0
  8485 ;;Total ram usage:        6 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    6
  8488 ;; This function calls:
  8489 ;;		___ftadd
  8490 ;; This function is called by:
  8491 ;;		_ADC_ISR
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text49
  8496  001B44                     __ptext49:
  8497                           	opt stack 0
  8498  001B44                     ___ftsub:
  8499                           	opt stack 16
  8500                           
  8501                           ;incstack = 0
  8502  001B44  0100               	movlb	0	; () banked
  8503  001B46  51AD               	movf	___ftsub@f2& (0+255),w,b
  8504  001B48  11AE               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8505  001B4A  11AF               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8506  001B4C  B4D8               	btfsc	status,2,c
  8507  001B4E  D006               	goto	i1l1432
  8508                           
  8509                           ; BSR set to: 0
  8510  001B50  0E00               	movlw	0
  8511  001B52  1BAD               	xorwf	___ftsub@f2& (0+255),f,b
  8512  001B54  0E00               	movlw	0
  8513  001B56  1BAE               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8514  001B58  0E80               	movlw	128
  8515  001B5A  1BAF               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8516  001B5C                     i1l1432:
  8517                           
  8518                           ; BSR set to: 0
  8519                           
  8520                           ; BSR set to: 0
  8521  001B5C  C0AA  F01F         	movff	___ftsub@f1,___ftadd@f1
  8522  001B60  C0AB  F020         	movff	___ftsub@f1+1,___ftadd@f1+1
  8523  001B64  C0AC  F021         	movff	___ftsub@f1+2,___ftadd@f1+2
  8524  001B68  C0AD  F022         	movff	___ftsub@f2,___ftadd@f2
  8525  001B6C  C0AE  F023         	movff	___ftsub@f2+1,___ftadd@f2+1
  8526  001B70  C0AF  F024         	movff	___ftsub@f2+2,___ftadd@f2+2
  8527  001B74  EC4B  F005         	call	___ftadd	;wreg free
  8528  001B78  C01F  F0AA         	movff	?___ftadd,?___ftsub
  8529  001B7C  C020  F0AB         	movff	?___ftadd+1,?___ftsub+1
  8530  001B80  C021  F0AC         	movff	?___ftadd+2,?___ftsub+2
  8531  001B84  0012               	return	
  8532  001B86                     __end_of___ftsub:
  8533                           	opt stack 0
  8534                           pclatu	equ	0xFFB
  8535                           pclath	equ	0xFFA
  8536                           tblptru	equ	0xFF8
  8537                           tblptrh	equ	0xFF7
  8538                           tblptrl	equ	0xFF6
  8539                           tablat	equ	0xFF5
  8540                           prodh	equ	0xFF4
  8541                           prodl	equ	0xFF3
  8542                           intcon	equ	0xFF2
  8543                           intcon2	equ	0xFF1
  8544                           intcon3	equ	0xFF0
  8545                           indf0	equ	0xFEF
  8546                           postinc0	equ	0xFEE
  8547                           fsr0h	equ	0xFEA
  8548                           fsr0l	equ	0xFE9
  8549                           wreg	equ	0xFE8
  8550                           indf1	equ	0xFE7
  8551                           fsr1h	equ	0xFE2
  8552                           fsr1l	equ	0xFE1
  8553                           bsr	equ	0xFE0
  8554                           indf2	equ	0xFDF
  8555                           postinc2	equ	0xFDE
  8556                           postdec2	equ	0xFDD
  8557                           fsr2h	equ	0xFDA
  8558                           fsr2l	equ	0xFD9
  8559                           status	equ	0xFD8
  8560                           
  8561 ;; *************** function ___ftadd *****************
  8562 ;; Defined at:
  8563 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;  f1              3   30[COMRAM] float 
  8566 ;;  f2              3   33[COMRAM] float 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  exp1            1   41[COMRAM] unsigned char 
  8569 ;;  exp2            1   40[COMRAM] unsigned char 
  8570 ;;  sign            1   39[COMRAM] unsigned char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  3   30[COMRAM] float 
  8573 ;; Registers used:
  8574 ;;		wreg, status,2, status,0, cstack
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8580 ;;      Params:         6       0       0       0       0       0       0
  8581 ;;      Locals:         3       0       0       0       0       0       0
  8582 ;;      Temps:          3       0       0       0       0       0       0
  8583 ;;      Totals:        12       0       0       0       0       0       0
  8584 ;;Total ram usage:       12 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    5
  8587 ;; This function calls:
  8588 ;;		___ftpack
  8589 ;; This function is called by:
  8590 ;;		___ftsub
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           	psect	text50
  8595  000A96                     __ptext50:
  8596                           	opt stack 0
  8597  000A96                     ___ftadd:
  8598                           	opt stack 16
  8599                           
  8600                           ;incstack = 0
  8601  000A96  C021  F025         	movff	___ftadd@f1+2,??___ftadd
  8602  000A9A  6A26               	clrf	(??___ftadd+1)& (0+255),c
  8603  000A9C  6A27               	clrf	(??___ftadd+2)& (0+255),c
  8604  000A9E  3420               	rlcf	___ftadd@f1+1,w,c
  8605  000AA0  3625               	rlcf	??___ftadd& (0+255),f,c
  8606  000AA2  E301               	bnc	u623_21
  8607  000AA4  8026               	bsf	(??___ftadd+1)& (0+255),0,c
  8608  000AA6                     u623_21:
  8609  000AA6  5025               	movf	??___ftadd,w,c
  8610  000AA8  6E2A               	movwf	___ftadd@exp1,c
  8611  000AAA  C024  F025         	movff	___ftadd@f2+2,??___ftadd
  8612  000AAE  6A26               	clrf	(??___ftadd+1)& (0+255),c
  8613  000AB0  6A27               	clrf	(??___ftadd+2)& (0+255),c
  8614  000AB2  3423               	rlcf	___ftadd@f2+1,w,c
  8615  000AB4  3625               	rlcf	??___ftadd& (0+255),f,c
  8616  000AB6  E301               	bnc	u624_21
  8617  000AB8  8026               	bsf	(??___ftadd+1)& (0+255),0,c
  8618  000ABA                     u624_21:
  8619  000ABA  5025               	movf	??___ftadd,w,c
  8620  000ABC  6E29               	movwf	___ftadd@exp2,c
  8621  000ABE  502A               	movf	___ftadd@exp1,w,c
  8622  000AC0  B4D8               	btfsc	status,2,c
  8623  000AC2  D00B               	goto	i1u627_20
  8624  000AC4  5029               	movf	___ftadd@exp2,w,c
  8625  000AC6  5C2A               	subwf	___ftadd@exp1,w,c
  8626  000AC8  B0D8               	btfsc	status,0,c
  8627  000ACA  D00E               	goto	i1l1367
  8628  000ACC  502A               	movf	___ftadd@exp1,w,c
  8629  000ACE  0800               	sublw	0
  8630  000AD0  2429               	addwf	___ftadd@exp2,w,c
  8631  000AD2  6E25               	movwf	??___ftadd& (0+255),c
  8632  000AD4  0E18               	movlw	24
  8633  000AD6  6425               	cpfsgt	??___ftadd,c
  8634  000AD8  D007               	goto	i1l1367
  8635  000ADA                     i1u627_20:
  8636  000ADA  C022  F01F         	movff	___ftadd@f2,?___ftadd
  8637  000ADE  C023  F020         	movff	___ftadd@f2+1,?___ftadd+1
  8638  000AE2  C024  F021         	movff	___ftadd@f2+2,?___ftadd+2
  8639  000AE6  0012               	return	
  8640  000AE8                     i1l1367:
  8641  000AE8  5029               	movf	___ftadd@exp2,w,c
  8642  000AEA  B4D8               	btfsc	status,2,c
  8643  000AEC  D00B               	goto	i1u630_20
  8644  000AEE  502A               	movf	___ftadd@exp1,w,c
  8645  000AF0  5C29               	subwf	___ftadd@exp2,w,c
  8646  000AF2  B0D8               	btfsc	status,0,c
  8647  000AF4  D00E               	goto	i1l1371
  8648  000AF6  5029               	movf	___ftadd@exp2,w,c
  8649  000AF8  0800               	sublw	0
  8650  000AFA  242A               	addwf	___ftadd@exp1,w,c
  8651  000AFC  6E25               	movwf	??___ftadd& (0+255),c
  8652  000AFE  0E18               	movlw	24
  8653  000B00  6425               	cpfsgt	??___ftadd,c
  8654  000B02  D007               	goto	i1l1371
  8655  000B04                     i1u630_20:
  8656  000B04  C01F  F01F         	movff	___ftadd@f1,?___ftadd
  8657  000B08  C020  F020         	movff	___ftadd@f1+1,?___ftadd+1
  8658  000B0C  C021  F021         	movff	___ftadd@f1+2,?___ftadd+2
  8659  000B10  0012               	return	
  8660  000B12                     i1l1371:
  8661  000B12  0E06               	movlw	6
  8662  000B14  6E28               	movwf	___ftadd@sign,c
  8663  000B16  BE21               	btfsc	___ftadd@f1+2,7,c
  8664  000B18  8E28               	bsf	___ftadd@sign,7,c
  8665  000B1A  BE24               	btfsc	___ftadd@f2+2,7,c
  8666  000B1C  8C28               	bsf	___ftadd@sign,6,c
  8667  000B1E  8E20               	bsf	___ftadd@f1+1,7,c
  8668  000B20  0EFF               	movlw	255
  8669  000B22  161F               	andwf	___ftadd@f1,f,c
  8670  000B24  0EFF               	movlw	255
  8671  000B26  1620               	andwf	___ftadd@f1+1,f,c
  8672  000B28  0E00               	movlw	0
  8673  000B2A  1621               	andwf	___ftadd@f1+2,f,c
  8674  000B2C  8E23               	bsf	___ftadd@f2+1,7,c
  8675  000B2E  0EFF               	movlw	255
  8676  000B30  1622               	andwf	___ftadd@f2,f,c
  8677  000B32  0EFF               	movlw	255
  8678  000B34  1623               	andwf	___ftadd@f2+1,f,c
  8679  000B36  0E00               	movlw	0
  8680  000B38  1624               	andwf	___ftadd@f2+2,f,c
  8681  000B3A  5029               	movf	___ftadd@exp2,w,c
  8682  000B3C  5C2A               	subwf	___ftadd@exp1,w,c
  8683  000B3E  B0D8               	btfsc	status,0,c
  8684  000B40  D01B               	goto	i1l1376
  8685  000B42                     i1u633_20:
  8686  000B42  90D8               	bcf	status,0,c
  8687  000B44  3622               	rlcf	___ftadd@f2,f,c
  8688  000B46  3623               	rlcf	___ftadd@f2+1,f,c
  8689  000B48  3624               	rlcf	___ftadd@f2+2,f,c
  8690  000B4A  0629               	decf	___ftadd@exp2,f,c
  8691  000B4C  502A               	movf	___ftadd@exp1,w,c
  8692  000B4E  1829               	xorwf	___ftadd@exp2,w,c
  8693  000B50  B4D8               	btfsc	status,2,c
  8694  000B52  D00D               	goto	i1l1381
  8695  000B54  0628               	decf	___ftadd@sign,f,c
  8696  000B56  C028  F025         	movff	___ftadd@sign,??___ftadd
  8697  000B5A  0E07               	movlw	7
  8698  000B5C  1625               	andwf	??___ftadd,f,c
  8699  000B5E  B4D8               	btfsc	status,2,c
  8700  000B60  D006               	goto	i1l1381
  8701  000B62  D7EF               	goto	i1u633_20
  8702  000B64  90D8               	bcf	status,0,c
  8703  000B66  3221               	rrcf	___ftadd@f1+2,f,c
  8704  000B68  3220               	rrcf	___ftadd@f1+1,f,c
  8705  000B6A  321F               	rrcf	___ftadd@f1,f,c
  8706  000B6C  2A2A               	incf	___ftadd@exp1,f,c
  8707  000B6E                     i1l1381:
  8708  000B6E  5029               	movf	___ftadd@exp2,w,c
  8709  000B70  182A               	xorwf	___ftadd@exp1,w,c
  8710  000B72  B4D8               	btfsc	status,2,c
  8711  000B74  D01F               	goto	i1u640_20
  8712  000B76  D7F6               	goto	i1l1382
  8713  000B78                     i1l1376:
  8714  000B78  502A               	movf	___ftadd@exp1,w,c
  8715  000B7A  5C29               	subwf	___ftadd@exp2,w,c
  8716  000B7C  B0D8               	btfsc	status,0,c
  8717  000B7E  D01A               	goto	i1u640_20
  8718  000B80                     i1u637_20:
  8719  000B80  90D8               	bcf	status,0,c
  8720  000B82  361F               	rlcf	___ftadd@f1,f,c
  8721  000B84  3620               	rlcf	___ftadd@f1+1,f,c
  8722  000B86  3621               	rlcf	___ftadd@f1+2,f,c
  8723  000B88  062A               	decf	___ftadd@exp1,f,c
  8724  000B8A  502A               	movf	___ftadd@exp1,w,c
  8725  000B8C  1829               	xorwf	___ftadd@exp2,w,c
  8726  000B8E  B4D8               	btfsc	status,2,c
  8727  000B90  D00D               	goto	i1l1390
  8728  000B92  0628               	decf	___ftadd@sign,f,c
  8729  000B94  C028  F025         	movff	___ftadd@sign,??___ftadd
  8730  000B98  0E07               	movlw	7
  8731  000B9A  1625               	andwf	??___ftadd,f,c
  8732  000B9C  B4D8               	btfsc	status,2,c
  8733  000B9E  D006               	goto	i1l1390
  8734  000BA0  D7EF               	goto	i1u637_20
  8735  000BA2  90D8               	bcf	status,0,c
  8736  000BA4  3224               	rrcf	___ftadd@f2+2,f,c
  8737  000BA6  3223               	rrcf	___ftadd@f2+1,f,c
  8738  000BA8  3222               	rrcf	___ftadd@f2,f,c
  8739  000BAA  2A29               	incf	___ftadd@exp2,f,c
  8740  000BAC                     i1l1390:
  8741  000BAC  5029               	movf	___ftadd@exp2,w,c
  8742  000BAE  182A               	xorwf	___ftadd@exp1,w,c
  8743  000BB0  A4D8               	btfss	status,2,c
  8744  000BB2  D7F7               	goto	i1l1391
  8745  000BB4                     i1u640_20:
  8746  000BB4  AE28               	btfss	___ftadd@sign,7,c
  8747  000BB6  D00C               	goto	i1l1393
  8748  000BB8  0EFF               	movlw	255
  8749  000BBA  1A1F               	xorwf	___ftadd@f1,f,c
  8750  000BBC  0EFF               	movlw	255
  8751  000BBE  1A20               	xorwf	___ftadd@f1+1,f,c
  8752  000BC0  0EFF               	movlw	255
  8753  000BC2  1A21               	xorwf	___ftadd@f1+2,f,c
  8754  000BC4  0E01               	movlw	1
  8755  000BC6  261F               	addwf	___ftadd@f1,f,c
  8756  000BC8  0E00               	movlw	0
  8757  000BCA  2220               	addwfc	___ftadd@f1+1,f,c
  8758  000BCC  0E00               	movlw	0
  8759  000BCE  2221               	addwfc	___ftadd@f1+2,f,c
  8760  000BD0                     i1l1393:
  8761  000BD0  AC28               	btfss	___ftadd@sign,6,c
  8762  000BD2  D00C               	goto	i1l1394
  8763  000BD4  0EFF               	movlw	255
  8764  000BD6  1A22               	xorwf	___ftadd@f2,f,c
  8765  000BD8  0EFF               	movlw	255
  8766  000BDA  1A23               	xorwf	___ftadd@f2+1,f,c
  8767  000BDC  0EFF               	movlw	255
  8768  000BDE  1A24               	xorwf	___ftadd@f2+2,f,c
  8769  000BE0  0E01               	movlw	1
  8770  000BE2  2622               	addwf	___ftadd@f2,f,c
  8771  000BE4  0E00               	movlw	0
  8772  000BE6  2223               	addwfc	___ftadd@f2+1,f,c
  8773  000BE8  0E00               	movlw	0
  8774  000BEA  2224               	addwfc	___ftadd@f2+2,f,c
  8775  000BEC                     i1l1394:
  8776  000BEC  0E00               	movlw	0
  8777  000BEE  6E28               	movwf	___ftadd@sign,c
  8778  000BF0  501F               	movf	___ftadd@f1,w,c
  8779  000BF2  2622               	addwf	___ftadd@f2,f,c
  8780  000BF4  5020               	movf	___ftadd@f1+1,w,c
  8781  000BF6  2223               	addwfc	___ftadd@f2+1,f,c
  8782  000BF8  5021               	movf	___ftadd@f1+2,w,c
  8783  000BFA  2224               	addwfc	___ftadd@f2+2,f,c
  8784  000BFC  AE24               	btfss	___ftadd@f2+2,7,c
  8785  000BFE  D00E               	goto	i1l1395
  8786  000C00  0EFF               	movlw	255
  8787  000C02  1A22               	xorwf	___ftadd@f2,f,c
  8788  000C04  0EFF               	movlw	255
  8789  000C06  1A23               	xorwf	___ftadd@f2+1,f,c
  8790  000C08  0EFF               	movlw	255
  8791  000C0A  1A24               	xorwf	___ftadd@f2+2,f,c
  8792  000C0C  0E01               	movlw	1
  8793  000C0E  2622               	addwf	___ftadd@f2,f,c
  8794  000C10  0E00               	movlw	0
  8795  000C12  2223               	addwfc	___ftadd@f2+1,f,c
  8796  000C14  0E00               	movlw	0
  8797  000C16  2224               	addwfc	___ftadd@f2+2,f,c
  8798  000C18  0E01               	movlw	1
  8799  000C1A  6E28               	movwf	___ftadd@sign,c
  8800  000C1C                     i1l1395:
  8801  000C1C  C022  F017         	movff	___ftadd@f2,___ftpack@arg
  8802  000C20  C023  F018         	movff	___ftadd@f2+1,___ftpack@arg+1
  8803  000C24  C024  F019         	movff	___ftadd@f2+2,___ftpack@arg+2
  8804  000C28  C02A  F01A         	movff	___ftadd@exp1,___ftpack@exp
  8805  000C2C  C028  F01B         	movff	___ftadd@sign,___ftpack@sign
  8806  000C30  EC48  F00B         	call	___ftpack	;wreg free
  8807  000C34  C017  F01F         	movff	?___ftpack,?___ftadd
  8808  000C38  C018  F020         	movff	?___ftpack+1,?___ftadd+1
  8809  000C3C  C019  F021         	movff	?___ftpack+2,?___ftadd+2
  8810  000C40  0012               	return	
  8811  000C42                     __end_of___ftadd:
  8812                           	opt stack 0
  8813                           pclatu	equ	0xFFB
  8814                           pclath	equ	0xFFA
  8815                           tblptru	equ	0xFF8
  8816                           tblptrh	equ	0xFF7
  8817                           tblptrl	equ	0xFF6
  8818                           tablat	equ	0xFF5
  8819                           prodh	equ	0xFF4
  8820                           prodl	equ	0xFF3
  8821                           intcon	equ	0xFF2
  8822                           intcon2	equ	0xFF1
  8823                           intcon3	equ	0xFF0
  8824                           indf0	equ	0xFEF
  8825                           postinc0	equ	0xFEE
  8826                           fsr0h	equ	0xFEA
  8827                           fsr0l	equ	0xFE9
  8828                           wreg	equ	0xFE8
  8829                           indf1	equ	0xFE7
  8830                           fsr1h	equ	0xFE2
  8831                           fsr1l	equ	0xFE1
  8832                           bsr	equ	0xFE0
  8833                           indf2	equ	0xFDF
  8834                           postinc2	equ	0xFDE
  8835                           postdec2	equ	0xFDD
  8836                           fsr2h	equ	0xFDA
  8837                           fsr2l	equ	0xFD9
  8838                           status	equ	0xFD8
  8839                           
  8840 ;; *************** function ___ftmul *****************
  8841 ;; Defined at:
  8842 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  f1              3   34[COMRAM] float 
  8845 ;;  f2              3   37[COMRAM] float 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  8848 ;;  sign            1    5[BANK0 ] unsigned char 
  8849 ;;  cntr            1    4[BANK0 ] unsigned char 
  8850 ;;  exp             1    0[BANK0 ] unsigned char 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;                  3   34[COMRAM] float 
  8853 ;; Registers used:
  8854 ;;		wreg, status,2, status,0, cstack
  8855 ;; Tracked objects:
  8856 ;;		On entry : 0/0
  8857 ;;		On exit  : 0/0
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8860 ;;      Params:         6       0       0       0       0       0       0
  8861 ;;      Locals:         0       6       0       0       0       0       0
  8862 ;;      Temps:          3       0       0       0       0       0       0
  8863 ;;      Totals:         9       6       0       0       0       0       0
  8864 ;;Total ram usage:       15 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; Hardware stack levels required when called:    5
  8867 ;; This function calls:
  8868 ;;		___ftpack
  8869 ;; This function is called by:
  8870 ;;		_ADC_ISR
  8871 ;; This function uses a non-reentrant model
  8872 ;;
  8873                           
  8874                           	psect	text51
  8875  00122A                     __ptext51:
  8876                           	opt stack 0
  8877  00122A                     ___ftmul:
  8878                           	opt stack 17
  8879                           
  8880                           ;incstack = 0
  8881  00122A  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  8882  00122E  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  8883  001230  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  8884  001232  3424               	rlcf	___ftmul@f1+1,w,c
  8885  001234  3629               	rlcf	??___ftmul& (0+255),f,c
  8886  001236  E301               	bnc	u676_21
  8887  001238  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  8888  00123A                     u676_21:
  8889  00123A  5029               	movf	??___ftmul,w,c
  8890  00123C  0100               	movlb	0	; () banked
  8891  00123E  6FAA               	movwf	___ftmul@exp& (0+255),b
  8892  001240  51AA               	movf	___ftmul@exp& (0+255),w,b
  8893  001242  A4D8               	btfss	status,2,c
  8894  001244  D007               	goto	i1l1415
  8895                           
  8896                           ; BSR set to: 0
  8897  001246  0E00               	movlw	0
  8898  001248  6E23               	movwf	?___ftmul,c
  8899  00124A  0E00               	movlw	0
  8900  00124C  6E24               	movwf	?___ftmul+1,c
  8901  00124E  0E00               	movlw	0
  8902  001250  6E25               	movwf	?___ftmul+2,c
  8903                           
  8904                           ; BSR set to: 0
  8905  001252  0012               	return	
  8906  001254                     i1l1415:
  8907                           
  8908                           ; BSR set to: 0
  8909                           
  8910                           ; BSR set to: 0
  8911  001254  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  8912  001258  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  8913  00125A  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  8914  00125C  3427               	rlcf	___ftmul@f2+1,w,c
  8915  00125E  3629               	rlcf	??___ftmul& (0+255),f,c
  8916  001260  E301               	bnc	u678_21
  8917  001262  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  8918  001264                     u678_21:
  8919  001264  5029               	movf	??___ftmul,w,c
  8920  001266  6FAF               	movwf	___ftmul@sign& (0+255),b
  8921  001268  51AF               	movf	___ftmul@sign& (0+255),w,b
  8922  00126A  A4D8               	btfss	status,2,c
  8923  00126C  D007               	goto	i1l1417
  8924                           
  8925                           ; BSR set to: 0
  8926  00126E  0E00               	movlw	0
  8927  001270  6E23               	movwf	?___ftmul,c
  8928  001272  0E00               	movlw	0
  8929  001274  6E24               	movwf	?___ftmul+1,c
  8930  001276  0E00               	movlw	0
  8931  001278  6E25               	movwf	?___ftmul+2,c
  8932                           
  8933                           ; BSR set to: 0
  8934  00127A  0012               	return	
  8935  00127C                     i1l1417:
  8936                           
  8937                           ; BSR set to: 0
  8938                           
  8939                           ; BSR set to: 0
  8940  00127C  51AF               	movf	___ftmul@sign& (0+255),w,b
  8941  00127E  0F7B               	addlw	123
  8942  001280  27AA               	addwf	___ftmul@exp& (0+255),f,b
  8943                           
  8944                           ; BSR set to: 0
  8945  001282  C025  F0AF         	movff	___ftmul@f1+2,___ftmul@sign
  8946  001286  5028               	movf	___ftmul@f2+2,w,c
  8947  001288  1BAF               	xorwf	___ftmul@sign& (0+255),f,b
  8948  00128A  0E80               	movlw	128
  8949  00128C  17AF               	andwf	___ftmul@sign& (0+255),f,b
  8950                           
  8951                           ; BSR set to: 0
  8952  00128E  8E24               	bsf	___ftmul@f1+1,7,c
  8953                           
  8954                           ; BSR set to: 0
  8955  001290  8E27               	bsf	___ftmul@f2+1,7,c
  8956                           
  8957                           ; BSR set to: 0
  8958  001292  0EFF               	movlw	255
  8959  001294  1626               	andwf	___ftmul@f2,f,c
  8960  001296  0EFF               	movlw	255
  8961  001298  1627               	andwf	___ftmul@f2+1,f,c
  8962  00129A  0E00               	movlw	0
  8963  00129C  1628               	andwf	___ftmul@f2+2,f,c
  8964                           
  8965                           ; BSR set to: 0
  8966  00129E  0E00               	movlw	0
  8967  0012A0  6FAB               	movwf	___ftmul@f3_as_product& (0+255),b
  8968  0012A2  0E00               	movlw	0
  8969  0012A4  6FAC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8970  0012A6  0E00               	movlw	0
  8971  0012A8  6FAD               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8972                           
  8973                           ; BSR set to: 0
  8974  0012AA  0E07               	movlw	7
  8975  0012AC  6FAE               	movwf	___ftmul@cntr& (0+255),b
  8976  0012AE                     
  8977                           ; BSR set to: 0
  8978                           
  8979                           ; BSR set to: 0
  8980  0012AE  A023               	btfss	___ftmul@f1,0,c
  8981  0012B0  D006               	goto	i1l1419
  8982                           
  8983                           ; BSR set to: 0
  8984  0012B2  5026               	movf	___ftmul@f2,w,c
  8985  0012B4  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8986  0012B6  5027               	movf	___ftmul@f2+1,w,c
  8987  0012B8  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8988  0012BA  5028               	movf	___ftmul@f2+2,w,c
  8989  0012BC  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8990  0012BE                     i1l1419:
  8991                           
  8992                           ; BSR set to: 0
  8993                           
  8994                           ; BSR set to: 0
  8995  0012BE  90D8               	bcf	status,0,c
  8996  0012C0  3225               	rrcf	___ftmul@f1+2,f,c
  8997  0012C2  3224               	rrcf	___ftmul@f1+1,f,c
  8998  0012C4  3223               	rrcf	___ftmul@f1,f,c
  8999  0012C6  90D8               	bcf	status,0,c
  9000  0012C8  3626               	rlcf	___ftmul@f2,f,c
  9001  0012CA  3627               	rlcf	___ftmul@f2+1,f,c
  9002  0012CC  3628               	rlcf	___ftmul@f2+2,f,c
  9003                           
  9004                           ; BSR set to: 0
  9005  0012CE  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
  9006  0012D0  D7EE               	goto	i1l1418
  9007                           
  9008                           ; BSR set to: 0
  9009                           
  9010                           ; BSR set to: 0
  9011  0012D2  0E09               	movlw	9
  9012  0012D4  6FAE               	movwf	___ftmul@cntr& (0+255),b
  9013  0012D6                     
  9014                           ; BSR set to: 0
  9015                           
  9016                           ; BSR set to: 0
  9017  0012D6  A023               	btfss	___ftmul@f1,0,c
  9018  0012D8  D006               	goto	i1l1422
  9019                           
  9020                           ; BSR set to: 0
  9021  0012DA  5026               	movf	___ftmul@f2,w,c
  9022  0012DC  27AB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9023  0012DE  5027               	movf	___ftmul@f2+1,w,c
  9024  0012E0  23AC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9025  0012E2  5028               	movf	___ftmul@f2+2,w,c
  9026  0012E4  23AD               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9027  0012E6                     i1l1422:
  9028                           
  9029                           ; BSR set to: 0
  9030                           
  9031                           ; BSR set to: 0
  9032  0012E6  90D8               	bcf	status,0,c
  9033  0012E8  3225               	rrcf	___ftmul@f1+2,f,c
  9034  0012EA  3224               	rrcf	___ftmul@f1+1,f,c
  9035  0012EC  3223               	rrcf	___ftmul@f1,f,c
  9036  0012EE  90D8               	bcf	status,0,c
  9037  0012F0  33AD               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9038  0012F2  33AC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9039  0012F4  33AB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9040                           
  9041                           ; BSR set to: 0
  9042  0012F6  2FAE               	decfsz	___ftmul@cntr& (0+255),f,b
  9043  0012F8  D7EE               	goto	i1l1421
  9044                           
  9045                           ; BSR set to: 0
  9046                           
  9047                           ; BSR set to: 0
  9048  0012FA  C0AB  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  9049  0012FE  C0AC  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9050  001302  C0AD  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9051  001306  C0AA  F01A         	movff	___ftmul@exp,___ftpack@exp
  9052  00130A  C0AF  F01B         	movff	___ftmul@sign,___ftpack@sign
  9053  00130E  EC48  F00B         	call	___ftpack	;wreg free
  9054  001312  C017  F023         	movff	?___ftpack,?___ftmul
  9055  001316  C018  F024         	movff	?___ftpack+1,?___ftmul+1
  9056  00131A  C019  F025         	movff	?___ftpack+2,?___ftmul+2
  9057  00131E  0012               	return	
  9058  001320                     __end_of___ftmul:
  9059                           	opt stack 0
  9060                           pclatu	equ	0xFFB
  9061                           pclath	equ	0xFFA
  9062                           tblptru	equ	0xFF8
  9063                           tblptrh	equ	0xFF7
  9064                           tblptrl	equ	0xFF6
  9065                           tablat	equ	0xFF5
  9066                           prodh	equ	0xFF4
  9067                           prodl	equ	0xFF3
  9068                           intcon	equ	0xFF2
  9069                           intcon2	equ	0xFF1
  9070                           intcon3	equ	0xFF0
  9071                           indf0	equ	0xFEF
  9072                           postinc0	equ	0xFEE
  9073                           fsr0h	equ	0xFEA
  9074                           fsr0l	equ	0xFE9
  9075                           wreg	equ	0xFE8
  9076                           indf1	equ	0xFE7
  9077                           fsr1h	equ	0xFE2
  9078                           fsr1l	equ	0xFE1
  9079                           bsr	equ	0xFE0
  9080                           indf2	equ	0xFDF
  9081                           postinc2	equ	0xFDE
  9082                           postdec2	equ	0xFDD
  9083                           fsr2h	equ	0xFDA
  9084                           fsr2l	equ	0xFD9
  9085                           status	equ	0xFD8
  9086                           
  9087 ;; *************** function ___ftge *****************
  9088 ;; Defined at:
  9089 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;  ff1             3   22[COMRAM] float 
  9092 ;;  ff2             3   25[COMRAM] float 
  9093 ;; Auto vars:     Size  Location     Type
  9094 ;;		None
  9095 ;; Return value:  Size  Location     Type
  9096 ;;		None               void
  9097 ;; Registers used:
  9098 ;;		wreg, status,2, status,0
  9099 ;; Tracked objects:
  9100 ;;		On entry : 0/0
  9101 ;;		On exit  : 0/0
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9104 ;;      Params:         6       0       0       0       0       0       0
  9105 ;;      Locals:         0       0       0       0       0       0       0
  9106 ;;      Temps:          3       0       0       0       0       0       0
  9107 ;;      Totals:         9       0       0       0       0       0       0
  9108 ;;Total ram usage:        9 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; Hardware stack levels required when called:    4
  9111 ;; This function calls:
  9112 ;;		Nothing
  9113 ;; This function is called by:
  9114 ;;		_ADC_ISR
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           	psect	text52
  9119  00173E                     __ptext52:
  9120                           	opt stack 0
  9121  00173E                     ___ftge:
  9122                           	opt stack 18
  9123                           
  9124                           ;incstack = 0
  9125  00173E  AE19               	btfss	___ftge@ff1+2,7,c
  9126  001740  D016               	goto	i1l1408
  9127  001742  C017  F01D         	movff	___ftge@ff1,??___ftge
  9128  001746  C018  F01E         	movff	___ftge@ff1+1,??___ftge+1
  9129  00174A  C019  F01F         	movff	___ftge@ff1+2,??___ftge+2
  9130  00174E  1E1D               	comf	??___ftge,f,c
  9131  001750  1E1E               	comf	??___ftge+1,f,c
  9132  001752  1E1F               	comf	??___ftge+2,f,c
  9133  001754  2A1D               	incf	??___ftge,f,c
  9134  001756  0E00               	movlw	0
  9135  001758  221E               	addwfc	??___ftge+1,f,c
  9136  00175A  221F               	addwfc	??___ftge+2,f,c
  9137  00175C  0E00               	movlw	0
  9138  00175E  241D               	addwf	??___ftge,w,c
  9139  001760  6E17               	movwf	___ftge@ff1,c
  9140  001762  0E00               	movlw	0
  9141  001764  201E               	addwfc	??___ftge+1,w,c
  9142  001766  6E18               	movwf	___ftge@ff1+1,c
  9143  001768  0E80               	movlw	128
  9144  00176A  201F               	addwfc	??___ftge+2,w,c
  9145  00176C  6E19               	movwf	___ftge@ff1+2,c
  9146  00176E                     i1l1408:
  9147  00176E  AE1C               	btfss	___ftge@ff2+2,7,c
  9148  001770  D016               	goto	i1l1409
  9149  001772  C01A  F01D         	movff	___ftge@ff2,??___ftge
  9150  001776  C01B  F01E         	movff	___ftge@ff2+1,??___ftge+1
  9151  00177A  C01C  F01F         	movff	___ftge@ff2+2,??___ftge+2
  9152  00177E  1E1D               	comf	??___ftge,f,c
  9153  001780  1E1E               	comf	??___ftge+1,f,c
  9154  001782  1E1F               	comf	??___ftge+2,f,c
  9155  001784  2A1D               	incf	??___ftge,f,c
  9156  001786  0E00               	movlw	0
  9157  001788  221E               	addwfc	??___ftge+1,f,c
  9158  00178A  221F               	addwfc	??___ftge+2,f,c
  9159  00178C  0E00               	movlw	0
  9160  00178E  241D               	addwf	??___ftge,w,c
  9161  001790  6E1A               	movwf	___ftge@ff2,c
  9162  001792  0E00               	movlw	0
  9163  001794  201E               	addwfc	??___ftge+1,w,c
  9164  001796  6E1B               	movwf	___ftge@ff2+1,c
  9165  001798  0E80               	movlw	128
  9166  00179A  201F               	addwfc	??___ftge+2,w,c
  9167  00179C  6E1C               	movwf	___ftge@ff2+2,c
  9168  00179E                     i1l1409:
  9169  00179E  0E00               	movlw	0
  9170  0017A0  1A17               	xorwf	___ftge@ff1,f,c
  9171  0017A2  0E00               	movlw	0
  9172  0017A4  1A18               	xorwf	___ftge@ff1+1,f,c
  9173  0017A6  0E80               	movlw	128
  9174  0017A8  1A19               	xorwf	___ftge@ff1+2,f,c
  9175  0017AA  0E00               	movlw	0
  9176  0017AC  1A1A               	xorwf	___ftge@ff2,f,c
  9177  0017AE  0E00               	movlw	0
  9178  0017B0  1A1B               	xorwf	___ftge@ff2+1,f,c
  9179  0017B2  0E80               	movlw	128
  9180  0017B4  1A1C               	xorwf	___ftge@ff2+2,f,c
  9181  0017B6  501A               	movf	___ftge@ff2,w,c
  9182  0017B8  5C17               	subwf	___ftge@ff1,w,c
  9183  0017BA  501B               	movf	___ftge@ff2+1,w,c
  9184  0017BC  5818               	subwfb	___ftge@ff1+1,w,c
  9185  0017BE  501C               	movf	___ftge@ff2+2,w,c
  9186  0017C0  5819               	subwfb	___ftge@ff1+2,w,c
  9187  0017C2  B0D8               	btfsc	status,0,c
  9188  0017C4  D002               	goto	i1l5282
  9189  0017C6  90D8               	bcf	status,0,c
  9190  0017C8  0012               	return	
  9191  0017CA                     i1l5282:
  9192  0017CA  80D8               	bsf	status,0,c
  9193  0017CC  0012               	return	
  9194  0017CE                     __end_of___ftge:
  9195                           	opt stack 0
  9196                           pclatu	equ	0xFFB
  9197                           pclath	equ	0xFFA
  9198                           tblptru	equ	0xFF8
  9199                           tblptrh	equ	0xFF7
  9200                           tblptrl	equ	0xFF6
  9201                           tablat	equ	0xFF5
  9202                           prodh	equ	0xFF4
  9203                           prodl	equ	0xFF3
  9204                           intcon	equ	0xFF2
  9205                           intcon2	equ	0xFF1
  9206                           intcon3	equ	0xFF0
  9207                           indf0	equ	0xFEF
  9208                           postinc0	equ	0xFEE
  9209                           fsr0h	equ	0xFEA
  9210                           fsr0l	equ	0xFE9
  9211                           wreg	equ	0xFE8
  9212                           indf1	equ	0xFE7
  9213                           fsr1h	equ	0xFE2
  9214                           fsr1l	equ	0xFE1
  9215                           bsr	equ	0xFE0
  9216                           indf2	equ	0xFDF
  9217                           postinc2	equ	0xFDE
  9218                           postdec2	equ	0xFDD
  9219                           fsr2h	equ	0xFDA
  9220                           fsr2l	equ	0xFD9
  9221                           status	equ	0xFD8
  9222                           
  9223 ;; *************** function ___awtoft *****************
  9224 ;; Defined at:
  9225 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;  c               2   30[COMRAM] int 
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;  sign            1   33[COMRAM] unsigned char 
  9230 ;; Return value:  Size  Location     Type
  9231 ;;                  3   30[COMRAM] float 
  9232 ;; Registers used:
  9233 ;;		wreg, status,2, status,0, cstack
  9234 ;; Tracked objects:
  9235 ;;		On entry : 0/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9239 ;;      Params:         3       0       0       0       0       0       0
  9240 ;;      Locals:         1       0       0       0       0       0       0
  9241 ;;      Temps:          0       0       0       0       0       0       0
  9242 ;;      Totals:         4       0       0       0       0       0       0
  9243 ;;Total ram usage:        4 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:    5
  9246 ;; This function calls:
  9247 ;;		___ftpack
  9248 ;; This function is called by:
  9249 ;;		_ADC_ISR
  9250 ;; This function uses a non-reentrant model
  9251 ;;
  9252                           
  9253                           	psect	text53
  9254  001C76                     __ptext53:
  9255                           	opt stack 0
  9256  001C76                     ___awtoft:
  9257                           	opt stack 17
  9258                           
  9259                           ;incstack = 0
  9260  001C76  0E00               	movlw	0
  9261  001C78  6E22               	movwf	___awtoft@sign,c
  9262  001C7A  AE20               	btfss	___awtoft@c+1,7,c
  9263  001C7C  D006               	goto	i1l1317
  9264  001C7E  6C1F               	negf	___awtoft@c,c
  9265  001C80  1E20               	comf	___awtoft@c+1,f,c
  9266  001C82  B0D8               	btfsc	status,0,c
  9267  001C84  2A20               	incf	___awtoft@c+1,f,c
  9268  001C86  0E01               	movlw	1
  9269  001C88  6E22               	movwf	___awtoft@sign,c
  9270  001C8A                     i1l1317:
  9271  001C8A  C01F  F017         	movff	___awtoft@c,___ftpack@arg
  9272  001C8E  C020  F018         	movff	___awtoft@c+1,___ftpack@arg+1
  9273  001C92  6A19               	clrf	___ftpack@arg+2,c
  9274  001C94  0E8E               	movlw	142
  9275  001C96  6E1A               	movwf	___ftpack@exp,c
  9276  001C98  C022  F01B         	movff	___awtoft@sign,___ftpack@sign
  9277  001C9C  EC48  F00B         	call	___ftpack	;wreg free
  9278  001CA0  C017  F01F         	movff	?___ftpack,?___awtoft
  9279  001CA4  C018  F020         	movff	?___ftpack+1,?___awtoft+1
  9280  001CA8  C019  F021         	movff	?___ftpack+2,?___awtoft+2
  9281  001CAC  0012               	return	
  9282  001CAE                     __end_of___awtoft:
  9283                           	opt stack 0
  9284                           pclatu	equ	0xFFB
  9285                           pclath	equ	0xFFA
  9286                           tblptru	equ	0xFF8
  9287                           tblptrh	equ	0xFF7
  9288                           tblptrl	equ	0xFF6
  9289                           tablat	equ	0xFF5
  9290                           prodh	equ	0xFF4
  9291                           prodl	equ	0xFF3
  9292                           intcon	equ	0xFF2
  9293                           intcon2	equ	0xFF1
  9294                           intcon3	equ	0xFF0
  9295                           indf0	equ	0xFEF
  9296                           postinc0	equ	0xFEE
  9297                           fsr0h	equ	0xFEA
  9298                           fsr0l	equ	0xFE9
  9299                           wreg	equ	0xFE8
  9300                           indf1	equ	0xFE7
  9301                           fsr1h	equ	0xFE2
  9302                           fsr1l	equ	0xFE1
  9303                           bsr	equ	0xFE0
  9304                           indf2	equ	0xFDF
  9305                           postinc2	equ	0xFDE
  9306                           postdec2	equ	0xFDD
  9307                           fsr2h	equ	0xFDA
  9308                           fsr2l	equ	0xFD9
  9309                           status	equ	0xFD8
  9310                           
  9311 ;; *************** function ___ftpack *****************
  9312 ;; Defined at:
  9313 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;  arg             3   22[COMRAM] unsigned um
  9316 ;;  exp             1   25[COMRAM] unsigned char 
  9317 ;;  sign            1   26[COMRAM] unsigned char 
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;		None
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  3   22[COMRAM] float 
  9322 ;; Registers used:
  9323 ;;		wreg, status,2, status,0
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9329 ;;      Params:         5       0       0       0       0       0       0
  9330 ;;      Locals:         0       0       0       0       0       0       0
  9331 ;;      Temps:          3       0       0       0       0       0       0
  9332 ;;      Totals:         8       0       0       0       0       0       0
  9333 ;;Total ram usage:        8 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    4
  9336 ;; This function calls:
  9337 ;;		Nothing
  9338 ;; This function is called by:
  9339 ;;		___awtoft
  9340 ;;		___ftadd
  9341 ;;		___ftmul
  9342 ;;		___lbtoft
  9343 ;; This function uses a non-reentrant model
  9344 ;;
  9345                           
  9346                           	psect	text54
  9347  001690                     __ptext54:
  9348                           	opt stack 0
  9349  001690                     ___ftpack:
  9350                           	opt stack 17
  9351                           
  9352                           ;incstack = 0
  9353  001690  501A               	movf	___ftpack@exp,w,c
  9354  001692  B4D8               	btfsc	status,2,c
  9355  001694  D005               	goto	i1u575_20
  9356  001696  5017               	movf	___ftpack@arg,w,c
  9357  001698  1018               	iorwf	___ftpack@arg+1,w,c
  9358  00169A  1019               	iorwf	___ftpack@arg+2,w,c
  9359  00169C  A4D8               	btfss	status,2,c
  9360  00169E  D00C               	goto	i1l1336
  9361  0016A0                     i1u575_20:
  9362  0016A0  0E00               	movlw	0
  9363  0016A2  6E17               	movwf	?___ftpack,c
  9364  0016A4  0E00               	movlw	0
  9365  0016A6  6E18               	movwf	?___ftpack+1,c
  9366  0016A8  0E00               	movlw	0
  9367  0016AA  6E19               	movwf	?___ftpack+2,c
  9368  0016AC  0012               	return	
  9369  0016AE  2A1A               	incf	___ftpack@exp,f,c
  9370  0016B0  90D8               	bcf	status,0,c
  9371  0016B2  3219               	rrcf	___ftpack@arg+2,f,c
  9372  0016B4  3218               	rrcf	___ftpack@arg+1,f,c
  9373  0016B6  3217               	rrcf	___ftpack@arg,f,c
  9374  0016B8                     i1l1336:
  9375  0016B8  0E00               	movlw	0
  9376  0016BA  1417               	andwf	___ftpack@arg,w,c
  9377  0016BC  6E1C               	movwf	??___ftpack& (0+255),c
  9378  0016BE  0E00               	movlw	0
  9379  0016C0  1418               	andwf	___ftpack@arg+1,w,c
  9380  0016C2  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  9381  0016C4  0EFE               	movlw	254
  9382  0016C6  1419               	andwf	___ftpack@arg+2,w,c
  9383  0016C8  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  9384  0016CA  501C               	movf	??___ftpack,w,c
  9385  0016CC  101D               	iorwf	??___ftpack+1,w,c
  9386  0016CE  101E               	iorwf	??___ftpack+2,w,c
  9387  0016D0  B4D8               	btfsc	status,2,c
  9388  0016D2  D00C               	goto	i1l1339
  9389  0016D4  D7EC               	goto	i1l1337
  9390  0016D6  2A1A               	incf	___ftpack@exp,f,c
  9391  0016D8  0E01               	movlw	1
  9392  0016DA  2617               	addwf	___ftpack@arg,f,c
  9393  0016DC  0E00               	movlw	0
  9394  0016DE  2218               	addwfc	___ftpack@arg+1,f,c
  9395  0016E0  0E00               	movlw	0
  9396  0016E2  2219               	addwfc	___ftpack@arg+2,f,c
  9397  0016E4  90D8               	bcf	status,0,c
  9398  0016E6  3219               	rrcf	___ftpack@arg+2,f,c
  9399  0016E8  3218               	rrcf	___ftpack@arg+1,f,c
  9400  0016EA  3217               	rrcf	___ftpack@arg,f,c
  9401  0016EC                     i1l1339:
  9402  0016EC  0E00               	movlw	0
  9403  0016EE  1417               	andwf	___ftpack@arg,w,c
  9404  0016F0  6E1C               	movwf	??___ftpack& (0+255),c
  9405  0016F2  0E00               	movlw	0
  9406  0016F4  1418               	andwf	___ftpack@arg+1,w,c
  9407  0016F6  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  9408  0016F8  0EFF               	movlw	255
  9409  0016FA  1419               	andwf	___ftpack@arg+2,w,c
  9410  0016FC  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  9411  0016FE  501C               	movf	??___ftpack,w,c
  9412  001700  101D               	iorwf	??___ftpack+1,w,c
  9413  001702  101E               	iorwf	??___ftpack+2,w,c
  9414  001704  B4D8               	btfsc	status,2,c
  9415  001706  D006               	goto	i1l1342
  9416  001708  D7E6               	goto	i1l1340
  9417  00170A  061A               	decf	___ftpack@exp,f,c
  9418  00170C  90D8               	bcf	status,0,c
  9419  00170E  3617               	rlcf	___ftpack@arg,f,c
  9420  001710  3618               	rlcf	___ftpack@arg+1,f,c
  9421  001712  3619               	rlcf	___ftpack@arg+2,f,c
  9422  001714                     i1l1342:
  9423  001714  BE18               	btfsc	___ftpack@arg+1,7,c
  9424  001716  D003               	goto	i1u579_20
  9425  001718  0E02               	movlw	2
  9426  00171A  601A               	cpfslt	___ftpack@exp,c
  9427  00171C  D7F6               	goto	i1l1343
  9428  00171E                     i1u579_20:
  9429  00171E  A01A               	btfss	___ftpack@exp,0,c
  9430  001720  9E18               	bcf	___ftpack@arg+1,7,c
  9431  001722  90D8               	bcf	status,0,c
  9432  001724  321A               	rrcf	___ftpack@exp,f,c
  9433  001726  501A               	movf	___ftpack@exp,w,c
  9434  001728  1219               	iorwf	___ftpack@arg+2,f,c
  9435  00172A  501B               	movf	___ftpack@sign,w,c
  9436  00172C  A4D8               	btfss	status,2,c
  9437  00172E  8E19               	bsf	___ftpack@arg+2,7,c
  9438  001730  C017  F017         	movff	___ftpack@arg,?___ftpack
  9439  001734  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  9440  001738  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  9441  00173C  0012               	return	
  9442  00173E                     __end_of___ftpack:
  9443                           	opt stack 0
  9444                           pclatu	equ	0xFFB
  9445                           pclath	equ	0xFFA
  9446                           tblptru	equ	0xFF8
  9447                           tblptrh	equ	0xFF7
  9448                           tblptrl	equ	0xFF6
  9449                           tablat	equ	0xFF5
  9450                           prodh	equ	0xFF4
  9451                           prodl	equ	0xFF3
  9452                           intcon	equ	0xFF2
  9453                           intcon2	equ	0xFF1
  9454                           intcon3	equ	0xFF0
  9455                           indf0	equ	0xFEF
  9456                           postinc0	equ	0xFEE
  9457                           fsr0h	equ	0xFEA
  9458                           fsr0l	equ	0xFE9
  9459                           wreg	equ	0xFE8
  9460                           indf1	equ	0xFE7
  9461                           fsr1h	equ	0xFE2
  9462                           fsr1l	equ	0xFE1
  9463                           bsr	equ	0xFE0
  9464                           indf2	equ	0xFDF
  9465                           postinc2	equ	0xFDE
  9466                           postdec2	equ	0xFDD
  9467                           fsr2h	equ	0xFDA
  9468                           fsr2l	equ	0xFD9
  9469                           status	equ	0xFD8
  9470                           
  9471 ;; *************** function _ADC_GetConversionResult *****************
  9472 ;; Defined at:
  9473 ;;		line 98 in file "mcc_generated_files/adc.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;		None
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;		None
  9478 ;; Return value:  Size  Location     Type
  9479 ;;                  2   22[COMRAM] unsigned int 
  9480 ;; Registers used:
  9481 ;;		wreg, status,2, status,0
  9482 ;; Tracked objects:
  9483 ;;		On entry : 0/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9487 ;;      Params:         2       0       0       0       0       0       0
  9488 ;;      Locals:         0       0       0       0       0       0       0
  9489 ;;      Temps:          2       0       0       0       0       0       0
  9490 ;;      Totals:         4       0       0       0       0       0       0
  9491 ;;Total ram usage:        4 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    4
  9494 ;; This function calls:
  9495 ;;		Nothing
  9496 ;; This function is called by:
  9497 ;;		_ADC_ISR
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           	psect	text55
  9502  001FA2                     __ptext55:
  9503                           	opt stack 0
  9504  001FA2                     _ADC_GetConversionResult:
  9505                           	opt stack 18
  9506                           
  9507                           ;adc.c: 100: return ((adc_result_t) ((ADRESH << 8) + ADRESL));
  9508                           
  9509                           ;incstack = 0
  9510  001FA2  50C4               	movf	4036,w,c	;volatile
  9511  001FA4  6E1A               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  9512  001FA6  6A19               	clrf	??_ADC_GetConversionResult& (0+255),c
  9513  001FA8  50C3               	movf	4035,w,c	;volatile
  9514  001FAA  2419               	addwf	??_ADC_GetConversionResult,w,c
  9515  001FAC  6E17               	movwf	?_ADC_GetConversionResult,c
  9516  001FAE  0E00               	movlw	0
  9517  001FB0  201A               	addwfc	??_ADC_GetConversionResult+1,w,c
  9518  001FB2  6E18               	movwf	?_ADC_GetConversionResult+1,c
  9519  001FB4  0012               	return	
  9520  001FB6                     __end_of_ADC_GetConversionResult:
  9521                           	opt stack 0
  9522                           pclatu	equ	0xFFB
  9523                           pclath	equ	0xFFA
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           intcon	equ	0xFF2
  9531                           intcon2	equ	0xFF1
  9532                           intcon3	equ	0xFF0
  9533                           indf0	equ	0xFEF
  9534                           postinc0	equ	0xFEE
  9535                           fsr0h	equ	0xFEA
  9536                           fsr0l	equ	0xFE9
  9537                           wreg	equ	0xFE8
  9538                           indf1	equ	0xFE7
  9539                           fsr1h	equ	0xFE2
  9540                           fsr1l	equ	0xFE1
  9541                           bsr	equ	0xFE0
  9542                           indf2	equ	0xFDF
  9543                           postinc2	equ	0xFDE
  9544                           postdec2	equ	0xFDD
  9545                           fsr2h	equ	0xFDA
  9546                           fsr2l	equ	0xFD9
  9547                           status	equ	0xFD8
  9548                           
  9549 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
  9550 ;; Defined at:
  9551 ;;		line 84 in file "mcc_generated_files/interrupt_manager.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;		None
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;		None
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  1    wreg      void 
  9558 ;; Registers used:
  9559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9565 ;;      Params:         0       0       0       0       0       0       0
  9566 ;;      Locals:         0       0       0       0       0       0       0
  9567 ;;      Temps:         18       0       0       0       0       0       0
  9568 ;;      Totals:        18       0       0       0       0       0       0
  9569 ;;Total ram usage:       18 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    3
  9572 ;; This function calls:
  9573 ;;		_I2C1_BusCollisionISR
  9574 ;;		_I2C1_ISR
  9575 ;;		_INT0_ISR
  9576 ;;		_INT1_ISR
  9577 ;;		_INT2_ISR
  9578 ;;		_TMR0_ISR
  9579 ;; This function is called by:
  9580 ;;		Interrupt level 2
  9581 ;; This function uses a non-reentrant model
  9582 ;;
  9583                           
  9584                           	psect	intcode
  9585  000008                     __pintcode:
  9586                           	opt stack 0
  9587  000008                     _INTERRUPT_InterruptManagerHigh:
  9588                           	opt stack 16
  9589                           
  9590                           ;incstack = 0
  9591  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9592  00000A  EF0A  F00A         	goto	int_func
  9593                           pclatu	equ	0xFFB
  9594                           pclath	equ	0xFFA
  9595                           tblptru	equ	0xFF8
  9596                           tblptrh	equ	0xFF7
  9597                           tblptrl	equ	0xFF6
  9598                           tablat	equ	0xFF5
  9599                           prodh	equ	0xFF4
  9600                           prodl	equ	0xFF3
  9601                           intcon	equ	0xFF2
  9602                           intcon2	equ	0xFF1
  9603                           intcon3	equ	0xFF0
  9604                           indf0	equ	0xFEF
  9605                           postinc0	equ	0xFEE
  9606                           fsr0h	equ	0xFEA
  9607                           fsr0l	equ	0xFE9
  9608                           wreg	equ	0xFE8
  9609                           indf1	equ	0xFE7
  9610                           fsr1h	equ	0xFE2
  9611                           fsr1l	equ	0xFE1
  9612                           bsr	equ	0xFE0
  9613                           indf2	equ	0xFDF
  9614                           postinc2	equ	0xFDE
  9615                           postdec2	equ	0xFDD
  9616                           fsr2h	equ	0xFDA
  9617                           fsr2l	equ	0xFD9
  9618                           status	equ	0xFD8
  9619                           
  9620                           	psect	intcode_body
  9621  001414                     __pintcode_body:
  9622                           	opt stack 16
  9623  001414                     int_func:
  9624                           	opt stack 16
  9625  001414  CFFA F005          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
  9626  001418  CFFB F006          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
  9627  00141C  CFE9 F007          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
  9628  001420  CFEA F008          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
  9629  001424  CFE1 F009          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
  9630  001428  CFE2 F00A          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
  9631  00142C  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
  9632  001430  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
  9633  001434  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
  9634  001438  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
  9635  00143C  CFF6 F00F          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
  9636  001440  CFF7 F010          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
  9637  001444  CFF8 F011          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
  9638  001448  CFF5 F012          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
  9639  00144C  C049  F013         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
  9640  001450  C04A  F014         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
  9641  001454  C04B  F015         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
  9642  001458  C04C  F016         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
  9643                           
  9644                           ;interrupt_manager.c: 87: if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  9645  00145C  B8F2               	btfsc	intcon,4,c	;volatile
  9646  00145E  A2F2               	btfss	intcon,1,c	;volatile
  9647  001460  D003               	goto	i2l116
  9648                           
  9649                           ;interrupt_manager.c: 88: {
  9650                           ;interrupt_manager.c: 89: INT0_ISR();
  9651  001462  ECCA  F00E         	call	_INT0_ISR	;wreg free
  9652                           
  9653                           ;interrupt_manager.c: 90: }
  9654  001466  D01D               	goto	i2l126
  9655  001468                     i2l116:
  9656                           
  9657                           ;interrupt_manager.c: 91: else if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
  9658  001468  B6F0               	btfsc	intcon3,3,c	;volatile
  9659  00146A  A0F0               	btfss	intcon3,0,c	;volatile
  9660  00146C  D003               	goto	i2l118
  9661                           
  9662                           ;interrupt_manager.c: 92: {
  9663                           ;interrupt_manager.c: 93: INT1_ISR();
  9664  00146E  ECB4  F00E         	call	_INT1_ISR	;wreg free
  9665                           
  9666                           ;interrupt_manager.c: 94: }
  9667  001472  D017               	goto	i2l126
  9668  001474                     i2l118:
  9669                           
  9670                           ;interrupt_manager.c: 95: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
  9671  001474  B8F0               	btfsc	intcon3,4,c	;volatile
  9672  001476  A2F0               	btfss	intcon3,1,c	;volatile
  9673  001478  D003               	goto	i2l120
  9674                           
  9675                           ;interrupt_manager.c: 96: {
  9676                           ;interrupt_manager.c: 97: INT2_ISR();
  9677  00147A  EC9E  F00E         	call	_INT2_ISR	;wreg free
  9678                           
  9679                           ;interrupt_manager.c: 98: }
  9680  00147E  D011               	goto	i2l126
  9681  001480                     i2l120:
  9682                           
  9683                           ;interrupt_manager.c: 99: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  9684  001480  BAF2               	btfsc	intcon,5,c	;volatile
  9685  001482  A4F2               	btfss	intcon,2,c	;volatile
  9686  001484  D003               	goto	i2l122
  9687                           
  9688                           ;interrupt_manager.c: 100: {
  9689                           ;interrupt_manager.c: 101: TMR0_ISR();
  9690  001486  EC72  F007         	call	_TMR0_ISR	;wreg free
  9691                           
  9692                           ;interrupt_manager.c: 102: }
  9693  00148A  D00B               	goto	i2l126
  9694  00148C                     i2l122:
  9695                           
  9696                           ;interrupt_manager.c: 103: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  9697  00148C  B69D               	btfsc	3997,3,c	;volatile
  9698  00148E  A69E               	btfss	3998,3,c	;volatile
  9699  001490  D003               	goto	i2l124
  9700                           
  9701                           ;interrupt_manager.c: 104: {
  9702                           ;interrupt_manager.c: 105: I2C1_ISR();
  9703  001492  EC52  F003         	call	_I2C1_ISR	;wreg free
  9704                           
  9705                           ;interrupt_manager.c: 106: }
  9706  001496  D005               	goto	i2l126
  9707  001498                     i2l124:
  9708                           
  9709                           ;interrupt_manager.c: 107: else if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  9710  001498  B6A0               	btfsc	4000,3,c	;volatile
  9711  00149A  A6A1               	btfss	4001,3,c	;volatile
  9712  00149C  D002               	goto	i2l126
  9713                           
  9714                           ;interrupt_manager.c: 108: {
  9715                           ;interrupt_manager.c: 109: I2C1_BusCollisionISR();
  9716  00149E  EC33  F010         	call	_I2C1_BusCollisionISR	;wreg free
  9717  0014A2                     i2l126:
  9718                           
  9719                           ;interrupt_manager.c: 111: else
  9720                           ;interrupt_manager.c: 112: {
  9721  0014A2  C016  F04C         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
  9722  0014A6  C015  F04B         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
  9723  0014AA  C014  F04A         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
  9724  0014AE  C013  F049         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
  9725  0014B2  C012  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
  9726  0014B6  C011  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
  9727  0014BA  C010  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
  9728  0014BE  C00F  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
  9729  0014C2  C00E  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
  9730  0014C6  C00D  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
  9731  0014CA  C00C  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
  9732  0014CE  C00B  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
  9733  0014D2  C00A  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
  9734  0014D6  C009  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
  9735  0014DA  C008  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
  9736  0014DE  C007  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
  9737  0014E2  C006  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
  9738  0014E6  C005  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
  9739  0014EA  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9740  0014EC  0011               	retfie		f
  9741  0014EE                     __end_of_INTERRUPT_InterruptManagerHigh:
  9742                           	opt stack 0
  9743                           pclatu	equ	0xFFB
  9744                           pclath	equ	0xFFA
  9745                           tblptru	equ	0xFF8
  9746                           tblptrh	equ	0xFF7
  9747                           tblptrl	equ	0xFF6
  9748                           tablat	equ	0xFF5
  9749                           prodh	equ	0xFF4
  9750                           prodl	equ	0xFF3
  9751                           intcon	equ	0xFF2
  9752                           intcon2	equ	0xFF1
  9753                           intcon3	equ	0xFF0
  9754                           indf0	equ	0xFEF
  9755                           postinc0	equ	0xFEE
  9756                           fsr0h	equ	0xFEA
  9757                           fsr0l	equ	0xFE9
  9758                           wreg	equ	0xFE8
  9759                           indf1	equ	0xFE7
  9760                           fsr1h	equ	0xFE2
  9761                           fsr1l	equ	0xFE1
  9762                           bsr	equ	0xFE0
  9763                           indf2	equ	0xFDF
  9764                           postinc2	equ	0xFDE
  9765                           postdec2	equ	0xFDD
  9766                           fsr2h	equ	0xFDA
  9767                           fsr2l	equ	0xFD9
  9768                           status	equ	0xFD8
  9769                           
  9770 ;; *************** function _TMR0_ISR *****************
  9771 ;; Defined at:
  9772 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;		None
  9775 ;; Auto vars:     Size  Location     Type
  9776 ;;		None
  9777 ;; Return value:  Size  Location     Type
  9778 ;;                  1    wreg      void 
  9779 ;; Registers used:
  9780 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9786 ;;      Params:         0       0       0       0       0       0       0
  9787 ;;      Locals:         0       0       0       0       0       0       0
  9788 ;;      Temps:          0       0       0       0       0       0       0
  9789 ;;      Totals:         0       0       0       0       0       0       0
  9790 ;;Total ram usage:        0 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; Hardware stack levels required when called:    1
  9793 ;; This function calls:
  9794 ;;		Absolute function
  9795 ;;		_ADC_StartConversion
  9796 ;;		_EPWM1_LoadDutyValue
  9797 ;;		_TMR0_DefaultInterruptHandler
  9798 ;;		_TMR2_LoadPeriodRegister
  9799 ;;		_TMR2_StartTimer
  9800 ;;		_TMR2_StopTimer
  9801 ;; This function is called by:
  9802 ;;		_INTERRUPT_InterruptManagerHigh
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           	psect	text57
  9807  000EE4                     __ptext57:
  9808                           	opt stack 0
  9809  000EE4                     _TMR0_ISR:
  9810                           	opt stack 17
  9811                           
  9812                           ;tmr0.c: 136: INTCONbits.TMR0IF = 0;
  9813                           
  9814                           ;incstack = 0
  9815  000EE4  94F2               	bcf	intcon,2,c	;volatile
  9816                           
  9817                           ;tmr0.c: 140: TMR0H = timer0ReloadVal >> 8;
  9818  000EE6  5046               	movf	_timer0ReloadVal+1,w,c	;volatile
  9819  000EE8  6ED7               	movwf	4055,c	;volatile
  9820                           
  9821                           ;tmr0.c: 141: TMR0L = ( uint8_t ) timer0ReloadVal;
  9822  000EEA  C045  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  9823                           
  9824                           ;tmr0.c: 143: if (TMR0_InterruptHandler) {
  9825  000EEE  0100               	movlb	0	; () banked
  9826  000EF0  51D4               	movf	_TMR0_InterruptHandler& (0+255),w,b
  9827  000EF2  11D5               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  9828  000EF4  B4D8               	btfsc	status,2,c
  9829  000EF6  D00C               	goto	i2u451_49
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;tmr0.c: 144: TMR0_InterruptHandler();
  9833  000EF8  D801               	call	i2u451_48
  9834  000EFA  D00A               	goto	i2u451_49
  9835  000EFC                     i2u451_48:
  9836  000EFC  0005               	push	
  9837  000EFE  6EFA               	movwf	pclath,c
  9838  000F00  51D4               	movf	_TMR0_InterruptHandler& (0+255),w,b
  9839  000F02  6EFD               	movwf	tosl,c
  9840  000F04  51D5               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  9841  000F06  6EFE               	movwf	tosh,c
  9842  000F08  50F8               	movf	tblptru,w,c
  9843  000F0A  6EFF               	movwf	tosu,c
  9844  000F0C  50FA               	movf	pclath,w,c
  9845  000F0E  0012               	return		;indir
  9846  000F10                     i2u451_49:
  9847                           
  9848                           ;tmr0.c: 145: }
  9849                           ;tmr0.c: 148: clk4Hz = !clk4Hz;
  9850  000F10  503F               	movf	_clk4Hz,w,c	;volatile
  9851  000F12  A4D8               	btfss	status,2,c
  9852  000F14  D002               	goto	i2u452_40
  9853  000F16  0E01               	movlw	1
  9854  000F18  D001               	goto	i2u453_40
  9855  000F1A                     i2u452_40:
  9856  000F1A  0E00               	movlw	0
  9857  000F1C                     i2u453_40:
  9858  000F1C  6E3F               	movwf	_clk4Hz,c	;volatile
  9859                           
  9860                           ;tmr0.c: 149: if (clk4Hz) {
  9861  000F1E  503F               	movf	_clk4Hz,w,c	;volatile
  9862  000F20  B4D8               	btfsc	status,2,c
  9863  000F22  D009               	goto	i2l353
  9864                           
  9865                           ;tmr0.c: 150: ADC_StartConversion();
  9866  000F24  EC2B  F010         	call	_ADC_StartConversion	;wreg free
  9867                           
  9868                           ;tmr0.c: 151: clk2Hz = !clk2Hz;
  9869  000F28  503E               	movf	_clk2Hz,w,c	;volatile
  9870  000F2A  A4D8               	btfss	status,2,c
  9871  000F2C  D002               	goto	i2u455_40
  9872  000F2E  0E01               	movlw	1
  9873  000F30  D001               	goto	i2u456_40
  9874  000F32                     i2u455_40:
  9875  000F32  0E00               	movlw	0
  9876  000F34                     i2u456_40:
  9877  000F34  6E3E               	movwf	_clk2Hz,c	;volatile
  9878  000F36                     i2l353:
  9879                           
  9880                           ;tmr0.c: 152: }
  9881                           ;tmr0.c: 153: if (clk2Hz && clk4Hz)
  9882  000F36  503E               	movf	_clk2Hz,w,c	;volatile
  9883  000F38  B4D8               	btfsc	status,2,c
  9884  000F3A  D00A               	goto	i2l354
  9885  000F3C  503F               	movf	_clk4Hz,w,c	;volatile
  9886  000F3E  B4D8               	btfsc	status,2,c
  9887  000F40  D007               	goto	i2l354
  9888                           
  9889                           ;tmr0.c: 154: clk1Hz = !clk1Hz;
  9890  000F42  503D               	movf	_clk1Hz,w,c	;volatile
  9891  000F44  A4D8               	btfss	status,2,c
  9892  000F46  D002               	goto	i2u459_40
  9893  000F48  0E01               	movlw	1
  9894  000F4A  D001               	goto	i2u460_40
  9895  000F4C                     i2u459_40:
  9896  000F4C  0E00               	movlw	0
  9897  000F4E                     i2u460_40:
  9898  000F4E  6E3D               	movwf	_clk1Hz,c	;volatile
  9899  000F50                     i2l354:
  9900                           
  9901                           ;tmr0.c: 155: if (clk1Hz && clk2Hz && clk4Hz)
  9902  000F50  503D               	movf	_clk1Hz,w,c	;volatile
  9903  000F52  B4D8               	btfsc	status,2,c
  9904  000F54  D00D               	goto	i2l355
  9905  000F56  503E               	movf	_clk2Hz,w,c	;volatile
  9906  000F58  B4D8               	btfsc	status,2,c
  9907  000F5A  D00A               	goto	i2l355
  9908  000F5C  503F               	movf	_clk4Hz,w,c	;volatile
  9909  000F5E  B4D8               	btfsc	status,2,c
  9910  000F60  D007               	goto	i2l355
  9911                           
  9912                           ;tmr0.c: 156: clk1_2Hz = !clk1_2Hz;
  9913  000F62  503C               	movf	_clk1_2Hz,w,c	;volatile
  9914  000F64  A4D8               	btfss	status,2,c
  9915  000F66  D002               	goto	i2u464_40
  9916  000F68  0E01               	movlw	1
  9917  000F6A  D001               	goto	i2u465_40
  9918  000F6C                     i2u464_40:
  9919  000F6C  0E00               	movlw	0
  9920  000F6E                     i2u465_40:
  9921  000F6E  6E3C               	movwf	_clk1_2Hz,c	;volatile
  9922  000F70                     i2l355:
  9923                           
  9924                           ;tmr0.c: 157: if (clk1_2Hz && clk1Hz && clk2Hz && clk4Hz)
  9925  000F70  503C               	movf	_clk1_2Hz,w,c	;volatile
  9926  000F72  B4D8               	btfsc	status,2,c
  9927  000F74  D010               	goto	i2l356
  9928  000F76  503D               	movf	_clk1Hz,w,c	;volatile
  9929  000F78  B4D8               	btfsc	status,2,c
  9930  000F7A  D00D               	goto	i2l356
  9931  000F7C  503E               	movf	_clk2Hz,w,c	;volatile
  9932  000F7E  B4D8               	btfsc	status,2,c
  9933  000F80  D00A               	goto	i2l356
  9934  000F82  503F               	movf	_clk4Hz,w,c	;volatile
  9935  000F84  B4D8               	btfsc	status,2,c
  9936  000F86  D007               	goto	i2l356
  9937                           
  9938                           ;tmr0.c: 158: clk1_4Hz = !clk1_4Hz;
  9939  000F88  503B               	movf	_clk1_4Hz,w,c	;volatile
  9940  000F8A  A4D8               	btfss	status,2,c
  9941  000F8C  D002               	goto	i2u470_40
  9942  000F8E  0E01               	movlw	1
  9943  000F90  D001               	goto	i2u471_40
  9944  000F92                     i2u470_40:
  9945  000F92  0E00               	movlw	0
  9946  000F94                     i2u471_40:
  9947  000F94  6E3B               	movwf	_clk1_4Hz,c	;volatile
  9948  000F96                     i2l356:
  9949                           
  9950                           ;tmr0.c: 159: if (clk1_4Hz && clk1_2Hz && clk1Hz && clk2Hz && clk4Hz)
  9951  000F96  503B               	movf	_clk1_4Hz,w,c	;volatile
  9952  000F98  B4D8               	btfsc	status,2,c
  9953  000F9A  D013               	goto	i2l357
  9954  000F9C  503C               	movf	_clk1_2Hz,w,c	;volatile
  9955  000F9E  B4D8               	btfsc	status,2,c
  9956  000FA0  D010               	goto	i2l357
  9957  000FA2  503D               	movf	_clk1Hz,w,c	;volatile
  9958  000FA4  B4D8               	btfsc	status,2,c
  9959  000FA6  D00D               	goto	i2l357
  9960  000FA8  503E               	movf	_clk2Hz,w,c	;volatile
  9961  000FAA  B4D8               	btfsc	status,2,c
  9962  000FAC  D00A               	goto	i2l357
  9963  000FAE  503F               	movf	_clk4Hz,w,c	;volatile
  9964  000FB0  B4D8               	btfsc	status,2,c
  9965  000FB2  D007               	goto	i2l357
  9966                           
  9967                           ;tmr0.c: 160: clk1_8Hz = !clk1_8Hz;
  9968  000FB4  503A               	movf	_clk1_8Hz,w,c	;volatile
  9969  000FB6  A4D8               	btfss	status,2,c
  9970  000FB8  D002               	goto	i2u477_40
  9971  000FBA  0E01               	movlw	1
  9972  000FBC  D001               	goto	i2u478_40
  9973  000FBE                     i2u477_40:
  9974  000FBE  0E00               	movlw	0
  9975  000FC0                     i2u478_40:
  9976  000FC0  6E3A               	movwf	_clk1_8Hz,c	;volatile
  9977  000FC2                     i2l357:
  9978                           
  9979                           ;tmr0.c: 162: if (( int ) tempAtual > tempAlarme) {
  9980  000FC2  5047               	movf	_tempAtual,w,c	;volatile
  9981  000FC4  5C48               	subwf	_tempAlarme,w,c	;volatile
  9982  000FC6  B0D8               	btfsc	status,0,c
  9983  000FC8  D023               	goto	i2l358
  9984                           
  9985                           ;tmr0.c: 163: alarme = 1;
  9986  000FCA  0E01               	movlw	1
  9987  000FCC  6E39               	movwf	_alarme,c	;volatile
  9988                           
  9989                           ;tmr0.c: 165: TMR2_StartTimer();
  9990  000FCE  EC29  F010         	call	_TMR2_StartTimer	;wreg free
  9991                           
  9992                           ;tmr0.c: 168: switch (clk2Hz) {
  9993  000FD2  D016               	goto	i2l359
  9994  000FD4                     
  9995                           ;tmr0.c: 170: EPWM1_LoadDutyValue(124);
  9996  000FD4  0E00               	movlw	0
  9997  000FD6  6E02               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
  9998  000FD8  0E7C               	movlw	124
  9999  000FDA  6E01               	movwf	EPWM1_LoadDutyValue@dutyValue,c
 10000  000FDC  EC6F  F00E         	call	_EPWM1_LoadDutyValue	;wreg free
 10001                           
 10002                           ;tmr0.c: 171: TMR2_LoadPeriodRegister(249);
 10003  000FE0  0EF9               	movlw	249
 10004  000FE2  EC1D  F010         	call	_TMR2_LoadPeriodRegister
 10005                           
 10006                           ;tmr0.c: 172: do { LATBbits.LATB7 = 0; } while(0);
 10007  000FE6  9E8A               	bcf	3978,7,c	;volatile
 10008                           
 10009                           ;tmr0.c: 173: break;
 10010  000FE8  0012               	return	
 10011  000FEA                     
 10012                           ;tmr0.c: 175: EPWM1_LoadDutyValue(74);
 10013  000FEA  0E00               	movlw	0
 10014  000FEC  6E02               	movwf	EPWM1_LoadDutyValue@dutyValue+1,c
 10015  000FEE  0E4A               	movlw	74
 10016  000FF0  6E01               	movwf	EPWM1_LoadDutyValue@dutyValue,c
 10017  000FF2  EC6F  F00E         	call	_EPWM1_LoadDutyValue	;wreg free
 10018                           
 10019                           ;tmr0.c: 176: TMR2_LoadPeriodRegister(149);
 10020  000FF6  0E95               	movlw	149
 10021  000FF8  EC1D  F010         	call	_TMR2_LoadPeriodRegister
 10022                           
 10023                           ;tmr0.c: 177: do { LATBbits.LATB7 = 1; } while(0);
 10024  000FFC  8E8A               	bsf	3978,7,c	;volatile
 10025                           
 10026                           ;tmr0.c: 179: }
 10027                           
 10028                           ;tmr0.c: 178: break;
 10029  000FFE  0012               	return	
 10030  001000                     i2l359:
 10031  001000  503E               	movf	_clk2Hz,w,c	;volatile
 10032                           
 10033                           ; Switch size 1, requested type "space"
 10034                           ; Number of cases is 2, Range of values is 0 to 1
 10035                           ; switch strategies available:
 10036                           ; Name         Instructions Cycles
 10037                           ; simple_byte            7     4 (average)
 10038                           ;	Chosen strategy is simple_byte
 10039  001002  0A00               	xorlw	0	; case 0
 10040  001004  B4D8               	btfsc	status,2,c
 10041  001006  D7E6               	goto	i2l360
 10042  001008  0A01               	xorlw	1	; case 1
 10043  00100A  A4D8               	btfss	status,2,c
 10044                           
 10045                           ;tmr0.c: 180: } else {
 10046  00100C  0012               	return	
 10047  00100E  D7ED               	goto	i2l364
 10048  001010                     i2l358:
 10049                           
 10050                           ;tmr0.c: 181: alarme = 0;
 10051  001010  0E00               	movlw	0
 10052  001012  6E39               	movwf	_alarme,c	;volatile
 10053                           
 10054                           ;tmr0.c: 182: TMR2_StopTimer();
 10055  001014  EC27  F010         	call	_TMR2_StopTimer	;wreg free
 10056                           
 10057                           ;tmr0.c: 183: do { LATBbits.LATB7 = 0; } while(0);
 10058  001018  9E8A               	bcf	3978,7,c	;volatile
 10059  00101A  0012               	return	
 10060  00101C                     __end_of_TMR0_ISR:
 10061                           	opt stack 0
 10062                           tosu	equ	0xFFF
 10063                           tosh	equ	0xFFE
 10064                           tosl	equ	0xFFD
 10065                           pclatu	equ	0xFFB
 10066                           pclath	equ	0xFFA
 10067                           tblptru	equ	0xFF8
 10068                           tblptrh	equ	0xFF7
 10069                           tblptrl	equ	0xFF6
 10070                           tablat	equ	0xFF5
 10071                           prodh	equ	0xFF4
 10072                           prodl	equ	0xFF3
 10073                           intcon	equ	0xFF2
 10074                           intcon2	equ	0xFF1
 10075                           intcon3	equ	0xFF0
 10076                           indf0	equ	0xFEF
 10077                           postinc0	equ	0xFEE
 10078                           fsr0h	equ	0xFEA
 10079                           fsr0l	equ	0xFE9
 10080                           wreg	equ	0xFE8
 10081                           indf1	equ	0xFE7
 10082                           fsr1h	equ	0xFE2
 10083                           fsr1l	equ	0xFE1
 10084                           bsr	equ	0xFE0
 10085                           indf2	equ	0xFDF
 10086                           postinc2	equ	0xFDE
 10087                           postdec2	equ	0xFDD
 10088                           fsr2h	equ	0xFDA
 10089                           fsr2l	equ	0xFD9
 10090                           status	equ	0xFD8
 10091                           
 10092 ;; *************** function _TMR2_StopTimer *****************
 10093 ;; Defined at:
 10094 ;;		line 84 in file "mcc_generated_files/tmr2.c"
 10095 ;; Parameters:    Size  Location     Type
 10096 ;;		None
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;		None
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  1    wreg      void 
 10101 ;; Registers used:
 10102 ;;		None
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10108 ;;      Params:         0       0       0       0       0       0       0
 10109 ;;      Locals:         0       0       0       0       0       0       0
 10110 ;;      Temps:          0       0       0       0       0       0       0
 10111 ;;      Totals:         0       0       0       0       0       0       0
 10112 ;;Total ram usage:        0 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; This function calls:
 10115 ;;		Nothing
 10116 ;; This function is called by:
 10117 ;;		_TMR0_ISR
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           	psect	text58
 10122  00204E                     __ptext58:
 10123                           	opt stack 0
 10124  00204E                     _TMR2_StopTimer:
 10125                           	opt stack 17
 10126                           
 10127                           ;tmr2.c: 87: T2CONbits.TMR2ON = 0;
 10128                           
 10129                           ;incstack = 0
 10130  00204E  94BA               	bcf	4026,2,c	;volatile
 10131  002050  0012               	return		;funcret
 10132  002052                     __end_of_TMR2_StopTimer:
 10133                           	opt stack 0
 10134                           tosu	equ	0xFFF
 10135                           tosh	equ	0xFFE
 10136                           tosl	equ	0xFFD
 10137                           pclatu	equ	0xFFB
 10138                           pclath	equ	0xFFA
 10139                           tblptru	equ	0xFF8
 10140                           tblptrh	equ	0xFF7
 10141                           tblptrl	equ	0xFF6
 10142                           tablat	equ	0xFF5
 10143                           prodh	equ	0xFF4
 10144                           prodl	equ	0xFF3
 10145                           intcon	equ	0xFF2
 10146                           intcon2	equ	0xFF1
 10147                           intcon3	equ	0xFF0
 10148                           indf0	equ	0xFEF
 10149                           postinc0	equ	0xFEE
 10150                           fsr0h	equ	0xFEA
 10151                           fsr0l	equ	0xFE9
 10152                           wreg	equ	0xFE8
 10153                           indf1	equ	0xFE7
 10154                           fsr1h	equ	0xFE2
 10155                           fsr1l	equ	0xFE1
 10156                           bsr	equ	0xFE0
 10157                           indf2	equ	0xFDF
 10158                           postinc2	equ	0xFDE
 10159                           postdec2	equ	0xFDD
 10160                           fsr2h	equ	0xFDA
 10161                           fsr2l	equ	0xFD9
 10162                           status	equ	0xFD8
 10163                           
 10164 ;; *************** function _TMR2_StartTimer *****************
 10165 ;; Defined at:
 10166 ;;		line 78 in file "mcc_generated_files/tmr2.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;		None
 10169 ;; Auto vars:     Size  Location     Type
 10170 ;;		None
 10171 ;; Return value:  Size  Location     Type
 10172 ;;                  1    wreg      void 
 10173 ;; Registers used:
 10174 ;;		None
 10175 ;; Tracked objects:
 10176 ;;		On entry : 0/0
 10177 ;;		On exit  : 0/0
 10178 ;;		Unchanged: 0/0
 10179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10180 ;;      Params:         0       0       0       0       0       0       0
 10181 ;;      Locals:         0       0       0       0       0       0       0
 10182 ;;      Temps:          0       0       0       0       0       0       0
 10183 ;;      Totals:         0       0       0       0       0       0       0
 10184 ;;Total ram usage:        0 bytes
 10185 ;; Hardware stack levels used:    1
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_TMR0_ISR
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           	psect	text59
 10194  002052                     __ptext59:
 10195                           	opt stack 0
 10196  002052                     _TMR2_StartTimer:
 10197                           	opt stack 17
 10198                           
 10199                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
 10200                           
 10201                           ;incstack = 0
 10202  002052  84BA               	bsf	4026,2,c	;volatile
 10203  002054  0012               	return		;funcret
 10204  002056                     __end_of_TMR2_StartTimer:
 10205                           	opt stack 0
 10206                           tosu	equ	0xFFF
 10207                           tosh	equ	0xFFE
 10208                           tosl	equ	0xFFD
 10209                           pclatu	equ	0xFFB
 10210                           pclath	equ	0xFFA
 10211                           tblptru	equ	0xFF8
 10212                           tblptrh	equ	0xFF7
 10213                           tblptrl	equ	0xFF6
 10214                           tablat	equ	0xFF5
 10215                           prodh	equ	0xFF4
 10216                           prodl	equ	0xFF3
 10217                           intcon	equ	0xFF2
 10218                           intcon2	equ	0xFF1
 10219                           intcon3	equ	0xFF0
 10220                           indf0	equ	0xFEF
 10221                           postinc0	equ	0xFEE
 10222                           fsr0h	equ	0xFEA
 10223                           fsr0l	equ	0xFE9
 10224                           wreg	equ	0xFE8
 10225                           indf1	equ	0xFE7
 10226                           fsr1h	equ	0xFE2
 10227                           fsr1l	equ	0xFE1
 10228                           bsr	equ	0xFE0
 10229                           indf2	equ	0xFDF
 10230                           postinc2	equ	0xFDE
 10231                           postdec2	equ	0xFDD
 10232                           fsr2h	equ	0xFDA
 10233                           fsr2l	equ	0xFD9
 10234                           status	equ	0xFD8
 10235                           
 10236 ;; *************** function _TMR2_LoadPeriodRegister *****************
 10237 ;; Defined at:
 10238 ;;		line 105 in file "mcc_generated_files/tmr2.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;  periodVal       1    wreg     unsigned char 
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;  periodVal       1    0[COMRAM] unsigned char 
 10243 ;; Return value:  Size  Location     Type
 10244 ;;                  1    wreg      void 
 10245 ;; Registers used:
 10246 ;;		wreg
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10252 ;;      Params:         0       0       0       0       0       0       0
 10253 ;;      Locals:         1       0       0       0       0       0       0
 10254 ;;      Temps:          0       0       0       0       0       0       0
 10255 ;;      Totals:         1       0       0       0       0       0       0
 10256 ;;Total ram usage:        1 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; This function calls:
 10259 ;;		Nothing
 10260 ;; This function is called by:
 10261 ;;		_TMR0_ISR
 10262 ;; This function uses a non-reentrant model
 10263 ;;
 10264                           
 10265                           	psect	text60
 10266  00203A                     __ptext60:
 10267                           	opt stack 0
 10268  00203A                     _TMR2_LoadPeriodRegister:
 10269                           	opt stack 17
 10270                           
 10271                           ;incstack = 0
 10272                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 10273  00203A  6E01               	movwf	TMR2_LoadPeriodRegister@periodVal,c
 10274                           
 10275                           ;tmr2.c: 107: PR2 = periodVal;
 10276  00203C  C001  FFBB         	movff	TMR2_LoadPeriodRegister@periodVal,4027	;volatile
 10277  002040  0012               	return		;funcret
 10278  002042                     __end_of_TMR2_LoadPeriodRegister:
 10279                           	opt stack 0
 10280                           tosu	equ	0xFFF
 10281                           tosh	equ	0xFFE
 10282                           tosl	equ	0xFFD
 10283                           pclatu	equ	0xFFB
 10284                           pclath	equ	0xFFA
 10285                           tblptru	equ	0xFF8
 10286                           tblptrh	equ	0xFF7
 10287                           tblptrl	equ	0xFF6
 10288                           tablat	equ	0xFF5
 10289                           prodh	equ	0xFF4
 10290                           prodl	equ	0xFF3
 10291                           intcon	equ	0xFF2
 10292                           intcon2	equ	0xFF1
 10293                           intcon3	equ	0xFF0
 10294                           indf0	equ	0xFEF
 10295                           postinc0	equ	0xFEE
 10296                           fsr0h	equ	0xFEA
 10297                           fsr0l	equ	0xFE9
 10298                           wreg	equ	0xFE8
 10299                           indf1	equ	0xFE7
 10300                           fsr1h	equ	0xFE2
 10301                           fsr1l	equ	0xFE1
 10302                           bsr	equ	0xFE0
 10303                           indf2	equ	0xFDF
 10304                           postinc2	equ	0xFDE
 10305                           postdec2	equ	0xFDD
 10306                           fsr2h	equ	0xFDA
 10307                           fsr2l	equ	0xFD9
 10308                           status	equ	0xFD8
 10309                           
 10310 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 10311 ;; Defined at:
 10312 ;;		line 192 in file "mcc_generated_files/tmr0.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;		None
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;		None
 10317 ;; Return value:  Size  Location     Type
 10318 ;;                  1    wreg      void 
 10319 ;; Registers used:
 10320 ;;		None
 10321 ;; Tracked objects:
 10322 ;;		On entry : 0/0
 10323 ;;		On exit  : 0/0
 10324 ;;		Unchanged: 0/0
 10325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10326 ;;      Params:         0       0       0       0       0       0       0
 10327 ;;      Locals:         0       0       0       0       0       0       0
 10328 ;;      Temps:          0       0       0       0       0       0       0
 10329 ;;      Totals:         0       0       0       0       0       0       0
 10330 ;;Total ram usage:        0 bytes
 10331 ;; Hardware stack levels used:    1
 10332 ;; This function calls:
 10333 ;;		Nothing
 10334 ;; This function is called by:
 10335 ;;		_TMR0_Initialize
 10336 ;;		_TMR0_ISR
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           	psect	text61
 10341  00205E                     __ptext61:
 10342                           	opt stack 0
 10343  00205E                     _TMR0_DefaultInterruptHandler:
 10344                           	opt stack 17
 10345                           
 10346                           ;incstack = 0
 10347  00205E  0012               	return		;funcret
 10348  002060                     __end_of_TMR0_DefaultInterruptHandler:
 10349                           	opt stack 0
 10350                           tosu	equ	0xFFF
 10351                           tosh	equ	0xFFE
 10352                           tosl	equ	0xFFD
 10353                           pclatu	equ	0xFFB
 10354                           pclath	equ	0xFFA
 10355                           tblptru	equ	0xFF8
 10356                           tblptrh	equ	0xFF7
 10357                           tblptrl	equ	0xFF6
 10358                           tablat	equ	0xFF5
 10359                           prodh	equ	0xFF4
 10360                           prodl	equ	0xFF3
 10361                           intcon	equ	0xFF2
 10362                           intcon2	equ	0xFF1
 10363                           intcon3	equ	0xFF0
 10364                           indf0	equ	0xFEF
 10365                           postinc0	equ	0xFEE
 10366                           fsr0h	equ	0xFEA
 10367                           fsr0l	equ	0xFE9
 10368                           wreg	equ	0xFE8
 10369                           indf1	equ	0xFE7
 10370                           fsr1h	equ	0xFE2
 10371                           fsr1l	equ	0xFE1
 10372                           bsr	equ	0xFE0
 10373                           indf2	equ	0xFDF
 10374                           postinc2	equ	0xFDE
 10375                           postdec2	equ	0xFDD
 10376                           fsr2h	equ	0xFDA
 10377                           fsr2l	equ	0xFD9
 10378                           status	equ	0xFD8
 10379                           
 10380 ;; *************** function _EPWM1_LoadDutyValue *****************
 10381 ;; Defined at:
 10382 ;;		line 90 in file "mcc_generated_files/epwm1.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;  dutyValue       2    0[COMRAM] unsigned int 
 10385 ;; Auto vars:     Size  Location     Type
 10386 ;;		None
 10387 ;; Return value:  Size  Location     Type
 10388 ;;                  1    wreg      void 
 10389 ;; Registers used:
 10390 ;;		wreg, status,2, status,0
 10391 ;; Tracked objects:
 10392 ;;		On entry : 0/0
 10393 ;;		On exit  : 0/0
 10394 ;;		Unchanged: 0/0
 10395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10396 ;;      Params:         2       0       0       0       0       0       0
 10397 ;;      Locals:         0       0       0       0       0       0       0
 10398 ;;      Temps:          2       0       0       0       0       0       0
 10399 ;;      Totals:         4       0       0       0       0       0       0
 10400 ;;Total ram usage:        4 bytes
 10401 ;; Hardware stack levels used:    1
 10402 ;; This function calls:
 10403 ;;		Nothing
 10404 ;; This function is called by:
 10405 ;;		_TMR0_ISR
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           	psect	text62
 10410  001CDE                     __ptext62:
 10411                           	opt stack 0
 10412  001CDE                     _EPWM1_LoadDutyValue:
 10413                           	opt stack 17
 10414                           
 10415                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
 10416                           
 10417                           ;incstack = 0
 10418  001CDE  C001  F003         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 10419  001CE2  C002  F004         	movff	EPWM1_LoadDutyValue@dutyValue+1,??_EPWM1_LoadDutyValue+1
 10420  001CE6  90D8               	bcf	status,0,c
 10421  001CE8  3204               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
 10422  001CEA  3203               	rrcf	??_EPWM1_LoadDutyValue,f,c
 10423  001CEC  90D8               	bcf	status,0,c
 10424  001CEE  3204               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
 10425  001CF0  3203               	rrcf	??_EPWM1_LoadDutyValue,f,c
 10426  001CF2  5003               	movf	??_EPWM1_LoadDutyValue,w,c
 10427  001CF4  6EBE               	movwf	4030,c	;volatile
 10428                           
 10429                           ;epwm1.c: 96: CCP1CON = ((uint8_t)(CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4));
 10430  001CF6  C001  F003         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 10431  001CFA  0E03               	movlw	3
 10432  001CFC  1603               	andwf	??_EPWM1_LoadDutyValue,f,c
 10433  001CFE  3A03               	swapf	??_EPWM1_LoadDutyValue,f,c
 10434  001D00  0EF0               	movlw	240
 10435  001D02  1603               	andwf	??_EPWM1_LoadDutyValue,f,c
 10436  001D04  50BD               	movf	4029,w,c	;volatile
 10437  001D06  0BCF               	andlw	207
 10438  001D08  1003               	iorwf	??_EPWM1_LoadDutyValue,w,c
 10439  001D0A  6EBD               	movwf	4029,c	;volatile
 10440  001D0C  0012               	return		;funcret
 10441  001D0E                     __end_of_EPWM1_LoadDutyValue:
 10442                           	opt stack 0
 10443                           tosu	equ	0xFFF
 10444                           tosh	equ	0xFFE
 10445                           tosl	equ	0xFFD
 10446                           pclatu	equ	0xFFB
 10447                           pclath	equ	0xFFA
 10448                           tblptru	equ	0xFF8
 10449                           tblptrh	equ	0xFF7
 10450                           tblptrl	equ	0xFF6
 10451                           tablat	equ	0xFF5
 10452                           prodh	equ	0xFF4
 10453                           prodl	equ	0xFF3
 10454                           intcon	equ	0xFF2
 10455                           intcon2	equ	0xFF1
 10456                           intcon3	equ	0xFF0
 10457                           indf0	equ	0xFEF
 10458                           postinc0	equ	0xFEE
 10459                           fsr0h	equ	0xFEA
 10460                           fsr0l	equ	0xFE9
 10461                           wreg	equ	0xFE8
 10462                           indf1	equ	0xFE7
 10463                           fsr1h	equ	0xFE2
 10464                           fsr1l	equ	0xFE1
 10465                           bsr	equ	0xFE0
 10466                           indf2	equ	0xFDF
 10467                           postinc2	equ	0xFDE
 10468                           postdec2	equ	0xFDD
 10469                           fsr2h	equ	0xFDA
 10470                           fsr2l	equ	0xFD9
 10471                           status	equ	0xFD8
 10472                           
 10473 ;; *************** function _ADC_StartConversion *****************
 10474 ;; Defined at:
 10475 ;;		line 88 in file "mcc_generated_files/adc.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;		None
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;		None
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      void 
 10482 ;; Registers used:
 10483 ;;		None
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10489 ;;      Params:         0       0       0       0       0       0       0
 10490 ;;      Locals:         0       0       0       0       0       0       0
 10491 ;;      Temps:          0       0       0       0       0       0       0
 10492 ;;      Totals:         0       0       0       0       0       0       0
 10493 ;;Total ram usage:        0 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; This function calls:
 10496 ;;		Nothing
 10497 ;; This function is called by:
 10498 ;;		_TMR0_ISR
 10499 ;; This function uses a non-reentrant model
 10500 ;;
 10501                           
 10502                           	psect	text63
 10503  002056                     __ptext63:
 10504                           	opt stack 0
 10505  002056                     _ADC_StartConversion:
 10506                           	opt stack 17
 10507                           
 10508                           ;adc.c: 90: ADCON0bits.GO_nDONE = 1;
 10509                           
 10510                           ;incstack = 0
 10511  002056  82C2               	bsf	4034,1,c	;volatile
 10512  002058  0012               	return		;funcret
 10513  00205A                     __end_of_ADC_StartConversion:
 10514                           	opt stack 0
 10515                           tosu	equ	0xFFF
 10516                           tosh	equ	0xFFE
 10517                           tosl	equ	0xFFD
 10518                           pclatu	equ	0xFFB
 10519                           pclath	equ	0xFFA
 10520                           tblptru	equ	0xFF8
 10521                           tblptrh	equ	0xFF7
 10522                           tblptrl	equ	0xFF6
 10523                           tablat	equ	0xFF5
 10524                           prodh	equ	0xFF4
 10525                           prodl	equ	0xFF3
 10526                           intcon	equ	0xFF2
 10527                           intcon2	equ	0xFF1
 10528                           intcon3	equ	0xFF0
 10529                           indf0	equ	0xFEF
 10530                           postinc0	equ	0xFEE
 10531                           fsr0h	equ	0xFEA
 10532                           fsr0l	equ	0xFE9
 10533                           wreg	equ	0xFE8
 10534                           indf1	equ	0xFE7
 10535                           fsr1h	equ	0xFE2
 10536                           fsr1l	equ	0xFE1
 10537                           bsr	equ	0xFE0
 10538                           indf2	equ	0xFDF
 10539                           postinc2	equ	0xFDE
 10540                           postdec2	equ	0xFDD
 10541                           fsr2h	equ	0xFDA
 10542                           fsr2l	equ	0xFD9
 10543                           status	equ	0xFD8
 10544                           
 10545 ;; *************** function _INT2_ISR *****************
 10546 ;; Defined at:
 10547 ;;		line 99 in file "mcc_generated_files/ext_int.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;		None
 10550 ;; Auto vars:     Size  Location     Type
 10551 ;;		None
 10552 ;; Return value:  Size  Location     Type
 10553 ;;                  1    wreg      void 
 10554 ;; Registers used:
 10555 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 10556 ;; Tracked objects:
 10557 ;;		On entry : 0/0
 10558 ;;		On exit  : 0/0
 10559 ;;		Unchanged: 0/0
 10560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10561 ;;      Params:         0       0       0       0       0       0       0
 10562 ;;      Locals:         0       0       0       0       0       0       0
 10563 ;;      Temps:          0       0       0       0       0       0       0
 10564 ;;      Totals:         0       0       0       0       0       0       0
 10565 ;;Total ram usage:        0 bytes
 10566 ;; Hardware stack levels used:    1
 10567 ;; Hardware stack levels required when called:    2
 10568 ;; This function calls:
 10569 ;;		_INT2_CallBack
 10570 ;; This function is called by:
 10571 ;;		_INTERRUPT_InterruptManagerHigh
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           	psect	text64
 10576  001D3C                     __ptext64:
 10577                           	opt stack 0
 10578  001D3C                     _INT2_ISR:
 10579                           	opt stack 16
 10580                           
 10581                           ;ext_int.c: 102: if (PORTBbits.RB3 == 1) {
 10582                           
 10583                           ;incstack = 0
 10584  001D3C  A681               	btfss	3969,3,c	;volatile
 10585  001D3E  D002               	goto	i2l221
 10586                           
 10587                           ;ext_int.c: 103: TeclaTMP = '3';
 10588  001D40  0E33               	movlw	51
 10589  001D42  6E42               	movwf	_TeclaTMP,c	;volatile
 10590  001D44                     i2l221:
 10591                           
 10592                           ;ext_int.c: 104: }
 10593                           ;ext_int.c: 105: if (PORTBbits.RB4 == 1) {
 10594  001D44  A881               	btfss	3969,4,c	;volatile
 10595  001D46  D002               	goto	i2l222
 10596                           
 10597                           ;ext_int.c: 106: TeclaTMP = '6';
 10598  001D48  0E36               	movlw	54
 10599  001D4A  6E42               	movwf	_TeclaTMP,c	;volatile
 10600  001D4C                     i2l222:
 10601                           
 10602                           ;ext_int.c: 107: }
 10603                           ;ext_int.c: 108: if (PORTBbits.RB5 == 1) {
 10604  001D4C  AA81               	btfss	3969,5,c	;volatile
 10605  001D4E  D002               	goto	i2l223
 10606                           
 10607                           ;ext_int.c: 109: TeclaTMP = '9';
 10608  001D50  0E39               	movlw	57
 10609  001D52  6E42               	movwf	_TeclaTMP,c	;volatile
 10610  001D54                     i2l223:
 10611                           
 10612                           ;ext_int.c: 110: }
 10613                           ;ext_int.c: 111: if (PORTBbits.RB6 == 1) {
 10614  001D54  AC81               	btfss	3969,6,c	;volatile
 10615  001D56  D002               	goto	i2l224
 10616                           
 10617                           ;ext_int.c: 112: TeclaTMP = '#';
 10618  001D58  0E23               	movlw	35
 10619  001D5A  6E42               	movwf	_TeclaTMP,c	;volatile
 10620  001D5C                     i2l224:
 10621                           
 10622                           ;ext_int.c: 113: }
 10623                           ;ext_int.c: 114: WrEnFl = 1;
 10624  001D5C  0E01               	movlw	1
 10625  001D5E  6E38               	movwf	_WrEnFl,c	;volatile
 10626                           
 10627                           ;ext_int.c: 118: (INTCON3bits.INT2IF = 0);
 10628  001D60  92F0               	bcf	intcon3,1,c	;volatile
 10629                           
 10630                           ;ext_int.c: 121: INT2_CallBack();
 10631  001D62  EC50  F00F         	call	_INT2_CallBack	;wreg free
 10632  001D66  0012               	return		;funcret
 10633  001D68                     __end_of_INT2_ISR:
 10634                           	opt stack 0
 10635                           tosu	equ	0xFFF
 10636                           tosh	equ	0xFFE
 10637                           tosl	equ	0xFFD
 10638                           pclatu	equ	0xFFB
 10639                           pclath	equ	0xFFA
 10640                           tblptru	equ	0xFF8
 10641                           tblptrh	equ	0xFF7
 10642                           tblptrl	equ	0xFF6
 10643                           tablat	equ	0xFF5
 10644                           prodh	equ	0xFF4
 10645                           prodl	equ	0xFF3
 10646                           intcon	equ	0xFF2
 10647                           intcon2	equ	0xFF1
 10648                           intcon3	equ	0xFF0
 10649                           indf0	equ	0xFEF
 10650                           postinc0	equ	0xFEE
 10651                           fsr0h	equ	0xFEA
 10652                           fsr0l	equ	0xFE9
 10653                           wreg	equ	0xFE8
 10654                           indf1	equ	0xFE7
 10655                           fsr1h	equ	0xFE2
 10656                           fsr1l	equ	0xFE1
 10657                           bsr	equ	0xFE0
 10658                           indf2	equ	0xFDF
 10659                           postinc2	equ	0xFDE
 10660                           postdec2	equ	0xFDD
 10661                           fsr2h	equ	0xFDA
 10662                           fsr2l	equ	0xFD9
 10663                           status	equ	0xFD8
 10664                           
 10665 ;; *************** function _INT2_CallBack *****************
 10666 ;; Defined at:
 10667 ;;		line 127 in file "mcc_generated_files/ext_int.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;		None
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;		None
 10672 ;; Return value:  Size  Location     Type
 10673 ;;                  1    wreg      void 
 10674 ;; Registers used:
 10675 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 10676 ;; Tracked objects:
 10677 ;;		On entry : 0/0
 10678 ;;		On exit  : 0/0
 10679 ;;		Unchanged: 0/0
 10680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10681 ;;      Params:         0       0       0       0       0       0       0
 10682 ;;      Locals:         0       0       0       0       0       0       0
 10683 ;;      Temps:          0       0       0       0       0       0       0
 10684 ;;      Totals:         0       0       0       0       0       0       0
 10685 ;;Total ram usage:        0 bytes
 10686 ;; Hardware stack levels used:    1
 10687 ;; Hardware stack levels required when called:    1
 10688 ;; This function calls:
 10689 ;;		Absolute function
 10690 ;;		_INT2_DefaultInterruptHandler
 10691 ;; This function is called by:
 10692 ;;		_INT2_ISR
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           	psect	text65
 10697  001EA0                     __ptext65:
 10698                           	opt stack 0
 10699  001EA0                     _INT2_CallBack:
 10700                           	opt stack 16
 10701                           
 10702                           ;ext_int.c: 129: if (INT2_InterruptHandler) {
 10703                           
 10704                           ;incstack = 0
 10705  001EA0  0100               	movlb	0	; () banked
 10706  001EA2  51D8               	movf	_INT2_InterruptHandler& (0+255),w,b
 10707  001EA4  11D9               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 10708  001EA6  B4D8               	btfsc	status,2,c
 10709  001EA8  0012               	return	
 10710                           
 10711                           ; BSR set to: 0
 10712                           ;ext_int.c: 130: INT2_InterruptHandler();
 10713  001EAA  D801               	call	i2u373_48
 10714  001EAC  0012               	return	
 10715  001EAE                     i2u373_48:
 10716  001EAE  0005               	push	
 10717  001EB0  6EFA               	movwf	pclath,c
 10718  001EB2  51D8               	movf	_INT2_InterruptHandler& (0+255),w,b
 10719  001EB4  6EFD               	movwf	tosl,c
 10720  001EB6  51D9               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 10721  001EB8  6EFE               	movwf	tosh,c
 10722  001EBA  50F8               	movf	tblptru,w,c
 10723  001EBC  6EFF               	movwf	tosu,c
 10724  001EBE  50FA               	movf	pclath,w,c
 10725  001EC0  0012               	return		;indir
 10726  001EC2                     __end_of_INT2_CallBack:
 10727                           	opt stack 0
 10728                           tosu	equ	0xFFF
 10729                           tosh	equ	0xFFE
 10730                           tosl	equ	0xFFD
 10731                           pclatu	equ	0xFFB
 10732                           pclath	equ	0xFFA
 10733                           tblptru	equ	0xFF8
 10734                           tblptrh	equ	0xFF7
 10735                           tblptrl	equ	0xFF6
 10736                           tablat	equ	0xFF5
 10737                           prodh	equ	0xFF4
 10738                           prodl	equ	0xFF3
 10739                           intcon	equ	0xFF2
 10740                           intcon2	equ	0xFF1
 10741                           intcon3	equ	0xFF0
 10742                           indf0	equ	0xFEF
 10743                           postinc0	equ	0xFEE
 10744                           fsr0h	equ	0xFEA
 10745                           fsr0l	equ	0xFE9
 10746                           wreg	equ	0xFE8
 10747                           indf1	equ	0xFE7
 10748                           fsr1h	equ	0xFE2
 10749                           fsr1l	equ	0xFE1
 10750                           bsr	equ	0xFE0
 10751                           indf2	equ	0xFDF
 10752                           postinc2	equ	0xFDE
 10753                           postdec2	equ	0xFDD
 10754                           fsr2h	equ	0xFDA
 10755                           fsr2l	equ	0xFD9
 10756                           status	equ	0xFD8
 10757                           
 10758 ;; *************** function _INT2_DefaultInterruptHandler *****************
 10759 ;; Defined at:
 10760 ;;		line 144 in file "mcc_generated_files/ext_int.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      void 
 10767 ;; Registers used:
 10768 ;;		None
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10774 ;;      Params:         0       0       0       0       0       0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0
 10777 ;;      Totals:         0       0       0       0       0       0       0
 10778 ;;Total ram usage:        0 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_EXT_INT_Initialize
 10784 ;;		_INT2_CallBack
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           	psect	text66
 10789  002060                     __ptext66:
 10790                           	opt stack 0
 10791  002060                     _INT2_DefaultInterruptHandler:
 10792                           	opt stack 16
 10793                           
 10794                           ;incstack = 0
 10795  002060  0012               	return		;funcret
 10796  002062                     __end_of_INT2_DefaultInterruptHandler:
 10797                           	opt stack 0
 10798                           tosu	equ	0xFFF
 10799                           tosh	equ	0xFFE
 10800                           tosl	equ	0xFFD
 10801                           pclatu	equ	0xFFB
 10802                           pclath	equ	0xFFA
 10803                           tblptru	equ	0xFF8
 10804                           tblptrh	equ	0xFF7
 10805                           tblptrl	equ	0xFF6
 10806                           tablat	equ	0xFF5
 10807                           prodh	equ	0xFF4
 10808                           prodl	equ	0xFF3
 10809                           intcon	equ	0xFF2
 10810                           intcon2	equ	0xFF1
 10811                           intcon3	equ	0xFF0
 10812                           indf0	equ	0xFEF
 10813                           postinc0	equ	0xFEE
 10814                           fsr0h	equ	0xFEA
 10815                           fsr0l	equ	0xFE9
 10816                           wreg	equ	0xFE8
 10817                           indf1	equ	0xFE7
 10818                           fsr1h	equ	0xFE2
 10819                           fsr1l	equ	0xFE1
 10820                           bsr	equ	0xFE0
 10821                           indf2	equ	0xFDF
 10822                           postinc2	equ	0xFDE
 10823                           postdec2	equ	0xFDD
 10824                           fsr2h	equ	0xFDA
 10825                           fsr2l	equ	0xFD9
 10826                           status	equ	0xFD8
 10827                           
 10828 ;; *************** function _INT1_ISR *****************
 10829 ;; Defined at:
 10830 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;		None
 10833 ;; Auto vars:     Size  Location     Type
 10834 ;;		None
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  1    wreg      void 
 10837 ;; Registers used:
 10838 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 10839 ;; Tracked objects:
 10840 ;;		On entry : 0/0
 10841 ;;		On exit  : 0/0
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10844 ;;      Params:         0       0       0       0       0       0       0
 10845 ;;      Locals:         0       0       0       0       0       0       0
 10846 ;;      Temps:          0       0       0       0       0       0       0
 10847 ;;      Totals:         0       0       0       0       0       0       0
 10848 ;;Total ram usage:        0 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; Hardware stack levels required when called:    2
 10851 ;; This function calls:
 10852 ;;		_INT1_CallBack
 10853 ;; This function is called by:
 10854 ;;		_INTERRUPT_InterruptManagerHigh
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858                           	psect	text67
 10859  001D68                     __ptext67:
 10860                           	opt stack 0
 10861  001D68                     _INT1_ISR:
 10862                           	opt stack 16
 10863                           
 10864                           ;ext_int.c: 49: if (PORTBbits.RB3 == 1) {
 10865                           
 10866                           ;incstack = 0
 10867  001D68  A681               	btfss	3969,3,c	;volatile
 10868  001D6A  D002               	goto	i2l204
 10869                           
 10870                           ;ext_int.c: 50: TeclaTMP = '2';
 10871  001D6C  0E32               	movlw	50
 10872  001D6E  6E42               	movwf	_TeclaTMP,c	;volatile
 10873  001D70                     i2l204:
 10874                           
 10875                           ;ext_int.c: 51: }
 10876                           ;ext_int.c: 52: if (PORTBbits.RB4 == 1) {
 10877  001D70  A881               	btfss	3969,4,c	;volatile
 10878  001D72  D002               	goto	i2l205
 10879                           
 10880                           ;ext_int.c: 53: TeclaTMP = '5';
 10881  001D74  0E35               	movlw	53
 10882  001D76  6E42               	movwf	_TeclaTMP,c	;volatile
 10883  001D78                     i2l205:
 10884                           
 10885                           ;ext_int.c: 54: }
 10886                           ;ext_int.c: 55: if (PORTBbits.RB5 == 1) {
 10887  001D78  AA81               	btfss	3969,5,c	;volatile
 10888  001D7A  D002               	goto	i2l206
 10889                           
 10890                           ;ext_int.c: 56: TeclaTMP = '8';
 10891  001D7C  0E38               	movlw	56
 10892  001D7E  6E42               	movwf	_TeclaTMP,c	;volatile
 10893  001D80                     i2l206:
 10894                           
 10895                           ;ext_int.c: 57: }
 10896                           ;ext_int.c: 58: if (PORTBbits.RB6 == 1) {
 10897  001D80  AC81               	btfss	3969,6,c	;volatile
 10898  001D82  D002               	goto	i2l207
 10899                           
 10900                           ;ext_int.c: 59: TeclaTMP = '0';
 10901  001D84  0E30               	movlw	48
 10902  001D86  6E42               	movwf	_TeclaTMP,c	;volatile
 10903  001D88                     i2l207:
 10904                           
 10905                           ;ext_int.c: 60: }
 10906                           ;ext_int.c: 61: WrEnFl = 1;
 10907  001D88  0E01               	movlw	1
 10908  001D8A  6E38               	movwf	_WrEnFl,c	;volatile
 10909                           
 10910                           ;ext_int.c: 65: (INTCON3bits.INT1IF = 0);
 10911  001D8C  90F0               	bcf	intcon3,0,c	;volatile
 10912                           
 10913                           ;ext_int.c: 68: INT1_CallBack();
 10914  001D8E  EC61  F00F         	call	_INT1_CallBack	;wreg free
 10915  001D92  0012               	return		;funcret
 10916  001D94                     __end_of_INT1_ISR:
 10917                           	opt stack 0
 10918                           tosu	equ	0xFFF
 10919                           tosh	equ	0xFFE
 10920                           tosl	equ	0xFFD
 10921                           pclatu	equ	0xFFB
 10922                           pclath	equ	0xFFA
 10923                           tblptru	equ	0xFF8
 10924                           tblptrh	equ	0xFF7
 10925                           tblptrl	equ	0xFF6
 10926                           tablat	equ	0xFF5
 10927                           prodh	equ	0xFF4
 10928                           prodl	equ	0xFF3
 10929                           intcon	equ	0xFF2
 10930                           intcon2	equ	0xFF1
 10931                           intcon3	equ	0xFF0
 10932                           indf0	equ	0xFEF
 10933                           postinc0	equ	0xFEE
 10934                           fsr0h	equ	0xFEA
 10935                           fsr0l	equ	0xFE9
 10936                           wreg	equ	0xFE8
 10937                           indf1	equ	0xFE7
 10938                           fsr1h	equ	0xFE2
 10939                           fsr1l	equ	0xFE1
 10940                           bsr	equ	0xFE0
 10941                           indf2	equ	0xFDF
 10942                           postinc2	equ	0xFDE
 10943                           postdec2	equ	0xFDD
 10944                           fsr2h	equ	0xFDA
 10945                           fsr2l	equ	0xFD9
 10946                           status	equ	0xFD8
 10947                           
 10948 ;; *************** function _INT1_CallBack *****************
 10949 ;; Defined at:
 10950 ;;		line 74 in file "mcc_generated_files/ext_int.c"
 10951 ;; Parameters:    Size  Location     Type
 10952 ;;		None
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;		None
 10955 ;; Return value:  Size  Location     Type
 10956 ;;                  1    wreg      void 
 10957 ;; Registers used:
 10958 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 10959 ;; Tracked objects:
 10960 ;;		On entry : 0/0
 10961 ;;		On exit  : 0/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10964 ;;      Params:         0       0       0       0       0       0       0
 10965 ;;      Locals:         0       0       0       0       0       0       0
 10966 ;;      Temps:          0       0       0       0       0       0       0
 10967 ;;      Totals:         0       0       0       0       0       0       0
 10968 ;;Total ram usage:        0 bytes
 10969 ;; Hardware stack levels used:    1
 10970 ;; Hardware stack levels required when called:    1
 10971 ;; This function calls:
 10972 ;;		Absolute function
 10973 ;;		_INT1_DefaultInterruptHandler
 10974 ;; This function is called by:
 10975 ;;		_INT1_ISR
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           	psect	text68
 10980  001EC2                     __ptext68:
 10981                           	opt stack 0
 10982  001EC2                     _INT1_CallBack:
 10983                           	opt stack 16
 10984                           
 10985                           ;ext_int.c: 76: if (INT1_InterruptHandler) {
 10986                           
 10987                           ;incstack = 0
 10988  001EC2  0100               	movlb	0	; () banked
 10989  001EC4  51DA               	movf	_INT1_InterruptHandler& (0+255),w,b
 10990  001EC6  11DB               	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
 10991  001EC8  B4D8               	btfsc	status,2,c
 10992  001ECA  0012               	return	
 10993                           
 10994                           ; BSR set to: 0
 10995                           ;ext_int.c: 77: INT1_InterruptHandler();
 10996  001ECC  D801               	call	i2u371_48
 10997  001ECE  0012               	return	
 10998  001ED0                     i2u371_48:
 10999  001ED0  0005               	push	
 11000  001ED2  6EFA               	movwf	pclath,c
 11001  001ED4  51DA               	movf	_INT1_InterruptHandler& (0+255),w,b
 11002  001ED6  6EFD               	movwf	tosl,c
 11003  001ED8  51DB               	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
 11004  001EDA  6EFE               	movwf	tosh,c
 11005  001EDC  50F8               	movf	tblptru,w,c
 11006  001EDE  6EFF               	movwf	tosu,c
 11007  001EE0  50FA               	movf	pclath,w,c
 11008  001EE2  0012               	return		;indir
 11009  001EE4                     __end_of_INT1_CallBack:
 11010                           	opt stack 0
 11011                           tosu	equ	0xFFF
 11012                           tosh	equ	0xFFE
 11013                           tosl	equ	0xFFD
 11014                           pclatu	equ	0xFFB
 11015                           pclath	equ	0xFFA
 11016                           tblptru	equ	0xFF8
 11017                           tblptrh	equ	0xFF7
 11018                           tblptrl	equ	0xFF6
 11019                           tablat	equ	0xFF5
 11020                           prodh	equ	0xFF4
 11021                           prodl	equ	0xFF3
 11022                           intcon	equ	0xFF2
 11023                           intcon2	equ	0xFF1
 11024                           intcon3	equ	0xFF0
 11025                           indf0	equ	0xFEF
 11026                           postinc0	equ	0xFEE
 11027                           fsr0h	equ	0xFEA
 11028                           fsr0l	equ	0xFE9
 11029                           wreg	equ	0xFE8
 11030                           indf1	equ	0xFE7
 11031                           fsr1h	equ	0xFE2
 11032                           fsr1l	equ	0xFE1
 11033                           bsr	equ	0xFE0
 11034                           indf2	equ	0xFDF
 11035                           postinc2	equ	0xFDE
 11036                           postdec2	equ	0xFDD
 11037                           fsr2h	equ	0xFDA
 11038                           fsr2l	equ	0xFD9
 11039                           status	equ	0xFD8
 11040                           
 11041 ;; *************** function _INT1_DefaultInterruptHandler *****************
 11042 ;; Defined at:
 11043 ;;		line 91 in file "mcc_generated_files/ext_int.c"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;		None
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;		None
 11048 ;; Return value:  Size  Location     Type
 11049 ;;                  1    wreg      void 
 11050 ;; Registers used:
 11051 ;;		None
 11052 ;; Tracked objects:
 11053 ;;		On entry : 0/0
 11054 ;;		On exit  : 0/0
 11055 ;;		Unchanged: 0/0
 11056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11057 ;;      Params:         0       0       0       0       0       0       0
 11058 ;;      Locals:         0       0       0       0       0       0       0
 11059 ;;      Temps:          0       0       0       0       0       0       0
 11060 ;;      Totals:         0       0       0       0       0       0       0
 11061 ;;Total ram usage:        0 bytes
 11062 ;; Hardware stack levels used:    1
 11063 ;; This function calls:
 11064 ;;		Nothing
 11065 ;; This function is called by:
 11066 ;;		_EXT_INT_Initialize
 11067 ;;		_INT1_CallBack
 11068 ;; This function uses a non-reentrant model
 11069 ;;
 11070                           
 11071                           	psect	text69
 11072  002062                     __ptext69:
 11073                           	opt stack 0
 11074  002062                     _INT1_DefaultInterruptHandler:
 11075                           	opt stack 16
 11076                           
 11077                           ;incstack = 0
 11078  002062  0012               	return		;funcret
 11079  002064                     __end_of_INT1_DefaultInterruptHandler:
 11080                           	opt stack 0
 11081                           tosu	equ	0xFFF
 11082                           tosh	equ	0xFFE
 11083                           tosl	equ	0xFFD
 11084                           pclatu	equ	0xFFB
 11085                           pclath	equ	0xFFA
 11086                           tblptru	equ	0xFF8
 11087                           tblptrh	equ	0xFF7
 11088                           tblptrl	equ	0xFF6
 11089                           tablat	equ	0xFF5
 11090                           prodh	equ	0xFF4
 11091                           prodl	equ	0xFF3
 11092                           intcon	equ	0xFF2
 11093                           intcon2	equ	0xFF1
 11094                           intcon3	equ	0xFF0
 11095                           indf0	equ	0xFEF
 11096                           postinc0	equ	0xFEE
 11097                           fsr0h	equ	0xFEA
 11098                           fsr0l	equ	0xFE9
 11099                           wreg	equ	0xFE8
 11100                           indf1	equ	0xFE7
 11101                           fsr1h	equ	0xFE2
 11102                           fsr1l	equ	0xFE1
 11103                           bsr	equ	0xFE0
 11104                           indf2	equ	0xFDF
 11105                           postinc2	equ	0xFDE
 11106                           postdec2	equ	0xFDD
 11107                           fsr2h	equ	0xFDA
 11108                           fsr2l	equ	0xFD9
 11109                           status	equ	0xFD8
 11110                           
 11111 ;; *************** function _INT0_ISR *****************
 11112 ;; Defined at:
 11113 ;;		line 152 in file "mcc_generated_files/ext_int.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;		None
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;		None
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  1    wreg      void 
 11120 ;; Registers used:
 11121 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11127 ;;      Params:         0       0       0       0       0       0       0
 11128 ;;      Locals:         0       0       0       0       0       0       0
 11129 ;;      Temps:          0       0       0       0       0       0       0
 11130 ;;      Totals:         0       0       0       0       0       0       0
 11131 ;;Total ram usage:        0 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:    2
 11134 ;; This function calls:
 11135 ;;		_INT0_CallBack
 11136 ;; This function is called by:
 11137 ;;		_INTERRUPT_InterruptManagerHigh
 11138 ;; This function uses a non-reentrant model
 11139 ;;
 11140                           
 11141                           	psect	text70
 11142  001D94                     __ptext70:
 11143                           	opt stack 0
 11144  001D94                     _INT0_ISR:
 11145                           	opt stack 16
 11146                           
 11147                           ;ext_int.c: 155: if (PORTBbits.RB3 == 1) {
 11148                           
 11149                           ;incstack = 0
 11150  001D94  A681               	btfss	3969,3,c	;volatile
 11151  001D96  D002               	goto	i2l238
 11152                           
 11153                           ;ext_int.c: 156: TeclaTMP = '1';
 11154  001D98  0E31               	movlw	49
 11155  001D9A  6E42               	movwf	_TeclaTMP,c	;volatile
 11156  001D9C                     i2l238:
 11157                           
 11158                           ;ext_int.c: 157: }
 11159                           ;ext_int.c: 158: if (PORTBbits.RB4 == 1) {
 11160  001D9C  A881               	btfss	3969,4,c	;volatile
 11161  001D9E  D002               	goto	i2l239
 11162                           
 11163                           ;ext_int.c: 159: TeclaTMP = '4';
 11164  001DA0  0E34               	movlw	52
 11165  001DA2  6E42               	movwf	_TeclaTMP,c	;volatile
 11166  001DA4                     i2l239:
 11167                           
 11168                           ;ext_int.c: 160: }
 11169                           ;ext_int.c: 161: if (PORTBbits.RB5 == 1) {
 11170  001DA4  AA81               	btfss	3969,5,c	;volatile
 11171  001DA6  D002               	goto	i2l240
 11172                           
 11173                           ;ext_int.c: 162: TeclaTMP = '7';
 11174  001DA8  0E37               	movlw	55
 11175  001DAA  6E42               	movwf	_TeclaTMP,c	;volatile
 11176  001DAC                     i2l240:
 11177                           
 11178                           ;ext_int.c: 163: }
 11179                           ;ext_int.c: 164: if (PORTBbits.RB6 == 1) {
 11180  001DAC  AC81               	btfss	3969,6,c	;volatile
 11181  001DAE  D002               	goto	i2l241
 11182                           
 11183                           ;ext_int.c: 165: TeclaTMP = '*';
 11184  001DB0  0E2A               	movlw	42
 11185  001DB2  6E42               	movwf	_TeclaTMP,c	;volatile
 11186  001DB4                     i2l241:
 11187                           
 11188                           ;ext_int.c: 166: }
 11189                           ;ext_int.c: 167: WrEnFl = 1;
 11190  001DB4  0E01               	movlw	1
 11191  001DB6  6E38               	movwf	_WrEnFl,c	;volatile
 11192                           
 11193                           ;ext_int.c: 171: (INTCONbits.INT0IF = 0);
 11194  001DB8  92F2               	bcf	intcon,1,c	;volatile
 11195                           
 11196                           ;ext_int.c: 174: INT0_CallBack();
 11197  001DBA  EC72  F00F         	call	_INT0_CallBack	;wreg free
 11198  001DBE  0012               	return		;funcret
 11199  001DC0                     __end_of_INT0_ISR:
 11200                           	opt stack 0
 11201                           tosu	equ	0xFFF
 11202                           tosh	equ	0xFFE
 11203                           tosl	equ	0xFFD
 11204                           pclatu	equ	0xFFB
 11205                           pclath	equ	0xFFA
 11206                           tblptru	equ	0xFF8
 11207                           tblptrh	equ	0xFF7
 11208                           tblptrl	equ	0xFF6
 11209                           tablat	equ	0xFF5
 11210                           prodh	equ	0xFF4
 11211                           prodl	equ	0xFF3
 11212                           intcon	equ	0xFF2
 11213                           intcon2	equ	0xFF1
 11214                           intcon3	equ	0xFF0
 11215                           indf0	equ	0xFEF
 11216                           postinc0	equ	0xFEE
 11217                           fsr0h	equ	0xFEA
 11218                           fsr0l	equ	0xFE9
 11219                           wreg	equ	0xFE8
 11220                           indf1	equ	0xFE7
 11221                           fsr1h	equ	0xFE2
 11222                           fsr1l	equ	0xFE1
 11223                           bsr	equ	0xFE0
 11224                           indf2	equ	0xFDF
 11225                           postinc2	equ	0xFDE
 11226                           postdec2	equ	0xFDD
 11227                           fsr2h	equ	0xFDA
 11228                           fsr2l	equ	0xFD9
 11229                           status	equ	0xFD8
 11230                           
 11231 ;; *************** function _INT0_CallBack *****************
 11232 ;; Defined at:
 11233 ;;		line 180 in file "mcc_generated_files/ext_int.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;		None
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;		None
 11238 ;; Return value:  Size  Location     Type
 11239 ;;                  1    wreg      void 
 11240 ;; Registers used:
 11241 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11247 ;;      Params:         0       0       0       0       0       0       0
 11248 ;;      Locals:         0       0       0       0       0       0       0
 11249 ;;      Temps:          0       0       0       0       0       0       0
 11250 ;;      Totals:         0       0       0       0       0       0       0
 11251 ;;Total ram usage:        0 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:    1
 11254 ;; This function calls:
 11255 ;;		Absolute function
 11256 ;;		_INT0_DefaultInterruptHandler
 11257 ;; This function is called by:
 11258 ;;		_INT0_ISR
 11259 ;; This function uses a non-reentrant model
 11260 ;;
 11261                           
 11262                           	psect	text71
 11263  001EE4                     __ptext71:
 11264                           	opt stack 0
 11265  001EE4                     _INT0_CallBack:
 11266                           	opt stack 16
 11267                           
 11268                           ;ext_int.c: 182: if (INT0_InterruptHandler) {
 11269                           
 11270                           ;incstack = 0
 11271  001EE4  0100               	movlb	0	; () banked
 11272  001EE6  51D6               	movf	_INT0_InterruptHandler& (0+255),w,b
 11273  001EE8  11D7               	iorwf	(_INT0_InterruptHandler+1)& (0+255),w,b
 11274  001EEA  B4D8               	btfsc	status,2,c
 11275  001EEC  0012               	return	
 11276                           
 11277                           ; BSR set to: 0
 11278                           ;ext_int.c: 183: INT0_InterruptHandler();
 11279  001EEE  D801               	call	i2u375_48
 11280  001EF0  0012               	return	
 11281  001EF2                     i2u375_48:
 11282  001EF2  0005               	push	
 11283  001EF4  6EFA               	movwf	pclath,c
 11284  001EF6  51D6               	movf	_INT0_InterruptHandler& (0+255),w,b
 11285  001EF8  6EFD               	movwf	tosl,c
 11286  001EFA  51D7               	movf	(_INT0_InterruptHandler+1)& (0+255),w,b
 11287  001EFC  6EFE               	movwf	tosh,c
 11288  001EFE  50F8               	movf	tblptru,w,c
 11289  001F00  6EFF               	movwf	tosu,c
 11290  001F02  50FA               	movf	pclath,w,c
 11291  001F04  0012               	return		;indir
 11292  001F06                     __end_of_INT0_CallBack:
 11293                           	opt stack 0
 11294                           tosu	equ	0xFFF
 11295                           tosh	equ	0xFFE
 11296                           tosl	equ	0xFFD
 11297                           pclatu	equ	0xFFB
 11298                           pclath	equ	0xFFA
 11299                           tblptru	equ	0xFF8
 11300                           tblptrh	equ	0xFF7
 11301                           tblptrl	equ	0xFF6
 11302                           tablat	equ	0xFF5
 11303                           prodh	equ	0xFF4
 11304                           prodl	equ	0xFF3
 11305                           intcon	equ	0xFF2
 11306                           intcon2	equ	0xFF1
 11307                           intcon3	equ	0xFF0
 11308                           indf0	equ	0xFEF
 11309                           postinc0	equ	0xFEE
 11310                           fsr0h	equ	0xFEA
 11311                           fsr0l	equ	0xFE9
 11312                           wreg	equ	0xFE8
 11313                           indf1	equ	0xFE7
 11314                           fsr1h	equ	0xFE2
 11315                           fsr1l	equ	0xFE1
 11316                           bsr	equ	0xFE0
 11317                           indf2	equ	0xFDF
 11318                           postinc2	equ	0xFDE
 11319                           postdec2	equ	0xFDD
 11320                           fsr2h	equ	0xFDA
 11321                           fsr2l	equ	0xFD9
 11322                           status	equ	0xFD8
 11323                           
 11324 ;; *************** function _INT0_DefaultInterruptHandler *****************
 11325 ;; Defined at:
 11326 ;;		line 197 in file "mcc_generated_files/ext_int.c"
 11327 ;; Parameters:    Size  Location     Type
 11328 ;;		None
 11329 ;; Auto vars:     Size  Location     Type
 11330 ;;		None
 11331 ;; Return value:  Size  Location     Type
 11332 ;;                  1    wreg      void 
 11333 ;; Registers used:
 11334 ;;		None
 11335 ;; Tracked objects:
 11336 ;;		On entry : 0/0
 11337 ;;		On exit  : 0/0
 11338 ;;		Unchanged: 0/0
 11339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11340 ;;      Params:         0       0       0       0       0       0       0
 11341 ;;      Locals:         0       0       0       0       0       0       0
 11342 ;;      Temps:          0       0       0       0       0       0       0
 11343 ;;      Totals:         0       0       0       0       0       0       0
 11344 ;;Total ram usage:        0 bytes
 11345 ;; Hardware stack levels used:    1
 11346 ;; This function calls:
 11347 ;;		Nothing
 11348 ;; This function is called by:
 11349 ;;		_EXT_INT_Initialize
 11350 ;;		_INT0_CallBack
 11351 ;; This function uses a non-reentrant model
 11352 ;;
 11353                           
 11354                           	psect	text72
 11355  002064                     __ptext72:
 11356                           	opt stack 0
 11357  002064                     _INT0_DefaultInterruptHandler:
 11358                           	opt stack 16
 11359                           
 11360                           ;incstack = 0
 11361  002064  0012               	return		;funcret
 11362  002066                     __end_of_INT0_DefaultInterruptHandler:
 11363                           	opt stack 0
 11364                           tosu	equ	0xFFF
 11365                           tosh	equ	0xFFE
 11366                           tosl	equ	0xFFD
 11367                           pclatu	equ	0xFFB
 11368                           pclath	equ	0xFFA
 11369                           tblptru	equ	0xFF8
 11370                           tblptrh	equ	0xFF7
 11371                           tblptrl	equ	0xFF6
 11372                           tablat	equ	0xFF5
 11373                           prodh	equ	0xFF4
 11374                           prodl	equ	0xFF3
 11375                           intcon	equ	0xFF2
 11376                           intcon2	equ	0xFF1
 11377                           intcon3	equ	0xFF0
 11378                           indf0	equ	0xFEF
 11379                           postinc0	equ	0xFEE
 11380                           fsr0h	equ	0xFEA
 11381                           fsr0l	equ	0xFE9
 11382                           wreg	equ	0xFE8
 11383                           indf1	equ	0xFE7
 11384                           fsr1h	equ	0xFE2
 11385                           fsr1l	equ	0xFE1
 11386                           bsr	equ	0xFE0
 11387                           indf2	equ	0xFDF
 11388                           postinc2	equ	0xFDE
 11389                           postdec2	equ	0xFDD
 11390                           fsr2h	equ	0xFDA
 11391                           fsr2l	equ	0xFD9
 11392                           status	equ	0xFD8
 11393                           
 11394 ;; *************** function _I2C1_ISR *****************
 11395 ;; Defined at:
 11396 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;		None
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;		None
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  1    wreg      void 
 11403 ;; Registers used:
 11404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11410 ;;      Params:         0       0       0       0       0       0       0
 11411 ;;      Locals:         0       0       0       0       0       0       0
 11412 ;;      Temps:          2       0       0       0       0       0       0
 11413 ;;      Totals:         2       0       0       0       0       0       0
 11414 ;;Total ram usage:        2 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    1
 11417 ;; This function calls:
 11418 ;;		_I2C1_FunctionComplete
 11419 ;;		_I2C1_Stop
 11420 ;; This function is called by:
 11421 ;;		_INTERRUPT_InterruptManagerHigh
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           	psect	text73
 11426  0006A4                     __ptext73:
 11427                           	opt stack 0
 11428  0006A4                     _I2C1_ISR:
 11429                           	opt stack 17
 11430                           
 11431                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 11432                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 11433                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 11434                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 11435                           ;i2c1.c: 241: PIR1bits.SSP1IF = 0;
 11436                           
 11437                           ;incstack = 0
 11438  0006A4  969E               	bcf	3998,3,c	;volatile
 11439                           
 11440                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 11441  0006A6  AEC6               	btfss	4038,7,c	;volatile
 11442  0006A8  D0F2               	goto	i2l674
 11443                           
 11444                           ;i2c1.c: 246: {
 11445                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 11446  0006AA  9EC6               	bcf	4038,7,c	;volatile
 11447                           
 11448                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 11449  0006AC  0E00               	movlw	0
 11450  0006AE  6E35               	movwf	_i2c1_state,c
 11451                           
 11452                           ;i2c1.c: 253: p_i2c1_current = (0);
 11453  0006B0  0E00               	movlw	0
 11454  0006B2  0100               	movlb	0	; () banked
 11455  0006B4  6F69               	movwf	_p_i2c1_current& (0+255),b
 11456  0006B6  0E00               	movlw	0
 11457  0006B8  6F6A               	movwf	(_p_i2c1_current+1)& (0+255),b
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;i2c1.c: 255: return;
 11461  0006BA  0012               	return	
 11462  0006BC                     i2l675:
 11463                           
 11464                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 11465  0006BC  0100               	movlb	0	; () banked
 11466  0006BE  B364               	btfsc	(_i2c1_object+4)& (0+255),1,b
 11467  0006C0  0012               	return	
 11468                           
 11469                           ; BSR set to: 0
 11470                           ;i2c1.c: 264: {
 11471                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 11472  0006C2  C062  F069         	movff	_i2c1_object+2,_p_i2c1_current
 11473  0006C6  C063  F06A         	movff	_i2c1_object+3,_p_i2c1_current+1
 11474                           
 11475                           ; BSR set to: 0
 11476                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 11477  0006CA  C062  FFD9         	movff	_i2c1_object+2,fsr2l
 11478  0006CE  C063  FFDA         	movff	_i2c1_object+3,fsr2h
 11479  0006D2  50DF               	movf	indf2,w,c
 11480  0006D4  6E34               	movwf	_i2c1_trb_count,c
 11481                           
 11482                           ; BSR set to: 0
 11483                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 11484  0006D6  EE20 F001          	lfsr	2,1
 11485  0006DA  5162               	movf	(_i2c1_object+2)& (0+255),w,b
 11486  0006DC  26D9               	addwf	fsr2l,f,c
 11487  0006DE  5163               	movf	(_i2c1_object+3)& (0+255),w,b
 11488  0006E0  22DA               	addwfc	fsr2h,f,c
 11489  0006E2  CFDE F030          	movff	postinc2,_p_i2c1_trb_current
 11490  0006E6  CFDD F031          	movff	postdec2,_p_i2c1_trb_current+1
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 11494  0006EA  0E06               	movlw	6
 11495  0006EC  2762               	addwf	(_i2c1_object+2)& (0+255),f,b
 11496  0006EE  0E00               	movlw	0
 11497  0006F0  2363               	addwfc	(_i2c1_object+3)& (0+255),f,b
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 11501  0006F2  0EAA               	movlw	low (_i2c1_tr_queue+6)
 11502  0006F4  1962               	xorwf	(_i2c1_object+2)& (0+255),w,b
 11503  0006F6  E108               	bnz	i2l4734
 11504  0006F8  0E00               	movlw	high (_i2c1_tr_queue+6)
 11505  0006FA  1963               	xorwf	(_i2c1_object+3)& (0+255),w,b
 11506  0006FC  A4D8               	btfss	status,2,c
 11507  0006FE  D004               	goto	i2l677
 11508                           
 11509                           ; BSR set to: 0
 11510                           ;i2c1.c: 274: {
 11511                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 11512  000700  0EA4               	movlw	low _i2c1_tr_queue
 11513  000702  6F62               	movwf	(_i2c1_object+2)& (0+255),b
 11514  000704  0E00               	movlw	high _i2c1_tr_queue
 11515  000706  6F63               	movwf	(_i2c1_object+3)& (0+255),b
 11516  000708                     i2l677:
 11517  000708                     i2l4734:
 11518                           
 11519                           ; BSR set to: 0
 11520                           ;i2c1.c: 277: }
 11521                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 11522  000708  9164               	bcf	(_i2c1_object+4)& (0+255),0,b
 11523                           
 11524                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 11525  00070A  5160               	movf	_i2c1_object& (0+255),w,b
 11526  00070C  1962               	xorwf	(_i2c1_object+2)& (0+255),w,b
 11527  00070E  E104               	bnz	i2l678
 11528  000710  5161               	movf	(_i2c1_object+1)& (0+255),w,b
 11529  000712  1963               	xorwf	(_i2c1_object+3)& (0+255),w,b
 11530  000714  B4D8               	btfsc	status,2,c
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;i2c1.c: 285: {
 11534                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 11535  000716  8364               	bsf	(_i2c1_object+4)& (0+255),1,b
 11536  000718                     i2l678:
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;i2c1.c: 288: }
 11540                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 11541  000718  80C5               	bsf	4037,0,c	;volatile
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 11545  00071A  0E02               	movlw	2
 11546  00071C  6E35               	movwf	_i2c1_state,c
 11547                           
 11548                           ; BSR set to: 0
 11549                           ;i2c1.c: 295: }
 11550                           ;i2c1.c: 297: break;
 11551  00071E  0012               	return	
 11552  000720                     i2l680:
 11553                           
 11554                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 11555  000720  82C5               	bsf	4037,1,c	;volatile
 11556                           
 11557                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 11558  000722  0E02               	movlw	2
 11559  000724  6E35               	movwf	_i2c1_state,c
 11560                           
 11561                           ;i2c1.c: 309: break;
 11562  000726  0012               	return	
 11563  000728                     i2l681:
 11564                           
 11565                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 11566  000728  ACC5               	btfss	4037,6,c	;volatile
 11567  00072A  D006               	goto	i2l682
 11568                           
 11569                           ;i2c1.c: 314: {
 11570                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 11571  00072C  0100               	movlb	0	; () banked
 11572  00072E  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11576  000730  0E04               	movlw	4
 11577  000732  EC21  F010         	call	_I2C1_Stop
 11578                           
 11579                           ;i2c1.c: 317: }
 11580  000736  0012               	return	
 11581  000738                     i2l682:
 11582                           
 11583                           ;i2c1.c: 318: else
 11584                           ;i2c1.c: 319: {
 11585                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 11586  000738  90D8               	bcf	status,0,c
 11587  00073A  3044               	rrcf	I2C1_ISR@i2c_address+1,w,c
 11588  00073C  6E02               	movwf	(??_I2C1_ISR+1)& (0+255),c
 11589  00073E  3043               	rrcf	I2C1_ISR@i2c_address,w,c
 11590  000740  6E01               	movwf	??_I2C1_ISR& (0+255),c
 11591  000742  5001               	movf	??_I2C1_ISR,w,c
 11592  000744  6EC9               	movwf	4041,c	;volatile
 11593                           
 11594                           ;i2c1.c: 324: if(i2c_address & 0x01)
 11595  000746  A043               	btfss	I2C1_ISR@i2c_address,0,c
 11596  000748  D003               	goto	i2l684
 11597                           
 11598                           ;i2c1.c: 325: {
 11599                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 11600  00074A  0E0B               	movlw	11
 11601  00074C  6E35               	movwf	_i2c1_state,c
 11602                           
 11603                           ;i2c1.c: 329: }
 11604  00074E  0012               	return	
 11605  000750                     i2l684:
 11606                           
 11607                           ;i2c1.c: 330: else
 11608                           ;i2c1.c: 331: {
 11609                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 11610  000750  0E03               	movlw	3
 11611  000752  6E35               	movwf	_i2c1_state,c
 11612                           
 11613                           ;i2c1.c: 334: }
 11614                           ;i2c1.c: 335: }
 11615                           ;i2c1.c: 337: break;
 11616  000754  0012               	return	
 11617  000756                     i2l686:
 11618                           
 11619                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 11620  000756  ACC5               	btfss	4037,6,c	;volatile
 11621  000758  D006               	goto	i2l687
 11622                           
 11623                           ;i2c1.c: 342: {
 11624                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 11625  00075A  0100               	movlb	0	; () banked
 11626  00075C  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11630  00075E  0E04               	movlw	4
 11631  000760  EC21  F010         	call	_I2C1_Stop
 11632                           
 11633                           ;i2c1.c: 345: }
 11634  000764  0012               	return	
 11635  000766                     i2l687:
 11636                           
 11637                           ;i2c1.c: 346: else
 11638                           ;i2c1.c: 347: {
 11639                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 11640  000766  82C5               	bsf	4037,1,c	;volatile
 11641                           
 11642                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 11643  000768  C043  F001         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
 11644  00076C  C044  F002         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
 11645  000770  C002  F001         	movff	??_I2C1_ISR+1,??_I2C1_ISR
 11646  000774  6A02               	clrf	??_I2C1_ISR+1,c
 11647  000776  0E06               	movlw	6
 11648  000778  1601               	andwf	??_I2C1_ISR,f,c
 11649  00077A  0E00               	movlw	0
 11650  00077C  1602               	andwf	??_I2C1_ISR+1,f,c
 11651  00077E  0EF0               	movlw	240
 11652  000780  1001               	iorwf	??_I2C1_ISR,w,c
 11653  000782  6E43               	movwf	I2C1_ISR@i2c_address,c
 11654  000784  5002               	movf	??_I2C1_ISR+1,w,c
 11655  000786  6E44               	movwf	I2C1_ISR@i2c_address+1,c
 11656                           
 11657                           ;i2c1.c: 357: i2c_address |= 0x0001;
 11658  000788  8043               	bsf	I2C1_ISR@i2c_address,0,c
 11659                           
 11660                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 11661  00078A  0E01               	movlw	1
 11662  00078C  6E32               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
 11663                           
 11664                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 11665  00078E  0E02               	movlw	2
 11666  000790  6E35               	movwf	_i2c1_state,c
 11667                           
 11668                           ;i2c1.c: 364: }
 11669                           ;i2c1.c: 366: break;
 11670  000792  0012               	return	
 11671  000794                     
 11672                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 11673  000794  0432               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
 11674  000796  B4D8               	btfsc	status,2,c
 11675  000798  D01A               	goto	i2l691
 11676                           
 11677                           ;i2c1.c: 382: {
 11678                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 11679  00079A  C030  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 11680  00079E  C031  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 11681  0007A2  CFDE F043          	movff	postinc2,I2C1_ISR@i2c_address
 11682  0007A6  CFDD F044          	movff	postdec2,I2C1_ISR@i2c_address+1
 11683                           
 11684                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 11685  0007AA  EE20 F003          	lfsr	2,3
 11686  0007AE  5030               	movf	_p_i2c1_trb_current,w,c
 11687  0007B0  26D9               	addwf	fsr2l,f,c
 11688  0007B2  5031               	movf	_p_i2c1_trb_current+1,w,c
 11689  0007B4  22DA               	addwfc	fsr2h,f,c
 11690  0007B6  CFDE F067          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 11691  0007BA  CFDD F068          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 11692                           
 11693                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 11694  0007BE  EE20 F002          	lfsr	2,2
 11695  0007C2  5030               	movf	_p_i2c1_trb_current,w,c
 11696  0007C4  26D9               	addwf	fsr2l,f,c
 11697  0007C6  5031               	movf	_p_i2c1_trb_current+1,w,c
 11698  0007C8  22DA               	addwfc	fsr2h,f,c
 11699  0007CA  50DF               	movf	indf2,w,c
 11700  0007CC  6E33               	movwf	I2C1_ISR@i2c_bytes_left,c
 11701  0007CE                     i2l691:
 11702                           
 11703                           ;i2c1.c: 409: else
 11704                           ;i2c1.c: 410: {
 11705                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 11706  0007CE  C043  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
 11707                           
 11708                           ;i2c1.c: 413: if(i2c_address & 0x01)
 11709  0007D2  A043               	btfss	I2C1_ISR@i2c_address,0,c
 11710  0007D4  D003               	goto	i2l695
 11711                           
 11712                           ;i2c1.c: 414: {
 11713                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 11714  0007D6  0E05               	movlw	5
 11715  0007D8  6E35               	movwf	_i2c1_state,c
 11716                           
 11717                           ;i2c1.c: 417: }
 11718  0007DA  0012               	return	
 11719  0007DC                     i2l695:
 11720                           
 11721                           ;i2c1.c: 418: else
 11722                           ;i2c1.c: 419: {
 11723                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 11724  0007DC  0E03               	movlw	3
 11725  0007DE  6E35               	movwf	_i2c1_state,c
 11726                           
 11727                           ;i2c1.c: 422: }
 11728                           ;i2c1.c: 423: }
 11729                           ;i2c1.c: 424: break;
 11730  0007E0  0012               	return	
 11731  0007E2                     i2l697:
 11732                           
 11733                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 11734  0007E2  ACC5               	btfss	4037,6,c	;volatile
 11735  0007E4  D007               	goto	i2l698
 11736                           
 11737                           ;i2c1.c: 430: {
 11738                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 11739  0007E6  0100               	movlb	0	; () banked
 11740  0007E8  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11741                           
 11742                           ; BSR set to: 0
 11743                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 11744  0007EA  9CC5               	bcf	4037,6,c	;volatile
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 11748  0007EC  0E05               	movlw	5
 11749  0007EE  EC21  F010         	call	_I2C1_Stop
 11750                           
 11751                           ;i2c1.c: 440: }
 11752  0007F2  0012               	return	
 11753  0007F4                     i2l698:
 11754                           
 11755                           ;i2c1.c: 441: else
 11756                           ;i2c1.c: 442: {
 11757                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 11758  0007F4  0633               	decf	I2C1_ISR@i2c_bytes_left,f,c
 11759  0007F6  2833               	incf	I2C1_ISR@i2c_bytes_left,w,c
 11760  0007F8  A4D8               	btfss	status,2,c
 11761  0007FA  D00E               	goto	i2l700
 11762                           
 11763                           ;i2c1.c: 445: {
 11764                           ;i2c1.c: 449: p_i2c1_trb_current++;
 11765  0007FC  0E06               	movlw	6
 11766  0007FE  2630               	addwf	_p_i2c1_trb_current,f,c
 11767  000800  0E00               	movlw	0
 11768  000802  2231               	addwfc	_p_i2c1_trb_current+1,f,c
 11769                           
 11770                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 11771  000804  2E34               	decfsz	_i2c1_trb_count,f,c
 11772  000806  D004               	goto	i2l701
 11773                           
 11774                           ;i2c1.c: 453: {
 11775                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 11776  000808  0E00               	movlw	0
 11777  00080A  EC21  F010         	call	_I2C1_Stop
 11778                           
 11779                           ;i2c1.c: 455: }
 11780  00080E  0012               	return	
 11781  000810                     i2l701:
 11782                           
 11783                           ;i2c1.c: 456: else
 11784                           ;i2c1.c: 457: {
 11785                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 11786  000810  82C5               	bsf	4037,1,c	;volatile
 11787                           
 11788                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 11789  000812  0E02               	movlw	2
 11790  000814  6E35               	movwf	_i2c1_state,c
 11791                           
 11792                           ;i2c1.c: 469: }
 11793                           ;i2c1.c: 470: }
 11794  000816  0012               	return	
 11795  000818                     i2l700:
 11796                           
 11797                           ;i2c1.c: 471: else
 11798                           ;i2c1.c: 472: {
 11799                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 11800  000818  C067  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 11801  00081C  C068  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 11802  000820  50DF               	movf	indf2,w,c
 11803  000822  6EC9               	movwf	4041,c	;volatile
 11804  000824  0100               	movlb	0	; () banked
 11805  000826  4B67               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 11806  000828  2B68               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;i2c1.c: 475: }
 11810                           ;i2c1.c: 476: }
 11811                           ;i2c1.c: 477: break;
 11812                           
 11813                           ; BSR set to: 0
 11814  00082A  0012               	return	
 11815  00082C                     i2l704:
 11816                           
 11817                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 11818  00082C  ACC5               	btfss	4037,6,c	;volatile
 11819  00082E  D007               	goto	i2l705
 11820                           
 11821                           ;i2c1.c: 483: {
 11822                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 11823  000830  0100               	movlb	0	; () banked
 11824  000832  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 11828  000834  0E04               	movlw	4
 11829  000836  EC21  F010         	call	_I2C1_Stop
 11830                           
 11831                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 11832  00083A  9CC5               	bcf	4037,6,c	;volatile
 11833                           
 11834                           ;i2c1.c: 493: }
 11835  00083C  0012               	return	
 11836  00083E                     i2l705:
 11837                           
 11838                           ;i2c1.c: 494: else
 11839                           ;i2c1.c: 495: {
 11840                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 11841  00083E  86C5               	bsf	4037,3,c	;volatile
 11842                           
 11843                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11844  000840  0E08               	movlw	8
 11845  000842  6E35               	movwf	_i2c1_state,c
 11846                           
 11847                           ;i2c1.c: 498: }
 11848                           ;i2c1.c: 499: break;
 11849  000844  0012               	return	
 11850  000846                     
 11851                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 11852  000846  0E08               	movlw	8
 11853  000848  6E35               	movwf	_i2c1_state,c
 11854                           
 11855                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 11856  00084A  86C5               	bsf	4037,3,c	;volatile
 11857                           
 11858                           ;i2c1.c: 511: break;
 11859  00084C  0012               	return	
 11860  00084E                     
 11861                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 11862  00084E  C067  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 11863  000852  C068  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 11864  000856  CFC9 FFDF          	movff	4041,indf2	;volatile
 11865  00085A  0100               	movlb	0	; () banked
 11866  00085C  4B67               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 11867  00085E  2B68               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;i2c1.c: 519: if(--i2c_bytes_left)
 11871  000860  0E01               	movlw	1
 11872  000862  5E33               	subwf	I2C1_ISR@i2c_bytes_left,f,c
 11873  000864  B4D8               	btfsc	status,2,c
 11874  000866  D004               	goto	i2l709
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;i2c1.c: 520: {
 11878                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 11879  000868  9AC5               	bcf	4037,5,c	;volatile
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 11883  00086A  0E06               	movlw	6
 11884  00086C  6E35               	movwf	_i2c1_state,c
 11885                           
 11886                           ;i2c1.c: 530: }
 11887  00086E  D003               	goto	i2l710
 11888  000870                     i2l709:
 11889                           
 11890                           ; BSR set to: 0
 11891                           ;i2c1.c: 531: else
 11892                           ;i2c1.c: 532: {
 11893                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 11894  000870  8AC5               	bsf	4037,5,c	;volatile
 11895                           
 11896                           ; BSR set to: 0
 11897                           ;i2c1.c: 538: I2C1_FunctionComplete();
 11898  000872  ECBB  F00F         	call	_I2C1_FunctionComplete	;wreg free
 11899  000876                     i2l710:
 11900                           
 11901                           ;i2c1.c: 539: }
 11902                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 11903  000876  88C5               	bsf	4037,4,c	;volatile
 11904                           
 11905                           ;i2c1.c: 543: break;
 11906  000878  0012               	return	
 11907  00087A                     
 11908                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 11909                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 11910  00087A  0E00               	movlw	0
 11911  00087C  EC21  F010         	call	_I2C1_Stop
 11912                           
 11913                           ;i2c1.c: 550: break;
 11914  000880  0012               	return	
 11915  000882                     
 11916                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 11917  000882  0100               	movlb	0	; () banked
 11918  000884  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 11922  000886  0E06               	movlw	6
 11923  000888  EC21  F010         	call	_I2C1_Stop
 11924                           
 11925                           ;i2c1.c: 560: }
 11926                           
 11927                           ;i2c1.c: 558: break;
 11928  00088C  0012               	return	
 11929  00088E                     i2l674:
 11930  00088E  5035               	movf	_i2c1_state,w,c
 11931                           
 11932                           ; Switch size 1, requested type "space"
 11933                           ; Number of cases is 11, Range of values is 0 to 11
 11934                           ; switch strategies available:
 11935                           ; Name         Instructions Cycles
 11936                           ; simple_byte           34    18 (average)
 11937                           ;	Chosen strategy is simple_byte
 11938  000890  0A00               	xorlw	0	; case 0
 11939  000892  B4D8               	btfsc	status,2,c
 11940  000894  D713               	goto	i2l675
 11941  000896  0A01               	xorlw	1	; case 1
 11942  000898  B4D8               	btfsc	status,2,c
 11943  00089A  D742               	goto	i2l680
 11944  00089C  0A03               	xorlw	3	; case 2
 11945  00089E  B4D8               	btfsc	status,2,c
 11946  0008A0  D779               	goto	i2l689
 11947  0008A2  0A01               	xorlw	1	; case 3
 11948  0008A4  B4D8               	btfsc	status,2,c
 11949  0008A6  D79D               	goto	i2l697
 11950  0008A8  0A07               	xorlw	7	; case 4
 11951  0008AA  B4D8               	btfsc	status,2,c
 11952  0008AC  D7E6               	goto	i2l711
 11953  0008AE  0A01               	xorlw	1	; case 5
 11954  0008B0  B4D8               	btfsc	status,2,c
 11955  0008B2  D7BC               	goto	i2l704
 11956  0008B4  0A03               	xorlw	3	; case 6
 11957  0008B6  B4D8               	btfsc	status,2,c
 11958  0008B8  D7C6               	goto	i2l707
 11959  0008BA  0A01               	xorlw	1	; case 7
 11960  0008BC  B4D8               	btfsc	status,2,c
 11961  0008BE  D7DD               	goto	i2l711
 11962  0008C0  0A0F               	xorlw	15	; case 8
 11963  0008C2  B4D8               	btfsc	status,2,c
 11964  0008C4  D7C4               	goto	i2l708
 11965  0008C6  0A02               	xorlw	2	; case 10
 11966  0008C8  B4D8               	btfsc	status,2,c
 11967  0008CA  D72E               	goto	i2l681
 11968  0008CC  0A01               	xorlw	1	; case 11
 11969  0008CE  B4D8               	btfsc	status,2,c
 11970  0008D0  D742               	goto	i2l686
 11971  0008D2  D7D7               	goto	i2l713
 11972  0008D4                     __end_of_I2C1_ISR:
 11973                           	opt stack 0
 11974                           tosu	equ	0xFFF
 11975                           tosh	equ	0xFFE
 11976                           tosl	equ	0xFFD
 11977                           pclatu	equ	0xFFB
 11978                           pclath	equ	0xFFA
 11979                           tblptru	equ	0xFF8
 11980                           tblptrh	equ	0xFF7
 11981                           tblptrl	equ	0xFF6
 11982                           tablat	equ	0xFF5
 11983                           prodh	equ	0xFF4
 11984                           prodl	equ	0xFF3
 11985                           intcon	equ	0xFF2
 11986                           intcon2	equ	0xFF1
 11987                           intcon3	equ	0xFF0
 11988                           indf0	equ	0xFEF
 11989                           postinc0	equ	0xFEE
 11990                           fsr0h	equ	0xFEA
 11991                           fsr0l	equ	0xFE9
 11992                           wreg	equ	0xFE8
 11993                           indf1	equ	0xFE7
 11994                           fsr1h	equ	0xFE2
 11995                           fsr1l	equ	0xFE1
 11996                           bsr	equ	0xFE0
 11997                           indf2	equ	0xFDF
 11998                           postinc2	equ	0xFDE
 11999                           postdec2	equ	0xFDD
 12000                           fsr2h	equ	0xFDA
 12001                           fsr2l	equ	0xFD9
 12002                           status	equ	0xFD8
 12003                           
 12004 ;; *************** function _I2C1_Stop *****************
 12005 ;; Defined at:
 12006 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 12007 ;; Parameters:    Size  Location     Type
 12008 ;;  completion_c    1    wreg     enum E6972
 12009 ;; Auto vars:     Size  Location     Type
 12010 ;;  completion_c    1    0[COMRAM] enum E6972
 12011 ;; Return value:  Size  Location     Type
 12012 ;;                  1    wreg      void 
 12013 ;; Registers used:
 12014 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12015 ;; Tracked objects:
 12016 ;;		On entry : 0/0
 12017 ;;		On exit  : 0/0
 12018 ;;		Unchanged: 0/0
 12019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12020 ;;      Params:         0       0       0       0       0       0       0
 12021 ;;      Locals:         0       0       0       0       0       0       0
 12022 ;;      Temps:          0       0       0       0       0       0       0
 12023 ;;      Totals:         0       0       0       0       0       0       0
 12024 ;;Total ram usage:        0 bytes
 12025 ;; Hardware stack levels used:    1
 12026 ;; This function calls:
 12027 ;;		Nothing
 12028 ;; This function is called by:
 12029 ;;		_I2C1_ISR
 12030 ;; This function uses a non-reentrant model
 12031 ;;
 12032                           
 12033                           	psect	text74
 12034  002042                     __ptext74:
 12035                           	opt stack 0
 12036  002042                     _I2C1_Stop:
 12037                           	opt stack 17
 12038                           
 12039                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 12040                           
 12041                           ;incstack = 0
 12042  002042  84C5               	bsf	4037,2,c	;volatile
 12043                           
 12044                           ;i2c1.c: 591: }
 12045                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 12046  002044  0E00               	movlw	0
 12047  002046  6E35               	movwf	_i2c1_state,c
 12048  002048  0012               	return		;funcret
 12049  00204A                     __end_of_I2C1_Stop:
 12050                           	opt stack 0
 12051                           tosu	equ	0xFFF
 12052                           tosh	equ	0xFFE
 12053                           tosl	equ	0xFFD
 12054                           pclatu	equ	0xFFB
 12055                           pclath	equ	0xFFA
 12056                           tblptru	equ	0xFF8
 12057                           tblptrh	equ	0xFF7
 12058                           tblptrl	equ	0xFF6
 12059                           tablat	equ	0xFF5
 12060                           prodh	equ	0xFF4
 12061                           prodl	equ	0xFF3
 12062                           intcon	equ	0xFF2
 12063                           intcon2	equ	0xFF1
 12064                           intcon3	equ	0xFF0
 12065                           indf0	equ	0xFEF
 12066                           postinc0	equ	0xFEE
 12067                           fsr0h	equ	0xFEA
 12068                           fsr0l	equ	0xFE9
 12069                           wreg	equ	0xFE8
 12070                           indf1	equ	0xFE7
 12071                           fsr1h	equ	0xFE2
 12072                           fsr1l	equ	0xFE1
 12073                           bsr	equ	0xFE0
 12074                           indf2	equ	0xFDF
 12075                           postinc2	equ	0xFDE
 12076                           postdec2	equ	0xFDD
 12077                           fsr2h	equ	0xFDA
 12078                           fsr2l	equ	0xFD9
 12079                           status	equ	0xFD8
 12080                           
 12081 ;; *************** function _I2C1_FunctionComplete *****************
 12082 ;; Defined at:
 12083 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 12084 ;; Parameters:    Size  Location     Type
 12085 ;;		None
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;		None
 12088 ;; Return value:  Size  Location     Type
 12089 ;;                  1    wreg      void 
 12090 ;; Registers used:
 12091 ;;		wreg, status,2, status,0
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12097 ;;      Params:         0       0       0       0       0       0       0
 12098 ;;      Locals:         0       0       0       0       0       0       0
 12099 ;;      Temps:          0       0       0       0       0       0       0
 12100 ;;      Totals:         0       0       0       0       0       0       0
 12101 ;;Total ram usage:        0 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; This function calls:
 12104 ;;		Nothing
 12105 ;; This function is called by:
 12106 ;;		_I2C1_ISR
 12107 ;; This function uses a non-reentrant model
 12108 ;;
 12109                           
 12110                           	psect	text75
 12111  001F76                     __ptext75:
 12112                           	opt stack 0
 12113  001F76                     _I2C1_FunctionComplete:
 12114                           	opt stack 17
 12115                           
 12116                           ;i2c1.c: 567: p_i2c1_trb_current++;
 12117                           
 12118                           ;incstack = 0
 12119  001F76  0E06               	movlw	6
 12120  001F78  2630               	addwf	_p_i2c1_trb_current,f,c
 12121  001F7A  0E00               	movlw	0
 12122  001F7C  2231               	addwfc	_p_i2c1_trb_current+1,f,c
 12123                           
 12124                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 12125  001F7E  2E34               	decfsz	_i2c1_trb_count,f,c
 12126  001F80  D003               	goto	i2l716
 12127                           
 12128                           ;i2c1.c: 571: {
 12129                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 12130  001F82  0E04               	movlw	4
 12131  001F84  6E35               	movwf	_i2c1_state,c
 12132                           
 12133                           ;i2c1.c: 573: }
 12134  001F86  0012               	return	
 12135  001F88                     i2l716:
 12136                           
 12137                           ;i2c1.c: 574: else
 12138                           ;i2c1.c: 575: {
 12139                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 12140  001F88  0E01               	movlw	1
 12141  001F8A  6E35               	movwf	_i2c1_state,c
 12142  001F8C  0012               	return	
 12143  001F8E                     __end_of_I2C1_FunctionComplete:
 12144                           	opt stack 0
 12145                           tosu	equ	0xFFF
 12146                           tosh	equ	0xFFE
 12147                           tosl	equ	0xFFD
 12148                           pclatu	equ	0xFFB
 12149                           pclath	equ	0xFFA
 12150                           tblptru	equ	0xFF8
 12151                           tblptrh	equ	0xFF7
 12152                           tblptrl	equ	0xFF6
 12153                           tablat	equ	0xFF5
 12154                           prodh	equ	0xFF4
 12155                           prodl	equ	0xFF3
 12156                           intcon	equ	0xFF2
 12157                           intcon2	equ	0xFF1
 12158                           intcon3	equ	0xFF0
 12159                           indf0	equ	0xFEF
 12160                           postinc0	equ	0xFEE
 12161                           fsr0h	equ	0xFEA
 12162                           fsr0l	equ	0xFE9
 12163                           wreg	equ	0xFE8
 12164                           indf1	equ	0xFE7
 12165                           fsr1h	equ	0xFE2
 12166                           fsr1l	equ	0xFE1
 12167                           bsr	equ	0xFE0
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           fsr2h	equ	0xFDA
 12172                           fsr2l	equ	0xFD9
 12173                           status	equ	0xFD8
 12174                           
 12175 ;; *************** function _I2C1_BusCollisionISR *****************
 12176 ;; Defined at:
 12177 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;		None
 12180 ;; Auto vars:     Size  Location     Type
 12181 ;;		None
 12182 ;; Return value:  Size  Location     Type
 12183 ;;                  1    wreg      void 
 12184 ;; Registers used:
 12185 ;;		None
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12191 ;;      Params:         0       0       0       0       0       0       0
 12192 ;;      Locals:         0       0       0       0       0       0       0
 12193 ;;      Temps:          0       0       0       0       0       0       0
 12194 ;;      Totals:         0       0       0       0       0       0       0
 12195 ;;Total ram usage:        0 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; This function calls:
 12198 ;;		Nothing
 12199 ;; This function is called by:
 12200 ;;		_INTERRUPT_InterruptManagerHigh
 12201 ;; This function uses a non-reentrant model
 12202 ;;
 12203                           
 12204                           	psect	text76
 12205  002066                     __ptext76:
 12206                           	opt stack 0
 12207  002066                     _I2C1_BusCollisionISR:
 12208                           	opt stack 18
 12209                           
 12210                           ;incstack = 0
 12211  002066  0012               	return		;funcret
 12212  002068                     __end_of_I2C1_BusCollisionISR:
 12213                           	opt stack 0
 12214                           tosu	equ	0xFFF
 12215                           tosh	equ	0xFFE
 12216                           tosl	equ	0xFFD
 12217                           pclatu	equ	0xFFB
 12218                           pclath	equ	0xFFA
 12219                           tblptru	equ	0xFF8
 12220                           tblptrh	equ	0xFF7
 12221                           tblptrl	equ	0xFF6
 12222                           tablat	equ	0xFF5
 12223                           prodh	equ	0xFF4
 12224                           prodl	equ	0xFF3
 12225                           intcon	equ	0xFF2
 12226                           intcon2	equ	0xFF1
 12227                           intcon3	equ	0xFF0
 12228                           indf0	equ	0xFEF
 12229                           postinc0	equ	0xFEE
 12230                           fsr0h	equ	0xFEA
 12231                           fsr0l	equ	0xFE9
 12232                           wreg	equ	0xFE8
 12233                           indf1	equ	0xFE7
 12234                           fsr1h	equ	0xFE2
 12235                           fsr1l	equ	0xFE1
 12236                           bsr	equ	0xFE0
 12237                           indf2	equ	0xFDF
 12238                           postinc2	equ	0xFDE
 12239                           postdec2	equ	0xFDD
 12240                           fsr2h	equ	0xFDA
 12241                           fsr2l	equ	0xFD9
 12242                           status	equ	0xFD8
 12243                           tosu	equ	0xFFF
 12244                           tosh	equ	0xFFE
 12245                           tosl	equ	0xFFD
 12246                           pclatu	equ	0xFFB
 12247                           pclath	equ	0xFFA
 12248                           tblptru	equ	0xFF8
 12249                           tblptrh	equ	0xFF7
 12250                           tblptrl	equ	0xFF6
 12251                           tablat	equ	0xFF5
 12252                           prodh	equ	0xFF4
 12253                           prodl	equ	0xFF3
 12254                           intcon	equ	0xFF2
 12255                           intcon2	equ	0xFF1
 12256                           intcon3	equ	0xFF0
 12257                           indf0	equ	0xFEF
 12258                           postinc0	equ	0xFEE
 12259                           fsr0h	equ	0xFEA
 12260                           fsr0l	equ	0xFE9
 12261                           wreg	equ	0xFE8
 12262                           indf1	equ	0xFE7
 12263                           fsr1h	equ	0xFE2
 12264                           fsr1l	equ	0xFE1
 12265                           bsr	equ	0xFE0
 12266                           indf2	equ	0xFDF
 12267                           postinc2	equ	0xFDE
 12268                           postdec2	equ	0xFDD
 12269                           fsr2h	equ	0xFDA
 12270                           fsr2l	equ	0xFD9
 12271                           status	equ	0xFD8
 12272                           
 12273                           	psect	text77
 12274  000000                     __ptext77:
 12275                           	opt stack 0
 12276                           tosu	equ	0xFFF
 12277                           tosh	equ	0xFFE
 12278                           tosl	equ	0xFFD
 12279                           pclatu	equ	0xFFB
 12280                           pclath	equ	0xFFA
 12281                           tblptru	equ	0xFF8
 12282                           tblptrh	equ	0xFF7
 12283                           tblptrl	equ	0xFF6
 12284                           tablat	equ	0xFF5
 12285                           prodh	equ	0xFF4
 12286                           prodl	equ	0xFF3
 12287                           intcon	equ	0xFF2
 12288                           intcon2	equ	0xFF1
 12289                           intcon3	equ	0xFF0
 12290                           indf0	equ	0xFEF
 12291                           postinc0	equ	0xFEE
 12292                           fsr0h	equ	0xFEA
 12293                           fsr0l	equ	0xFE9
 12294                           wreg	equ	0xFE8
 12295                           indf1	equ	0xFE7
 12296                           fsr1h	equ	0xFE2
 12297                           fsr1l	equ	0xFE1
 12298                           bsr	equ	0xFE0
 12299                           indf2	equ	0xFDF
 12300                           postinc2	equ	0xFDE
 12301                           postdec2	equ	0xFDD
 12302                           fsr2h	equ	0xFDA
 12303                           fsr2l	equ	0xFD9
 12304                           status	equ	0xFD8
 12305                           
 12306                           	psect	rparam
 12307  0000                     tosu	equ	0xFFF
 12308                           tosh	equ	0xFFE
 12309                           tosl	equ	0xFFD
 12310                           pclatu	equ	0xFFB
 12311                           pclath	equ	0xFFA
 12312                           tblptru	equ	0xFF8
 12313                           tblptrh	equ	0xFF7
 12314                           tblptrl	equ	0xFF6
 12315                           tablat	equ	0xFF5
 12316                           prodh	equ	0xFF4
 12317                           prodl	equ	0xFF3
 12318                           intcon	equ	0xFF2
 12319                           intcon2	equ	0xFF1
 12320                           intcon3	equ	0xFF0
 12321                           indf0	equ	0xFEF
 12322                           postinc0	equ	0xFEE
 12323                           fsr0h	equ	0xFEA
 12324                           fsr0l	equ	0xFE9
 12325                           wreg	equ	0xFE8
 12326                           indf1	equ	0xFE7
 12327                           fsr1h	equ	0xFE2
 12328                           fsr1l	equ	0xFE1
 12329                           bsr	equ	0xFE0
 12330                           indf2	equ	0xFDF
 12331                           postinc2	equ	0xFDE
 12332                           postdec2	equ	0xFDD
 12333                           fsr2h	equ	0xFDA
 12334                           fsr2l	equ	0xFD9
 12335                           status	equ	0xFD8
 12336                           
 12337                           	psect	temp
 12338  000049                     btemp:
 12339                           	opt stack 0
 12340  000049                     	ds	1
 12341  0000                     int$flags	set	btemp
 12342  0000                     wtemp6	set	btemp+1
 12343                           tosu	equ	0xFFF
 12344                           tosh	equ	0xFFE
 12345                           tosl	equ	0xFFD
 12346                           pclatu	equ	0xFFB
 12347                           pclath	equ	0xFFA
 12348                           tblptru	equ	0xFF8
 12349                           tblptrh	equ	0xFF7
 12350                           tblptrl	equ	0xFF6
 12351                           tablat	equ	0xFF5
 12352                           prodh	equ	0xFF4
 12353                           prodl	equ	0xFF3
 12354                           intcon	equ	0xFF2
 12355                           intcon2	equ	0xFF1
 12356                           intcon3	equ	0xFF0
 12357                           indf0	equ	0xFEF
 12358                           postinc0	equ	0xFEE
 12359                           fsr0h	equ	0xFEA
 12360                           fsr0l	equ	0xFE9
 12361                           wreg	equ	0xFE8
 12362                           indf1	equ	0xFE7
 12363                           fsr1h	equ	0xFE2
 12364                           fsr1l	equ	0xFE1
 12365                           bsr	equ	0xFE0
 12366                           indf2	equ	0xFDF
 12367                           postinc2	equ	0xFDE
 12368                           postdec2	equ	0xFDD
 12369                           fsr2h	equ	0xFDA
 12370                           fsr2l	equ	0xFD9
 12371                           status	equ	0xFD8


Data Sizes:
    Strings     255
    Constant    10
    Data        4
    BSS         140
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      72
    BANK0           160     42     126
    BANK1           256     40      82
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.pTrFlag	PTR enum E6972 size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK1[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_20(CODE[3]), STR_19(CODE[3]), STR_16(CODE[3]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[15]), STR_10(CODE[15]), STR_9(CODE[15]), 
		 -> STR_8(CODE[22]), STR_7(CODE[22]), STR_3(CODE[3]), STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 42
		 -> strLCD(BANK1[42]), strUSART(BANK0[42]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_sprintf(COMRAM[2]), ?_sprintf(BANK1[2]), 

    escreveLinhaLCD@texto	PTR unsigned char  size(2) Largest target is 42
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_15(CODE[21]), STR_14(CODE[21]), 
		 -> STR_6(CODE[20]), STR_5(CODE[22]), STR_4(CODE[22]), strLCD(BANK1[42]), 
		 -> STR_2(CODE[20]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 42
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_15(CODE[21]), STR_14(CODE[21]), 
		 -> STR_6(CODE[20]), STR_5(CODE[22]), STR_4(CODE[22]), strLCD(BANK1[42]), 
		 -> STR_2(CODE[20]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.pTrFlag	PTR enum E6972 size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    F7084.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F7079.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E6972 size(2) Largest target is 0

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    S1492$pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    S1504$pTrFlag	PTR enum E6972 size(2) Largest target is 0

    p_i2c1_current.pTrFlag	PTR enum E6972 size(2) Largest target is 0

    S1504$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), NULL(NULL[0]), 

    S1515$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    S1515$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in COMRAM

    _ADC_ISR->i1_sprintf
    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv
    ___lbtoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _TMR0_ISR->_EPWM1_LoadDutyValue

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK0

    _INTERRUPT_InterruptManagerLow->_ADC_ISR
    _ADC_ISR->i1_sprintf

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    _menu->_defTempAlarme
    _testeTeclado->_sprintf
    _monitorizacao->_sprintf
    _feedbackUSART->_escreveLinhaLCD
    _defTempAlarme->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _escreveLinhaLCD->_putsXLCD
    _putsXLCD->_WriteDataXLCD
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _OpenXLCD->_DelayPORXLCD
    _OpenXLCD->_DelayXLCD
    _OpenXLCD->_WriteCmdXLCD

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   30988
                           _BusyXLCD
                           _OpenXLCD
                  _SYSTEM_Initialize
                       _WriteCmdXLCD
                               _menu
 ---------------------------------------------------------------------------------
 (1) _menu                                                 0     0      0   30380
                      _defTempAlarme
                    _escreveLinhaLCD
                      _feedbackUSART
                      _monitorizacao
                            _sprintf
                       _testeTeclado
 ---------------------------------------------------------------------------------
 (2) _testeTeclado                                         1     1      0    6963
                                             35 BANK1      1     1      0
                    _escreveLinhaLCD
                         _getKBInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _monitorizacao                                        0     0      0    6929
                    _escreveLinhaLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _feedbackUSART                                        0     0      0    2144
                           _BusyXLCD
                      _EUSART1_Write
                       _WriteCmdXLCD
                    _escreveLinhaLCD
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _defTempAlarme                                        5     5      0    7415
                                             35 BANK1      5     5      0
                    _escreveLinhaLCD
                         _getKBInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             27    21      6    4878
                                             12 BANK1     23    17      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     418
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              7 BANK1      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (3) _getKBInput                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _escreveLinhaLCD                                      3     1      2    2051
                                              3 BANK1      3     1      2
                           _BusyXLCD
                       _WriteCmdXLCD
                           _putsXLCD
 ---------------------------------------------------------------------------------
 (4) _putsXLCD                                             2     0      2     217
                                              1 BANK1      2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (5) _WriteDataXLCD                                        1     1      0      62
                                              0 BANK1      1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     484
                     _ADC_Initialize
                   _EPWM1_Initialize
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     121
                                              2 BANK1      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     363
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenXLCD                                             1     1      0      62
                           _BusyXLCD
                      _DelayFor18TCY
                       _DelayPORXLCD
                          _DelayXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (4) _WriteCmdXLCD                                         1     1      0      62
                                              0 BANK1      1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _DelayXLCD                                            1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DelayPORXLCD                                         1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (6) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManagerLow                       21    21      0   18368
                                             21 BANK0     21    21      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                 10    10      0     201
                                             22 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              4     4      0   18167
                                             17 BANK0      4     4      0
            _ADC_GetConversionResult
                           ___awtoft
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lbtoft
                    i1_EUSART1_Write
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (9) i1_sprintf                                           31    21     10    2510
                                             34 COMRAM    10     0     10
                                              0 BANK0     17    17      0
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
 ---------------------------------------------------------------------------------
 (10) i1_isdigit                                           3     3      0      99
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     296
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1___lwmod                                           5     1      4     302
                                             29 COMRAM     5     1      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     311
                                             22 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) i1_EUSART1_Write                                      1     1      0      31
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) ___lbtoft                                             4     1      3    2924
                                             30 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     551
                                             22 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4854
                                              0 BANK0      6     0      6
                            ___ftadd
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    4438
                                             30 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    3701
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     378
                                             22 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    3116
                                             30 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2893
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              4     2      2       0
                                             22 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManagerHigh                     18    18      0     218
                                              4 COMRAM    18    18      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0     218
                   Absolute function *
                _ADC_StartConversion
                _EPWM1_LoadDutyValue
       _TMR0_DefaultInterruptHandler *
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (14) _TMR2_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR2_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR2_LoadPeriodRegister                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EPWM1_LoadDutyValue                                 4     2      2     196
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (14) _ADC_StartConversion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (14) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (14) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
                      _INT0_CallBack
 ---------------------------------------------------------------------------------
 (14) _INT0_CallBack                                       0     0      0       0
                   Absolute function *
       _INT0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _INT0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C1_ISR                                            2     2      0       0
                                              0 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (14) _I2C1_Stop                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_FunctionComplete                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _I2C1_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyXLCD
     _DelayFor18TCY
   _OpenXLCD
     _BusyXLCD
       _DelayFor18TCY
     _DelayFor18TCY
     _DelayPORXLCD
     _DelayXLCD
     _WriteCmdXLCD
       _DelayFor18TCY
   _SYSTEM_Initialize
     _ADC_Initialize
     _EPWM1_Initialize
     _EUSART1_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
   _WriteCmdXLCD
     _DelayFor18TCY
   _menu
     _defTempAlarme
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
       _getKBInput
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _escreveLinhaLCD
       _BusyXLCD
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
       _putsXLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteDataXLCD
           _DelayFor18TCY
     _feedbackUSART
       _BusyXLCD
         _DelayFor18TCY
       _EUSART1_Write
       _WriteCmdXLCD
         _DelayFor18TCY
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
     _monitorizacao
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _testeTeclado
       _escreveLinhaLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
         _putsXLCD
           _BusyXLCD
             _DelayFor18TCY
           _WriteDataXLCD
             _DelayFor18TCY
       _getKBInput
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit

 _INTERRUPT_InterruptManagerLow (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     ___awtoft
       ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftsub
       ___ftadd
         ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
     i1_EUSART1_Write
     i1_sprintf
       i1___lwdiv
       i1___lwmod
         i1___lwdiv (ARG)
       i1___wmul
       i1_isdigit
   _EUSART1_Receive_ISR

 _INTERRUPT_InterruptManagerHigh (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _INT0_ISR
     _INT0_CallBack
       Absolute function(Fake) *
       _INT0_DefaultInterruptHandler *
   _INT1_ISR
     _INT1_CallBack
       Absolute function(Fake) *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR
     _INT2_CallBack
       Absolute function(Fake) *
       _INT2_DefaultInterruptHandler *
   _TMR0_ISR
     Absolute function(Fake) *
     _ADC_StartConversion *
     _EPWM1_LoadDutyValue *
     _TMR0_DefaultInterruptHandler *
     _TMR2_LoadPeriodRegister *
     _TMR2_StartTimer *
     _TMR2_StopTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     28      52       6       32.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2A      7E       4       78.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      48       1       76.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     118       9        0.0%
DATA                 0      0     118      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Dec 25 03:20:42 2017

                                       _i 0041                                         _j 0040  
                                      bsr 000FE0                       ___wmul@multiplicand 012C  
                        i1___wmul@product 001B                           _timer0ReloadVal 0045  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 002A                              ___ftadd@exp2 0029  
                            ___ftadd@sign 0028                                       l811 1C62  
                                     l803 166E                                       l806 167E  
                                     l816 1922                                       l817 18EE  
                                     l932 1BAE                                       l934 1BBE  
                                     l926 1B8E                                       l791 1634  
                                     l944 1D24                                       l960 106A  
                                     l952 1034                                       l961 10D8  
                                     l929 1B9E                                       l794 1644  
                                     l970 10FA                                       l962 10C2  
                                     l971 10E2                                       l963 109E  
                                     l972 1116                                       l964 10D2  
                                     l956 1040                                       l797 1654  
                                     l973 10E8                                       l965 10B0  
                                     l949 102C                                       l990 0D2E  
                                     l974 10EE                                       l958 1050  
                                     l983 0C9C                                       l975 10F4  
                                     l959 105A                                       l992 0D86  
                                     l984 0CFA                                       l985 0CDA  
                                     l986 0CA4                                       l987 0CE8  
                                     l988 0CC2                              __CFG_CPB$OFF 000000  
                                     _PR2 000FBB                              __CFG_CPD$OFF 000000  
              ??_INT0_SetInterruptHandler 012C                           __end_of_ADC_ISR 0EE4  
                   __size_of_WriteCmdXLCD 0044                           _TMR2_Initialize 1FDA  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                             _INT0_CallBack 1EE4  
                            __CFG_LVP$OFF 000000                             _INT1_CallBack 1EC2  
                        __end_of_I2C1_ISR 08D4                                      l1002 1884  
                                    l1011 1134                                      l1003 1852  
                                    l1020 1890                                      l1012 11E8  
                                    l1101 01F2                                      l1110 02CC  
                                    l1102 01D6                                      l1031 18AC  
                                    l1111 02F0                                      l1112 02F8  
                                    l1104 0204                                      l1041 18C8  
                                    l1105 0218                                      l1026 189E  
                                    l1106 0282                                      l1036 18BA  
                                    l1116 033A                                      l1060 151A  
                                    l1117 0396                                      l1046 18D6  
                                    l1118 0340                                      l1062 1574  
                                    l1055 15B0                                      l1063 1548  
                                    l1048 18E8                                      l1056 1500  
                                    l1066 1590                                      l1058 1508  
                                    l1084 00EC                                      l1085 0106  
                                    l1094 0258                                      l1095 0192  
                                    l1087 0130                                      l1096 01AA  
                                    l1089 022A                                      l1530 196A  
                                    l1098 01C4                                      l1531 1962  
                                    l1451 1E76                                      l1099 01B4  
                                    l1540 1A4E                                      l1541 1A46  
                                    l1534 198A                                      l1535 1994  
                                    l1544 1A66                                      l1545 1A70  
                                    l5520 01D6                                      l5610 1D12  
                                    l5514 01B4                                      l5606 1FEE  
                                    l5552 0286                                      l5966 1512  
                                    STR_1 7EFF                                      STR_2 7FC2  
                                    STR_3 7FFB                                      STR_4 7F16  
                                    STR_5 7F2C                                      STR_6 7FC2  
                                    STR_7 7F42                                      STR_8 7F58  
                                    STR_9 7FE5                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u6010 0300                                      u6020 031E  
                                    u6040 039E                                      u6050 03B6  
                                    u7200 165E                                      u5700 1942  
                                    u6180 18D2                                      u7320 10DC  
                                    u7250 1038                                      u5707 1938  
                                    u6540 0D8C                                      u5830 196E  
                                    u6630 11E4                                      u6710 1542  
                                    u7270 1044                                      u6560 0D96  
                                    u5690 1918                                      u5860 1A52  
                                    u6740 15B4                                      u6660 1888  
                                    u7437 121A                                      u7447 1FD0  
                                    u7457 1E86                                      u5697 190E  
                                    u5970 02B2                                      u7467 1E96  
                                    u7477 1F90                                      u7487 1F96  
                                    _TMR2 000FBC                                      _WPUB 000F61  
                           _INT2_CallBack 1EA0                             _EUSART1_Write 1FEA  
                                    _main 1B86                              ___ftpack@arg 0017  
                                    _menu 101C                              ___ftpack@exp 001A  
                         _TMR0_StartTimer 204A                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      indf0 000FEF  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0049                             __CFG_BORV$190 000000  
       __size_of_INT2_SetInterruptHandler 000A                 ?_INT2_SetInterruptHandler 012A  
                  __size_of_WriteDataXLCD 0044                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00DC  
                           __CFG_IESO$OFF 000000                     ??_EPWM1_LoadDutyValue 0003  
                            ___ftmul@cntr 00AE                              ___param_bank 000000  
                            ___ftmul@sign 00AF                  __size_of_escreveLinhaLCD 002E  
                            ___fttol@exp1 0025                              ___fttol@lval 0021  
                            _WriteCmdXLCD 1ABE                   __end_of_TMR0_Initialize 1C3C  
                              _i2c1_state 0035                          __end_of_INT0_ISR 1DC0  
                        __end_of_INT1_ISR 1D94                          __end_of_INT2_ISR 1D68  
          ??_TMR0_DefaultInterruptHandler 0001            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 2006                                     ?_main 0001  
                                   ?_menu 0001                         __end_of_I2C1_Stop 204A  
                         __end_of___ftadd 0C42                                     STR_10 7FD6  
                                   STR_11 7FD6                                     STR_20 7FF8  
                                   STR_12 7FF4                                     STR_13 7FF4  
                                   STR_14 7F98                                     STR_15 7F6E  
                                   STR_16 7FF8                                     STR_17 7FAD  
                                   STR_18 7F83                                     STR_19 7FF8  
                         __end_of___ftmul 1320                                     _T0CON 000FD5  
                         __end_of___ftsub 1B86                           __end_of___fttol 1414  
                                   _T2CON 000FBA                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwdiv 199E                                     i1l133 007A  
                                   i1l135 0084                                     i2l120 1480  
                         __end_of___lwmod 1A7A                                     i2l122 148C  
                                   i1l611 0A2C                                     i2l204 1D70  
                                   i2l124 1498                                     i2l116 1468  
                                   i2l205 1D78                                     i2l221 1D44  
                                   i2l206 1D80                                     i2l222 1D4C  
                                   i2l126 14A2                                     i2l118 1474  
                                   i1l518 0ECA                                     i2l207 1D88  
                                   i2l223 1D54                                     i1l519 0E9E  
                                   i2l240 1DAC                                     i2l224 1D5C  
                                   i1l608 09A2                                     i2l241 1DB4  
                                   i2l238 1D9C                                     i2l239 1DA4  
                                   i2l360 0FD4                                     i2l353 0F36  
                                   i2l354 0F50                                     i2l355 0F70  
                                   i2l700 0818                                     i2l364 0FEA  
                                   i2l356 0F96                                     i2l701 0810  
                                   i2l357 0FC2                                     i1l597 08DC  
                                   i2l710 0876                                     i2l358 1010  
                                   i1l598 09A4                                     i2l711 087A  
                                   i2l359 1000                                     i1l599 092A  
                                   i2l704 082C                                     i2l713 0882  
                                   i2l705 083E                                     i2l707 0846  
                                   i2l716 1F88                                     i2l708 084E  
                                   i2l709 0870                                     i2l680 0720  
                                   i2l681 0728                                     i2l674 088E  
                                   i2l682 0738                                     i2l691 07CE  
                                   i2l675 06BC                                     i2l684 0750  
                                   i2l677 0708                                     i2l686 0756  
                                   i2l678 0718                                     i2l695 07DC  
                                   i2l687 0766                                     i2l697 07E2  
                                   i2l689 0794                                     i2l698 07F4  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _PORTD 000F83                                     _TRISA 000F92  
                                   _TRISB 000F93                            ?_INT0_CallBack 0001  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                                i1isdigit@c 0019  
        __size_of_ADC_GetConversionResult 0014         __size_of_TMR0_SetInterruptHandler 000A  
            __end_of_I2C1_BusCollisionISR 2068                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 012A                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ??_I2C1_Initialize 012A  
                        __end_of_TMR0_ISR 101C                     __end_of_feedbackUSART 15C2  
                           __CFG_WRTB$OFF 000000                        i1___lwmod@dividend 001E  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          ?_INT1_CallBack 0001                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0022                           __end_of_dpowers 7EFF  
          ??_INT1_DefaultInterruptHandler 0001                           __end_of_isdigit 1E7E  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001B  
                          ?_INT2_CallBack 0001                  _INT1_SetInterruptHandler 2026  
                          ?_EUSART1_Write 0001                                     pclath 000FFA  
                                   tablat 000FF5                          __end_ofi1___wmul 1E38  
                                   status 000FD8                       i1___wmul@multiplier 0017  
                                   wtemp6 004A                           __end_of_sprintf 03C4  
                          __CFG_HFOFST$ON 000000                           _TMR2_StartTimer 2052  
        __size_of_TMR2_LoadPeriodRegister 0008                            __CFG_FOSC$ECMP 000000  
                      __size_ofi1___lwdiv 0052            ?_INTERRUPT_InterruptManagerLow 0001  
                      __size_ofi1___lwmod 0042                            __CFG_PBADEN$ON 000000  
                         __initialization 17CE                __end_of_EUSART1_Initialize 1F5E  
                            __end_of_main 1BC4                              __end_of_menu 112E  
                        __end_of_BusyXLCD 1C76                        __size_ofi1_isdigit 001E  
                      __size_of_DelayXLCD 0012                     __size_of_DelayPORXLCD 0022  
                 __end_of_TMR2_Initialize 1FEA                                 ??_ADC_ISR 002D  
                              i1sprintf@c 00BA                                i1sprintf@f 0025  
                        __end_of_OpenXLCD 1690                               _i2c1_object 0060  
                                  ??_main 0152                             ___fttol@sign1 0020  
                                  ??_menu 0152                        __size_ofi1_sprintf 02E0  
                           __activetblptr 000002                             _WriteDataXLCD 1A7A  
                 __end_of_TMR0_StartTimer 204E                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _CCPR1H 000FBF                                    _CCPR1L 000FBE  
                        __end_of___awtoft 1CAE                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 173E                          __end_of___lbtoft 1E5C  
                                  i1l1101 04D4                                    i1l1110 05AE  
                                  i1l1102 04B8                                    i1l1111 05D2  
                                  i1l1112 05DA                                    i1l1104 04E6  
                                  i1l1105 04FA                                    i1l1106 0564  
                                  i1l1116 061C                                    i1l1117 0676  
                                  i1l1118 0622                                    i1l1340 16D6  
                                  i1l1084 03D0                                    i1l1317 1C8A  
                                  i1l1421 12D6                                    i1l1085 03EA  
                                  i1l1342 1714                                    i1l1422 12E6  
                                  i1l1094 053A                                    i1l1343 170A  
                                  i1l1415 1254                                    i1l1095 0474  
                                  i1l1087 0414                                    i1l1336 16B8  
                                  i1l1408 176E                                    i1l1432 1B5C  
                                  i1l1096 048C                                    i1l1337 16AE  
                                  i1l1409 179E                                    i1l1417 127C  
                                  i1l1089 050C                                    i1l1418 12AE  
                                  i1l1530 19BC                                    i1l1098 04A6  
                                  i1l1339 16EC                                    i1l1419 12BE  
                                  i1l1371 0B12                                    i1l1531 19B4  
                                  i1l1451 1F3C                                    i1l1099 0496  
                                  i1l1444 13E6                                    i1l1436 134C  
                                  i1l1540 1B18                                    i1l1381 0B6E  
                                  i1l1445 13DA                                    i1l1541 1B10  
                                  i1l1390 0BAC                                    i1l1382 0B64  
                                  i1l1438 13C2                                    i1l1534 19DC  
                                  i1l1391 0BA2                                    i1l1367 0AE8  
                                  i1l1447 1402                                    i1l1439 13B2  
                                  i1l1535 19E6                                    i1l1376 0B78  
                                  i1l1544 1B30                                    i1l1393 0BD0  
                                  i1l1545 1B3A                                    i1l1394 0BEC  
                                  i1l1395 0C1C                                    i1l6204 0568  
                                  i1l6134 2008                                    i1l5282 17CA  
                                  i1l6172 04B8                                    i1l6166 0496  
                                  i1l4930 0A2C                            __CFG_WDTEN$OFF 000000  
                                  i2l4734 0708                                    _RCREG1 000FAE  
                                  u623_21 0AA6                                    _RCSTA1 000FAB  
                                  u624_21 0ABA                                    _OSCCON 000FD3  
                                  u676_21 123A                                    _SPBRG1 000FAF  
                                  u678_21 1264                                    u687_21 1330  
                                  _TXREG1 000FAD                             i1sprintf@flag 00B1  
                                  _TXSTA1 000FAC                             i1sprintf@prec 00B0  
                            _DelayPORXLCD 1E7E                           i1_EUSART1_Write 2006  
                          __CFG_XINST$OFF 000000                                    _WrEnFl 0038  
                            _CCPTMRS0bits 000F49                            _p_i2c1_current 0069  
                                  ___ftge 173E                                    _binADC 006B  
                                  _clk1Hz 003D                                    _clk2Hz 003E  
                                  _clk4Hz 003F                                    ___wmul 1DEA  
                               ??___ftadd 0025                            __CFG_STVREN$ON 000000  
                                  _alarme 0039                                 ??___ftmul 0029  
                               ??___ftsub 002B                                 ??___fttol 001B  
                               ??___lwdiv 012E                                 ??___lwmod 0135  
                   EUSART1_Receive_ISR@i1 001C                     EUSART1_Receive_ISR@i2 001E  
                        ?_TMR0_Initialize 0001                                 ?_I2C1_ISR 0001  
                                  clear_0 1804                                    clear_1 1810  
                                  clear_2 181C                                    _strLCD 0100  
                                  _update 00DD                           ??_INT0_CallBack 0001  
                          ?_WriteDataXLCD 0001                     ___ftmul@f3_as_product 00AB  
                       ??_escreveLinhaLCD 012F      __end_of_INT2_DefaultInterruptHandler 2062  
   __size_of_INT2_DefaultInterruptHandler 0002                         __end_ofi1___lwdiv 19F0  
            _INT2_DefaultInterruptHandler 2060                              __pdataCOMRAM 0047  
                       __end_ofi1___lwmod 1B44                                 ??_isdigit 012A  
                         ??_INT1_CallBack 0001                              __mediumconst 7EF4  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                          __end_of_putsXLCD 194A  
                         ??_INT2_CallBack 0001                           ??_EUSART1_Write 012A  
                 __end_of_TMR2_StartTimer 2056  TMR0_SetInterruptHandler@InterruptHandler 012A  
INT0_SetInterruptHandler@InterruptHandler 012A  INT2_SetInterruptHandler@InterruptHandler 012A  
INT1_SetInterruptHandler@InterruptHandler 012A                                 ??_sprintf 013C  
                   __end_of_monitorizacao 0D9C                         __end_ofi1_isdigit 1F44  
           __size_of_INTERRUPT_Initialize 0012                         __end_of_DelayXLCD 1FDA  
        ??_INTERRUPT_InterruptManagerHigh 0005           ?_INTERRUPT_InterruptManagerHigh 0001  
                       _SYSTEM_Initialize 1DC0                                __accesstop 0060  
                 __end_of__initialization 1822                                 ?_INT0_ISR 0001  
                               ?_INT1_ISR 0001                                 ?_INT2_ISR 0001  
                              ___ftadd@f1 001F                                ___ftadd@f2 0022  
                              ___ftge@ff1 0017                                ___ftge@ff2 001A  
                      ?_SYSTEM_Initialize 0001                         __end_ofi1_sprintf 06A4  
                           ___rparam_used 000001                    __size_of_defTempAlarme 00FC  
                          _i2c1_trb_count 0034                                ___awtoft@c 001F  
                              ___lbtoft@c 0022                                ___ftmul@f1 0023  
                              ___ftmul@f2 0026                     _I2C1_FunctionComplete 1F76  
                    _I2C1_BusCollisionISR 2066                         ?_EPWM1_Initialize 0001  
                              ___ftsub@f1 00AA                                ___ftsub@f2 00AD  
                              ___fttol@f1 0017              __size_of_ADC_StartConversion 0004  
                          __pcstackCOMRAM 0001                              __pidataBANK0 205C  
                     ??_SYSTEM_Initialize 012E                                 ?_TMR0_ISR 0001  
                      ??_EPWM1_Initialize 012A                                ??_I2C1_ISR 0001  
                        ?_TMR2_Initialize 0001                                 ?i1___wmul 0017  
                 _ADC_GetConversionResult 1FA2               __size_of_EXT_INT_Initialize 003E  
                             i1sprintf@ap 00B2                               i1sprintf@cp 00AE  
                             i1sprintf@sp 0023          __end_of_INT2_SetInterruptHandler 2026  
             __end_of_EUSART1_Receive_ISR 0A96             ?_INT2_DefaultInterruptHandler 0001  
                        ?_TMR0_StartTimer 0001                 __end_of_SYSTEM_Initialize 1DEA  
                  __size_of_DelayFor18TCY 0014                              sprintf@width 014A  
                              __pbssBANK0 0060                                __pbssBANK1 0100  
                               ?_BusyXLCD 0001                   __end_ofi1_EUSART1_Write 2012  
                              _getKBInput 188E                           __CFG_PLLCFG$OFF 000000  
                 _TMR2_LoadPeriodRegister 203A                           WriteCmdXLCD@cmd 012A  
                   _INT0_InterruptHandler 00D6                                ??_INT0_ISR 0001  
                              ??_INT1_ISR 0001                                ??_INT2_ISR 0001  
                              __pnvCOMRAM 0045                                 ?_OpenXLCD 0001  
                   ?_I2C1_BusCollisionISR 0001                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0017                         WriteDataXLCD@data 012A  
        __end_of_TMR0_SetInterruptHandler 201C                                   ?___wmul 012A  
                              ??_TMR0_ISR 0005                        __CFG_CCP3MX$PORTB5 000000  
                         _I2C1_Initialize 1CAE                                   _CCP1CON 000FBD  
                         ??_WriteDataXLCD 012A                                   _ECCP1AS 000FB6  
                                 _ADC_ISR 0D9C                                 ?___awtoft 001F  
                               ?___ftpack 0017                                 ?___lbtoft 001F  
                 __size_of_ADC_Initialize 0018                                ??i1___wmul 001B  
              ??_INT1_SetInterruptHandler 012C                             _defTempAlarme 112E  
                                 _OSCCON2 000FD2                                 _I2C1_Stop 2042  
                                 _OSCTUNE 000F9B                                   _PWM1CON 000FB7  
                                 _SPBRGH1 000FB0                                   _SSP1ADD 000FC8  
                                 _SSP1BUF 000FC9                   __size_of_TMR2_StopTimer 0004  
                        ?_TMR2_StartTimer 0001                                ??_BusyXLCD 012A  
             __end_of_EPWM1_LoadDutyValue 1D0E                            i1sprintf@width 00B8  
       __size_of_INT0_SetInterruptHandler 000A                 ?_INT0_SetInterruptHandler 012A  
                              ??_OpenXLCD 012B                           __CFG_PWRTEN$OFF 000000  
                  ?_I2C1_FunctionComplete 0001                                   __Hparam 0000  
                                 __Lparam 0000                        _p_i2c1_trb_current 0030  
                         __size_of___ftge 0090                             _DelayFor18TCY 1F8E  
                                 ___ftadd 0A96                           __size_of___wmul 0028  
                                 ___ftmul 122A                                   ___ftsub 1B44  
                                 ___fttol 1320                                 ?_putsXLCD 012B  
                                 ___lwdiv 194A                                   ___lwmod 1A36  
               ??_ADC_GetConversionResult 0019                                   __pcinit 17CE  
                              ??___awtoft 0022                                ??___ftpack 001C  
                              ??___lbtoft 0022                                   __ramtop 0600  
                                 __ptext0 1B86                                   __ptext1 101C  
                                 __ptext2 1830                                   __ptext3 0C42  
                                 __ptext4 14EE                                   __ptext5 1FEA  
                                 __ptext6 112E                                   __ptext7 00E0  
                                 __ptext8 1E5C                                   __ptext9 1DEA  
                               _T0CONbits 000FD5                            ?_defTempAlarme 0001  
                                 _dpowers 7EF5                         i1___lwdiv@divisor 0019  
                   _OSCILLATOR_Initialize 1FF8                                 _T2CONbits 000FBA  
                                 _isdigit 1E5C                         i1___lwdiv@counter 001B  
                      _EUSART1_Initialize 1F44                  ??_PIN_MANAGER_Initialize 012A  
                              ?_I2C1_Stop 0001                                   _tmpTemp 002D  
               ??_TMR2_LoadPeriodRegister 0001                __size_of_SYSTEM_Initialize 002A  
                                 _sprintf 00E0                      I2C1_ISR@pi2c_buf_ptr 0067  
                          __pintcode_body 1414                      end_of_initialization 1822  
                _INT2_SetInterruptHandler 201C                       ?_EUSART1_Initialize 0001  
          ??_INT2_DefaultInterruptHandler 0001                               ?_getKBInput 0001  
                        ?i1_EUSART1_Write 0001                             __Lmediumconst 7EF4  
                                 int_func 1414                                _tempAlarme 0048  
                  ??_I2C1_BusCollisionISR 0001                      escreveLinhaLCD@linha 012F  
                 __end_of_I2C1_Initialize 1CDE                      escreveLinhaLCD@texto 012D  
                         _escreveLinhaLCD 1D0E                            ?_DelayFor18TCY 0001  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE                    __size_of_feedbackUSART 00D4  
                           ?_testeTeclado 0001                                ??_putsXLCD 012D  
                    ??_EUSART1_Initialize 012A                     i1___wmul@multiplicand 0019  
                _TMR0_SetInterruptHandler 2012                                 _PORTAbits 000F80  
                   _INT1_InterruptHandler 00DA                                 _PORTBbits 000F81  
            EUSART1_Receive_ISR@tmpAlarme 0020                         __size_of_I2C1_ISR 0230  
                               _TRISDbits 000F95                       _ADC_StartConversion 2056  
                               i1___lwdiv 199E                                 i1___lwmod 1B02  
                     EUSART1_Write@txData 012A         I2C1_ISR@i2c_10bit_address_restart 0032  
                               i1_isdigit 1F26                                 _DelayXLCD 1FC8  
                       __size_of_INT0_ISR 002C                         __size_of_INT1_ISR 002C  
                       __size_of_INT2_ISR 002C                               ___ftmul@exp 00AA  
                    ?_ADC_StartConversion 0001                                 i1_sprintf 03C4  
                          ??_testeTeclado 014D              __end_of_INTERRUPT_Initialize 1FC8  
    __end_of_INT0_DefaultInterruptHandler 2066     __size_of_INT0_DefaultInterruptHandler 0002  
            _INT0_DefaultInterruptHandler 2064                            __end_of___ftge 17CE  
                          __end_of___wmul 1E12                   I2C1_MasterWrite@trBlock 009E  
                           __pidataCOMRAM 205A                           ??_defTempAlarme 014D  
                       __size_of_TMR0_ISR 0138                  I2C1_Stop@completion_code 0001  
                          _ADC_Initialize 1F5E                         i1___lwmod@divisor 0020  
                  ?_OSCILLATOR_Initialize 0001                       __size_of_getKBInput 005E  
                       i1___lwmod@counter 0022          TMR2_LoadPeriodRegister@periodVal 0001  
                   __end_of_INT0_CallBack 1F06                       start_initialization 17CE  
                       __size_ofi1___wmul 0026                 __size_of_EPWM1_Initialize 0020  
                             ??_I2C1_Stop 0001                  __size_of_TMR0_Initialize 003A  
         __size_of_PIN_MANAGER_Initialize 0046                     __end_of_INT1_CallBack 1EE4  
                          _TMR2_StopTimer 204E                             _feedbackUSART 14EE  
                              ?i1___lwdiv 0017                                ?i1___lwmod 001E  
                   __end_of_INT2_CallBack 1EC2              EPWM1_LoadDutyValue@dutyValue 0001  
                   __end_of_EUSART1_Write 1FF8                   __end_of_escreveLinhaLCD 1D3C  
                       __size_of_BusyXLCD 003A                                ?i1_isdigit 0001  
                              ?_DelayXLCD 0001                              i1sprintf@len 00B4  
                            i1sprintf@val 00B6                          ?_I2C1_Initialize 0001  
                         ??_DelayFor18TCY 012A                     ??_ADC_StartConversion 0001  
                       __size_of_OpenXLCD 00CE                                ?i1_sprintf 0023  
                                ??___ftge 001D                                  ??___wmul 012E  
                           ?_WriteCmdXLCD 0001                    __end_of_ADC_Initialize 1F76  
                             __pdataBANK0 00DC                                  ?_ADC_ISR 0001  
              __end_of_EXT_INT_Initialize 1C02                    __size_of_monitorizacao 015A  
           ?_INT0_DefaultInterruptHandler 0001                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lbtoft 0024  
                  __end_of_TMR2_StopTimer 2052                               __pbssCOMRAM 002D  
        __end_of_INT0_SetInterruptHandler 203A                             __pcstackBANK0 00AA  
                           __pcstackBANK1 012A                  __size_of_TMR2_Initialize 0010  
                          ?_feedbackUSART 0001                             _i2c1_tr_queue 00A4  
                            _isdigit$2575 012B                   ??_I2C1_FunctionComplete 0001  
            __size_of_EUSART1_Receive_ISR 01C2                               ADC_ISR@var1 00BC  
                             ADC_ISR@var2 00BB                               sprintf@flag 0143  
                   _INT2_InterruptHandler 00D8                               sprintf@prec 0142  
                   _TMR0_InterruptHandler 00D4                                 __pnvBANK0 00D4  
                __size_of_TMR0_StartTimer 0004                            putsXLCD@buffer 012B  
                        ___lwdiv@dividend 012A                    _PIN_MANAGER_Initialize 19F0  
                               __pintcode 0008                             __pmediumconst 7EF4  
                          ??_WriteCmdXLCD 012A                                  ?___ftadd 001F  
                                ?___ftmul 0023                                  ?___ftsub 00AA  
                                ?___fttol 0017                                  ?___lwdiv 012A  
                       testeTeclado@input 014D                                  ?___lwmod 0131  
                         ?_ADC_Initialize 0001                              _eusart_Tx_En 0037  
                             __pintcodelo 0018                              _eusart_Tx_On 0036  
                                _I2C1_ISR 06A4                          __CFG_PRICLKEN$ON 000000  
                       __size_of_putsXLCD 005E                     __end_of_WriteDataXLCD 1ABE  
              ??_INT2_SetInterruptHandler 012C                                  _BAUDCON1 000FB8  
                                ?_isdigit 0001                           ?_TMR2_StopTimer 0001  
                        ___lwdiv@quotient 012F                               ??i1___lwdiv 001B  
                             ??i1___lwmod 0022                                  ?_sprintf 0136  
                    __end_of_testeTeclado 188E                      _INTERRUPT_Initialize 1FB6  
                          i1_isdigit$2575 0018                             _monitorizacao 0C42  
                            ??_getKBInput 012A                    I2C1_MasterRead@trBlock 0098  
                       ??_TMR0_Initialize 012C                          ?_escreveLinhaLCD 012D  
                                _INT0_ISR 1D94                                  _INT1_ISR 1D68  
                                _INT2_ISR 1D3C                            ___wmul@product 012E  
                                _LATBbits 000F8A                                  _LATDbits 000F8C  
       __size_of_INT1_SetInterruptHandler 000A                               ??i1_isdigit 0017  
               ?_INT1_SetInterruptHandler 012A                               ??_DelayXLCD 012A  
                                _IPR1bits 000F9F                                  _IPR2bits 000FA2  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                           ?_DelayPORXLCD 0001                  __size_of_TMR2_StartTimer 0004  
                                i1u503_20 0922                                  i1u522_20 0A62  
                               _tempAtual 0047                                  i1u516_20 09FE  
                                i1u630_20 0B04                                  i1u710_20 0600  
                                i1u518_20 0A12                                  i1u640_20 0BB4  
                                i1u712_20 067E                                  i1u633_20 0B42  
                                i1u713_20 0696                                  i1u705_20 0594  
                                i1u650_20 1B1C                                  i1u627_20 0ADA  
                                i1u637_20 0B80                                  i1u709_20 05E2  
                                i1u717_20 0EE0                ??_TMR0_SetInterruptHandler 012C  
                                i1u575_20 16A0                                  i1u647_20 19C0  
                                _PIR1bits 000F9E                           OpenXLCD@lcdtype 0001  
                                i1u579_20 171E                                  _PIR2bits 000FA1  
                                i2u371_48 1ED0                                  i2u460_40 0F4E  
                                i2u452_40 0F1A                                  i2u451_48 0EFC  
                                i2u451_49 0F10                                  i1u693_20 13EC  
                                i2u453_40 0F1C                                  i2u373_48 1EAE  
                                i2u470_40 0F92                                  i2u471_40 0F94  
                                i2u455_40 0F32                                  i2u375_48 1EF2  
                                i2u464_40 0F6C                                  i2u456_40 0F34  
                                i1u689_20 136A                                  i2u465_40 0F6E  
                                i1u689_25 1362                                  i2u459_40 0F4C  
                                i2u477_40 0FBE              __size_of_EPWM1_LoadDutyValue 0030  
                                i2u478_40 0FC0                               ??i1_sprintf 00AA  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                                _SSP1CON1 000FC6                                  _SSP1CON3 000FCB  
                                _TMR0_ISR 0EE4                                  _PSTR1CON 000FB9  
                                _SSP1STAT 000FC7                          __size_of_ADC_ISR 0148  
                              _ADCON0bits 000FC2                         ___wmul@multiplier 012A  
                                i1___wmul 1E12                        __end_of_getKBInput 18EC  
                         ??_feedbackUSART 0130                          _EPWM1_Initialize 1F06  
          ??_INT0_DefaultInterruptHandler 0001                               _INTCON2bits 000FF1  
                             _INTCON3bits 000FF0                     ?_INTERRUPT_Initialize 0001  
                          ?_monitorizacao 0001                  _INT0_SetInterruptHandler 2030  
                                _BusyXLCD 1C3C                         ??_TMR2_Initialize 012A  
                          ??_DelayPORXLCD 012A                                  _TeclaTMP 0042  
                                _OpenXLCD 15C2                                  __Hrparam 0000  
           __size_of_I2C1_BusCollisionISR 0002                                  __Lrparam 0000  
                ?_ADC_GetConversionResult 0017                  __size_ofi1_EUSART1_Write 000C  
                      __CFG_BOREN$SBORDIS 000000                    I2C1_ISR@i2c_bytes_left 0033  
                       __CFG_P2BMX$PORTD2 000000                   ??_OSCILLATOR_Initialize 012A  
                       ??_TMR0_StartTimer 012A                          __size_of___ftadd 01AC  
                        __size_of___ftmul 00F6                          __size_of___ftsub 0042  
                        __size_of___fttol 00F4               __size_of_EUSART1_Initialize 001A  
                        __size_of___lwdiv 0054                          __size_of___lwmod 0044  
                                ___awtoft 1C76                                  ___ftpack 1690  
                                ___lbtoft 1E38                                  _clk1_2Hz 003C  
                                _clk1_4Hz 003B                                  _clk1_8Hz 003A  
                              sprintf@len 0146                                sprintf@val 0148  
                ?_TMR2_LoadPeriodRegister 0001           ??_INTERRUPT_InterruptManagerLow 00BF  
                        __size_of_isdigit 0022                           ___lwdiv@divisor 012C  
                     I2C1_ISR@i2c_address 0043                           ___lwdiv@counter 012E  
                                __ptext10 1A36                                  __ptext11 194A  
                                __ptext20 2012                                  __ptext12 188E  
                                __ptext21 19F0                                  __ptext13 1D0E  
                                __ptext30 1F06                                  __ptext22 1FF8  
                                __ptext14 18EC                                  __ptext31 1F5E  
                                __ptext23 1FB6                                  __ptext15 1A7A  
                                __ptext40 0D9C                                  __ptext32 15C2  
                                __ptext24 1CAE                                  __ptext16 1DC0  
                                __ptext41 03C4                                  __ptext33 1ABE  
                                __ptext25 1BC4                                  __ptext17 1FDA  
                                __ptext50 0A96                                  __ptext42 1F26  
                                __ptext34 1FC8                                  __ptext26 201C  
                                __ptext18 1C02                                  __ptext51 122A  
                                __ptext43 1E12                                  __ptext35 1E7E  
                                __ptext27 2026                                  __ptext19 204A  
                                __ptext60 203A                                  __ptext52 173E  
                                __ptext44 1B02                                  __ptext36 1C3C  
                                __ptext28 2030                                  __ptext61 205E  
                                __ptext53 1C76                                  __ptext45 199E  
                                __ptext37 1F8E                                  __ptext29 1F44  
                                __ptext70 1D94                                  __ptext62 1CDE  
                                __ptext54 1690                                  __ptext46 2006  
                                __ptext71 1EE4                                  __ptext63 2056  
                                __ptext55 1FA2                                  __ptext47 1E38  
                                __ptext39 08D4                                  __ptext72 2064  
                                __ptext64 1D3C                                  __ptext48 1320  
                                __ptext73 06A4                                  __ptext65 1EA0  
                                __ptext57 0EE4                                  __ptext49 1B44  
                                __ptext74 2042                                  __ptext66 2060  
                                __ptext58 204E                                  __ptext75 1F76  
                                __ptext67 1D68                                  __ptext59 2052  
                                __ptext76 2066                                  __ptext68 1EC2  
                                __ptext77 0000                                  __ptext69 2062  
                            _SSP1CON1bits 000FC6                              _SSP1CON2bits 000FC5  
                    __end_of_WriteCmdXLCD 1B02                          __size_of_sprintf 02E4  
                      i1___lwdiv@dividend 0017                                  _lastMenu 006D  
                           __size_of_main 003E                   defTempAlarme@tmp_Alarme 014F  
                           __size_of_menu 0112                                  _menu_tmp 00DC  
    __end_of_TMR0_DefaultInterruptHandler 2060     __size_of_TMR0_DefaultInterruptHandler 0002  
            _TMR0_DefaultInterruptHandler 205E                                  _strUSART 006E  
                                int$flags 0049                                  _putsXLCD 18EC  
                       ??_TMR2_StartTimer 0001                       _EUSART1_Receive_ISR 08D4  
    __end_of_INT1_DefaultInterruptHandler 2064     __size_of_INT1_DefaultInterruptHandler 0002  
            _INT1_DefaultInterruptHandler 2062                        i1___lwdiv@quotient 001C  
                   __end_of_defTempAlarme 122A                     __size_of_testeTeclado 005E  
                              _INTCONbits 000FF2                                  isdigit@c 012C  
                         ??_monitorizacao 014D                    ??_INTERRUPT_Initialize 012A  
                      _EXT_INT_Initialize 1BC4                                  intlevel1 0000  
                                intlevel2 0000                                 sprintf@ap 0144  
                               sprintf@cp 0140                                 sprintf@sp 0136  
                    ?_EUSART1_Receive_ISR 0001               __end_of_ADC_StartConversion 205A  
                        ___lwmod@dividend 0131                   ?_PIN_MANAGER_Initialize 0001  
         __end_of_ADC_GetConversionResult 1FB6            __size_of_I2C1_FunctionComplete 0018  
                     ?_EXT_INT_Initialize 0001                                _RCSTA1bits 000FAB  
           __end_of_I2C1_FunctionComplete 1F8E                          ??_ADC_Initialize 012A  
                  __size_of_INT0_CallBack 0022             ?_TMR0_DefaultInterruptHandler 0001  
                   __end_of_DelayFor18TCY 1FA2                    __size_of_INT1_CallBack 0022  
                            _testeTeclado 1830                          ??_TMR2_StopTimer 0001  
         __end_of_TMR2_LoadPeriodRegister 2042                    __size_of_INT2_CallBack 0022  
                __size_of_I2C1_Initialize 0030                    __size_of_EUSART1_Write 000E  
                       ??i1_EUSART1_Write 0017    __end_of_INTERRUPT_InterruptManagerHigh 14EE  
 __size_of_INTERRUPT_InterruptManagerHigh 14E6            _INTERRUPT_InterruptManagerHigh 0008  
                         defTempAlarme@c1 0150                           defTempAlarme@c2 0151  
                    ??_EXT_INT_Initialize 012C                                  sprintf@c 014C  
                                sprintf@f 0138             ?_INT1_DefaultInterruptHandler 0001  
                    __end_of_DelayPORXLCD 1EA0                           ___lwmod@divisor 0133  
                         _TMR0_Initialize 1C02                           ___lwmod@counter 0135  
        __end_of_INT1_SetInterruptHandler 2030                         __CFG_T3CMX$PORTC0 000000  
                     _EPWM1_LoadDutyValue 1CDE                     i1EUSART1_Write@txData 0017  
   __end_of_INTERRUPT_InterruptManagerLow 00DC    __size_of_INTERRUPT_InterruptManagerLow 00C4  
           _INTERRUPT_InterruptManagerLow 0018                     ??_EUSART1_Receive_ISR 0017  
          __end_of_PIN_MANAGER_Initialize 1A36                        __size_of_I2C1_Stop 0008  
                __end_of_EPWM1_Initialize 1F26                      ?_EPWM1_LoadDutyValue 0001  
